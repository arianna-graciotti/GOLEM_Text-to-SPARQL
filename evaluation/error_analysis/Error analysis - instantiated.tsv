nanowr	Unnamed: 0	Language	Question	SPARQL	Response	Original_Index	Prompt	Generated_SPARQL	Generated_response	TP	FP	FN	Error type	Error subtype	Example of interest
1	1	en	Show me stories from the Fashion Model RPF fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Fashion Model RPF"" . ?story golem:title ?title . }"	"[{'title': Value(literal:'she burn, she burn, she burn')}, {'title': Value(literal:'Lou Reed had surely met her')}, {'title': Value(literal:'I try to focus on your eyes')}, {'title': Value(literal:'Alright (Still)')}, {'title': Value(literal:'en vogue (smile for the camera, sugar)')}, {'title': Value(literal:'Glamourous')}, {'title': Value(literal:'Fine Time')}, {'title': Value(literal:'Fine Time: Bollywood Redux')}, {'title': Value(literal:'She Wants To Be In The Business')}, {'title': Value(literal:'Fine Time: Hollywood Remix')}, {'title': Value(literal:'glitter in your tears (and salt in mine)')}, {'title': Value(literal:'13 bodies')}, {'title': Value(literal:'Lucky')}, {'title': Value(literal:'Worth The Wait')}, {'title': Value(literal:""Why Neymar's mum dumped her boyfriend"")}, {'title': Value(literal:'that summer feeling')}, {'title': Value(literal:'o how the sun shines down')}, {'title': Value(literal:'Right Through You')}, {'title': Value(literal:'Coachella')}, {'title': Value(literal:'[__/__bg] _____')}, {'title': Value(literal:'Late Night Double Feature')}, {'title': Value(literal:'Eliott / Maxence')}, {'title': Value(literal:""if I could put you in a frame I'd draw you smiling"")}, {'title': Value(literal:""'Cause We Break Down A Little"")}, {'title': Value(literal:""New Year's Day"")}, {'title': Value(literal:'Phoenix [Kaylor]')}, {'title': Value(literal:'The Birthday Post')}, {'title': Value(literal:'Meeting Oracle [Kaylor]')}, {'title': Value(literal:'Blind For Love [Kaylor]')}, {'title': Value(literal:'Guitar Lesson')}, {'title': Value(literal:""The One Where Karlie Licks Taylor's Hand"")}, {'title': Value(literal:'Straight From Paris')}, {'title': Value(literal:'Failure to Communicate')}, {'title': Value(literal:'Birthday Date')}, {'title': Value(literal:'Girlfriend Matierial')}, {'title': Value(literal:'Height Difference')}, {'title': Value(literal:'A Golden Tattoo')}, {'title': Value(literal:'Better Than Any Movie')}, {'title': Value(literal:'The Joys of Side Blogs')}, {'title': Value(literal:'Getting Swept Away')}, {'title': Value(literal:'Six Letter Word [Kaylor]')}, {'title': Value(literal:'carry you')}, {'title': Value(literal:'Easter Getaway')}, {'title': Value(literal:'I want your midnights')}, {'title': Value(literal:'A Life Time Together')}, {'title': Value(literal:'picking up the pieces of the mess we made')}, {'title': Value(literal:'twenty seconds or twenty years')}, {'title': Value(literal:'Been an Awful Good Girl')}, {'title': Value(literal:'A Kiss To Say Hello')}, {'title': Value(literal:'Means of Refuge')}, {'title': Value(literal:'Melt In Your Hand')}, {'title': Value(literal:'Mine, Yours, Ours')}, {'title': Value(literal:'Underneath Your Clothes')}, {'title': Value(literal:'[Podfic] Melt In Your Hand')}, {'title': Value(literal:'[Podfic] best date a girl could ask for')}, {'title': Value(literal:'Mine is a restless heart')}, {'title': Value(literal:""Love's A Game (wanna play?)"")}, {'title': Value(literal:'Little Red Hearts')}, {'title': Value(literal:'Back To December')}, {'title': Value(literal:'this path is reckless (but i like it)')}, {'title': Value(literal:'Home is (wherever you are)')}, {'title': Value(literal:'Spotlight')}, {'title': Value(literal:'In the Wee Hours of the Morning')}, {'title': Value(literal:'Dancing in a Snow Globe (Round and Round)')}, {'title': Value(literal:'now and then')}, {'title': Value(literal:'in cages and boxes')}, {'title': Value(literal:""twisting in the water (you're just like a dream)"")}, {'title': Value(literal:'ring like silver, ring like gold')}, {'title': Value(literal:'Glisten')}, {'title': Value(literal:'trying to put it into words')}, {'title': Value(literal:'Yours for the night.')}, {'title': Value(literal:'Still Falling For You.')}, {'title': Value(literal:'Dress for the Ball')}, {'title': Value(literal:'kismet')}, {'title': Value(literal:'everything comes back to you')}, {'title': Value(literal:'rhabdophobia and wiccaphilia')}, {'title': Value(literal:'electric feel (take me to the place where the white boys dance)')}, {'title': Value(literal:'In Space, No One Can Hear You Scream (or Moan)')}, {'title': Value(literal:'draw a circle')}, {'title': Value(literal:'just ringing in my ears')}, {'title': Value(literal:'Love Education')}, {'title': Value(literal:'Queen Of Roses: Before')}, {'title': Value(literal:'Queen Of Roses: During')}, {'title': Value(literal:""Maybe you'll want to fight"")}, {'title': Value(literal:'Close my eyes and fall into you...')}, {'title': Value(literal:'girl is a god-damn problem')}, {'title': Value(literal:'[Podfic] girl is a god-damn problem')}, {'title': Value(literal:'Where You Are')}, {'title': Value(literal:'sweet and steady hearts')}, {'title': Value(literal:'[Podfic] Where You Are')}, {'title': Value(literal:""could be a nail in my coffin and I don't need another one"")}, {'title': Value(literal:'Bones Become Rainbows')}, {'title': Value(literal:'Golden Rocks to Throw')}, {'title': Value(literal:'Hands in the Sky')}, {'title': Value(literal:'untitled')}, {'title': Value(literal:'the sound of silence')}, {'title': Value(literal:'stumbling through our sad parade')}, {'title': Value(literal:'A Private Moment')}, {'title': Value(literal:'Bird Of Paradise, You’re Why We’ll Do It Again')}, {'title': Value(literal:'et in arcadia ego')}, {'title': Value(literal:'drabble meme')}, {'title': Value(literal:'not falling together')}, {'title': Value(literal:'just grew there wild')}, {'title': Value(literal:""Who Can Give You What You Need? (I'm Trying to Turn You Out and Turn You On)"")}, {'title': Value(literal:'On the Stairs')}, {'title': Value(literal:'Great Romances Of The 21st Century')}, {'title': Value(literal:'tautology: repetition of the same sentence in different words')}, {'title': Value(literal:'if you knew what she was after')}, {'title': Value(literal:'I’m Naked And I’m Far From Home (Save Me)')}, {'title': Value(literal:'Renée, The Red Nosed Reindeer!')}, {'title': Value(literal:'In the Lane, Snow is Glistening')}, {'title': Value(literal:'Christmas Is The Time To Say “I Love You”')}, {'title': Value(literal:'Getting It, On Tour')}, {'title': Value(literal:'the smallest joys')}, {'title': Value(literal:'Greek Connection')}, {'title': Value(literal:'Please Stay (__1)')}, {'title': Value(literal:'Bonjourno Naples')}, {'title': Value(literal:'Who is Dagsen Love?')}, {'title': Value(literal:'Hoge Hakken')}, {'title': Value(literal:'Only When I Look Into Your Eyes')}, {'title': Value(literal:'Wait and See')}, {'title': Value(literal:'D is for Dangerous')}, {'title': Value(literal:'there is a story about the greek gods')}, {'title': Value(literal:'Take My Hand Through The Flames')}, {'title': Value(literal:'Wall of Arms')}, {'title': Value(literal:'Danse Russe')}, {'title': Value(literal:'season for battle wounds, battle scars')}, {'title': Value(literal:'(fanart) Joseph and Claudia')}, {'title': Value(literal:'La vie en vogue')}, {'title': Value(literal:'from the rooftops')}, {'title': Value(literal:'Hate To Admit It, But')}]"	1	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me stories from the Glove Puppetry RPF fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Glove Puppetry RPF"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the [[fandom]] fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the _ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""_"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me stories from the Fashion Model RPF fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""Fashion Model RPF"" . 
  ?story golem:title ?title . 
}
"	"[{'title': Value(literal:'she burn, she burn, she burn')}, {'title': Value(literal:'Lou Reed had surely met her')}, {'title': Value(literal:'I try to focus on your eyes')}, {'title': Value(literal:'Alright (Still)')}, {'title': Value(literal:'en vogue (smile for the camera, sugar)')}, {'title': Value(literal:'Glamourous')}, {'title': Value(literal:'Fine Time')}, {'title': Value(literal:'Fine Time: Bollywood Redux')}, {'title': Value(literal:'She Wants To Be In The Business')}, {'title': Value(literal:'Fine Time: Hollywood Remix')}, {'title': Value(literal:'glitter in your tears (and salt in mine)')}, {'title': Value(literal:'13 bodies')}, {'title': Value(literal:'Lucky')}, {'title': Value(literal:'Worth The Wait')}, {'title': Value(literal:""Why Neymar's mum dumped her boyfriend"")}, {'title': Value(literal:'that summer feeling')}, {'title': Value(literal:'o how the sun shines down')}, {'title': Value(literal:'Right Through You')}, {'title': Value(literal:'Coachella')}, {'title': Value(literal:'[__/__bg] _____')}, {'title': Value(literal:'Late Night Double Feature')}, {'title': Value(literal:'Eliott / Maxence')}, {'title': Value(literal:""if I could put you in a frame I'd draw you smiling"")}, {'title': Value(literal:""'Cause We Break Down A Little"")}, {'title': Value(literal:""New Year's Day"")}, {'title': Value(literal:'Phoenix [Kaylor]')}, {'title': Value(literal:'The Birthday Post')}, {'title': Value(literal:'Meeting Oracle [Kaylor]')}, {'title': Value(literal:'Blind For Love [Kaylor]')}, {'title': Value(literal:'Guitar Lesson')}, {'title': Value(literal:""The One Where Karlie Licks Taylor's Hand"")}, {'title': Value(literal:'Straight From Paris')}, {'title': Value(literal:'Failure to Communicate')}, {'title': Value(literal:'Birthday Date')}, {'title': Value(literal:'Girlfriend Matierial')}, {'title': Value(literal:'Height Difference')}, {'title': Value(literal:'A Golden Tattoo')}, {'title': Value(literal:'Better Than Any Movie')}, {'title': Value(literal:'The Joys of Side Blogs')}, {'title': Value(literal:'Getting Swept Away')}, {'title': Value(literal:'Six Letter Word [Kaylor]')}, {'title': Value(literal:'carry you')}, {'title': Value(literal:'Easter Getaway')}, {'title': Value(literal:'I want your midnights')}, {'title': Value(literal:'A Life Time Together')}, {'title': Value(literal:'picking up the pieces of the mess we made')}, {'title': Value(literal:'twenty seconds or twenty years')}, {'title': Value(literal:'Been an Awful Good Girl')}, {'title': Value(literal:'A Kiss To Say Hello')}, {'title': Value(literal:'Means of Refuge')}, {'title': Value(literal:'Melt In Your Hand')}, {'title': Value(literal:'Mine, Yours, Ours')}, {'title': Value(literal:'Underneath Your Clothes')}, {'title': Value(literal:'[Podfic] Melt In Your Hand')}, {'title': Value(literal:'[Podfic] best date a girl could ask for')}, {'title': Value(literal:'Mine is a restless heart')}, {'title': Value(literal:""Love's A Game (wanna play?)"")}, {'title': Value(literal:'Little Red Hearts')}, {'title': Value(literal:'Back To December')}, {'title': Value(literal:'this path is reckless (but i like it)')}, {'title': Value(literal:'Home is (wherever you are)')}, {'title': Value(literal:'Spotlight')}, {'title': Value(literal:'In the Wee Hours of the Morning')}, {'title': Value(literal:'Dancing in a Snow Globe (Round and Round)')}, {'title': Value(literal:'now and then')}, {'title': Value(literal:'in cages and boxes')}, {'title': Value(literal:""twisting in the water (you're just like a dream)"")}, {'title': Value(literal:'ring like silver, ring like gold')}, {'title': Value(literal:'Glisten')}, {'title': Value(literal:'trying to put it into words')}, {'title': Value(literal:'Yours for the night.')}, {'title': Value(literal:'Still Falling For You.')}, {'title': Value(literal:'Dress for the Ball')}, {'title': Value(literal:'kismet')}, {'title': Value(literal:'everything comes back to you')}, {'title': Value(literal:'rhabdophobia and wiccaphilia')}, {'title': Value(literal:'electric feel (take me to the place where the white boys dance)')}, {'title': Value(literal:'In Space, No One Can Hear You Scream (or Moan)')}, {'title': Value(literal:'draw a circle')}, {'title': Value(literal:'just ringing in my ears')}, {'title': Value(literal:'Love Education')}, {'title': Value(literal:'Queen Of Roses: Before')}, {'title': Value(literal:'Queen Of Roses: During')}, {'title': Value(literal:""Maybe you'll want to fight"")}, {'title': Value(literal:'Close my eyes and fall into you...')}, {'title': Value(literal:'girl is a god-damn problem')}, {'title': Value(literal:'[Podfic] girl is a god-damn problem')}, {'title': Value(literal:'Where You Are')}, {'title': Value(literal:'sweet and steady hearts')}, {'title': Value(literal:'[Podfic] Where You Are')}, {'title': Value(literal:""could be a nail in my coffin and I don't need another one"")}, {'title': Value(literal:'Bones Become Rainbows')}, {'title': Value(literal:'Golden Rocks to Throw')}, {'title': Value(literal:'Hands in the Sky')}, {'title': Value(literal:'untitled')}, {'title': Value(literal:'the sound of silence')}, {'title': Value(literal:'stumbling through our sad parade')}, {'title': Value(literal:'A Private Moment')}, {'title': Value(literal:'Bird Of Paradise, You’re Why We’ll Do It Again')}, {'title': Value(literal:'et in arcadia ego')}, {'title': Value(literal:'drabble meme')}, {'title': Value(literal:'not falling together')}, {'title': Value(literal:'just grew there wild')}, {'title': Value(literal:""Who Can Give You What You Need? (I'm Trying to Turn You Out and Turn You On)"")}, {'title': Value(literal:'On the Stairs')}, {'title': Value(literal:'Great Romances Of The 21st Century')}, {'title': Value(literal:'tautology: repetition of the same sentence in different words')}, {'title': Value(literal:'if you knew what she was after')}, {'title': Value(literal:'I’m Naked And I’m Far From Home (Save Me)')}, {'title': Value(literal:'Renée, The Red Nosed Reindeer!')}, {'title': Value(literal:'In the Lane, Snow is Glistening')}, {'title': Value(literal:'Christmas Is The Time To Say “I Love You”')}, {'title': Value(literal:'Getting It, On Tour')}, {'title': Value(literal:'the smallest joys')}, {'title': Value(literal:'Greek Connection')}, {'title': Value(literal:'Please Stay (__1)')}, {'title': Value(literal:'Bonjourno Naples')}, {'title': Value(literal:'Who is Dagsen Love?')}, {'title': Value(literal:'Hoge Hakken')}, {'title': Value(literal:'Only When I Look Into Your Eyes')}, {'title': Value(literal:'Wait and See')}, {'title': Value(literal:'D is for Dangerous')}, {'title': Value(literal:'there is a story about the greek gods')}, {'title': Value(literal:'Take My Hand Through The Flames')}, {'title': Value(literal:'Wall of Arms')}, {'title': Value(literal:'Danse Russe')}, {'title': Value(literal:'season for battle wounds, battle scars')}, {'title': Value(literal:'(fanart) Joseph and Claudia')}, {'title': Value(literal:'La vie en vogue')}, {'title': Value(literal:'from the rooftops')}, {'title': Value(literal:'Hate To Admit It, But')}]"	1	0	0			
2	2	en	Show me stories from the _____4_____ fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""_____4_____"" . ?story golem:title ?title . }"	[{'title': Value(literal:'___pwp_____Steve')}]	2	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the ____ — _______ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""____ — _______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me stories from the _____4_____ fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title WHERE { 
?story golem:fandom ""_____4_____"" . 
?story golem:title ?title . 
}
"	[{'title': Value(literal:'___pwp_____Steve')}]	1	0	0			
3	3	en	Show me stories from the DaiSuga - Fandom fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""DaiSuga - Fandom"" . ?story golem:title ?title . }"	[{'title': Value(literal:'Flipped Coin // Bokuaka AU')}, {'title': Value(literal:'________')}]	3	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the _ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""_"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me stories from the DaiSuga - Fandom fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""DaiSuga - Fandom"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'Flipped Coin // Bokuaka AU')}, {'title': Value(literal:'________')}]	1	0	0			
4	4	en	Show me stories from the __ fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }"	[{'title': Value(literal:'__/_/_/____-__')}]	4	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me stories from the ____ — _______ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""____ — _______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the _ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""_"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me stories from the __ fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""__"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'__/_/_/____-__')}]	1	0	0			
5	5	en	Show me stories from the sildoctor fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""sildoctor"" . ?story golem:title ?title . }"	[{'title': Value(literal:'_____')}]	5	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me stories from the [[fandom]] fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the _ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""_"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me stories from the sildoctor fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title WHERE { 
?story golem:fandom ""sildoctor"" . 
?story golem:title ?title . 
}
"	[{'title': Value(literal:'_____')}]	1	0	0			
6	6	en	Show me stories from the _ fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""_"" . ?story golem:title ?title . }"	[{'title': Value(literal:'__')}]	6	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the ____ — _______ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""____ — _______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me stories from the _ fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""_"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'__')}]	1	0	0			
7	7	en	Show me stories from the Glove Puppetry RPF fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Glove Puppetry RPF"" . ?story golem:title ?title . }"	[{'title': Value(literal:'_____')}]	7	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me stories from the [[fandom]] fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the _ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""_"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me stories from the Glove Puppetry RPF fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title WHERE { 
?story golem:fandom ""Glove Puppetry RPF"" . 
?story golem:title ?title . 
}
"	[{'title': Value(literal:'_____')}]	1	0	0			
8	8	en	Show me stories from the ____ — _______ fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""____ — _______"" . ?story golem:title ?title . }"	[{'title': Value(literal:'__________')}]	8	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the _____4_____ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""_____4_____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me stories from the ____ — _______ fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""____ — _______"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'__________')}]	1	0	0			
9	9	en	Show me stories from the Kim Namjoon - Fandom fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Kim Namjoon - Fandom"" . ?story golem:title ?title . }"	"[{'title': Value(literal:'Coming Soon...')}, {'title': Value(literal:'Falling For My Wife  (Kim Namjoon FF)')}, {'title': Value(literal:'Home ll Mafia Brothers ll BTS FF')}, {'title': Value(literal:'Evanescence')}, {'title': Value(literal:'The Dragon Fell in Love with the Tiger')}, {'title': Value(literal:'Nightmares')}, {'title': Value(literal:'I Love You...Namjoon')}, {'title': Value(literal:'So Far Away')}, {'title': Value(literal:'Strawberries And Vodka')}, {'title': Value(literal:'Steps')}, {'title': Value(literal:'Circle of Love (NamjoonxReader)')}, {'title': Value(literal:'""Insanity""')}, {'title': Value(literal:'I Love You More Than My Handsome Face')}, {'title': Value(literal:'""Idol In A Studio""')}, {'title': Value(literal:'Wedding Dates')}, {'title': Value(literal:""The Man He Can't Love"")}, {'title': Value(literal:'Smoke & Mirrors')}, {'title': Value(literal:'Short Stories - BTS Members')}, {'title': Value(literal:'__')}, {'title': Value(literal:""I'm With You // Kim Namjoon"")}, {'title': Value(literal:'Just One Moment')}, {'title': Value(literal:'Keep Me Company')}, {'title': Value(literal:'____')}, {'title': Value(literal:""A Traitor's Love"")}, {'title': Value(literal:'Talking to My Sunset')}, {'title': Value(literal:'I think about you when I cum.')}, {'title': Value(literal:'Wings of a Butterfly')}, {'title': Value(literal:'ob·ses·sion')}, {'title': Value(literal:'Of Ginger Bread and Christmas Lovesongs')}, {'title': Value(literal:'Respect')}, {'title': Value(literal:'BTS x TS Mixtape')}]"	9	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the _ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""_"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me stories from the Kim Namjoon - Fandom fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""Kim Namjoon - Fandom"" . 
  ?story golem:title ?title . 
}
"	"[{'title': Value(literal:'Coming Soon...')}, {'title': Value(literal:'Falling For My Wife  (Kim Namjoon FF)')}, {'title': Value(literal:'Home ll Mafia Brothers ll BTS FF')}, {'title': Value(literal:'Evanescence')}, {'title': Value(literal:'The Dragon Fell in Love with the Tiger')}, {'title': Value(literal:'Nightmares')}, {'title': Value(literal:'I Love You...Namjoon')}, {'title': Value(literal:'So Far Away')}, {'title': Value(literal:'Strawberries And Vodka')}, {'title': Value(literal:'Steps')}, {'title': Value(literal:'Circle of Love (NamjoonxReader)')}, {'title': Value(literal:'""Insanity""')}, {'title': Value(literal:'I Love You More Than My Handsome Face')}, {'title': Value(literal:'""Idol In A Studio""')}, {'title': Value(literal:'Wedding Dates')}, {'title': Value(literal:""The Man He Can't Love"")}, {'title': Value(literal:'Smoke & Mirrors')}, {'title': Value(literal:'Short Stories - BTS Members')}, {'title': Value(literal:'__')}, {'title': Value(literal:""I'm With You // Kim Namjoon"")}, {'title': Value(literal:'Just One Moment')}, {'title': Value(literal:'Keep Me Company')}, {'title': Value(literal:'____')}, {'title': Value(literal:""A Traitor's Love"")}, {'title': Value(literal:'Talking to My Sunset')}, {'title': Value(literal:'I think about you when I cum.')}, {'title': Value(literal:'Wings of a Butterfly')}, {'title': Value(literal:'ob·ses·sion')}, {'title': Value(literal:'Of Ginger Bread and Christmas Lovesongs')}, {'title': Value(literal:'Respect')}, {'title': Value(literal:'BTS x TS Mixtape')}]"	1	0	0			
10	10	en	Show me stories from the __ fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }"	[{'title': Value(literal:'__')}, {'title': Value(literal:'__')}, {'title': Value(literal:'__')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'___/__________')}, {'title': Value(literal:'__·__________')}, {'title': Value(literal:'______·________')}, {'title': Value(literal:'late-night grooming')}, {'title': Value(literal:'__')}]	10	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me stories from the _ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""_"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the ____ — _______ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""____ — _______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me stories from the __ fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>
prefix dc: <http://purl.org/dc/terms/>
prefix gc: <https://ontology.golemlab.eu/>
SELECT DISTINCT ?title WHERE {
  ?story golem:fandom ""__"" .
  ?story golem:title ?title .
}
"	[{'title': Value(literal:'__')}, {'title': Value(literal:'__')}, {'title': Value(literal:'__')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'___/__________')}, {'title': Value(literal:'__·__________')}, {'title': Value(literal:'______·________')}, {'title': Value(literal:'late-night grooming')}, {'title': Value(literal:'__')}]	1	0	0			
12	12	en	Show me all the stories from the CHANHUN __ universe	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""CHANHUN __"" . ?story golem:title ?title . }"	[{'title': Value(literal:'____')}]	12	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me all the stories from the __ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the _______ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the Yuè Cháo (2013) universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""Yuè Cháo (2013)"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me all the stories from the CHANHUN __ universe

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>
prefix dc: <http://purl.org/dc/terms/>
prefix gc: <https://ontology.golemlab.eu/>
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""CHANHUN __"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'____')}]	1	0	0			
13	13	en	Show me all the stories from the All27 - Fandom universe	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""All27 - Fandom"" . ?story golem:title ?title . }"	[{'title': Value(literal:'__1.0')}]	13	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me all the stories from the [[fandom]] universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the FAINALFANTASYXIV universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""FAINALFANTASYXIV"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the _______ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me all the stories from the All27 - Fandom universe

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""All27 - Fandom"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'__1.0')}]	1	0	0			
14	14	en	Show me all the stories from the KenshiYonezu - Fandom universe	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""KenshiYonezu - Fandom"" . ?story golem:title ?title . }"	[{'title': Value(literal:'___________123____')}]	14	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me stories from the DaiSuga - Fandom fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""DaiSuga - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the __ fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me all the stories from the KenshiYonezu - Fandom universe

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""KenshiYonezu - Fandom"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'___________123____')}]	1	0	0			
15	15	en	Show me all the stories from the William tingting universe	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""William tingting"" . ?story golem:title ?title . }"	[{'title': Value(literal:'_____ 13')}, {'title': Value(literal:'_____ 12')}]	15	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me all the stories from the FAINALFANTASYXIV universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""FAINALFANTASYXIV"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the _______ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the __ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me all the stories from the William tingting universe

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""William tingting"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'_____ 13')}, {'title': Value(literal:'_____ 12')}]	1	0	0			
16	16	en	Show me all the stories from the Yuè Cháo (2013) universe	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""Yuè Cháo (2013)"" . ?story golem:title ?title . }"	[{'title': Value(literal:'__')}]	16	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me all the stories from the CHANHUN __ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""CHANHUN __"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the __ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the _______ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me all the stories from the Yuè Cháo (2013) universe

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""Yuè Cháo (2013)"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'__')}]	1	0	0			
17	17	en	Show me all the stories from the _______ universe	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_______"" . ?story golem:title ?title . }"	[{'title': Value(literal:'__')}, {'title': Value(literal:'___ _____')}]	17	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me all the stories from the __ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the CHANHUN __ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""CHANHUN __"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the FAINALFANTASYXIV universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""FAINALFANTASYXIV"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me all the stories from the _______ universe

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""_______"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'__')}, {'title': Value(literal:'___ _____')}]	1	0	0			
18	18	en	Show me all the stories from the The Daughter of Time universe	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""The Daughter of Time"" . ?story golem:title ?title . }"	[{'title': Value(literal:'______')}]	18	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me all the stories from the _______ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the FAINALFANTASYXIV universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""FAINALFANTASYXIV"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the __ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me all the stories from the The Daughter of Time universe

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""The Daughter of Time"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'______')}]	1	0	0			
19	19	en	Show me all the stories from the __ universe	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }"	[{'title': Value(literal:'_____')}, {'title': Value(literal:'__')}]	19	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me all the stories from the _______ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the CHANHUN __ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""CHANHUN __"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the __ Yaksha universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ Yaksha"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me all the stories from the __ universe

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""__"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'_____')}, {'title': Value(literal:'__')}]	1	0	0			
20	20	en	Show me all the stories from the FAINALFANTASYXIV universe	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""FAINALFANTASYXIV"" . ?story golem:title ?title . }"	[{'title': Value(literal:'___')}]	20	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me all the stories from the _______ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the __ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the [[fandom]] universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me all the stories from the FAINALFANTASYXIV universe

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""FAINALFANTASYXIV"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'___')}]	1	0	0			
21	21	en	Show me all the stories from the __ Yaksha universe	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ Yaksha"" . ?story golem:title ?title . }"	[{'title': Value(literal:'Luck')}]	21	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me all the stories from the __ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the _______ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the CHANHUN __ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""CHANHUN __"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me all the stories from the __ Yaksha universe

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""__ Yaksha"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'Luck')}]	1	0	0			
23	23	en	Is the story The night the world collapsed completed?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The night the world collapsed"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	23	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is the story Turning it Around completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Turning it Around"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story The Raven's Cry completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The Raven's Cry"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story [[story]] completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: Is the story The night the world collapsed completed?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
  ?story golem:title ""The night the world collapsed"" . 
  ?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
24	24	en	Is the story The Raven's Cry completed?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The Raven's Cry"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	24	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is the story Turning it Around completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Turning it Around"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story [[story]] completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story Luna Lovegood and the Chamber of Innocence completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Luna Lovegood and the Chamber of Innocence"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: Is the story The Raven's Cry completed?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
?story golem:title ""The Raven's Cry"" . 
?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
25	25	en	Is the story Luna Lovegood and the Chamber of Innocence completed?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Luna Lovegood and the Chamber of Innocence"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'In-Progress')}]	25	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is the story Turning it Around completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Turning it Around"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story The Raven's Cry completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The Raven's Cry"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story A heart connection completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""A heart connection"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: Is the story Luna Lovegood and the Chamber of Innocence completed?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
  ?story golem:title ""Luna Lovegood and the Chamber of Innocence"" . 
  ?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'In-Progress')}]	1	0	0			
26	26	en	Is the story Life problems are best served with a cup of tea completed?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Life problems are best served with a cup of tea"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'In-Progress')}]	26	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is the story The good, the bad, and the things that should have happened but didn't completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The good, the bad, and the things that should have happened but didn't"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story [[story]] completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story The Help completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The Help"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: Is the story Life problems are best served with a cup of tea completed?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Life problems are best served with a cup of tea"" . ?story golem:publicationStatus ?status . }
"	[{'status': Value(literal:'In-Progress')}]	1	0	0			
27	27	en	Is the story The good, the bad, and the things that should have happened but didn't completed?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The good, the bad, and the things that should have happened but didn't"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	27	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is the story Turning it Around completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Turning it Around"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story The Help completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The Help"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story [[story]] completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: Is the story The good, the bad, and the things that should have happened but didn't completed?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
?story golem:title ""The good, the bad, and the things that should have happened but didn't"" . 
?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
28	28	en	Is the story Turning it Around completed?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Turning it Around"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	28	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is the story The Help completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The Help"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story [[story]] completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story The good, the bad, and the things that should have happened but didn't completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The good, the bad, and the things that should have happened but didn't"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: Is the story Turning it Around completed?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
  ?story golem:title ""Turning it Around"" . 
  ?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
29	29	en	Is the story Hermione meets the Burrow completed?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Hermione meets the Burrow"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	29	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is the story Luna Lovegood and the Chamber of Innocence completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Luna Lovegood and the Chamber of Innocence"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story Cure completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Cure"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story The Raven's Cry completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The Raven's Cry"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: Is the story Hermione meets the Burrow completed?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?status WHERE { 
  ?story golem:title ""Hermione meets the Burrow"" . 
  ?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
30	30	en	Is the story Cure completed?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Cure"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}, {'status': Value(literal:'In-Progress')}]	30	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is the story Turning it Around completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Turning it Around"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story The Help completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The Help"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story [[story]] completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: Is the story Cure completed?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
  ?story golem:title ""Cure"" . 
  ?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}, {'status': Value(literal:'In-Progress')}]	1	0	0			
31	31	en	Is the story The Help completed?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The Help"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}, {'status': Value(literal:'In-Progress')}]	31	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is the story [[story]] completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story Turning it Around completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Turning it Around"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story Cure completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Cure"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: Is the story The Help completed?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
  ?story golem:title ""The Help"" . 
  ?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}, {'status': Value(literal:'In-Progress')}]	1	0	0			
32	32	en	Is the story A heart connection completed?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""A heart connection"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	32	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is the story Turning it Around completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Turning it Around"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story [[story]] completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Is the story Luna Lovegood and the Chamber of Innocence completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Luna Lovegood and the Chamber of Innocence"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: Is the story A heart connection completed?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
?story golem:title ""A heart connection"" . 
?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
34	34	en	When was Codeword: Christmas Socks published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Codeword: Christmas Socks"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2021-03-21')}]	34	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote The Wheezes of Christmas Present?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Wheezes of Christmas Present"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: When was Oh To Be Lonely at Christmas published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Oh To Be Lonely at Christmas"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: Where is A Family Christmas published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""A Family Christmas"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: When was Codeword: Christmas Socks published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?date WHERE { 
?story golem:title ""Codeword: Christmas Socks"" . 
?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2021-03-21')}]	1	0	0			
35	35	en	When was Rump Roast (by enchanted_jae) published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Rump Roast (by enchanted_jae)"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2018-09-11')}]	35	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: When was Tea and a Biscuit published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tea and a Biscuit"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was It Takes A Little Mistletoe published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""It Takes A Little Mistletoe"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was Those Dead Eyes (Harry Potter) published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Those Dead Eyes (Harry Potter)"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: When was Rump Roast (by enchanted_jae) published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?date WHERE { 
?story golem:publisher ""enchanted_jae"" . 
?story golem:datePublished ?date . 
}
"	[]	0	0	1	Failed NER		
36	36	en	When was crave published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""crave"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2021-02-13')}, {'date': Value(literal:'2022-07-21')}, {'date': Value(literal:'2021-05-02')}, {'date': Value(literal:'2018-12-17')}, {'date': Value(literal:'2015-05-14')}, {'date': Value(literal:'2019-07-28')}, {'date': Value(literal:'2020-07-23')}, {'date': Value(literal:'2021-12-05')}, {'date': Value(literal:'2017-05-08')}, {'date': Value(literal:'2021-01-03')}, {'date': Value(literal:'2020-07-06')}, {'date': Value(literal:'2021-04-04')}, {'date': Value(literal:'2020-06-01')}, {'date': Value(literal:'2017-08-27')}, {'date': Value(literal:'2022-06-13')}, {'date': Value(literal:'2018-02-15')}, {'date': Value(literal:'2020-12-29')}, {'date': Value(literal:'2022-01-19')}, {'date': Value(literal:'2021-12-11')}, {'date': Value(literal:'2020-10-22')}, {'date': Value(literal:'2021-10-14')}, {'date': Value(literal:'2020-06-26')}, {'date': Value(literal:'2022-05-30')}]	36	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: When was It Takes A Little Mistletoe published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""It Takes A Little Mistletoe"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was I Just Want... published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""I Just Want..."" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was Tea and a Biscuit published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tea and a Biscuit"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: When was crave published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?date WHERE { 
?story golem:title ""crave"" . 
?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2021-02-13')}, {'date': Value(literal:'2022-07-21')}, {'date': Value(literal:'2021-05-02')}, {'date': Value(literal:'2018-12-17')}, {'date': Value(literal:'2015-05-14')}, {'date': Value(literal:'2019-07-28')}, {'date': Value(literal:'2020-07-23')}, {'date': Value(literal:'2021-12-05')}, {'date': Value(literal:'2017-05-08')}, {'date': Value(literal:'2021-01-03')}, {'date': Value(literal:'2020-07-06')}, {'date': Value(literal:'2021-04-04')}, {'date': Value(literal:'2020-06-01')}, {'date': Value(literal:'2017-08-27')}, {'date': Value(literal:'2022-06-13')}, {'date': Value(literal:'2018-02-15')}, {'date': Value(literal:'2020-12-29')}, {'date': Value(literal:'2022-01-19')}, {'date': Value(literal:'2021-12-11')}, {'date': Value(literal:'2020-10-22')}, {'date': Value(literal:'2021-10-14')}, {'date': Value(literal:'2020-06-26')}, {'date': Value(literal:'2022-05-30')}]	1	0	0			
37	37	en	When was You Caused Me Pain (So I Did The Same) published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""You Caused Me Pain (So I Did The Same)"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2021-01-09')}]	37	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: When was I Just Want... published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""I Just Want..."" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was [[story]] published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[[story]]"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: Where is you're my flesh and blood, whether you like it or not published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""you're my flesh and blood, whether you like it or not"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: When was You Caused Me Pain (So I Did The Same) published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?date WHERE { 
?story golem:title ""You Caused Me Pain (So I Did The Same)"" . 
?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2021-01-09')}]	1	0	0			
38	38	en	When was Oh To Be Lonely at Christmas published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Oh To Be Lonely at Christmas"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2020-12-23')}]	38	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: When was It Takes A Little Mistletoe published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""It Takes A Little Mistletoe"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: Where is A Family Christmas published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""A Family Christmas"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: When was Codeword: Christmas Socks published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Codeword: Christmas Socks"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: When was Oh To Be Lonely at Christmas published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?date WHERE { 
?story golem:title ""Oh To Be Lonely at Christmas"" . 
?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2020-12-23')}]	1	0	0			
39	39	en	When was Those Dead Eyes (Harry Potter) published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Those Dead Eyes (Harry Potter)"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2021-08-05')}]	39	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is Harry Potter and the year fate stepped in part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Harry Potter and the year fate stepped in"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: When was It Takes A Little Mistletoe published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""It Takes A Little Mistletoe"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: Who wrote Harry Potter and the Rose's Thorns?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Harry Potter and the Rose's Thorns"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: When was Those Dead Eyes (Harry Potter) published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?date WHERE { 
  ?story golem:title ""Those Dead Eyes (Harry Potter)"" . 
  ?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2021-08-05')}]	1	0	0			
40	40	en	When was I Just Want... published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""I Just Want..."" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2020-05-15')}]	40	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: When was It Takes A Little Mistletoe published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""It Takes A Little Mistletoe"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was [[story]] published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[[story]]"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was crave published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""crave"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: When was I Just Want... published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?date WHERE { 
  ?story golem:title ""I Just Want..."" . 
  ?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2020-05-15')}]	1	0	0			
41	41	en	When was Tea and a Biscuit published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tea and a Biscuit"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2021-02-09')}, {'date': Value(literal:'2012-02-05')}]	41	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: When was It Takes A Little Mistletoe published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""It Takes A Little Mistletoe"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was Rump Roast (by enchanted_jae) published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Rump Roast (by enchanted_jae)"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was crave published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""crave"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: When was Tea and a Biscuit published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?date WHERE { 
  ?story golem:title ""Tea and a Biscuit"" . 
  ?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2021-02-09')}, {'date': Value(literal:'2012-02-05')}]	1	0	0			
42	42	en	When was grab the kitchen scissors published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""grab the kitchen scissors"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2022-02-05')}]	42	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: When was It Takes A Little Mistletoe published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""It Takes A Little Mistletoe"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was Tea and a Biscuit published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tea and a Biscuit"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was crave published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""crave"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: When was grab the kitchen scissors published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?date WHERE { 
  ?story golem:title ""grab the kitchen scissors"" . 
  ?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2022-02-05')}]	1	0	0			
43	43	en	When was It Takes A Little Mistletoe published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""It Takes A Little Mistletoe"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2017-12-02')}]	43	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: When was [[story]] published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[[story]]"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was crave published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""crave"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was Tea and a Biscuit published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tea and a Biscuit"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: When was It Takes A Little Mistletoe published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?date WHERE { 
?story golem:title ""It Takes A Little Mistletoe"" . 
?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2017-12-02')}]	1	0	0			
44	44	en	What is the most recently uploaded story?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:datePublished ?date . ?story golem:title ?title . } ORDER BY DESC(?date) LIMIT 1	[{'title': Value(literal:'______________________ ____ ______ ______________ __')}]	44	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What stories were posted in 2015?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:datePublished ?date . ?story golem:title ?title . FILTER(YEAR(xsd:datetime(?date))=2015) . }
    </SPARQL>

    ###
    

    Question: How many stories are uploaded per year?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }
    </SPARQL>

    ###
    

    Question: How many authors have uploaded a story?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?uploads) WHERE { ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: What is the most recently uploaded story?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?story ?title WHERE { 
?story golem:datePublished ?date . 
?story golem:title ?title . 
} ORDER BY DESC(?date) LIMIT 1
"	[{'story': Value(uri:'https://golemlab.eu/graph/40742562'), 'title': Value(literal:'______________________ ____ ______ ______________ __')}]	0	1	1	Evaluation method error		
45	45	en	What stories were posted in 2015?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:datePublished ?date . ?story golem:title ?title . FILTER(YEAR(xsd:datetime(?date))=2015) . }		45	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the most recently uploaded story?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:datePublished ?date . ?story golem:title ?title . } ORDER BY DESC(?date) LIMIT 1
    </SPARQL>

    ###
    

    Question: How many stories are uploaded per year?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }
    </SPARQL>

    ###
    

    Question: How many stories have received no feedback?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?no_feedback_stories WHERE { ?story golem:numberOfComments ?comments . ?story golem:numberOfKudos ?kudos . FILTER(?comments=0 && ?kudos=0) }
    </SPARQL>

    ###
    

Question: What stories were posted in 2015?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>
SELECT DISTINCT ?title WHERE {
  ?story golem:datePublished ?date .
  ?story golem:title ?title .
  FILTER(?date >= ""2015-01-01T00:00:00""^^xsd:date && ?date <= ""2015-12-31T23:59:59""^^xsd:date)
}
"	"[{'title': Value(literal:'The Trouble Between Professors')}, {'title': Value(literal:""Dudley's Cousin"")}, {'title': Value(literal:'The Suffering of the Dead')}, {'title': Value(literal:'Saving Harry')}, {'title': Value(literal:'A Deal with Two Devils')}, {'title': Value(literal:'Finding Safe Harbor')}, {'title': Value(literal:'Trains and Toads')}, {'title': Value(literal:""The Hogwarts' Riddle"")}, {'title': Value(literal:""The Undertaker's Apprentice"")}, {'title': Value(literal:'“Howling” Mad Marauders')}, {'title': Value(literal:'Slytherin and Proud')}, {'title': Value(literal:'Dangerous Affiliations')}, {'title': Value(literal:'Something About Ron')}, {'title': Value(literal:'Something Wicked This Way Comes')}, {'title': Value(literal:'Amortentia')}, {'title': Value(literal:'That Boy Is A Monster')}, {'title': Value(literal:'The monster within')}, {'title': Value(literal:'A Sweet Flirtation')}, {'title': Value(literal:'House of Black')}, {'title': Value(literal:'An Unexpected Interference - Outtakes')}, {'title': Value(literal:'Nowhere is Safe')}, {'title': Value(literal:'Here We Go Again')}, {'title': Value(literal:'Medesimo Tempo (same tempo, despite changes of time signature)')}, {'title': Value(literal:'Coals of Fire')}, {'title': Value(literal:'A Shot of Poison')}, {'title': Value(literal:'Up to No Good')}, {'title': Value(literal:""A Happier Christmas in Godric's Hollow"")}, {'title': Value(literal:'Ask Severus Snape')}, {'title': Value(literal:""C'est La Vie"")}, {'title': Value(literal:'Dragonheart Caravan')}, {'title': Value(literal:'Harry Potter and the Ever-Locked Room')}, {'title': Value(literal:'Touches of Laughter and Frustration')}, {'title': Value(literal:'Insanity Is Relative')}, {'title': Value(literal:'code words for my lover')}, {'title': Value(literal:'Hogwarts in a FunHouse Mirror')}, {'title': Value(literal:'Inherited Values')}, {'title': Value(literal:'Hidden Desire')}, {'title': Value(literal:'Eine Kleine')}, {'title': Value(literal:'Dragons of a Red Stone')}, {'title': Value(literal:'Grapes or Cigarettes')}, {'title': Value(literal:'Blue')}, {'title': Value(literal:'Anything For You')}, {'title': Value(literal:'Loyalty')}, {'title': Value(literal:'And So We Say Goodbye')}, {'title': Value(literal:'Holiday In Hell')}, {'title': Value(literal:'The AKA Why Drabbles')}, {'title': Value(literal:'Potions and Pendragons')}, {'title': Value(literal:'Transfiguration')}, {'title': Value(literal:'The Courtship of Harry Potter')}, {'title': Value(literal:'Opening Day')}, {'title': Value(literal:'Wings of Sun')}, {'title': Value(literal:'Aurora')}, {'title': Value(literal:'Wrong Again')}, {'title': Value(literal:'Rescue Me')}, {'title': Value(literal:""Hermione's Penis"")}, {'title': Value(literal:'Mailbox Meetings')}, {'title': Value(literal:'Home is not where you are from, it is where you belong')}, {'title': Value(literal:'Aranea Malfoy and that one time she really fucked things up')}, {'title': Value(literal:""Harry's Legacy of Druidism"")}, {'title': Value(literal:'The Girl Prankster')}, {'title': Value(literal:'The Black Butterfly')}, {'title': Value(literal:'Gryffindor Assemble')}, {'title': Value(literal:'Blood and Magic')}, {'title': Value(literal:'The Phoenix Trio')}, {'title': Value(literal:""Look to the Future Now, It's Only Just Begun: Illustrated"")}, {'title': Value(literal:'Bending the Course of Time')}, {'title': Value(literal:'Strange Magic.')}, {'title': Value(literal:'The Hardest Lesson')}, {'title': Value(literal:'Abandon')}, {'title': Value(literal:'Charm School')}, {'title': Value(literal:'The Truth Reaveled')}, {'title': Value(literal:'The Bet')}, {'title': Value(literal:'Looking For Something')}, {'title': Value(literal:'Temporary title')}, {'title': Value(literal:'The Gathering Storm')}, {'title': Value(literal:'Unwritten Rules')}, {'title': Value(literal:'Of Flours and Stars')}, {'title': Value(literal:'Nothing Stays The Same')}, {'title': Value(literal:'40 French Kisses - Sirius/Severus')}, {'title': Value(literal:'Noble Trouble')}, {'title': Value(literal:'Parallel')}, {'title': Value(literal:'Harry Potter and Practical Magic Works too')}, {'title': Value(literal:'Truth, Dice, Dare or Love')}, {'title': Value(literal:'Random Dramione Ramblings')}, {'title': Value(literal:'More Precious Than Any Treasure')}, {'title': Value(literal:""Imperio'd My Heart"")}, {'title': Value(literal:'Round Two - A Comprehensive Look Into The Sortings Of The Next Generation')}, {'title': Value(literal:""Merlin's Heir"")}, {'title': Value(literal:'My Dangan Immortal')}, {'title': Value(literal:'Two Sides Of The Same Coin [On Hiatus]')}, {'title': Value(literal:'The True Father')}, {'title': Value(literal:'Full Circle')}, {'title': Value(literal:'A Step to the Left')}, {'title': Value(literal:'Endless Night')}, {'title': Value(literal:'Worriers of Ancient Magic')}, {'title': Value(literal:'Full Capabilities')}, {'title': Value(literal:'I Open At The Close')}, {'title': Value(literal:'Apprentice')}, {'title': Value(literal:'Works in Progress')}, {'title': Value(literal:""Molly's Marital Magic"")}, {'title': Value(literal:'Har_ no Jinch_riki: _______')}, {'title': Value(literal:'Bloodred')}, {'title': Value(literal:'Licorice Sticks and Aniseed Balls')}, {'title': Value(literal:'Paper Tears')}, {'title': Value(literal:""What If I'm not alone?"")}, {'title': Value(literal:'Growing Pains')}, {'title': Value(literal:'The School Chooses the Child')}, {'title': Value(literal:'Be Brave')}, {'title': Value(literal:""Marauders' Internal Affairs"")}, {'title': Value(literal:'Midnight Shadow')}, {'title': Value(literal:'there are no heroes (or villains)')}, {'title': Value(literal:'Dreaming in Waves')}, {'title': Value(literal:'Break a Little, Heal a Lot')}, {'title': Value(literal:'Lost in Paradise')}, {'title': Value(literal:'A Breath of Life')}, {'title': Value(literal:'Seven Minutes')}, {'title': Value(literal:'Tequila Sunrise')}, {'title': Value(literal:'Like a Strawberry in the Mouth')}, {'title': Value(literal:'On the Edges of Eternity')}, {'title': Value(literal:'Recreated Fire')}, {'title': Value(literal:""What They Didn't Know"")}, {'title': Value(literal:'The Ministry Olympics')}, {'title': Value(literal:""How to Marry Your Baby's Daddy"")}, {'title': Value(literal:'Real is a Subjective Concept')}, {'title': Value(literal:'The Remnants')}, {'title': Value(literal:'An Affair To Remember')}, {'title': Value(literal:'From Minder to Friend to Lover (to Heart)')}, {'title': Value(literal:'The Perfect Crime')}, {'title': Value(literal:'Case File Seventeen')}, {'title': Value(literal:'Unfortunate Happenings')}, {'title': Value(literal:'Learning to Live Again')}, {'title': Value(literal:'In The Closet With Theodore Nott: From the Live Journal Vaults')}, {'title': Value(literal:'A happy family...sort of...')}, {'title': Value(literal:'The Prince and the Pennines')}, {'title': Value(literal:'A Blog Worth Following')}, {'title': Value(literal:'Dennis')}, {'title': Value(literal:'M.I.T.: Muggle Interface Team - Hampstead Heath Corpse')}, {'title': Value(literal:'Mistletoe & Wine')}, {'title': Value(literal:'The Magic Sleigh Ride')}, {'title': Value(literal:'Hogwarts and the Boy Undying')}, {'title': Value(literal:'More!')}, {'title': Value(literal:'Snow, Blood, and Mahogany')}, {'title': Value(literal:'The Consequences Of Free Will')}, {'title': Value(literal:'Heir of Fire')}, {'title': Value(literal:'All I Care Is You')}, {'title': Value(literal:'Falling apart')}, {'title': Value(literal:'Taking Chances')}, {'title': Value(literal:'Albus')}, {'title': Value(literal:'Dream and Delirium - Albus')}, {'title': Value(literal:'The New Year')}, {'title': Value(literal:'Show and Tell')}, {'title': Value(literal:'Some Nights')}, {'title': Value(literal:'Bella Bellissima')}, {'title': Value(literal:'His Lover’s Father')}, {'title': Value(literal:'After The War')}, {'title': Value(literal:'Not Everything is Magic')}, {'title': Value(literal:'China')}, {'title': Value(literal:'Little Harry')}, {'title': Value(literal:'Dandelion Wishes')}, {'title': Value(literal:'The Secrets of Pink Glitter')}, {'title': Value(literal:'For love')}, {'title': Value(literal:'The Sound of Quidditch')}, {'title': Value(literal:'If Only it Happened This Way')}, {'title': Value(literal:'First Night')}, {'title': Value(literal:'Addiction')}, {'title': Value(literal:'Seducing Bella')}, {'title': Value(literal:'Yes, Minister')}, {'title': Value(literal:'The Accidental Casanova')}, {'title': Value(literal:'Tom')}, {'title': Value(literal:'Sorted')}, {'title': Value(literal:""It's Your Turn"")}, {'title': Value(literal:'Moving in a Still Frame')}, {'title': Value(literal:'8 is More than Enough')}, {'title': Value(literal:'these little powerless bones')}, {'title': Value(literal:'Dull Ache')}, {'title': Value(literal:'The Letters')}, {'title': Value(literal:'Eye Colors and Percentages')}, {'title': Value(literal:'A Better Offer')}, {'title': Value(literal:'Greener Grass')}, {'title': Value(literal:'SAFE HARBOUR')}, {'title': Value(literal:'As Seen Through a Mirror')}, {'title': Value(literal:'Hope is Rekindled')}, {'title': Value(literal:'where dwell the brave at heart')}, {'title': Value(literal:'Holiday Means Holiday')}, {'title': Value(literal:'Amaranthine')}, {'title': Value(literal:'Edmund and Ginny Go to Harfang')}, {'title': Value(literal:'A day to forget')}, {'title': Value(literal:'Turning the Page')}, {'title': Value(literal:'The Emerald Pensive')}, {'title': Value(literal:'Bonds & Other Knotty Problems')}, {'title': Value(literal:'You Only Wish Twice')}, {'title': Value(literal:'Smart and Brainy')}, {'title': Value(literal:'Because You Just Shaved Your Face')}, {'title': Value(literal:'The Art of Forgetting')}, {'title': Value(literal:'Avaritia')}, {'title': Value(literal:""A Fire Doesn't Seek a Forest (It Burns it All the Same)"")}, {'title': Value(literal:'Green lights')}, {'title': Value(literal:'Merry Xmas, Harry Potter!')}, {'title': Value(literal:'Dumb Teenagers')}, {'title': Value(literal:'Life and Soul')}, {'title': Value(literal:'Black and Potter')}, {'title': Value(literal:'Be My Valentine')}, {'title': Value(literal:""And You'll Scream My Name Aloud"")}, {'title': Value(literal:'Caught a Ghost')}, {'title': Value(literal:'The Aftermath')}, {'title': Value(literal:'Modification')}, {'title': Value(literal:""Can't Go Back To Yesterday"")}, {'title': Value(literal:'the lone wolf dies')}, {'title': Value(literal:'Blood Is Thicker')}, {'title': Value(literal:'Of Lions, Dogs, and Wolves')}, {'title': Value(literal:'Tom Gaunt and the Scarlet Stone')}, {'title': Value(literal:'Popcorn')}, {'title': Value(literal:""Tradition (Kiss Me, It's New Year's Eve)"")}, {'title': Value(literal:'Hiding from Rejection')}, {'title': Value(literal:'An Auror Christmas')}, {'title': Value(literal:'Walking Round in Womens Underwear')}, {'title': Value(literal:'Master of Puppets')}, {'title': Value(literal:'Giftwrapped')}, {'title': Value(literal:'Love Letters From a Wordsmith')}, {'title': Value(literal:'The Last Dance')}, {'title': Value(literal:'The Scandalmongers')}, {'title': Value(literal:'Pride')}, {'title': Value(literal:'Just a lovely Christmas')}, {'title': Value(literal:'Grand Celebration')}, {'title': Value(literal:'The Quiet Campsite')}, {'title': Value(literal:'Coffee')}, {'title': Value(literal:'Or Perhaps In Slytherin')}, {'title': Value(literal:'Moving In With the Potters')}, {'title': Value(literal:'Surfacing')}, {'title': Value(literal:'Tiny and The Beast')}, {'title': Value(literal:'In This Hour the World is Ending')}, {'title': Value(literal:'(This) Play Between The Sheets')}, {'title': Value(literal:'Ripples, Pangs')}, {'title': Value(literal:""Peter's Human"")}, {'title': Value(literal:'Showing Off')}, {'title': Value(literal:'My Hands (Are Tied)')}, {'title': Value(literal:'Constant Vigilance!')}, {'title': Value(literal:'Consolation Pastry')}, {'title': Value(literal:'Rumours')}, {'title': Value(literal:'Harry J Elric')}, {'title': Value(literal:'Elusive Heart')}, {'title': Value(literal:'Alcove of Amour')}, {'title': Value(literal:'In the Closet')}, {'title': Value(literal:'Big Brother Ted')}, {'title': Value(literal:""The Boy Who Didn't"")}, {'title': Value(literal:'Shameless')}, {'title': Value(literal:'Caught in the Act')}, {'title': Value(literal:'A Splash of Chance')}, {'title': Value(literal:'The Art of comforting a Slytherin')}, {'title': Value(literal:'Charmingly Warm')}, {'title': Value(literal:'Bespoke')}, {'title': Value(literal:'Family Help')}, {'title': Value(literal:""Remus Lupin's Coffee Order"")}, {'title': Value(literal:'warmth')}, {'title': Value(literal:'You Never Forget Your First Time (Even if You Want To)')}, {'title': Value(literal:'Come For Me, Promise')}, {'title': Value(literal:'The Great Lake.')}, {'title': Value(literal:'marriage proposal')}, {'title': Value(literal:'Love denied')}, {'title': Value(literal:'Fools and Kings')}, {'title': Value(literal:'Summer Vacation III: Honeymoon in Japan')}, {'title': Value(literal:'And All the Dead Lie Down (I felt Siroccos Crawl)')}, {'title': Value(literal:'Over (Never Done With)')}, {'title': Value(literal:'Again and Again and Again')}, {'title': Value(literal:'Carnal Insanity')}, {'title': Value(literal:'Time line')}, {'title': Value(literal:'Thinking Out Loud')}, {'title': Value(literal:'this is our (wizarding) song')}, {'title': Value(literal:'Jude Porter and the Next Generation')}, {'title': Value(literal:'Bringing Back the Bastard')}, {'title': Value(literal:'Sirius, Amortentia, and Chocolate')}, {'title': Value(literal:'The Path to Happiness')}, {'title': Value(literal:'The Push')}, {'title': Value(literal:'Our First Christmas')}, {'title': Value(literal:'The Spy Who . . .')}, {'title': Value(literal:'Mission: Destroy Voldemort')}, {'title': Value(literal:'A Trip to Gringotts')}, {'title': Value(literal:'and the sand between my toes')}, {'title': Value(literal:'An Old Friend Returns')}, {'title': Value(literal:'Haunt')}, {'title': Value(literal:'I remember you')}, {'title': Value(literal:'Mirror Images')}, {'title': Value(literal:'Matches in the Snow')}, {'title': Value(literal:'The Gift')}, {'title': Value(literal:'Counting Stars')}, {'title': Value(literal:'Battle Lines')}, {'title': Value(literal:'A Great Deal of Bravery')}, {'title': Value(literal:'A Brand New Light')}, {'title': Value(literal:'Flashes From a Brighter Time')}, {'title': Value(literal:'Harry Potter Image Prompt Drabbles')}, {'title': Value(literal:'A Gothic Christmas Patented Daydream Charm')}, {'title': Value(literal:'Defining Moments')}, {'title': Value(literal:'I Scream, You Scream, We All Scream For Ice Cream')}, {'title': Value(literal:'Seven Times Seven')}, {'title': Value(literal:'Grief')}, {'title': Value(literal:'Snippets From The Weasley/Granger Household')}, {'title': Value(literal:'A Sort of Fairytale')}, {'title': Value(literal:'Eight Months in Stockholm')}, {'title': Value(literal:'A Wedding In Paris')}, {'title': Value(literal:'Lost and Found')}, {'title': Value(literal:'Flight Pattern')}, {'title': Value(literal:'Turn Back the Time')}, {'title': Value(literal:'Frill Frill Dress')}, {'title': Value(literal:'Far Ranging Wizards')}, {'title': Value(literal:'Belated Birthday Blues')}, {'title': Value(literal:'The book of avant-garde')}, {'title': Value(literal:'Ungiven Kisses')}, {'title': Value(literal:'good friends')}, {'title': Value(literal:'Inside Out')}, {'title': Value(literal:'Finding the Key')}, {'title': Value(literal:'Harry finds out he has a Godmother')}, {'title': Value(literal:'Oh, the Cunning')}, {'title': Value(literal:'standing on my own')}, {'title': Value(literal:'All The World Loves a Clown')}, {'title': Value(literal:'Bridezillas')}, {'title': Value(literal:'Threnody for Life')}, {'title': Value(literal:'Off To Witch World')}, {'title': Value(literal:'Noticing the Unnoticed')}, {'title': Value(literal:'A Love Turned Cold')}, {'title': Value(literal:'Where Your Fingerprints Linger')}, {'title': Value(literal:'When The Bubble Bursts')}, {'title': Value(literal:'The Search for the Blithering Humdingers')}, {'title': Value(literal:'Satisfying Their Curiosity')}, {'title': Value(literal:'The Prize')}, {'title': Value(literal:'Muse')}, {'title': Value(literal:""Sometimes It's All to Much"")}, {'title': Value(literal:""When You Go Down to the Woods Today (You're Sure of a Big Surprise)"")}, {'title': Value(literal:'Good Run of Bad Luck')}, {'title': Value(literal:'The Soloist')}, {'title': Value(literal:'Exolvo: Four Houses')}, {'title': Value(literal:""Tell Me It's Not True"")}, {'title': Value(literal:'Weightlifting')}, {'title': Value(literal:'Anonymous Hex')}, {'title': Value(literal:'Kiss Him... Lower')}, {'title': Value(literal:'Lying Josephine')}, {'title': Value(literal:'Mafia Wife')}, {'title': Value(literal:'Never Again')}, {'title': Value(literal:'Stuck between Blood and Claws')}, {'title': Value(literal:'Two Hibaris???')}, {'title': Value(literal:'The Savage')}, {'title': Value(literal:'Running Scared')}, {'title': Value(literal:'Charms is the new black')}, {'title': Value(literal:'Breaking Boundaries')}, {'title': Value(literal:'Cup Half Full')}, {'title': Value(literal:'Caradoc Dearborn and the Worst of Both Worlds')}, {'title': Value(literal:'Almost Getting Caught')}, {'title': Value(literal:'Every September 1st')}, {'title': Value(literal:'Lucky Harry')}, {'title': Value(literal:'A Collection of  Snape/Black Drabbles')}, {'title': Value(literal:'Bad Timing')}, {'title': Value(literal:'The Journey of Life')}, {'title': Value(literal:'Living Together')}, {'title': Value(literal:'Twenty Eight')}, {'title': Value(literal:'Green and Gold: Art Masterpost')}, {'title': Value(literal:'In the Still of the Night')}, {'title': Value(literal:'A Choice Was Made')}, {'title': Value(literal:'She Has Never Been Beautiful.')}, {'title': Value(literal:'Defying What They Know')}, {'title': Value(literal:'That Secret We Never Knew')}, {'title': Value(literal:'The Book')}, {'title': Value(literal:'Fantastic Beasts')}, {'title': Value(literal:'The All-Atlantis Quidditch Tournament')}, {'title': Value(literal:'The Real Him')}, {'title': Value(literal:'DOTM 2: Lunar Love')}, {'title': Value(literal:'Finding a Potter')}, {'title': Value(literal:'Silk Roads')}, {'title': Value(literal:'Letters to Padfoot')}, {'title': Value(literal:'Young Lightning')}, {'title': Value(literal:'Quiet')}, {'title': Value(literal:'An Unwanted Intrusion')}, {'title': Value(literal:'He Matters')}, {'title': Value(literal:'“I’d Rather Change Nappies Than Have My Cock Sucked” and Other Ravings of a Pregnant Wizard')}, {'title': Value(literal:'Gemini')}, {'title': Value(literal:'The Colonies')}, {'title': Value(literal:'The Hidden Life of Steve Rogers')}, {'title': Value(literal:'My Mess')}, {'title': Value(literal:'My Name Is Yasha Romanoff')}, {'title': Value(literal:'Into Forbidden Halls')}, {'title': Value(literal:'We Speak in Flowers')}, {'title': Value(literal:'Severus apparently likes sweets.')}, {'title': Value(literal:'Untitled')}, {'title': Value(literal:'fire lit things')}, {'title': Value(literal:'Banana')}, {'title': Value(literal:'Do Kyungsoo and the Mudblood Muddle')}, {'title': Value(literal:'La Sepiente de oro (the golden snake) *ON HOLD-SORRY*')}, {'title': Value(literal:'Never Long Enough')}, {'title': Value(literal:'Concerning Atlantis')}, {'title': Value(literal:'The Price of Love')}, {'title': Value(literal:'What Are Stars Without a Sky?')}, {'title': Value(literal:'92.5 Years')}, {'title': Value(literal:'Muggleborn Problems - Year One')}, {'title': Value(literal:'No Regrets')}, {'title': Value(literal:'Stroke by Stroke')}, {'title': Value(literal:'Equilibrium')}, {'title': Value(literal:""If you can't succeed the first time around…"")}, {'title': Value(literal:'Mistaken Damsel')}, {'title': Value(literal:""Merlin's Army"")}, {'title': Value(literal:'Tale of The Fruitcake, Harry.')}, {'title': Value(literal:'Whirlpool Flowers')}, {'title': Value(literal:'Recipe For Disaster')}, {'title': Value(literal:'Harry Potter and the Plethora of Drabbles')}, {'title': Value(literal:'Avada Kedavra')}, {'title': Value(literal:'Snakes Bite')}, {'title': Value(literal:""Baby's Breath"")}, {'title': Value(literal:'Happy Birthday to... Me...')}, {'title': Value(literal:'Study Date')}, {'title': Value(literal:'Euphemism is a perfectly good word')}, {'title': Value(literal:'A Single Candle')}, {'title': Value(literal:'Easter Eggs')}, {'title': Value(literal:'Chapter 4: The Sorting')}, {'title': Value(literal:'How Harry Became Reborn')}, {'title': Value(literal:'Harmony')}, {'title': Value(literal:'Of pillocks and sweet kisses')}, {'title': Value(literal:'Trading Up')}, {'title': Value(literal:'Surprisingly Well')}, {'title': Value(literal:'Harry Potter and the Trouble With Neurotypicals')}, {'title': Value(literal:'Accidents Will Happen')}, {'title': Value(literal:'How Harry Became Belphegor')}, {'title': Value(literal:'Cycles Explained')}, {'title': Value(literal:'The Lost Swan')}, {'title': Value(literal:'The Malfoy Identity')}, {'title': Value(literal:'Slow')}, {'title': Value(literal:'Love like an artist')}, {'title': Value(literal:'Define for Me')}, {'title': Value(literal:'Golden Delicious')}, {'title': Value(literal:""Seamus Finnigan is Lucky He's Alive"")}, {'title': Value(literal:'Before the Fall')}, {'title': Value(literal:'Safety')}, {'title': Value(literal:'Foul')}, {'title': Value(literal:'Lavaliere of Pearls')}, {'title': Value(literal:'Inked')}, {'title': Value(literal:'Lumos (Light My Way)')}, {'title': Value(literal:'Kinds of Pain')}, {'title': Value(literal:'Sacrifice')}, {'title': Value(literal:'Life Lessons')}, {'title': Value(literal:'Seeing You, Seeing Me')}, {'title': Value(literal:'Toy Frogs & Pale Blue Hats')}, {'title': Value(literal:'Remember This Walk')}, {'title': Value(literal:'A Perfect Christmas Surprise')}, {'title': Value(literal:'The Harder Struggle')}, {'title': Value(literal:'Hello My Old Heart')}, {'title': Value(literal:'Shell Cottage Chrysalis')}, {'title': Value(literal:'Charlotte the Great and Powerful')}, {'title': Value(literal:'Call Me Maybe')}, {'title': Value(literal:'Decisions That Matter')}, {'title': Value(literal:""When You Can't Sleep At Night"")}, {'title': Value(literal:""The Umbrella's Umbrella"")}, {'title': Value(literal:'The Claw')}, {'title': Value(literal:'How Harry Became Hibari')}, {'title': Value(literal:'The Brightest Witch of her Age')}, {'title': Value(literal:'A Beach Wedding')}, {'title': Value(literal:'Like You Mean It')}, {'title': Value(literal:'Blush')}, {'title': Value(literal:'Dumbledore, Please Explain Your Twisted Logic!')}, {'title': Value(literal:'Oh Rock And Roll')}, {'title': Value(literal:'Little Cuts')}, {'title': Value(literal:'Ynys Afal: The Island of Apples')}, {'title': Value(literal:'HP & BtVS one shots')}, {'title': Value(literal:'Friends & Enemies')}, {'title': Value(literal:'Shooting Stars and Satellites')}, {'title': Value(literal:'Harry Potter and the Spies In Training')}, {'title': Value(literal:'Sins of the Parent')}, {'title': Value(literal:'Giant')}, {'title': Value(literal:'Lithium')}, {'title': Value(literal:'Glory Seeker')}, {'title': Value(literal:'Sex on Legs in Six-Inch Heels [podfic]')}, {'title': Value(literal:'What if we were Dragons')}, {'title': Value(literal:'His Last Defence')}, {'title': Value(literal:'Saving Draco')}, {'title': Value(literal:""The Portkey Prank of '76"")}, {'title': Value(literal:'On the Subject of Grief')}, {'title': Value(literal:'We Could Do it You Know')}, {'title': Value(literal:'A Modern Boy of Beauty')}, {'title': Value(literal:'Fathoms')}, {'title': Value(literal:'Sweet Zoe Jane')}, {'title': Value(literal:'Library Ballrooms')}, {'title': Value(literal:'Runaway')}, {'title': Value(literal:'The Glass House')}, {'title': Value(literal:'What He Requires')}, {'title': Value(literal:'Riddikulus')}, {'title': Value(literal:'A Kiss by the Fireplace')}, {'title': Value(literal:'Muffliato')}, {'title': Value(literal:""You're So Sparkly, Husband"")}, {'title': Value(literal:'Renaissance')}, {'title': Value(literal:'Eternal Wizard, Lady Warrior')}, {'title': Value(literal:'Once More')}, {'title': Value(literal:'Bad Woman to Keep')}, {'title': Value(literal:'The Winter of My Content')}, {'title': Value(literal:'""People Read Palms to Tell Your Future, But I Read Hands to Tell Your Past""')}, {'title': Value(literal:'Stealing Kisses')}, {'title': Value(literal:'consummation')}, {'title': Value(literal:'Gilbert Prewett')}, {'title': Value(literal:'Walk a mile in these pants')}, {'title': Value(literal:'The Slow Reveal')}, {'title': Value(literal:'Promise Me')}, {'title': Value(literal:'A Poetic Collection')}, {'title': Value(literal:'O Heartless Man (Your Heart Shall Soon be Mine)')}, {'title': Value(literal:'Nobody will know')}, {'title': Value(literal:""for saints have hands that pilgrims' hands do touch"")}, {'title': Value(literal:'Mud and Moonbeams')}, {'title': Value(literal:'The Dog and the Prince')}, {'title': Value(literal:'Life of a Conquering Alpha')}, {'title': Value(literal:'Stupid Potter')}, {'title': Value(literal:'Specialis Revelio (because we both know the past is never past)')}, {'title': Value(literal:'An Ugly Man')}, {'title': Value(literal:'Self-Defense with Slytherins')}, {'title': Value(literal:'His colours')}, {'title': Value(literal:'Beyond The Realms')}, {'title': Value(literal:'Despite this He Loved Her')}, {'title': Value(literal:""This Isn't Even My Final Form"")}, {'title': Value(literal:'What happens when a potter falls in love with a Malfoy')}, {'title': Value(literal:'Beneath His Feet, Beneath The Moon')}, {'title': Value(literal:'Albus Potter and the Next Generation')}, {'title': Value(literal:""You're All I Need (All I Can Taste)"")}, {'title': Value(literal:'The Truth May Not Set You Free (but I Sure as Hell Will)')}, {'title': Value(literal:'United Darkness book 1')}, {'title': Value(literal:'Secrets')}, {'title': Value(literal:'Colligo')}, {'title': Value(literal:'Once a Malfoy')}, {'title': Value(literal:'Go karts and Broomsticks')}, {'title': Value(literal:'Slithering Secret')}, {'title': Value(literal:'A Trio of Slytherins')}, {'title': Value(literal:'Hug Me')}, {'title': Value(literal:'The Wizard Next Door')}, {'title': Value(literal:'A Certain Disregard For The Rules')}, {'title': Value(literal:'little shadows')}, {'title': Value(literal:'Brother of The One-Winged Angel')}, {'title': Value(literal:'The Scars That Heal with Time')}, {'title': Value(literal:'Bite Your Tongue')}, {'title': Value(literal:'AdventDrabbles 2008')}, {'title': Value(literal:'An Abundance of Unanticipated Pairings')}, {'title': Value(literal:'The Pale Crocodile')}, {'title': Value(literal:'Hufflepuffs Are Awesome')}, {'title': Value(literal:""Mother's Pryde"")}, {'title': Value(literal:'Whose? (Drabble)')}, {'title': Value(literal:""It's not my friends who are scum."")}, {'title': Value(literal:'The Bravest Man I Ever Knew')}, {'title': Value(literal:""The Fox in Lion's Clothing"")}, {'title': Value(literal:'Albus Dumbledore / Gellert Grindelwald oneshot collection')}, {'title': Value(literal:'Ten for Seven')}, {'title': Value(literal:'The Company of Wolves')}, {'title': Value(literal:'Cast the Little Prince')}, {'title': Value(literal:""Slytherin's Heir - Book 1"")}, {'title': Value(literal:'Going on alone')}, {'title': Value(literal:'Lightning Crashes')}, {'title': Value(literal:'The Choice')}, {'title': Value(literal:'Alis Libertatis - On the Wings of Magic')}, {'title': Value(literal:'Hallway Secrets')}, {'title': Value(literal:'Silver Eyes and Silver Burns')}, {'title': Value(literal:'Deep Dark')}, {'title': Value(literal:'Bully')}, {'title': Value(literal:""your eyes must'nt glow (like mine)"")}, {'title': Value(literal:""Severus Snape's Good Mood"")}, {'title': Value(literal:'1989')}, {'title': Value(literal:'Ghosts in the Attic')}, {'title': Value(literal:'Sharing A Coke')}, {'title': Value(literal:'The Inter-House League of Muggle-born Witches (and One Wizard)')}, {'title': Value(literal:'It Started Out as a Prank')}, {'title': Value(literal:'Burning Gold')}, {'title': Value(literal:'Sacrifices and the Choices We Make')}, {'title': Value(literal:'Salty Sweet')}, {'title': Value(literal:'Clairvoyant Vibrations')}, {'title': Value(literal:'Innocence')}, {'title': Value(literal:'The Fine Old Truth')}, {'title': Value(literal:'A Wizard Road Trip... The Muggle Way')}, {'title': Value(literal:'Every New Beginning, or, Five For Lupin.')}, {'title': Value(literal:'The Apple Tree')}, {'title': Value(literal:'A World of Challenges')}, {'title': Value(literal:'I do not complain...')}, {'title': Value(literal:'Harry Potter - Event/Character-Based Poems')}, {'title': Value(literal:""We'll Make Them Pay For The Things That They Did"")}, {'title': Value(literal:'Discover and Analyze Where My Truth Lies')}, {'title': Value(literal:'The Secrets of Time')}, {'title': Value(literal:'The Godfather')}, {'title': Value(literal:""Lupin's Secret"")}, {'title': Value(literal:'Better')}, {'title': Value(literal:'Stepping through the veil')}, {'title': Value(literal:""Lightning Dragon's Roar."")}, {'title': Value(literal:'How It Should Be')}, {'title': Value(literal:'Incendio')}, {'title': Value(literal:'The Difference Between Medicine and Poison is in the Dose')}, {'title': Value(literal:'Electric Love')}, {'title': Value(literal:'""Charms, by a Charming Witch""')}, {'title': Value(literal:'Just My Cursed Luck!')}, {'title': Value(literal:'Weeding the Garden')}, {'title': Value(literal:'Born for the Slaughter')}, {'title': Value(literal:'The Story of Two Unlikely Ravenclaws')}, {'title': Value(literal:'Branching Out')}, {'title': Value(literal:'Adrenaline and Instinct')}, {'title': Value(literal:""Fred Weasley's Last Gift"")}, {'title': Value(literal:'___________- ADJ. Potential, Origin: Greek')}, {'title': Value(literal:'Firewhiskey')}, {'title': Value(literal:'First Steps')}, {'title': Value(literal:'Dictionary of Losses')}, {'title': Value(literal:'Melt My Heart to Stone (Please)')}, {'title': Value(literal:'Confessions')}, {'title': Value(literal:'Wheel of Destiny')}, {'title': Value(literal:'Monsters')}, {'title': Value(literal:'Before 19 Years')}, {'title': Value(literal:'Where Your Loyalties Lie')}, {'title': Value(literal:'The Malfoy Letters')}, {'title': Value(literal:'You Wormed Your Way into My Heart')}, {'title': Value(literal:'By the Lakeshore')}, {'title': Value(literal:'His Hidden Heart')}, {'title': Value(literal:'Broom Cupboard Encounters')}, {'title': Value(literal:'King')}, {'title': Value(literal:'Songs of the Heart and Mind')}, {'title': Value(literal:'Inside and Out')}, {'title': Value(literal:'Option C/A Matter of Taste')}, {'title': Value(literal:'Incandescence')}, {'title': Value(literal:'The Many Faces of Har--er, Adira Potter')}, {'title': Value(literal:'A Darker Mark')}, {'title': Value(literal:'The Inbred Problem')}, {'title': Value(literal:'Awesome')}, {'title': Value(literal:'goodbyes & beginnings')}, {'title': Value(literal:'this is the story of zacharias smith')}, {'title': Value(literal:'All Work and No Play')}, {'title': Value(literal:'Summer Projects')}, {'title': Value(literal:'A Big Happy Weasley Family')}, {'title': Value(literal:'Dance For Me')}, {'title': Value(literal:'Do the Stars Gaze Back?')}, {'title': Value(literal:'the history books forgot you')}, {'title': Value(literal:""146 Raven's Lane (by the cul-de-sac)"")}, {'title': Value(literal:'Children of the Moon')}, {'title': Value(literal:""Alpha's mate"")}, {'title': Value(literal:'Seascape')}, {'title': Value(literal:'Riddles')}, {'title': Value(literal:'Lovers')}, {'title': Value(literal:'Professor Malfoy')}, {'title': Value(literal:'Letting Go')}, {'title': Value(literal:'Do We Have a Deal?')}, {'title': Value(literal:'How I Killed My Lover')}, {'title': Value(literal:'Embrace the Night')}, {'title': Value(literal:'The Lesson')}, {'title': Value(literal:'Head Boy')}, {'title': Value(literal:'Remember and Forget')}, {'title': Value(literal:'Begin Again')}, {'title': Value(literal:'Something unexpected')}, {'title': Value(literal:'late-night politics')}, {'title': Value(literal:'Green Fingered')}, {'title': Value(literal:'I never said I was perfect')}, {'title': Value(literal:'Not Normal')}, {'title': Value(literal:'We Accept the Love We Think We Deserve')}, {'title': Value(literal:'Growing up Goyle')}, {'title': Value(literal:'See Me')}, {'title': Value(literal:'understanding')}, {'title': Value(literal:'The Love of Albus Dumbledore')}, {'title': Value(literal:'Word is All Around')}, {'title': Value(literal:'Sown in Seeds of Discontent')}, {'title': Value(literal:'Friendship')}, {'"	0	1	1	Annotation error		
47	47	en	What are the keywords of That Secret We Never Knew?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""That Secret We Never Knew"" . ?story golem:keyword ?keyword . }"	"[{'keywords': Value(literal:""'Alter Ego', Alternate Universe - Non-Magical, BAMF!Draco, BAMF!Hermione, Defeater, Draco has issues from his past, Draco has tattoos, Draco is in a band, Hardcore!Draco, Harry's waaay too curious, Hermione knows, Knuckle Puck, Like La Dispute, Punk!Draco, References to numerous bands, She always did, Social Constructs are Similar to Canon, and piercings"")}]"	47	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is keyword Remus/Grant a given keyword in Secret Love?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""Secret Love"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""Remus/Grant"") . }
    </SPARQL>

    ###
    

    Question: What are the keywords of It never entered my mind?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""It never entered my mind"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: What is the average word length of Tom Riddle and the Chamber of Secrets he never got to see?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""Tom Riddle and the Chamber of Secrets he never got to see"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

Question: What are the keywords of That Secret We Never Knew?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?keyword WHERE { 
    ?story golem:title ""That Secret We Never Knew"" . 
    ?story golem:keyword ?keyword . 
}
"	"[{'keyword': Value(literal:'Alternate Universe - Non-Magical')}, {'keyword': Value(literal:'BAMF!Draco')}, {'keyword': Value(literal:'and piercings')}, {'keyword': Value(literal:'Hermione knows')}, {'keyword': Value(literal:'BAMF!Hermione')}, {'keyword': Value(literal:'Draco is in a band')}, {'keyword': Value(literal:""'Alter Ego'"")}, {'keyword': Value(literal:'Defeater')}, {'keyword': Value(literal:'Draco has issues from his past')}, {'keyword': Value(literal:'Draco has tattoos')}, {'keyword': Value(literal:'Hardcore!Draco')}, {'keyword': Value(literal:""Harry's waaay too curious"")}, {'keyword': Value(literal:'Knuckle Puck')}, {'keyword': Value(literal:'Like La Dispute')}, {'keyword': Value(literal:'Punk!Draco')}, {'keyword': Value(literal:'References to numerous bands')}, {'keyword': Value(literal:'She always did')}, {'keyword': Value(literal:'Social Constructs are Similar to Canon')}]"	0	1	1	Evaluation method error	Non-grouped	
48	48	en	What are the keywords of Davina Claire and the Mikaelson wizard?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Davina Claire and the Mikaelson wizard"" . ?story golem:keyword ?keyword . }"	[{'keywords': Value(literal:'Alternate Universe - Hogwarts')}]	48	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who is the author of Lily's Masquerade?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Lily's Masquerade"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who wrote Harry Potter and the Rose's Thorns?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Harry Potter and the Rose's Thorns"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: What is the MSTTR of Draco Dormiens?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?msttr  WHERE { ?story golem:title ""Draco Dormiens"" . ?story golem:MSTTR ?msttr . }
    </SPARQL>

    ###
    

Question: What are the keywords of Davina Claire and the Mikaelson wizard?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?keyword WHERE { 
  ?story golem:title ""Davina Claire and the Mikaelson wizard"" . 
  ?story golem:keyword ?keyword . 
}
"	[{'keyword': Value(literal:'Alternate Universe - Hogwarts')}]	0	1	1	Evaluation method error	Different var name	
49	49	en	What are the keywords of Surviving Together?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Surviving Together"" . ?story golem:keyword ?keyword . }"	"[{'keywords': Value(literal:""Angst, Drabble, Femslash, Fix-It, Fluff and Smut, How Do I Tag, Hurt/Comfort, Lots of firsts here, MORE than originally intended, Marlene McKinnon Lives, More Fluff Than Originally Intended, My First AO3 Post, My first Multi-chapter fic, Nightmares, No Beta We Die Like Alderman, Not Beta Read, Post-First War with Voldemort, Post-Traumatic Stress Disorder - PTSD, Rare Pairings, Shameless Smut, Tags May Change, hearth's a BAMF, i wanted these boys to hug a lot so i wrote it, just some soft boys in the Arena, lots of hand holding and much confusion, occasional Fluff but come on it's the Games, several OCs - Freeform, stick around for the ride"")}]"	49	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What stories is Mutual Pining - Character featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Mutual Pining - Character"" . }
    </SPARQL>

    ###
    

    Question: What are the keywords of All was right?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""All was right"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: What are the keywords of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: What are the keywords of Surviving Together?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE { 
?story golem:title ""Surviving Together"" . 
?story golem:keyword ?keyword . }
"	"[{'keywords': Value(literal:""Angst, Drabble, Femslash, Fix-It, Fluff and Smut, How Do I Tag, Hurt/Comfort, Lots of firsts here, MORE than originally intended, Marlene McKinnon Lives, More Fluff Than Originally Intended, My First AO3 Post, My first Multi-chapter fic, Nightmares, No Beta We Die Like Alderman, Not Beta Read, Post-First War with Voldemort, Post-Traumatic Stress Disorder - PTSD, Rare Pairings, Shameless Smut, Tags May Change, hearth's a BAMF, i wanted these boys to hug a lot so i wrote it, just some soft boys in the Arena, lots of hand holding and much confusion, occasional Fluff but come on it's the Games, several OCs - Freeform, stick around for the ride"")}]"	1	0	0			
50	50	en	What are the keywords of Doll Parts?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Doll Parts"" . ?story golem:keyword ?keyword . }"	"[{'keywords': Value(literal:""(I mean.... not really but...), 1x10, AU of an AU of an AU, Alcohol Abuse/Alcoholism, Alpha Jeon Jungkook, Alpha Jung Hoseok, Alpha Kim Namjoon, Alpha Kim Taehyung, Alpha/Omega/Beta Dynamics, Alternate Canon, Alternate Ending, Alternate Universe, Alternate Universe - Fashion & Models, Anal Fingering, Anal Sex, Angst, Angst and Hurt/Comfort, Apocalypse, Blood, Blood and Gore, Bottom Gerard Way, Character Death, Cheating, Choking, Cousin Incest, Creepy, Cross-Posted on Wattpad, Crossover, Cuddling, Curses, Cyberware/plastic surgery addiction, Daddy Kink, Dildos, Dirty Talk, Dolls, Drug Use, Drugs, Dry Sex, Dubious Consent, Enemies to Friends to Lovers, Established Relationship, Everyone Needs A Hug, Explicit Sexual Content, Feminization, First Love, Fluff and Angst, Frerard, Future Fic, GONE GIRL AU, Gay, Heartbreak, Heavy Angst, Horror, Hurt No Comfort, Implied/Referenced Cheating, Implied/Referenced Drug Addiction, Implied/Referenced Underage, Impostor Syndrome, Infidelity, JJ Needs a Hug (Outer Banks), JJ and Izzy are whipped for each other, Jennifer's body au, Judgment Day, Knotting, Lingerie, Loss of Virginity, Male Pregnancy, Manipulative Relationship, Medical Procedures, Mild Gore, Mildly Dubious Consent, Mindfuck, Minor Character Death, Minor charactor deaths, Morally Ambiguous Character, Mpreg, Multifandomish, Murder, Murder Husbands, Omega Kim Seokjin, Omega Min Yoongi, Omega Park Jimin, Omegaverse, On and off pairings, One Shot, PWP, Parallel Universes, Plot Twists, Poly Relationships, Polygamy, Post-Order of the Phoenix, Pre-Canon, Prostitution, Protective JJ (Outer Banks), Psychological Horror, Purgatory, Rough Sex, Sad and Happy, Self Harm, Self Loathing, Sex Doll, Sex Education, Sex Toys, Sexism, Smut, Song: Doll Parts (Hole), Songfic, Spanking, Suicidal Thoughts, Tea, Tony Stark Has Issues, Top Frank Iero, Uncanny Valley, Unconditional Love, Underage Drinking, Unhappy Ending, Unmating, Unreliable Narrator, Unrequited Love, Vague descriptions of violence, Violence, War Child, Written Pre-Half Blood Prince, Young Tom Riddle, break ups, cross dressing, cross-dressing, cute moments, drunk driving (only once), graphic image and words, indirect mentions of suicide, it's obx what else do we expect, kind of, lots and lots of drama, nothing too gory i prommy, on going, shifting, the ending will probably hurt you, the pina colada song but make it demented, they do a lot of stupid shit, what if elizabeth schuyler but make it patrick bateman, when courtney said Someday You Will Ache Like I Ache"")}]"	50	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What are the keywords of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: What collections is ' THE GIRL WHO LIVED ' part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""' THE GIRL WHO LIVED '"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as [[keyword]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""[[keyword]]"" . }
    </SPARQL>

    ###
    

Question: What are the keywords of Doll Parts?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE { 
?story golem:title ""Doll Parts"" . 
?story golem:keyword ?keyword . 
}
"	"[{'keywords': Value(literal:""(I mean.... not really but...), 1x10, AU of an AU of an AU, Alcohol Abuse/Alcoholism, Alpha Jeon Jungkook, Alpha Jung Hoseok, Alpha Kim Namjoon, Alpha Kim Taehyung, Alpha/Omega/Beta Dynamics, Alternate Canon, Alternate Ending, Alternate Universe, Alternate Universe - Fashion & Models, Anal Fingering, Anal Sex, Angst, Angst and Hurt/Comfort, Apocalypse, Blood, Blood and Gore, Bottom Gerard Way, Character Death, Cheating, Choking, Cousin Incest, Creepy, Cross-Posted on Wattpad, Crossover, Cuddling, Curses, Cyberware/plastic surgery addiction, Daddy Kink, Dildos, Dirty Talk, Dolls, Drug Use, Drugs, Dry Sex, Dubious Consent, Enemies to Friends to Lovers, Established Relationship, Everyone Needs A Hug, Explicit Sexual Content, Feminization, First Love, Fluff and Angst, Frerard, Future Fic, GONE GIRL AU, Gay, Heartbreak, Heavy Angst, Horror, Hurt No Comfort, Implied/Referenced Cheating, Implied/Referenced Drug Addiction, Implied/Referenced Underage, Impostor Syndrome, Infidelity, JJ Needs a Hug (Outer Banks), JJ and Izzy are whipped for each other, Jennifer's body au, Judgment Day, Knotting, Lingerie, Loss of Virginity, Male Pregnancy, Manipulative Relationship, Medical Procedures, Mild Gore, Mildly Dubious Consent, Mindfuck, Minor Character Death, Minor charactor deaths, Morally Ambiguous Character, Mpreg, Multifandomish, Murder, Murder Husbands, Omega Kim Seokjin, Omega Min Yoongi, Omega Park Jimin, Omegaverse, On and off pairings, One Shot, PWP, Parallel Universes, Plot Twists, Poly Relationships, Polygamy, Post-Order of the Phoenix, Pre-Canon, Prostitution, Protective JJ (Outer Banks), Psychological Horror, Purgatory, Rough Sex, Sad and Happy, Self Harm, Self Loathing, Sex Doll, Sex Education, Sex Toys, Sexism, Smut, Song: Doll Parts (Hole), Songfic, Spanking, Suicidal Thoughts, Tea, Tony Stark Has Issues, Top Frank Iero, Uncanny Valley, Unconditional Love, Underage Drinking, Unhappy Ending, Unmating, Unreliable Narrator, Unrequited Love, Vague descriptions of violence, Violence, War Child, Written Pre-Half Blood Prince, Young Tom Riddle, break ups, cross dressing, cross-dressing, cute moments, drunk driving (only once), graphic image and words, indirect mentions of suicide, it's obx what else do we expect, kind of, lots and lots of drama, nothing too gory i prommy, on going, shifting, the ending will probably hurt you, the pina colada song but make it demented, they do a lot of stupid shit, what if elizabeth schuyler but make it patrick bateman, when courtney said Someday You Will Ache Like I Ache"")}]"	1	0	0			
51	51	en	What are the keywords of Late Bloomer?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Late Bloomer"" . ?story golem:keyword ?keyword . }"	"[{'keywords': Value(literal:'(16-year-olds having sex), 1x04, 80s setting, A Twist Of Fate, A look into the past, A/B/O, ABO, ABO dynamics, About 15, Abusive Parents, Adult Ciel Phantomhive, Age of Consent, Aged-Up Character(s), Aged-Up Otabek Altin, Aged-Up Yuri Plisetsky, Alcohol Abuse/Alcoholism, Alien Biology, Alpha Arthit, Alpha Bakugou Katsuki, Alpha Bang Chan, Alpha Castiel, Alpha Chittaphon Leechaiyapornkul | Ten, Alpha Craig Tucker, Alpha Grace, Alpha Harry, Alpha Hatake Kakashi, Alpha Hwang Hyunjin, Alpha Jason, Alpha Jeon Jungkook, Alpha John, Alpha Kakyoin, Alpha Kambe Daisuke, Alpha Kara Danvers, Alpha Katsuki Yuuri, Alpha Kim Taehyung | V, Alpha Raiden Ei, Alpha Sam, Alpha Seo Changbin, Alpha Sephiroth (Compilation of FFVII), Alpha Stan Marsh, Alpha Tony Stark, Alpha Victor Nikiforov, Alpha Wade, Alpha!Ichimatsu, Alpha/Beta, Alpha/Beta/Omega Dynamics, Alpha/Omega, Alternate Universe, Alternate Universe - Canon, Alternate Universe - Canon Divergence, Alternate Universe - Celebrity, Alternate Universe - Coffee Shops & Cafés, Alternate Universe - College/University, Alternate Universe - Creatures & Monsters, Alternate Universe - Happy, Alternate Universe - High School, Alternate Universe - Human, Alternate Universe - Modern Setting, Alternate Universe - No Quirks (My Hero Academia), Alternate Universe - Soulmates, Alternate Universe - Teenagers, Alternate Universe - Werewolf, Ambiguous/Open Ending, Amity Park - Freeform, Anal Fingering, Anal Sex, Angst, Angst and Feels, Angst and Porn, Angst with a Happy Ending, Anxiety, Armpit Kink, Asexual Character, Asexuality, Attempt at Humor, Attempted Rape/Non-Con, Autistic Hatsume Mei, Awkward Romance, Awkward Sex Talk, Awkward Tension, Baby Bruce is my weakness, Baby Gay Patrick Brewer, Background Jonathan Byers, Background Steve Harrington, Backstory, Bad Boys, BakuDeku Week 2018, Bakugou Katsuki Swears A Lot, Bakugou Katsuki is a Good Cook, Bang Chan is So Done (Stray Kids), Because they\'re assholes, Begging, Best Friends, Beta Kim Seungmin, Beta Kunikida Doppo, Beta Lee Felix (Stray Kids), Beta Lee Minho | Lee Know, Beta Yang Jeongin | I.N, Beta/Beta, Beta/Omega, Biology, Bisexual Male Character, Bisexual Nancy Wheeler, Bisexual TommyInnit (Video Blogging RPF), Biting, Blood, Blow Jobs, Body Horror, Body Worship, Bonding, Bottom Dean, Bottom Jung Hoseok | J-Hope, Bottom Midoriya Izuku, Bottom Son Goku (Dragon Ball), Boys In Love, Boys Kissing, Breathplay, Breeding Kink, Brief MPreg, Brotherly Love, Brothers, Bullied Midoriya Izuku, Bullies, Bullying, But on the other hand his parents are awesome and not dead, By an Extra, Canon Compliant, Canon Lesbian Character, Canon Queer Character of Color, Canon-Typical Violence, Caught, Character\'s Name Spelled as Viktor, Child Neglect, Childhood, Childhood Memories, Claiming Bites, Closeted Character, Clothed Sex, College Student Castiel, College Student Sam, Come Eating, Comfort, Coming Out, Coming of Age, Community: daily_deviant, Community: glee_kink_meme, Complicated Relationships, Consent, Cooking, Corporal Punishment, Couch Sex, Crack, Crossdressing, Crushes, Cuddling & Snuggling, Cussing, Cute, Cute Midoriya Izuku, DannyMay 2020 (Danny Phantom), David Rose Loves Patrick Brewer, David Rose is a Good Person, David Rose is a troll, Declarations Of Love, Demisexual Bakugou Katsuki, Demisexual Character, Demisexual Fred Weasley, Demisexuality, Desi Character, Dildos, Dirty Talk, Dom/sub, Domestic, Domestic Fluff, Dominance, Drabble, Drabble Collection, Drabble Sequence, Drama, Dry Humping, Dubious Consent, Dynamic confusion, Dysfunctional Family, Dysfunctional Relationships, Earthbending & Earthbenders, Eimiko - Freeform, Emotional Baggage, Emotional Hurt/Comfort, Enemies to Lovers, Enthusiastic Consent, Epilogue added, Episode continuation, Erik\'s life sucks a lot, Established Relationship, Eventual Fluff, Eventual Romance, Eventual Sex, Eventual Smut, Excessive Wetness, Explicit Consent, Explicit Sexual Content, Extremely Dubious Consent, FWP, Fainting, Falling In Love, Family Drama, Family Fluff, Family Secrets, Father-Son Relationship, Female My Unit | Byleth, Feminization, Feral Behavior, Finger Sucking, First Dates, First Kiss, First Love, First Meetings, First Rut, First Time, First Time Blow Jobs, Fledglings, Flower Symbolism, Flowers, Fluff, Fluff and Angst, Fluff and Crack, Fluff and Humor, Fluff and Hurt/Comfort, Fluff and Smut, Fluffy Ending, Food, Forced Bonding, Fred Weasley Lives, Fred and George have ADHD, Friends to Lovers, Frottage, Fuck Or Die, Galaxy Garrison, Gay Awakening, Gay Fred Weasley, Gay Panic, Gay Sex, Genius Midoriya Izuku, Gentle Sex, Getting Together, Goes from 0 to 100 real quick, Going to Hell, Gore, Gratuitous Smut, Growing Up, Growth, Growth Spirt, Gym Sex, HIV/AIDS Crisis, Halloween, Halloween Costumes, Hanahaki Disease, Hand Job, Hand Jobs, Happy Ending, Hatsume Mei Has ADHD, Heavy Petting, High School, High School Student Dean, Holding Hands, Horny Teenagers, Hot Springs & Onsen, Hugs, Humilation, Humor, Hurt, Hurt No Comfort, Hurt/Comfort, Hurts So Good, I Wrote This Instead of Sleeping, I think that\'s all the warnings?, Idiots in Love, Iida Tensei is the Best Brother, Iida Tensei went to UA with Aizawa and Mic, Implied Mpreg, Implied Sexual Content, Implied/Referenced Child Abuse, Implied/Referenced Self-Harm, Impregnation, Impregnation Kink, Indian Character, Insecurity, Inspired by Stranger Things (TV 2016), Intercrural Sex, Internal Conflict, Internalized Homophobia, It all got serious by accident, Izuku is a late bloomer, Jagoras, Japanese Culture, Jealously, Jealousy, Just gals being pals, Kaer Morhen, Kerberos Mission, Kissing, Knotting, Knotting Dildos, KongArt Week 2021 (SOTUS), Kotatsu, Krypton, Kryptonian Biology, Kryptonian Culture & Customs, LGBTQ Themes, Lactation Kink, Lambert likes warmth, Larry Stylinson Is Real, Late Bloomer, Late Bloomer Byleth, Lesbian Character, Lesbian Disaster Robin Buckley, Levi with Piercings & Glasses, Light Angst, Light Bondage, Light Dom/sub, Loss of Virginity, Love Confessions, Making Out, Male Periods, Marking, Married Couple, Masturbation, Masturbation in Shower, Mates, Mating Bites, Mating Cycles/In Heat, Menstruation, Mental Health Issues, Mentions of past abusive relationships, Mentor Nedzu (My Hero Academia), Merry Month of Masturbation Challenge, Middle School, Midoriya Izuku Does Not Go to U.A. High School, Midoriya Izuku Does Not Have One for All Quirk, Midoriya Izuku is a Dork, Midoriya Izuku is a Nerd, Midoriya Izuku is a Ray of Sunshine, Might be OOC, Mild Hurt/Comfort, Mild Smut, Minor Alcohol/Drug Reference, Minor Angeal Hewley/Genesis Rhapsodos, Minor Rufus Shinra/Tseng, Minor Zack Fair/Aerith Gainsborough, Minor mentions of Leslie Kyle and Don Corneo, Missing Scene, Mostly Fluff, Mpreg, Multiple Pairings, Mutant Registration, Mutant Rights, Mutual Masturbation, Mutual Pining, NOT OMEGAVERSE, Nakamaship, Nervous Midoriya Izuku, Nesting, No bottom surgery trans male, No mpreg, No penetration, Non-Consensual Voyeurism, Non-Graphic Smut, Non-Linear Narrative, Non-Penetrative Sex, Non-Sexual Submission, Non-Traditional Alpha/Beta/Omega Dynamics, Not Actually Unrequited Love, Not Beta Read, OHFAT, OT7, Obsession, Oh they are both 18, Old Friends, Old Midoriya, Olicity Hiatus Fic-A-Thon, Omega Cloud Strife, Omega Dani, Omega Dazai Osamu (Bungou Stray Dogs), Omega Dean, Omega Han Jisung | Han, Omega Jeon Jungkook, Omega Jotaro, Omega Jung Hoseok | J-Hope, Omega Katou Haru, Omega Kongpob, Omega Kyle Broflovski, Omega Lena Luthor, Omega Louis, Omega Midoriya Izuku, Omega Might Guy, Omega Min Yoongi | Suga, Omega Peter Parker, Omega Sherlock, Omega Stan Marsh, Omega Verse, Omega Yuri Plisetsky, Omega!Genos, Omegaverse, One Shot, One-Sided Attraction, Oral Sex, Originally Posted Elsewhere, Other Additional Tags to Be Added, POV Castiel, POV First Person, POV Kirishima Eijirou, POV Saeki Sayaka, POV Second Person, POV Third Person Limited, POV flips between Saitama and Genos, PWP, Pack Bonding, Pack Dynamics, Parental Aizawa Shouta | Eraserhead, Parental Yagi Toshinori | All Might, Past Tense, Patrick Brewer is Gay, Patrick Brewer loves David Rose, Period-Typical Homophobia, Pet Play, Pining, Play Fighting, Plot What Plot/Porn Without Plot, Polyamorous Pack, Polyamory, Polyamory - F/F/F, Polyamory Negotiations, Porn, Porn With Plot, Porn With Very Little Plot, Porn with Feelings, Possessive Behavior, Possessive Kim Taehyung | V, Post top surgery trans male, Post-Canon, Post-Episode: s05e05 Housewarming, Post-Kerberos Mission, Power Play, Praise Kink, Pre-Canon, Pre-Kerberos Mission, Pre-Relationship, Pregnancy Kink, Proms and other high-school cliches, Prostate Massage, Protective Bakugou Katsuki, Protective Class 1-A (My Hero Academia), Protective Dick Grayson, Protective Hyungs, Protective Jason, Protective Siblings, Protective Wilbur Soot, Protectiveness, Psychological Trauma, Puberty, Public Blow Jobs, Punishment, Python - Freeform, Queer Friendly, Queer Themes, Quirk Discrimination (My Hero Academia), Quirkless Reader (My Hero Academia), Reader Has a Quirk (My Hero Academia), Reader is AFAB - Freeform, Reader is an Omega but they think theyre a Beta, Reader-Insert, Real Life, Recreational Drug Use, References to Knotting, Reunions, Rimming, Romance, Rough Sex, Rutting, SPOILERS BEECH GET OUTTA HERE IF U DONT WANT THIS, Scent Kink, Scent Marking, Scenting, Scents & Smells, Science Fiction, Season/Series 07, Sebatian POV, Secretly a Virgin, Secrets, Self-Esteem Issues, Self-Lubrication, Self-cest, Semi-Public Sex, Sex, Sex Toys, Sexting, Sexual Content, Sexual Experimentation, Sexual Fantasy, Sexual Frustration, Sexual Roleplay, Sexual Tension, Shady government agencies and other comic cliches, Shameless Smut, Sharing a Bed, Shinsou Hitoshi is in Class 1-A, Sibling Incest, Sibling Rivalry, Sickfic, Sisterly bonding, Size Kink, Slash, Slice of Life, Slow Burn, Small Towns, Smut, Sneaking Out, Soft Bakugou Katsuki, Soft Eskel (The Witcher), Soul Bond, Soulmarks, Spanking, Spoilers, Spooning, Squirting, Stargazing, Sticky Sex, Strangers to Lovers, Strap-Ons, Students, Subdrop, Submission, Submissive Midoriya Izuku, Subspace, Suicide, TPE, Tags May Change, Tails, Teacher-Student Relationship, Teasing, Teen Angst, Teen Romance, This can be read as, This was stupid self indulgent, Timeskips, Todoroki (My Hero Academia) Family Drama, Todoroki Enji | Endeavor\'s Bad Parenting, Todoroki Shouto is Bad at Feelings, Todoroki Shouto is a Dork, Todoroki but he never really worked through his daddy issues, TommyInnit Needs a Hug (Video Blogging RPF), TommyInnit-centric (Video Blogging RPF), Top Bakugou Katsuki, Top Castiel, Top Eskel (The Witcher), Top Kim Taehyung | V, Top Sam, Top Vegeta (Dragon Ball), Topanga\'s, Touch-Starved Bakugou Katsuki, Train Sex, Trans Male Character, Trans Patrick Brewer, True Love, True Mates, Twincest, Underage Drinking, Underage Kissing, Underage Masturbation, Underage Smoking, Unrequited Crush, Unrequited Love, VAMPIRESSS, Vaginal Sex, Vegeta is Bad at Feelings (Dragon Ball), Verbal Abuse, Virginity, Vomiting, Voyeurism, Webcam/Video Chat Sex, Werewolves, Wingfic, Wings, With A Twist, Younger Dean, Younger Midoriya Izuku, aboverse, aged-up ciel, alpha udyr, also some angst, antics, at the end, au eighties, bad language, because I wanted a fluffy ending, beta!Saitama, bite me, blmatsu, bottom lee sin, brief mention of bad dragon in chapter one, brief mentions of drugs and drug-related death, brief mentions of past abuse/child abuse, bts love their maknae, bullshit cyborg biology/anatomy, but it exists in universe, but like not ABO heat, butt sex as a plot device, complicated feelings, daddy udyr, danny gets fangs lol, danny panics, danny phantom - Freeform, demisexual byleth, emphasis on the science, excessive cum, fangs, first heat, gender neutral reader, ghost puberty??, he\'s still a ghost tho, hormones going crazy, i love adam bye, ichikara, idk i just like the concept, insecure Genos, ish, just ""being very horny"" heat, just this once, lee sin didn\'t think he was an omega, lee sin self conscious that hes omega, lmao the girls in his school start thinking he\'s a vampire, lots and lots of touching, lots of fun as you can imagine, mentions of past underage, nerds, no beta we die like cliffjumper, not a lot of plot i am so sorry, not even really, omega lee sin, omega!Karamatsu, one year younger, partially follows the canon, people change, platonic but not really, poor Lumine caught in between, power bottom miko, presenting, presenting is kinda like a sudden second puberty, prompt, return to earth, see individual chapter tags!, seriously this is so dumb, service top ei, shance, shiro is gay its canon bye, slightly out of character i guess, so many blow jobs, sorta. def a hopeful ending, sterile omega, surprise! heat, sweats intensely, taking some liberties with the hanahaki trope, the gay shit - Freeform, then back to 0, they are so in love it hurts, things are messy, this couple is so underrated, this is based of a meme, this will be silly and fun, those last two tags are not related, to be precise, top udyr, twist ending, u think the whole school would learn by now that he\'s diff, udyr reassures him, vampire au i think, veron temple, well ok with a little bit of plot, you know whats up, youll probably figure out the au pretty fast')}]"	51	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is keyword ABC Challenge a given keyword in Of Splendour in the Grass?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""Of Splendour in the Grass"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""ABC Challenge"") . }
    </SPARQL>

    ###
    

    Question: What are the keywords of Davina Claire and the Mikaelson wizard?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Davina Claire and the Mikaelson wizard"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: What are the keywords of Tequila Sunrise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Tequila Sunrise"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: What are the keywords of Late Bloomer?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE { 
?story golem:title ""Late Bloomer"" . 
?story golem:keyword ?keyword . 
}
"	"[{'keywords': Value(literal:'(16-year-olds having sex), 1x04, 80s setting, A Twist Of Fate, A look into the past, A/B/O, ABO, ABO dynamics, About 15, Abusive Parents, Adult Ciel Phantomhive, Age of Consent, Aged-Up Character(s), Aged-Up Otabek Altin, Aged-Up Yuri Plisetsky, Alcohol Abuse/Alcoholism, Alien Biology, Alpha Arthit, Alpha Bakugou Katsuki, Alpha Bang Chan, Alpha Castiel, Alpha Chittaphon Leechaiyapornkul | Ten, Alpha Craig Tucker, Alpha Grace, Alpha Harry, Alpha Hatake Kakashi, Alpha Hwang Hyunjin, Alpha Jason, Alpha Jeon Jungkook, Alpha John, Alpha Kakyoin, Alpha Kambe Daisuke, Alpha Kara Danvers, Alpha Katsuki Yuuri, Alpha Kim Taehyung | V, Alpha Raiden Ei, Alpha Sam, Alpha Seo Changbin, Alpha Sephiroth (Compilation of FFVII), Alpha Stan Marsh, Alpha Tony Stark, Alpha Victor Nikiforov, Alpha Wade, Alpha!Ichimatsu, Alpha/Beta, Alpha/Beta/Omega Dynamics, Alpha/Omega, Alternate Universe, Alternate Universe - Canon, Alternate Universe - Canon Divergence, Alternate Universe - Celebrity, Alternate Universe - Coffee Shops & Cafés, Alternate Universe - College/University, Alternate Universe - Creatures & Monsters, Alternate Universe - Happy, Alternate Universe - High School, Alternate Universe - Human, Alternate Universe - Modern Setting, Alternate Universe - No Quirks (My Hero Academia), Alternate Universe - Soulmates, Alternate Universe - Teenagers, Alternate Universe - Werewolf, Ambiguous/Open Ending, Amity Park - Freeform, Anal Fingering, Anal Sex, Angst, Angst and Feels, Angst and Porn, Angst with a Happy Ending, Anxiety, Armpit Kink, Asexual Character, Asexuality, Attempt at Humor, Attempted Rape/Non-Con, Autistic Hatsume Mei, Awkward Romance, Awkward Sex Talk, Awkward Tension, Baby Bruce is my weakness, Baby Gay Patrick Brewer, Background Jonathan Byers, Background Steve Harrington, Backstory, Bad Boys, BakuDeku Week 2018, Bakugou Katsuki Swears A Lot, Bakugou Katsuki is a Good Cook, Bang Chan is So Done (Stray Kids), Because they\'re assholes, Begging, Best Friends, Beta Kim Seungmin, Beta Kunikida Doppo, Beta Lee Felix (Stray Kids), Beta Lee Minho | Lee Know, Beta Yang Jeongin | I.N, Beta/Beta, Beta/Omega, Biology, Bisexual Male Character, Bisexual Nancy Wheeler, Bisexual TommyInnit (Video Blogging RPF), Biting, Blood, Blow Jobs, Body Horror, Body Worship, Bonding, Bottom Dean, Bottom Jung Hoseok | J-Hope, Bottom Midoriya Izuku, Bottom Son Goku (Dragon Ball), Boys In Love, Boys Kissing, Breathplay, Breeding Kink, Brief MPreg, Brotherly Love, Brothers, Bullied Midoriya Izuku, Bullies, Bullying, But on the other hand his parents are awesome and not dead, By an Extra, Canon Compliant, Canon Lesbian Character, Canon Queer Character of Color, Canon-Typical Violence, Caught, Character\'s Name Spelled as Viktor, Child Neglect, Childhood, Childhood Memories, Claiming Bites, Closeted Character, Clothed Sex, College Student Castiel, College Student Sam, Come Eating, Comfort, Coming Out, Coming of Age, Community: daily_deviant, Community: glee_kink_meme, Complicated Relationships, Consent, Cooking, Corporal Punishment, Couch Sex, Crack, Crossdressing, Crushes, Cuddling & Snuggling, Cussing, Cute, Cute Midoriya Izuku, DannyMay 2020 (Danny Phantom), David Rose Loves Patrick Brewer, David Rose is a Good Person, David Rose is a troll, Declarations Of Love, Demisexual Bakugou Katsuki, Demisexual Character, Demisexual Fred Weasley, Demisexuality, Desi Character, Dildos, Dirty Talk, Dom/sub, Domestic, Domestic Fluff, Dominance, Drabble, Drabble Collection, Drabble Sequence, Drama, Dry Humping, Dubious Consent, Dynamic confusion, Dysfunctional Family, Dysfunctional Relationships, Earthbending & Earthbenders, Eimiko - Freeform, Emotional Baggage, Emotional Hurt/Comfort, Enemies to Lovers, Enthusiastic Consent, Epilogue added, Episode continuation, Erik\'s life sucks a lot, Established Relationship, Eventual Fluff, Eventual Romance, Eventual Sex, Eventual Smut, Excessive Wetness, Explicit Consent, Explicit Sexual Content, Extremely Dubious Consent, FWP, Fainting, Falling In Love, Family Drama, Family Fluff, Family Secrets, Father-Son Relationship, Female My Unit | Byleth, Feminization, Feral Behavior, Finger Sucking, First Dates, First Kiss, First Love, First Meetings, First Rut, First Time, First Time Blow Jobs, Fledglings, Flower Symbolism, Flowers, Fluff, Fluff and Angst, Fluff and Crack, Fluff and Humor, Fluff and Hurt/Comfort, Fluff and Smut, Fluffy Ending, Food, Forced Bonding, Fred Weasley Lives, Fred and George have ADHD, Friends to Lovers, Frottage, Fuck Or Die, Galaxy Garrison, Gay Awakening, Gay Fred Weasley, Gay Panic, Gay Sex, Genius Midoriya Izuku, Gentle Sex, Getting Together, Goes from 0 to 100 real quick, Going to Hell, Gore, Gratuitous Smut, Growing Up, Growth, Growth Spirt, Gym Sex, HIV/AIDS Crisis, Halloween, Halloween Costumes, Hanahaki Disease, Hand Job, Hand Jobs, Happy Ending, Hatsume Mei Has ADHD, Heavy Petting, High School, High School Student Dean, Holding Hands, Horny Teenagers, Hot Springs & Onsen, Hugs, Humilation, Humor, Hurt, Hurt No Comfort, Hurt/Comfort, Hurts So Good, I Wrote This Instead of Sleeping, I think that\'s all the warnings?, Idiots in Love, Iida Tensei is the Best Brother, Iida Tensei went to UA with Aizawa and Mic, Implied Mpreg, Implied Sexual Content, Implied/Referenced Child Abuse, Implied/Referenced Self-Harm, Impregnation, Impregnation Kink, Indian Character, Insecurity, Inspired by Stranger Things (TV 2016), Intercrural Sex, Internal Conflict, Internalized Homophobia, It all got serious by accident, Izuku is a late bloomer, Jagoras, Japanese Culture, Jealously, Jealousy, Just gals being pals, Kaer Morhen, Kerberos Mission, Kissing, Knotting, Knotting Dildos, KongArt Week 2021 (SOTUS), Kotatsu, Krypton, Kryptonian Biology, Kryptonian Culture & Customs, LGBTQ Themes, Lactation Kink, Lambert likes warmth, Larry Stylinson Is Real, Late Bloomer, Late Bloomer Byleth, Lesbian Character, Lesbian Disaster Robin Buckley, Levi with Piercings & Glasses, Light Angst, Light Bondage, Light Dom/sub, Loss of Virginity, Love Confessions, Making Out, Male Periods, Marking, Married Couple, Masturbation, Masturbation in Shower, Mates, Mating Bites, Mating Cycles/In Heat, Menstruation, Mental Health Issues, Mentions of past abusive relationships, Mentor Nedzu (My Hero Academia), Merry Month of Masturbation Challenge, Middle School, Midoriya Izuku Does Not Go to U.A. High School, Midoriya Izuku Does Not Have One for All Quirk, Midoriya Izuku is a Dork, Midoriya Izuku is a Nerd, Midoriya Izuku is a Ray of Sunshine, Might be OOC, Mild Hurt/Comfort, Mild Smut, Minor Alcohol/Drug Reference, Minor Angeal Hewley/Genesis Rhapsodos, Minor Rufus Shinra/Tseng, Minor Zack Fair/Aerith Gainsborough, Minor mentions of Leslie Kyle and Don Corneo, Missing Scene, Mostly Fluff, Mpreg, Multiple Pairings, Mutant Registration, Mutant Rights, Mutual Masturbation, Mutual Pining, NOT OMEGAVERSE, Nakamaship, Nervous Midoriya Izuku, Nesting, No bottom surgery trans male, No mpreg, No penetration, Non-Consensual Voyeurism, Non-Graphic Smut, Non-Linear Narrative, Non-Penetrative Sex, Non-Sexual Submission, Non-Traditional Alpha/Beta/Omega Dynamics, Not Actually Unrequited Love, Not Beta Read, OHFAT, OT7, Obsession, Oh they are both 18, Old Friends, Old Midoriya, Olicity Hiatus Fic-A-Thon, Omega Cloud Strife, Omega Dani, Omega Dazai Osamu (Bungou Stray Dogs), Omega Dean, Omega Han Jisung | Han, Omega Jeon Jungkook, Omega Jotaro, Omega Jung Hoseok | J-Hope, Omega Katou Haru, Omega Kongpob, Omega Kyle Broflovski, Omega Lena Luthor, Omega Louis, Omega Midoriya Izuku, Omega Might Guy, Omega Min Yoongi | Suga, Omega Peter Parker, Omega Sherlock, Omega Stan Marsh, Omega Verse, Omega Yuri Plisetsky, Omega!Genos, Omegaverse, One Shot, One-Sided Attraction, Oral Sex, Originally Posted Elsewhere, Other Additional Tags to Be Added, POV Castiel, POV First Person, POV Kirishima Eijirou, POV Saeki Sayaka, POV Second Person, POV Third Person Limited, POV flips between Saitama and Genos, PWP, Pack Bonding, Pack Dynamics, Parental Aizawa Shouta | Eraserhead, Parental Yagi Toshinori | All Might, Past Tense, Patrick Brewer is Gay, Patrick Brewer loves David Rose, Period-Typical Homophobia, Pet Play, Pining, Play Fighting, Plot What Plot/Porn Without Plot, Polyamorous Pack, Polyamory, Polyamory - F/F/F, Polyamory Negotiations, Porn, Porn With Plot, Porn With Very Little Plot, Porn with Feelings, Possessive Behavior, Possessive Kim Taehyung | V, Post top surgery trans male, Post-Canon, Post-Episode: s05e05 Housewarming, Post-Kerberos Mission, Power Play, Praise Kink, Pre-Canon, Pre-Kerberos Mission, Pre-Relationship, Pregnancy Kink, Proms and other high-school cliches, Prostate Massage, Protective Bakugou Katsuki, Protective Class 1-A (My Hero Academia), Protective Dick Grayson, Protective Hyungs, Protective Jason, Protective Siblings, Protective Wilbur Soot, Protectiveness, Psychological Trauma, Puberty, Public Blow Jobs, Punishment, Python - Freeform, Queer Friendly, Queer Themes, Quirk Discrimination (My Hero Academia), Quirkless Reader (My Hero Academia), Reader Has a Quirk (My Hero Academia), Reader is AFAB - Freeform, Reader is an Omega but they think theyre a Beta, Reader-Insert, Real Life, Recreational Drug Use, References to Knotting, Reunions, Rimming, Romance, Rough Sex, Rutting, SPOILERS BEECH GET OUTTA HERE IF U DONT WANT THIS, Scent Kink, Scent Marking, Scenting, Scents & Smells, Science Fiction, Season/Series 07, Sebatian POV, Secretly a Virgin, Secrets, Self-Esteem Issues, Self-Lubrication, Self-cest, Semi-Public Sex, Sex, Sex Toys, Sexting, Sexual Content, Sexual Experimentation, Sexual Fantasy, Sexual Frustration, Sexual Roleplay, Sexual Tension, Shady government agencies and other comic cliches, Shameless Smut, Sharing a Bed, Shinsou Hitoshi is in Class 1-A, Sibling Incest, Sibling Rivalry, Sickfic, Sisterly bonding, Size Kink, Slash, Slice of Life, Slow Burn, Small Towns, Smut, Sneaking Out, Soft Bakugou Katsuki, Soft Eskel (The Witcher), Soul Bond, Soulmarks, Spanking, Spoilers, Spooning, Squirting, Stargazing, Sticky Sex, Strangers to Lovers, Strap-Ons, Students, Subdrop, Submission, Submissive Midoriya Izuku, Subspace, Suicide, TPE, Tags May Change, Tails, Teacher-Student Relationship, Teasing, Teen Angst, Teen Romance, This can be read as, This was stupid self indulgent, Timeskips, Todoroki (My Hero Academia) Family Drama, Todoroki Enji | Endeavor\'s Bad Parenting, Todoroki Shouto is Bad at Feelings, Todoroki Shouto is a Dork, Todoroki but he never really worked through his daddy issues, TommyInnit Needs a Hug (Video Blogging RPF), TommyInnit-centric (Video Blogging RPF), Top Bakugou Katsuki, Top Castiel, Top Eskel (The Witcher), Top Kim Taehyung | V, Top Sam, Top Vegeta (Dragon Ball), Topanga\'s, Touch-Starved Bakugou Katsuki, Train Sex, Trans Male Character, Trans Patrick Brewer, True Love, True Mates, Twincest, Underage Drinking, Underage Kissing, Underage Masturbation, Underage Smoking, Unrequited Crush, Unrequited Love, VAMPIRESSS, Vaginal Sex, Vegeta is Bad at Feelings (Dragon Ball), Verbal Abuse, Virginity, Vomiting, Voyeurism, Webcam/Video Chat Sex, Werewolves, Wingfic, Wings, With A Twist, Younger Dean, Younger Midoriya Izuku, aboverse, aged-up ciel, alpha udyr, also some angst, antics, at the end, au eighties, bad language, because I wanted a fluffy ending, beta!Saitama, bite me, blmatsu, bottom lee sin, brief mention of bad dragon in chapter one, brief mentions of drugs and drug-related death, brief mentions of past abuse/child abuse, bts love their maknae, bullshit cyborg biology/anatomy, but it exists in universe, but like not ABO heat, butt sex as a plot device, complicated feelings, daddy udyr, danny gets fangs lol, danny panics, danny phantom - Freeform, demisexual byleth, emphasis on the science, excessive cum, fangs, first heat, gender neutral reader, ghost puberty??, he\'s still a ghost tho, hormones going crazy, i love adam bye, ichikara, idk i just like the concept, insecure Genos, ish, just ""being very horny"" heat, just this once, lee sin didn\'t think he was an omega, lee sin self conscious that hes omega, lmao the girls in his school start thinking he\'s a vampire, lots and lots of touching, lots of fun as you can imagine, mentions of past underage, nerds, no beta we die like cliffjumper, not a lot of plot i am so sorry, not even really, omega lee sin, omega!Karamatsu, one year younger, partially follows the canon, people change, platonic but not really, poor Lumine caught in between, power bottom miko, presenting, presenting is kinda like a sudden second puberty, prompt, return to earth, see individual chapter tags!, seriously this is so dumb, service top ei, shance, shiro is gay its canon bye, slightly out of character i guess, so many blow jobs, sorta. def a hopeful ending, sterile omega, surprise! heat, sweats intensely, taking some liberties with the hanahaki trope, the gay shit - Freeform, then back to 0, they are so in love it hurts, things are messy, this couple is so underrated, this is based of a meme, this will be silly and fun, those last two tags are not related, to be precise, top udyr, twist ending, u think the whole school would learn by now that he\'s diff, udyr reassures him, vampire au i think, veron temple, well ok with a little bit of plot, you know whats up, youll probably figure out the au pretty fast')}]"	1	0	0			
52	52	en	What are the keywords of Tequila Sunrise?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Tequila Sunrise"" . ?story golem:keyword ?keyword . }"	"[{'keywords': Value(literal:""(Possible) Infidelity, 13 Days of Clexa, 31 Days of Fanfiction Challenge, A teeny tiny fic to release me from my slumber, AU, Additional Warnings In Author's Note, Aftercare, Age Difference, Aged-Up Character(s), Album: Fine Line (Harry Styles), Alcohol, Alcohol Abuse/Alcoholism, Alien Biology, Alien Sex, Aliens, Alternate Canon, Alternate Reality, Alternate Universe, Alternate Universe - Aliens, Alternate Universe - Bar/Pub, Alternate Universe - College/University, Alternate Universe - Everyone Lives/Nobody Dies, Alternate Universe - Human, Alternate Universe - Idols, Alternate Universe - Modern Setting, Alternate Universe - No Quirks (My Hero Academia), Alternate Universe - Pro Heroes (My Hero Academia), Alternate Universe - Supernatural Elements, Alternate Universe - Vampire, Ambiguous Relationships, Anal Sex, Angst, Angst with a Happy Ending, Antifans, Attempted Murder, BTS is 6, Bartender AU, Betrayal, Biting, Blood, Blood Drinking, Blood and Injury, Blow Jobs, Bottom Park Jimin (BTS), Busan buddies, Canon Compliant, Character Study, Choking, Clextober, Clextober 2019, Clubbing, Coming Out, Community: Iyhedonism, Condoms, Consensual Somnophilia, Crack, Creampie, Crossdressing, Cuddling & Snuggling, Daddy Kink, Dancer Park Jimin (BTS), Day 8: Vampires/Werewolves, Diners, Drama, Drink, Drinking, Drunk Sex, Drunken Flirting, Drunken Shenanigans, Drunkenness, Dry Humping, Dubious Morality, Eden's Twilight, Emotional Hurt/Comfort, Emotions, Enemies to Friends to Lovers, Established Relationship, Explicit Language, Explicit Sexual Content, Fake Marriage, Fake/Pretend Relationship, Fame, Famous BTS, Fanboy Jimin, Female Harry Potter, First Meetings, Flirting, Fluff, Fluff and Angst, Fluff and Humor, Fluff and Smut, Fluffy Ending, Forgiveness, French Kissing, Friendship/Love, Frottage, Future Angst, Future Fic, Gay, Getting Together, Girls' Night Out, Gore, Graham's dad was a horrible person, Group chat, Hangover, Happy Ending, Hiding, Horror, Human Sides (Sanders Sides), Human/Vampire Relationship, Hurt/Comfort, Idol Jeon Jungkook, Idol Jung Hoseok | J-Hope, Idol Kim Namjoon | RM, Idol Kim Seokjin | Jin, Idol Kim Taehyung | V, Idol Min Yoongi | Suga, Immortality, Implied Sexual Content, Implied/Referenced Dubious Consent, It's Not Crack I Swear, Italian family, Jealousy, Karaoke, Kidnapping, Kissing, Knifeplay, Las Vegas, Learning to accept the fact that you aren't as straight as your dad wanted you to be, Light Angst, Light Bondage, Long Distance Relationship, Long haired Jaehyo wowie, Lots of Andrew staring at neil and feeling v overwhelmed for various reasons, Love Poems, Makeup Sex, Male-Female Friendship, Master of Death Harry Potter, Masturbation, Meet-Cute, Mental Breakdown, Mentions of drugs, Mentions of the time neil got drugged, Mildly Dubious Consent, Min Yoongi | Suga Is a Good Hyung, Min Yoongi | Suga is Bad at Feelings, Mind Sex, Minor Injuries, Minor Jeon Jungkook/Park Jimin, Misunderstandings, Mollisian, Mood Swings, Motorbike Keith is best Keith, Musician Harry, Mutual Pining, NSFW, Neil josten is a menace, Non-Consensual Drug Use, Non-Famous Liam Payne, Not Really Character Death, One Night Stands, Oral Sex, Originally Posted on Tumblr, POV Andrew Minyard, Partying, Pining, Plot What Plot/Porn Without Plot, Polyamory, Porn With Plot, Possession, Post-Canon, Pre-Relationship, Pre-Series, Pro Hero Bakugou Katsuki, Probably ooc, Rare Pairings, Reader-Insert, Reader-Interactive, Red Romance, Rhink Summer Ficathon 2k16, Rivalry, Romance, Rough Kissing, Rough Sex, San Francisco Lovers (Blaseball Team), Semi-Public Sex, Sex, Sexual Content, Sexual Tension, Shapeshifting, Short One Shot, Slow Burn, Smut, Somewhere in between tbh, Spin the Bottle, Strangers, Supernatural Elements, Swearing, Tequila, They’re not playing Wordle bc it’s like 2007 but also they’re kind of playing wordle, Threesome - F/M/M, Thriller, Too much fluff, Top Min Yoongi | Suga, Torture, Touchy-Feely, Trans Character, Trans Male Character, Trans Takami Keigo | Hawks, Tumblr Prompt, Two Emotionally Troubled Idiots In Love, Unprotected Sex, Unrequited Love, Vaginal Fingering, Vaginal Sex, Vague Mentions of Past Abuse, Vampire Bites, Vampires, Voyeurism, Wanderers, Witches, alcohol mention, alien!John, alien!lock, and the uswnt, angst? I haven't decided yet, cross-over, did I mention that Sherlock and John are aliens?, drunk Neil is a woo girl, hobi is a dancer, human!Lestrade, i don't want to spoil so much, idol fan relationship, internalised issues, mentions of hate speech towards yoongi, no beta we're just gonna die, platonic namkook, platonic taegi, practically love at first sight, prompt: sunrise, remembering, rm and hobi live in the states, selfindulging, sex mention, slow morning, smut is mentioned, soft shit, tae is a painter, taekook, the elephant painting, the rest in seoul, tw car accident, ucla roster as other characters, unflattering German soldiers aka nazis, vmin are best bros, we'll see if I have time, whipped everything, whipped vhope, yoongi and jin live together, yoonmin, ___au"")}]"	52	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What are the keywords of Late Bloomer?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Late Bloomer"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: Is keyword Phoenixes are dangerous a given keyword in The Housewarming Gift?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""The Housewarming Gift"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""Phoenixes are dangerous"") . }
    </SPARQL>

    ###
    

    Question: What series is High Cotton a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""High Cotton"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: What are the keywords of Tequila Sunrise?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE { 
?story golem:title ""Tequila Sunrise"" . 
?story golem:keyword ?keyword . 
}
"	"[{'keywords': Value(literal:""(Possible) Infidelity, 13 Days of Clexa, 31 Days of Fanfiction Challenge, A teeny tiny fic to release me from my slumber, AU, Additional Warnings In Author's Note, Aftercare, Age Difference, Aged-Up Character(s), Album: Fine Line (Harry Styles), Alcohol, Alcohol Abuse/Alcoholism, Alien Biology, Alien Sex, Aliens, Alternate Canon, Alternate Reality, Alternate Universe, Alternate Universe - Aliens, Alternate Universe - Bar/Pub, Alternate Universe - College/University, Alternate Universe - Everyone Lives/Nobody Dies, Alternate Universe - Human, Alternate Universe - Idols, Alternate Universe - Modern Setting, Alternate Universe - No Quirks (My Hero Academia), Alternate Universe - Pro Heroes (My Hero Academia), Alternate Universe - Supernatural Elements, Alternate Universe - Vampire, Ambiguous Relationships, Anal Sex, Angst, Angst with a Happy Ending, Antifans, Attempted Murder, BTS is 6, Bartender AU, Betrayal, Biting, Blood, Blood Drinking, Blood and Injury, Blow Jobs, Bottom Park Jimin (BTS), Busan buddies, Canon Compliant, Character Study, Choking, Clextober, Clextober 2019, Clubbing, Coming Out, Community: Iyhedonism, Condoms, Consensual Somnophilia, Crack, Creampie, Crossdressing, Cuddling & Snuggling, Daddy Kink, Dancer Park Jimin (BTS), Day 8: Vampires/Werewolves, Diners, Drama, Drink, Drinking, Drunk Sex, Drunken Flirting, Drunken Shenanigans, Drunkenness, Dry Humping, Dubious Morality, Eden's Twilight, Emotional Hurt/Comfort, Emotions, Enemies to Friends to Lovers, Established Relationship, Explicit Language, Explicit Sexual Content, Fake Marriage, Fake/Pretend Relationship, Fame, Famous BTS, Fanboy Jimin, Female Harry Potter, First Meetings, Flirting, Fluff, Fluff and Angst, Fluff and Humor, Fluff and Smut, Fluffy Ending, Forgiveness, French Kissing, Friendship/Love, Frottage, Future Angst, Future Fic, Gay, Getting Together, Girls' Night Out, Gore, Graham's dad was a horrible person, Group chat, Hangover, Happy Ending, Hiding, Horror, Human Sides (Sanders Sides), Human/Vampire Relationship, Hurt/Comfort, Idol Jeon Jungkook, Idol Jung Hoseok | J-Hope, Idol Kim Namjoon | RM, Idol Kim Seokjin | Jin, Idol Kim Taehyung | V, Idol Min Yoongi | Suga, Immortality, Implied Sexual Content, Implied/Referenced Dubious Consent, It's Not Crack I Swear, Italian family, Jealousy, Karaoke, Kidnapping, Kissing, Knifeplay, Las Vegas, Learning to accept the fact that you aren't as straight as your dad wanted you to be, Light Angst, Light Bondage, Long Distance Relationship, Long haired Jaehyo wowie, Lots of Andrew staring at neil and feeling v overwhelmed for various reasons, Love Poems, Makeup Sex, Male-Female Friendship, Master of Death Harry Potter, Masturbation, Meet-Cute, Mental Breakdown, Mentions of drugs, Mentions of the time neil got drugged, Mildly Dubious Consent, Min Yoongi | Suga Is a Good Hyung, Min Yoongi | Suga is Bad at Feelings, Mind Sex, Minor Injuries, Minor Jeon Jungkook/Park Jimin, Misunderstandings, Mollisian, Mood Swings, Motorbike Keith is best Keith, Musician Harry, Mutual Pining, NSFW, Neil josten is a menace, Non-Consensual Drug Use, Non-Famous Liam Payne, Not Really Character Death, One Night Stands, Oral Sex, Originally Posted on Tumblr, POV Andrew Minyard, Partying, Pining, Plot What Plot/Porn Without Plot, Polyamory, Porn With Plot, Possession, Post-Canon, Pre-Relationship, Pre-Series, Pro Hero Bakugou Katsuki, Probably ooc, Rare Pairings, Reader-Insert, Reader-Interactive, Red Romance, Rhink Summer Ficathon 2k16, Rivalry, Romance, Rough Kissing, Rough Sex, San Francisco Lovers (Blaseball Team), Semi-Public Sex, Sex, Sexual Content, Sexual Tension, Shapeshifting, Short One Shot, Slow Burn, Smut, Somewhere in between tbh, Spin the Bottle, Strangers, Supernatural Elements, Swearing, Tequila, They’re not playing Wordle bc it’s like 2007 but also they’re kind of playing wordle, Threesome - F/M/M, Thriller, Too much fluff, Top Min Yoongi | Suga, Torture, Touchy-Feely, Trans Character, Trans Male Character, Trans Takami Keigo | Hawks, Tumblr Prompt, Two Emotionally Troubled Idiots In Love, Unprotected Sex, Unrequited Love, Vaginal Fingering, Vaginal Sex, Vague Mentions of Past Abuse, Vampire Bites, Vampires, Voyeurism, Wanderers, Witches, alcohol mention, alien!John, alien!lock, and the uswnt, angst? I haven't decided yet, cross-over, did I mention that Sherlock and John are aliens?, drunk Neil is a woo girl, hobi is a dancer, human!Lestrade, i don't want to spoil so much, idol fan relationship, internalised issues, mentions of hate speech towards yoongi, no beta we're just gonna die, platonic namkook, platonic taegi, practically love at first sight, prompt: sunrise, remembering, rm and hobi live in the states, selfindulging, sex mention, slow morning, smut is mentioned, soft shit, tae is a painter, taekook, the elephant painting, the rest in seoul, tw car accident, ucla roster as other characters, unflattering German soldiers aka nazis, vmin are best bros, we'll see if I have time, whipped everything, whipped vhope, yoongi and jin live together, yoonmin, ___au"")}]"	1	0	0			
53	53	en	What are the keywords of It never entered my mind?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""It never entered my mind"" . ?story golem:keyword ?keyword . }"	[{'keywords': Value(literal:'Alternate Universe - Ilvermorny, Developing Relationship, Enemies to Friends to Lovers, Ilvermorny, Post-Battle of Hogwarts, Post-War, Professors')}]	53	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What are the keywords of That Secret We Never Knew?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""That Secret We Never Knew"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: What are the keywords of All was right?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""All was right"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: Is keyword [[keyword]] a given keyword in [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""[[story]]"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""[[keyword]]"") . }
    </SPARQL>

    ###
    

Question: What are the keywords of It never entered my mind?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE {  
?story golem:title ""It never entered my mind"" . 
?story golem:keyword ?keyword . 
}
"	[{'keywords': Value(literal:'Alternate Universe - Ilvermorny, Developing Relationship, Enemies to Friends to Lovers, Ilvermorny, Post-Battle of Hogwarts, Post-War, Professors')}]	1	0	0			
54	54	en	What are the keywords of All was right?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""All was right"" . ?story golem:keyword ?keyword . }"	[{'keywords': Value(literal:'Cuddling & Snuggling, Emotional Hurt/Comfort, First Kiss, Hogwarts, Hurt/Comfort, Idiots in Love, Love Confessions, Marauders Era (Harry Potter), Sharing a Bed, remus is overly emotional, sirius is oblivious, wolfstar')}]	54	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is keyword Everything is consensual a given keyword in The Twin Destiny?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""The Twin Destiny"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""Everything is consensual"") . }
    </SPARQL>

    ###
    

    Question: What are the keywords of It never entered my mind?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""It never entered my mind"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: What are the keywords of That Secret We Never Knew?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""That Secret We Never Knew"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: What are the keywords of All was right?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE { 
  ?story golem:title ""All was right"" . 
  ?story golem:keyword ?keyword . 
}
"	[{'keywords': Value(literal:'Cuddling & Snuggling, Emotional Hurt/Comfort, First Kiss, Hogwarts, Hurt/Comfort, Idiots in Love, Love Confessions, Marauders Era (Harry Potter), Sharing a Bed, remus is overly emotional, sirius is oblivious, wolfstar')}]	1	0	0			
55	55	en	What are the keywords of Not your greatest virtue?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Not your greatest virtue"" . ?story golem:keyword ?keyword . }"	[{'keywords': Value(literal:'Alternate Universe - Voldemort Wins, Confessions, Dark, Evil Wins, Family Dinners, Father-Daughter Relationship, Fluff, Flufftober, Mother-Daughter Relationship, Plans For The Future, Secret Crush, Sequel, Vampire Barty Crouch Junior')}]	55	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What are the keywords of It never entered my mind?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""It never entered my mind"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: What are the keywords of All was right?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""All was right"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: Is keyword Amazing a given keyword in kt_ma es aei?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""kt_ma es aei"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""Amazing"") . }
    </SPARQL>

    ###
    

Question: What are the keywords of Not your greatest virtue?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) 
WHERE { 
  ?story golem:title ""Not your greatest virtue"" . 
  ?story golem:keyword ?keyword . 
}
"	[{'keywords': Value(literal:'Alternate Universe - Voldemort Wins, Confessions, Dark, Evil Wins, Family Dinners, Father-Daughter Relationship, Fluff, Flufftober, Mother-Daughter Relationship, Plans For The Future, Secret Crush, Sequel, Vampire Barty Crouch Junior')}]	1	0	0			
56	56	en	What are the keywords of This Town Is Only Gonna Get Worse?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""This Town Is Only Gonna Get Worse"" . ?story golem:keyword ?keyword . }"	[{'keywords': Value(literal:'Depression, Emotional/Psychological Abuse, Implied/Referenced Child Abuse, Lack of Communication')}]	56	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is keyword Phoenixes are dangerous a given keyword in The Housewarming Gift?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""The Housewarming Gift"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""Phoenixes are dangerous"") . }
    </SPARQL>

    ###
    

    Question: Is keyword All seven years a given keyword in The Edge of the Map?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""The Edge of the Map"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""All seven years"") . }
    </SPARQL>

    ###
    

    Question: Is keyword ABC Challenge a given keyword in Of Splendour in the Grass?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""Of Splendour in the Grass"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""ABC Challenge"") . }
    </SPARQL>

    ###
    

Question: What are the keywords of This Town Is Only Gonna Get Worse?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?keyword WHERE { 
  ?story golem:title ""This Town Is Only Gonna Get Worse"" . 
  ?story golem:keyword ?keyword 
}
"	[{'keyword': Value(literal:'Depression')}, {'keyword': Value(literal:'Emotional/Psychological Abuse')}, {'keyword': Value(literal:'Implied/Referenced Child Abuse')}, {'keyword': Value(literal:'Lack of Communication')}]	0	1	1	Evaluation method error	Non-grouped	
69	69	en	How many chapters does Prologue have?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Prologue"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'2')}, {'chapters': Value(typed-literal:'12')}, {'chapters': Value(typed-literal:'3')}, {'chapters': Value(typed-literal:'7')}, {'chapters': Value(typed-literal:'8')}, {'chapters': Value(typed-literal:'11')}, {'chapters': Value(typed-literal:'4')}, {'chapters': Value(typed-literal:'5')}, {'chapters': Value(typed-literal:'22')}, {'chapters': Value(typed-literal:'39')}, {'chapters': Value(typed-literal:'51')}, {'chapters': Value(typed-literal:'52')}, {'chapters': Value(typed-literal:'6')}, {'chapters': Value(typed-literal:'10')}, {'chapters': Value(typed-literal:'29')}]	69	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does [[story]] have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does Interlude: Nothing But Memory have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Interlude: Nothing But Memory"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does The Death of Me have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Death of Me"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: How many chapters does Prologue have?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""Prologue"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'2')}, {'chapters': Value(typed-literal:'12')}, {'chapters': Value(typed-literal:'3')}, {'chapters': Value(typed-literal:'7')}, {'chapters': Value(typed-literal:'8')}, {'chapters': Value(typed-literal:'11')}, {'chapters': Value(typed-literal:'4')}, {'chapters': Value(typed-literal:'5')}, {'chapters': Value(typed-literal:'22')}, {'chapters': Value(typed-literal:'39')}, {'chapters': Value(typed-literal:'51')}, {'chapters': Value(typed-literal:'52')}, {'chapters': Value(typed-literal:'6')}, {'chapters': Value(typed-literal:'10')}, {'chapters': Value(typed-literal:'29')}]	1	0	0			
70	70	en	How many chapters does The Dark Phoenix Spies have?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Dark Phoenix Spies"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'2')}]	70	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does Twilight Magic/Black Family have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Twilight Magic/Black Family"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does Prologue have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Prologue"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does Guardian of Hogwarts have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Guardian of Hogwarts"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: How many chapters does The Dark Phoenix Spies have?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Dark Phoenix Spies"" . ?story golem:numberOfChapters ?chapters . }
"	[{'chapters': Value(typed-literal:'2')}]	1	0	0			
71	71	en	How many chapters does Interlude: Nothing But Memory have?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Interlude: Nothing But Memory"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}]	71	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does Prologue have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Prologue"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does [[story]] have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does The Death of Me have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Death of Me"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: How many chapters does Interlude: Nothing But Memory have?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""Interlude: Nothing But Memory"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'1')}]	1	0	0			
72	72	en	How many chapters does Resolutions Worth Keeping have?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Resolutions Worth Keeping"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}]	72	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does [[story]] have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does What the Future Holds have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""What the Future Holds"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does Prologue have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Prologue"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: How many chapters does Resolutions Worth Keeping have?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""Resolutions Worth Keeping"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'1')}]	1	0	0			
73	73	en	How many chapters does Guardian of Hogwarts have?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Guardian of Hogwarts"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'17')}]	73	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does Twilight Magic/Black Family have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Twilight Magic/Black Family"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: What collections is Harry Potter and the year fate stepped in part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Harry Potter and the year fate stepped in"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as Swimmer Harry Potter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Swimmer Harry Potter"" . }
    </SPARQL>

    ###
    

Question: How many chapters does Guardian of Hogwarts have?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
SELECT DISTINCT ?chapters WHERE { 
  ?story golem:title ""Guardian of Hogwarts"" . 
  ?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'17')}]	1	0	0			
74	74	en	How many chapters does What the Future Holds have?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""What the Future Holds"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'9')}, {'chapters': Value(typed-literal:'2')}, {'chapters': Value(typed-literal:'6')}, {'chapters': Value(typed-literal:'4')}, {'chapters': Value(typed-literal:'8')}, {'chapters': Value(typed-literal:'5')}, {'chapters': Value(typed-literal:'17')}, {'chapters': Value(typed-literal:'3')}, {'chapters': Value(typed-literal:'25')}]	74	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does Prologue have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Prologue"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does [[story]] have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does Interlude: Nothing But Memory have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Interlude: Nothing But Memory"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: How many chapters does What the Future Holds have?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""What the Future Holds"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'9')}, {'chapters': Value(typed-literal:'2')}, {'chapters': Value(typed-literal:'6')}, {'chapters': Value(typed-literal:'4')}, {'chapters': Value(typed-literal:'8')}, {'chapters': Value(typed-literal:'5')}, {'chapters': Value(typed-literal:'17')}, {'chapters': Value(typed-literal:'3')}, {'chapters': Value(typed-literal:'25')}]	1	0	0			
75	75	en	How many chapters does Molten Silver have?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Molten Silver"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}]	75	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does The Dark Phoenix Spies have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Dark Phoenix Spies"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does Prologue have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Prologue"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does [[story]] have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: How many chapters does Molten Silver have?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""Molten Silver"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'1')}]	1	0	0			
76	76	en	How many chapters does A Series of Events, both Fortunate and Unfortunate have?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""A Series of Events, both Fortunate and Unfortunate"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'4')}]	76	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does [[story]] have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: Show me all multi-chapter stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:title ?title . ?story golem:numberOfChapters ?chapters . FILTER(?chapters > 1) }
    </SPARQL>

    ###
    

    Question: How many chapters does Prologue have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Prologue"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: How many chapters does A Series of Events, both Fortunate and Unfortunate have?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""A Series of Events, both Fortunate and Unfortunate"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'4')}]	1	0	0			
77	77	en	How many chapters does Twilight Magic/Black Family have?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Twilight Magic/Black Family"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}]	77	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does The Dark Phoenix Spies have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Dark Phoenix Spies"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does Guardian of Hogwarts have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Guardian of Hogwarts"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does Prologue have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Prologue"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: How many chapters does Twilight Magic/Black Family have?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters WHERE { 
  ?story golem:title ""Twilight Magic/Black Family"" . 
  ?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'1')}]	1	0	0			
78	78	en	How many chapters does The Death of Me have?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Death of Me"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'11')}, {'chapters': Value(typed-literal:'3')}, {'chapters': Value(typed-literal:'4')}, {'chapters': Value(typed-literal:'6')}, {'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'19')}, {'chapters': Value(typed-literal:'23')}, {'chapters': Value(typed-literal:'5')}, {'chapters': Value(typed-literal:'2')}, {'chapters': Value(typed-literal:'9')}]	78	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does Prologue have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Prologue"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does [[story]] have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many chapters does Interlude: Nothing But Memory have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Interlude: Nothing But Memory"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: How many chapters does The Death of Me have?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""The Death of Me"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'11')}, {'chapters': Value(typed-literal:'3')}, {'chapters': Value(typed-literal:'4')}, {'chapters': Value(typed-literal:'6')}, {'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'19')}, {'chapters': Value(typed-literal:'23')}, {'chapters': Value(typed-literal:'5')}, {'chapters': Value(typed-literal:'2')}, {'chapters': Value(typed-literal:'9')}]	1	0	0			
80	80	en	What is the content rating for the story [ART] Alleviate?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[ART] Alleviate"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'General Audiences')}]	80	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the content rating for the story [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story Bad Impressions?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Bad Impressions"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story Knight of Wands?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Knight of Wands"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: What is the content rating for the story [ART] Alleviate?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
  ?story golem:title ""[ART] Alleviate"" . 
  ?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'General Audiences')}]	1	0	0			
81	81	en	What is the content rating for the story Slightly to the Left?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Slightly to the Left"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Teen And Up Audiences')}, {'rating': Value(literal:'Explicit')}]	81	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the content rating for the story [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story [ART] Alleviate?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[ART] Alleviate"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story Cowardly Cornelius?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Cowardly Cornelius"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: What is the content rating for the story Slightly to the Left?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Slightly to the Left"" . ?story golem:rating ?rating . }
"	[{'rating': Value(literal:'Teen And Up Audiences')}, {'rating': Value(literal:'Explicit')}]	1	0	0			
82	82	en	What is the content rating for the story A Nice Girl?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""A Nice Girl"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Mature')}, {'rating': Value(literal:'Explicit')}]	82	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the content rating for the story Bad Impressions?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Bad Impressions"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story [ART] Alleviate?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[ART] Alleviate"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: What is the content rating for the story A Nice Girl?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
?story golem:title ""A Nice Girl"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Mature')}, {'rating': Value(literal:'Explicit')}]	1	0	0			
83	83	en	What is the content rating for the story Knight of Wands?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Knight of Wands"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Teen And Up Audiences')}, {'rating': Value(literal:'General Audiences')}, {'rating': Value(literal:'Mature')}]	83	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the content rating for the story The Twins go to Hogwarts?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""The Twins go to Hogwarts"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story [ART] Alleviate?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[ART] Alleviate"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: What is the content rating for the story Knight of Wands?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
?story golem:title ""Knight of Wands"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Teen And Up Audiences')}, {'rating': Value(literal:'General Audiences')}, {'rating': Value(literal:'Mature')}]	1	0	0			
84	84	en	What is the content rating for the story Children Will Listen?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Children Will Listen"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'General Audiences')}, {'rating': Value(literal:'Teen And Up Audiences')}]	84	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the content rating for the story [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story [ART] Alleviate?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[ART] Alleviate"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story There are no Children in the Wars of Our Fathers.?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""There are no Children in the Wars of Our Fathers."" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: What is the content rating for the story Children Will Listen?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
?story golem:title ""Children Will Listen"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'General Audiences')}, {'rating': Value(literal:'Teen And Up Audiences')}]	1	0	0			
85	85	en	What is the content rating for the story There are no Children in the Wars of Our Fathers.?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""There are no Children in the Wars of Our Fathers."" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Mature')}]	85	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the content rating for the story Children Will Listen?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Children Will Listen"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story Slightly to the Left?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Slightly to the Left"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: What is the content rating for the story There are no Children in the Wars of Our Fathers.?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?rating WHERE {  ?story golem:title ""There are no Children in the Wars of Our Fathers."" . ?story golem:rating ?rating . }
"	[{'rating': Value(literal:'Mature')}]	1	0	0			
86	86	en	What is the content rating for the story Cowardly Cornelius?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Cowardly Cornelius"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Teen And Up Audiences')}]	86	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the content rating for the story [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story Slightly to the Left?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Slightly to the Left"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story Bad Impressions?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Bad Impressions"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: What is the content rating for the story Cowardly Cornelius?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
?story golem:title ""Cowardly Cornelius"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Teen And Up Audiences')}]	1	0	0			
87	87	en	What is the content rating for the story Bad Impressions?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Bad Impressions"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Teen And Up Audiences')}]	87	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the content rating for the story [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story [ART] Alleviate?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[ART] Alleviate"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story Slightly to the Left?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Slightly to the Left"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: What is the content rating for the story Bad Impressions?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?rating WHERE { 
?story golem:title ""Bad Impressions"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Teen And Up Audiences')}]	1	0	0			
88	88	en	What is the content rating for the story Green & Gold?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Green & Gold"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Not Rated')}, {'rating': Value(literal:'Mature')}, {'rating': Value(literal:'Teen And Up Audiences')}]	88	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the content rating for the story [ART] Alleviate?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[ART] Alleviate"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story Knight of Wands?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Knight of Wands"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: What is the content rating for the story Green & Gold?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
?story golem:title ""Green & Gold"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Not Rated')}, {'rating': Value(literal:'Mature')}, {'rating': Value(literal:'Teen And Up Audiences')}]	1	0	0			
89	89	en	What is the content rating for the story The Twins go to Hogwarts?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""The Twins go to Hogwarts"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Teen And Up Audiences')}]	89	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the content rating for the story Knight of Wands?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Knight of Wands"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: How many chapters does Guardian of Hogwarts have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Guardian of Hogwarts"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: What is the content rating for the story Green & Gold?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Green & Gold"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: What is the content rating for the story The Twins go to Hogwarts?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?rating WHERE {  
?story golem:title ""The Twins go to Hogwarts"" .   
?story golem:rating ?rating . 
} 
"	[{'rating': Value(literal:'Teen And Up Audiences')}]	1	0	0			
91	91	en	How long is Pick Your Poison - Book One?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Pick Your Poison - Book One"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'5810')}]	91	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does The Dark Phoenix Spies have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Dark Phoenix Spies"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How long is Death Lover?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Death Lover"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: How long is Wonder and Fright and Nothing that Nice?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Wonder and Fright and Nothing that Nice"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: How long is Pick Your Poison - Book One?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?chapters ?words WHERE { 
?story golem:title ""Pick Your Poison - Book One"" . 
?story golem:numberOfChapters ?chapters . 
?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'5810')}]	1	0	0			
92	92	en	How long is Death Lover?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Death Lover"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'566')}]	92	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How long is Pick Your Poison - Book One?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Pick Your Poison - Book One"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: How long is Wonder and Fright and Nothing that Nice?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Wonder and Fright and Nothing that Nice"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: How long is Observing Happiness?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Observing Happiness"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: How long is Death Lover?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters ?words WHERE { 
?story golem:title ""Death Lover"" . 
?story golem:numberOfChapters ?chapters . 
?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'566')}]	1	0	0			
93	93	en	How long is The Universe Has Different Plans?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""The Universe Has Different Plans"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'5'), 'words': Value(typed-literal:'10748')}]	93	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How long is We're What?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""We're What"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: How many chapters does What the Future Holds have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""What the Future Holds"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the _______ universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_______"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: How long is The Universe Has Different Plans?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters ?words WHERE { 
  ?story golem:title ""The Universe Has Different Plans"" . 
  ?story golem:numberOfChapters ?chapters . 
  ?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'5'), 'words': Value(typed-literal:'10748')}]	1	0	0			
94	94	en	How long is Will You Stay with Me??	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Will You Stay with Me?"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'10288')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'827')}]	94	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How long is Welcome to the Family?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Welcome to the Family"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: How long is We're What?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""We're What"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: How long is A smile is worth everything?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""A smile is worth everything"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: How long is Will You Stay with Me??

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters ?words WHERE { 
  ?story golem:title ""Will You Stay with Me?"" . 
  ?story golem:numberOfChapters ?chapters . 
  ?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'10288')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'827')}]	1	0	0			
95	95	en	How long is Leather Jackets and Rainbows?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Leather Jackets and Rainbows"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'17703')}]	95	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How long is Wonder and Fright and Nothing that Nice?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Wonder and Fright and Nothing that Nice"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: What is the average word length of Storms?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""Storms"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

    Question: How many chapters does Molten Silver have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Molten Silver"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: How long is Leather Jackets and Rainbows?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters ?words WHERE { 
  ?story golem:title ""Leather Jackets and Rainbows"" . 
  ?story golem:numberOfChapters ?chapters . 
  ?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'17703')}]	1	0	0			
96	96	en	How long is Wonder and Fright and Nothing that Nice?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Wonder and Fright and Nothing that Nice"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1072')}]	96	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How long is Leather Jackets and Rainbows?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Leather Jackets and Rainbows"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: What is the average word length of Tom Riddle and the Chamber of Secrets he never got to see?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""Tom Riddle and the Chamber of Secrets he never got to see"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

    Question: How long is Observing Happiness?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Observing Happiness"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: How long is Wonder and Fright and Nothing that Nice?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters ?words WHERE { 
?story golem:title ""Wonder and Fright and Nothing that Nice"" . 
?story golem:numberOfChapters ?chapters . 
?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1072')}]	1	0	0			
97	97	en	How long is We're What?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""We're What"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'26'), 'words': Value(typed-literal:'44250')}]	97	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the average word length of We Could Help?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""We Could Help"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

    Question: How long is Will You Stay with Me??

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Will You Stay with Me?"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: How long is The Universe Has Different Plans?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""The Universe Has Different Plans"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: How long is We're What?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters ?words WHERE { 
?story golem:title ""We're What"" . 
?story golem:numberOfChapters ?chapters . 
?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'26'), 'words': Value(typed-literal:'44250')}]	1	0	0			
98	98	en	How long is A smile is worth everything?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""A smile is worth everything"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'486')}]	98	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How long is Observing Happiness?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Observing Happiness"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: How long is Wonder and Fright and Nothing that Nice?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Wonder and Fright and Nothing that Nice"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: How long is Will You Stay with Me??

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Will You Stay with Me?"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: How long is A smile is worth everything?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?chapters ?words WHERE { 
?story golem:title ""A smile is worth everything"" . 
?story golem:numberOfChapters ?chapters . 
?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'486')}]	1	0	0			
99	99	en	How long is Observing Happiness?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Observing Happiness"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'497')}]	99	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How long is A smile is worth everything?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""A smile is worth everything"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: How long is We're What?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""We're What"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: How long is Wonder and Fright and Nothing that Nice?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Wonder and Fright and Nothing that Nice"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: How long is Observing Happiness?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters ?words WHERE { 
?story golem:title ""Observing Happiness"" . 
?story golem:numberOfChapters ?chapters . 
?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'497')}]	1	0	0			
100	100	en	How long is Welcome to the Family?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Welcome to the Family"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2168')}, {'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'15709')}, {'chapters': Value(typed-literal:'20'), 'words': Value(typed-literal:'26551')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'883')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1214')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1265')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1244')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1515')}, {'chapters': Value(typed-literal:'10'), 'words': Value(typed-literal:'1694')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'1312')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'7792')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'4813')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3706')}, {'chapters': Value(typed-literal:'5'), 'words': Value(typed-literal:'6422')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'9278')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3625')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2399')}, {'chapters': Value(typed-literal:'7'), 'words': Value(typed-literal:'32287')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'6144')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3335')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1755')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3660')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'747')}, {'chapters': Value(typed-literal:'88'), 'words': Value(typed-literal:'161526')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2229')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'1733')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'11388')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'2580')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1038')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'5529')}, {'chapters': Value(typed-literal:'5'), 'words': Value(typed-literal:'7253')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'4572')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'486')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3389')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3688')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3018')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'4673')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'532')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2092')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'4075')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'6306')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2698')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'768')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2000')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'337')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1003')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2438')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1163')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'568')}, {'chapters': Value(typed-literal:'33'), 'words': Value(typed-literal:'39712')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'928')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2854')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'667')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'920')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'993')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'757')}, {'chapters': Value(typed-literal:'88'), 'words': Value(typed-literal:'480755')}, {'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'20526')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1220')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2050')}, {'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'22947')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'1972')}, {'chapters': Value(typed-literal:'15'), 'words': Value(typed-literal:'39877')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1931')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3836')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'584')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1524')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'820')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2182')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2846')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'649')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2403')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3468')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'200')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'599')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1019')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1124')}, {'chapters': Value(typed-literal:'29'), 'words': Value(typed-literal:'20663')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'728')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'1587')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'5579')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'15038')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'748')}, {'chapters': Value(typed-literal:'11'), 'words': Value(typed-literal:'14944')}, {'chapters': Value(typed-literal:'11'), 'words': Value(typed-literal:'18631')}, {'chapters': Value(typed-literal:'15'), 'words': Value(typed-literal:'14944')}, {'chapters': Value(typed-literal:'15'), 'words': Value(typed-literal:'18631')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'6845')}, {'chapters': Value(typed-literal:'7'), 'words': Value(typed-literal:'1508')}, {'chapters': Value(typed-literal:'45'), 'words': Value(typed-literal:'141976')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3516')}, {'chapters': Value(typed-literal:'24'), 'words': Value(typed-literal:'53669')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1225')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'4346')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1929')}, {'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'10546')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'6009')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1848')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2364')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3857')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2430')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'9697')}, {'chapters': Value(typed-literal:'40'), 'words': Value(typed-literal:'105704')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2394')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'4303')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1183')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1293')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'3524')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1963')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'26549')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'5902')}, {'chapters': Value(typed-literal:'7'), 'words': Value(typed-literal:'10505')}, {'chapters': Value(typed-literal:'6'), 'words': Value(typed-literal:'21269')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'3232')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'1645')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1881')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2102')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'603')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1472')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'1851')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1434')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'6200')}, {'chapters': Value(typed-literal:'14'), 'words': Value(typed-literal:'10068')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3156')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'8369')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2090')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1401')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'6140')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3434')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'588')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1177')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'5187')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'259')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'5882')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'102')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'4195')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'328')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3446')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'914')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'633')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1206')}, {'chapters': Value(typed-literal:'5'), 'words': Value(typed-literal:'13465')}, {'chapters': Value(typed-literal:'5'), 'words': Value(typed-literal:'12313')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1924')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'6109')}, {'chapters': Value(typed-literal:'43'), 'words': Value(typed-literal:'109966')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1032')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1631')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'7406')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1098')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'344')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'10543')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3021')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'726')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3488')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2075')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'8742')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'709')}, {'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'4481')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'8646')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'927')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'515')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'611')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'549')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1812')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'606')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1607')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'10644')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1034')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'10531')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'15643')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'10531')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'15643')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'910')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1612')}, {'chapters': Value(typed-literal:'12'), 'words': Value(typed-literal:'67655')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'767')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1494')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'391')}]	100	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How long is Will You Stay with Me??

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Will You Stay with Me?"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: What is the average word length of Babysitting?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""Babysitting"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

    Question: How long is We're What?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""We're What"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: How long is Welcome to the Family?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters ?words WHERE { 
?story golem:title ""Welcome to the Family"" . 
?story golem:numberOfChapters ?chapters . 
?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2168')}, {'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'15709')}, {'chapters': Value(typed-literal:'20'), 'words': Value(typed-literal:'26551')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'883')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1214')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1265')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1244')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1515')}, {'chapters': Value(typed-literal:'10'), 'words': Value(typed-literal:'1694')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'1312')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'7792')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'4813')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3706')}, {'chapters': Value(typed-literal:'5'), 'words': Value(typed-literal:'6422')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'9278')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3625')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2399')}, {'chapters': Value(typed-literal:'7'), 'words': Value(typed-literal:'32287')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'6144')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3335')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1755')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3660')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'747')}, {'chapters': Value(typed-literal:'88'), 'words': Value(typed-literal:'161526')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2229')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'1733')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'11388')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'2580')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1038')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'5529')}, {'chapters': Value(typed-literal:'5'), 'words': Value(typed-literal:'7253')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'4572')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'486')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3389')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3688')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3018')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'4673')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'532')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2092')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'4075')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'6306')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2698')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'768')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2000')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'337')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1003')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2438')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1163')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'568')}, {'chapters': Value(typed-literal:'33'), 'words': Value(typed-literal:'39712')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'928')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2854')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'667')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'920')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'993')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'757')}, {'chapters': Value(typed-literal:'88'), 'words': Value(typed-literal:'480755')}, {'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'20526')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1220')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2050')}, {'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'22947')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'1972')}, {'chapters': Value(typed-literal:'15'), 'words': Value(typed-literal:'39877')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1931')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3836')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'584')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1524')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'820')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2182')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2846')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'649')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2403')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3468')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'200')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'599')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1019')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1124')}, {'chapters': Value(typed-literal:'29'), 'words': Value(typed-literal:'20663')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'728')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'1587')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'5579')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'15038')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'748')}, {'chapters': Value(typed-literal:'11'), 'words': Value(typed-literal:'14944')}, {'chapters': Value(typed-literal:'11'), 'words': Value(typed-literal:'18631')}, {'chapters': Value(typed-literal:'15'), 'words': Value(typed-literal:'14944')}, {'chapters': Value(typed-literal:'15'), 'words': Value(typed-literal:'18631')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'6845')}, {'chapters': Value(typed-literal:'7'), 'words': Value(typed-literal:'1508')}, {'chapters': Value(typed-literal:'45'), 'words': Value(typed-literal:'141976')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3516')}, {'chapters': Value(typed-literal:'24'), 'words': Value(typed-literal:'53669')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1225')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'4346')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1929')}, {'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'10546')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'6009')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1848')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2364')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3857')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2430')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'9697')}, {'chapters': Value(typed-literal:'40'), 'words': Value(typed-literal:'105704')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2394')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'4303')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1183')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1293')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'3524')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1963')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'26549')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'5902')}, {'chapters': Value(typed-literal:'7'), 'words': Value(typed-literal:'10505')}, {'chapters': Value(typed-literal:'6'), 'words': Value(typed-literal:'21269')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'3232')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'1645')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1881')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2102')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'603')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1472')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'1851')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1434')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'6200')}, {'chapters': Value(typed-literal:'14'), 'words': Value(typed-literal:'10068')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3156')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'8369')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2090')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1401')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'6140')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3434')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'588')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1177')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'5187')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'259')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'5882')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'102')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'4195')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'328')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3446')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'914')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'633')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1206')}, {'chapters': Value(typed-literal:'5'), 'words': Value(typed-literal:'13465')}, {'chapters': Value(typed-literal:'5'), 'words': Value(typed-literal:'12313')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1924')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'6109')}, {'chapters': Value(typed-literal:'43'), 'words': Value(typed-literal:'109966')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1032')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1631')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'7406')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1098')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'344')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'10543')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3021')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'726')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3488')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2075')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'8742')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'709')}, {'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'4481')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'8646')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'927')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'515')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'611')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'549')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1812')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'606')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1607')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'10644')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1034')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'10531')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'15643')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'10531')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'15643')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'910')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1612')}, {'chapters': Value(typed-literal:'12'), 'words': Value(typed-literal:'67655')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'767')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1494')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'391')}]	1	0	0			
102	102	en	Does A Whore in the Bedroom have any content warnings?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""A Whore in the Bedroom"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	102	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does Late Night Cravings have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Late Night Cravings"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does I Was a Teenage Were-Goat have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""I Was a Teenage Were-Goat"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does [[story]] have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: Does A Whore in the Bedroom have any content warnings?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""A Whore in the Bedroom"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	1	0	0			
103	103	en	Does Laughing at Death have any content warnings?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Laughing at Death"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	103	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does Late Night Cravings have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Late Night Cravings"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does I Was a Teenage Were-Goat have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""I Was a Teenage Were-Goat"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does [[story]] have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: Does Laughing at Death have any content warnings?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""Laughing at Death"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	1	0	0			
104	104	en	"Does "" I HATE YOU OLIVER WOOD! "" have any content warnings?"	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title "" I HATE YOU OLIVER WOOD! "" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'')}]	104	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does You're a NEET, Osomatsu have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""You're a NEET, Osomatsu"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does Late Night Cravings have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Late Night Cravings"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does I Was a Teenage Were-Goat have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""I Was a Teenage Were-Goat"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: Does "" I HATE YOU OLIVER WOOD! "" have any content warnings?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""I HATE YOU OLIVER WOOD!"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'')}]	1	0	0			
105	105	en	Does How Can I Live Without You? have any content warnings?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""How Can I Live Without You?"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'Major Character Death')}]	105	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does You're a NEET, Osomatsu have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""You're a NEET, Osomatsu"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does I Was a Teenage Were-Goat have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""I Was a Teenage Were-Goat"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does Late Night Cravings have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Late Night Cravings"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: Does How Can I Live Without You? have any content warnings?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""How Can I Live Without You?"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'Major Character Death')}]	1	0	0			
106	106	en	Does Interrupted Sleep have any content warnings?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Interrupted Sleep"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	106	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does Late Night Cravings have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Late Night Cravings"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does How Can I Live Without You? have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""How Can I Live Without You?"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does [[story]] have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: Does Interrupted Sleep have any content warnings?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""Interrupted Sleep"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	1	0	0			
107	107	en	Does I Was a Teenage Were-Goat have any content warnings?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""I Was a Teenage Were-Goat"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	107	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does Late Night Cravings have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Late Night Cravings"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does [[story]] have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does "" I HATE YOU OLIVER WOOD! "" have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title "" I HATE YOU OLIVER WOOD! "" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: Does I Was a Teenage Were-Goat have any content warnings?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""I Was a Teenage Were-Goat"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	1	0	0			
108	108	en	Does Late Night Cravings have any content warnings?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Late Night Cravings"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings, No Archive Warnings Apply')}]	108	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does Interrupted Sleep have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Interrupted Sleep"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does I Was a Teenage Were-Goat have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""I Was a Teenage Were-Goat"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does "" I HATE YOU OLIVER WOOD! "" have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title "" I HATE YOU OLIVER WOOD! "" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: Does Late Night Cravings have any content warnings?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""Late Night Cravings"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings, No Archive Warnings Apply')}]	1	0	0			
109	109	en	Does Gut feeling have any content warnings?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Gut feeling"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'Major Character Death, No Archive Warnings Apply')}]	109	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does [[story]] have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does Late Night Cravings have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Late Night Cravings"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does You're a NEET, Osomatsu have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""You're a NEET, Osomatsu"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: Does Gut feeling have any content warnings?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""Gut feeling"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'Major Character Death, No Archive Warnings Apply')}]	1	0	0			
110	110	en	Does The Royal Family have any content warnings?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""The Royal Family"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings, Graphic Depictions Of Violence, No Archive Warnings Apply')}]	110	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does Late Night Cravings have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Late Night Cravings"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does You're a NEET, Osomatsu have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""You're a NEET, Osomatsu"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does [[story]] have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: Does The Royal Family have any content warnings?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""The Royal Family"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings, Graphic Depictions Of Violence, No Archive Warnings Apply')}]	1	0	0			
111	111	en	Does You're a NEET, Osomatsu have any content warnings?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""You're a NEET, Osomatsu"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	111	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does "" I HATE YOU OLIVER WOOD! "" have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title "" I HATE YOU OLIVER WOOD! "" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does Late Night Cravings have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Late Night Cravings"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Does The Royal Family have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""The Royal Family"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: Does You're a NEET, Osomatsu have any content warnings?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""You're a NEET, Osomatsu"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	1	0	0			
113	113	en	Who is the author of The First Moon?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The First Moon"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000183884')}]	113	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote Luna and the Milkshakes?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Luna and the Milkshakes"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of Double 0?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Double 0"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who is the author of The First Moon?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""The First Moon"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000183884')}]	1	0	0			
114	114	en	Who is the author of Lily's Masquerade?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Lily's Masquerade"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000000759')}]	114	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote The Misadventures of a Muggleborn Maid?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Misadventures of a Muggleborn Maid"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who wrote Harry Potter and the Rose's Thorns?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Harry Potter and the Rose's Thorns"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who is the author of Lily's Masquerade?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""Lily's Masquerade"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000000759')}]	1	0	0			
115	115	en	Who is the author of Watching Over You?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Watching Over You"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000000657')}, {'author': Value(literal:'A000267157')}, {'author': Value(literal:'A000000773')}, {'author': Value(literal:'A000195646')}, {'author': Value(literal:'A000007423')}, {'author': Value(literal:'A000013158')}, {'author': Value(literal:'A000003172')}, {'author': Value(literal:'A000004000')}, {'author': Value(literal:'A000073615')}, {'author': Value(literal:'A000001463')}, {'author': Value(literal:'A000000000')}, {'author': Value(literal:'A000058268')}, {'author': Value(literal:'A000000647')}, {'author': Value(literal:'A000063624')}, {'author': Value(literal:'A000311666')}, {'author': Value(literal:'A000002395')}, {'author': Value(literal:'A000208491')}, {'author': Value(literal:'A000007185')}, {'author': Value(literal:'A000688402')}, {'author': Value(literal:'A000240151')}, {'author': Value(literal:'A000011210')}, {'author': Value(literal:'A000008667')}, {'author': Value(literal:'A000001979')}, {'author': Value(literal:'A000708983')}, {'author': Value(literal:'A000793297')}, {'author': Value(literal:'A000010290')}, {'author': Value(literal:'A001180525')}, {'author': Value(literal:'A000275640')}, {'author': Value(literal:'A000007305')}, {'author': Value(literal:'A000991735')}, {'author': Value(literal:'A000174984')}, {'author': Value(literal:'A000016122')}, {'author': Value(literal:'A000522771')}, {'author': Value(literal:'A000027017')}, {'author': Value(literal:'A001154041')}, {'author': Value(literal:'A000868200')}, {'author': Value(literal:'A000083570')}, {'author': Value(literal:'A000801551')}, {'author': Value(literal:'A000005105')}, {'author': Value(literal:'A000611206')}, {'author': Value(literal:'A000000880')}, {'author': Value(literal:'A000799602')}, {'author': Value(literal:'A000006894')}, {'author': Value(literal:'A000008282')}, {'author': Value(literal:'A000010630')}, {'author': Value(literal:'A000046704')}, {'author': Value(literal:'A000607867')}, {'author': Value(literal:'A000872186')}, {'author': Value(literal:'A000100656')}, {'author': Value(literal:'A000073382')}, {'author': Value(literal:'A000001202')}, {'author': Value(literal:'A000455978')}, {'author': Value(literal:'A000004437')}, {'author': Value(literal:'A001005179')}, {'author': Value(literal:'A000016097')}, {'author': Value(literal:'A000028223')}, {'author': Value(literal:'A000023557')}, {'author': Value(literal:'A000012002')}, {'author': Value(literal:'A000023020')}, {'author': Value(literal:'A000070951')}, {'author': Value(literal:'A001131608')}, {'author': Value(literal:'A001174286')}, {'author': Value(literal:'A001096525')}, {'author': Value(literal:'A000836507')}, {'author': Value(literal:'A000047856')}, {'author': Value(literal:'A000092214')}, {'author': Value(literal:'A000852853')}, {'author': Value(literal:'A000049040')}, {'author': Value(literal:'A000196653')}]	115	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who is the author of and yours is in red underlined?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""and yours is in red underlined"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of Wait a minute, are you jealous??

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Wait a minute, are you jealous?"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who is the author of Watching Over You?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Watching Over You"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000000657')}, {'author': Value(literal:'A000267157')}, {'author': Value(literal:'A000000773')}, {'author': Value(literal:'A000195646')}, {'author': Value(literal:'A000007423')}, {'author': Value(literal:'A000013158')}, {'author': Value(literal:'A000003172')}, {'author': Value(literal:'A000004000')}, {'author': Value(literal:'A000073615')}, {'author': Value(literal:'A000001463')}, {'author': Value(literal:'A000000000')}, {'author': Value(literal:'A000058268')}, {'author': Value(literal:'A000000647')}, {'author': Value(literal:'A000063624')}, {'author': Value(literal:'A000311666')}, {'author': Value(literal:'A000002395')}, {'author': Value(literal:'A000208491')}, {'author': Value(literal:'A000007185')}, {'author': Value(literal:'A000688402')}, {'author': Value(literal:'A000240151')}, {'author': Value(literal:'A000011210')}, {'author': Value(literal:'A000008667')}, {'author': Value(literal:'A000001979')}, {'author': Value(literal:'A000708983')}, {'author': Value(literal:'A000793297')}, {'author': Value(literal:'A000010290')}, {'author': Value(literal:'A001180525')}, {'author': Value(literal:'A000275640')}, {'author': Value(literal:'A000007305')}, {'author': Value(literal:'A000991735')}, {'author': Value(literal:'A000174984')}, {'author': Value(literal:'A000016122')}, {'author': Value(literal:'A000522771')}, {'author': Value(literal:'A000027017')}, {'author': Value(literal:'A001154041')}, {'author': Value(literal:'A000868200')}, {'author': Value(literal:'A000083570')}, {'author': Value(literal:'A000801551')}, {'author': Value(literal:'A000005105')}, {'author': Value(literal:'A000611206')}, {'author': Value(literal:'A000000880')}, {'author': Value(literal:'A000799602')}, {'author': Value(literal:'A000006894')}, {'author': Value(literal:'A000008282')}, {'author': Value(literal:'A000010630')}, {'author': Value(literal:'A000046704')}, {'author': Value(literal:'A000607867')}, {'author': Value(literal:'A000872186')}, {'author': Value(literal:'A000100656')}, {'author': Value(literal:'A000073382')}, {'author': Value(literal:'A000001202')}, {'author': Value(literal:'A000455978')}, {'author': Value(literal:'A000004437')}, {'author': Value(literal:'A001005179')}, {'author': Value(literal:'A000016097')}, {'author': Value(literal:'A000028223')}, {'author': Value(literal:'A000023557')}, {'author': Value(literal:'A000012002')}, {'author': Value(literal:'A000023020')}, {'author': Value(literal:'A000070951')}, {'author': Value(literal:'A001131608')}, {'author': Value(literal:'A001174286')}, {'author': Value(literal:'A001096525')}, {'author': Value(literal:'A000836507')}, {'author': Value(literal:'A000047856')}, {'author': Value(literal:'A000092214')}, {'author': Value(literal:'A000852853')}, {'author': Value(literal:'A000049040')}, {'author': Value(literal:'A000196653')}]	1	0	0			
116	116	en	Who is the author of and yours is in red underlined?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""and yours is in red underlined"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000025922')}]	116	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who is the author of Watching Over You?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Watching Over You"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Where is you're my flesh and blood, whether you like it or not published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""you're my flesh and blood, whether you like it or not"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: Who is the author of and yours is in red underlined?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""and yours is in red underlined"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000025922')}]	1	0	0			
117	117	en	Who is the author of Poker Night with Mob!Draco?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Poker Night with Mob!Draco"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000080390')}]	117	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who is the author of Lily's Masquerade?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Lily's Masquerade"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of Watching Over You?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Watching Over You"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who is the author of Poker Night with Mob!Draco?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""Poker Night with Mob!Draco"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000080390')}]	1	0	0			
118	118	en	Who is the author of At Grimmauld Place?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""At Grimmauld Place"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000271310')}]	118	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who is the author of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of Lily's Masquerade?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Lily's Masquerade"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who wrote The Misadventures of a Muggleborn Maid?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Misadventures of a Muggleborn Maid"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who is the author of At Grimmauld Place?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""At Grimmauld Place"" . 
  ?story golem:author ?author . 
}
"	"EndPointInternalError: The endpoint returned the HTTP status code 500. 

Response:
b'Virtuoso S1TAT Error Query did not complete due to ANYTIME timeout.\r\n'"	0	1	1	Failed execution		
119	119	en	Who is the author of Double 0?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Double 0"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000003815')}]	119	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who is the author of The First Moon?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The First Moon"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of and yours is in red underlined?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""and yours is in red underlined"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who is the author of Double 0?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""Double 0"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000003815')}]	1	0	0			
120	120	en	Who is the author of A Sign from Beyond The Grave?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""A Sign from Beyond The Grave"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000028653')}]	120	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote Anatomy of The Haunted?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Anatomy of The Haunted"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of The First Moon?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The First Moon"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of At Grimmauld Place?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""At Grimmauld Place"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who is the author of A Sign from Beyond The Grave?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""A Sign from Beyond The Grave"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000028653')}]	1	0	0			
121	121	en	Who is the author of 10 Things Draco Hates About Harry Potter?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""10 Things Draco Hates About Harry Potter"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000264308')}]	121	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote Harry Potter and the Rose's Thorns?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Harry Potter and the Rose's Thorns"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: What collections is Harry Potter and the year fate stepped in part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Harry Potter and the year fate stepped in"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: How many chapters does Guardian of Hogwarts have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Guardian of Hogwarts"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: Who is the author of 10 Things Draco Hates About Harry Potter?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE {  
  ?story golem:title ""10 Things Draco Hates About Harry Potter"" .  
  ?story golem:author ?author .  
}
"	[{'author': Value(literal:'A000264308')}]	1	0	0			
122	122	en	Who is the author of Wait a minute, are you jealous??	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Wait a minute, are you jealous?"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000046126')}, {'author': Value(literal:'A000039335')}]	122	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who is the author of Watching Over You?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Watching Over You"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: When was I Just Want... published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""I Just Want..."" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: Who is the author of Wait a minute, are you jealous??

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""Wait a minute, are you jealous?"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000046126')}, {'author': Value(literal:'A000039335')}]	1	0	0			
124	124	en	What collections is Harry Potter and the year fate stepped in part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Harry Potter and the year fate stepped in"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	124	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does Guardian of Hogwarts have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Guardian of Hogwarts"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: When was Those Dead Eyes (Harry Potter) published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Those Dead Eyes (Harry Potter)"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: Who wrote Harry Potter and the Rose's Thorns?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Harry Potter and the Rose's Thorns"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: What collections is Harry Potter and the year fate stepped in part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?collection WHERE { 
?story golem:title ""Harry Potter and the year fate stepped in"" . 
?story golem:collections ?collection . 
}
"	[{'collection': Value(literal:'None')}]	0	1	1	Evaluation method error	Different var name	
125	125	en	What collections is Disaster and Chaos : Snippets part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Disaster and Chaos : Snippets"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	125	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is Obliviate part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Obliviate"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is Prophecies and Fairytales part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Prophecies and Fairytales"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is [[story]] part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""[[story]]"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: What collections is Disaster and Chaos : Snippets part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""Disaster and Chaos : Snippets"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'None')}]	1	0	0			
126	126	en	What collections is Obliviate part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Obliviate"" . ?story golem:collections ?collections . }"	"[{'collections': Value(literal:'None')}, {'collections': Value(literal:'Dramione WIPS')}, {'collections': Value(literal:'Chocolate Box - Round 7')}, {'collections': Value(literal:""Books I would lose sleep over, Fics to Find the Time For, Imma read it again, Mirage664's Read and Loved, Well-Written HP Fanfiction Collection, great harry fics"")}, {'collections': Value(literal:'2015 Sherlolly Big Bang Challenge')}, {'collections': Value(literal:'BBC Merlin Rare Fair')}, {'collections': Value(literal:'Marvelously Magical Bingo 2020')}, {'collections': Value(literal:'KakuHida Week')}]"	126	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is The Letters From No One part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""The Letters From No One"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is [[story]] part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""[[story]]"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is The Tides of Power part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""The Tides of Power"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: What collections is Obliviate part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""Obliviate"" . 
?story golem:collections ?collections . 
}
"	"[{'collections': Value(literal:'None')}, {'collections': Value(literal:'Dramione WIPS')}, {'collections': Value(literal:'Chocolate Box - Round 7')}, {'collections': Value(literal:""Books I would lose sleep over, Fics to Find the Time For, Imma read it again, Mirage664's Read and Loved, Well-Written HP Fanfiction Collection, great harry fics"")}, {'collections': Value(literal:'2015 Sherlolly Big Bang Challenge')}, {'collections': Value(literal:'BBC Merlin Rare Fair')}, {'collections': Value(literal:'Marvelously Magical Bingo 2020')}, {'collections': Value(literal:'KakuHida Week')}]"	1	0	0			
127	127	en	What collections is The Letters From No One part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""The Letters From No One"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	127	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is Obliviate part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Obliviate"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is [[story]] part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""[[story]]"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is so I kind of love you part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""so I kind of love you"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: What collections is The Letters From No One part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""The Letters From No One"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'None')}]	1	0	0			
128	128	en	What collections is Justice and Learning part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Justice and Learning"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'Femslash Exchange 2014')}]	128	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is The Tides of Power part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""The Tides of Power"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is Obliviate part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Obliviate"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is [[story]] part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""[[story]]"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: What collections is Justice and Learning part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""Justice and Learning"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'Femslash Exchange 2014')}]	1	0	0			
129	129	en	What collections is The Tides of Power part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""The Tides of Power"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	129	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is Obliviate part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Obliviate"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is Justice and Learning part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Justice and Learning"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is Prophecies and Fairytales part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Prophecies and Fairytales"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: What collections is The Tides of Power part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""The Tides of Power"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'None')}]	1	0	0			
130	130	en	What collections is Prophecies and Fairytales part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Prophecies and Fairytales"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'The Quidditch Pitch')}]	130	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ___ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: What collections is [[story]] part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""[[story]]"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: What collections is Prophecies and Fairytales part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""Prophecies and Fairytales"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'The Quidditch Pitch')}]	1	0	0			
131	131	en	What collections is ' THE GIRL WHO LIVED ' part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""' THE GIRL WHO LIVED '"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	131	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is [[story]] part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""[[story]]"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: Who is the author of Lily's Masquerade?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Lily's Masquerade"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: What collections is Harry Potter and the year fate stepped in part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Harry Potter and the year fate stepped in"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: What collections is ' THE GIRL WHO LIVED ' part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
  ?story golem:title ""THE GIRL WHO LIVED"" . 
  ?story golem:collections ?collections . 
}
"	[]	0	0	1	Failed NER		
132	132	en	What collections is so I kind of love you part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""so I kind of love you"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	132	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is A Weasley Wedding part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""A Weasley Wedding"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is [[story]] part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""[[story]]"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is Obliviate part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Obliviate"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: What collections is so I kind of love you part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""so I kind of love you"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'None')}]	1	0	0			
133	133	en	What collections is A Weasley Wedding part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""A Weasley Wedding"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}, {'collections': Value(literal:'A Wedding Oneshot Contest 2021')}]	133	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is so I kind of love you part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""so I kind of love you"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is The Letters From No One part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""The Letters From No One"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What collections is Obliviate part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Obliviate"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: What collections is A Weasley Wedding part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""A Weasley Wedding"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'None')}, {'collections': Value(literal:'A Wedding Oneshot Contest 2021')}]	1	0	0			
135	135	en	What characters appear in Tick Tock Moon?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Tick Tock Moon"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'James Potter')}, {'characters': Value(literal:'Remus Lupin')}, {'characters': Value(literal:'Sirius Black')}]	135	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What characters appear in December Delights?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""December Delights"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What characters appear in Last Holiday?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Last Holiday"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What characters appear in While We Were Constellations?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""While We Were Constellations"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: What characters appear in Tick Tock Moon?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?characters WHERE { 
  ?story golem:title ""Tick Tock Moon"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'James Potter')}, {'characters': Value(literal:'Remus Lupin')}, {'characters': Value(literal:'Sirius Black')}]	1	0	0			
136	136	en	What characters appear in No-One But You (Only The Good Die Young)?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""No-One But You (Only The Good Die Young)"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Lily Evans Potter')}, {'characters': Value(literal:'Severus Snape')}, {'characters': Value(literal:'Clint Barton')}, {'characters': Value(literal:'Howard Stark')}, {'characters': Value(literal:'Phil Coulson')}, {'characters': Value(literal:'Steve Rogers')}, {'characters': Value(literal:'Tony Stark')}, {'characters': Value(literal:'Madame Masque')}, {'characters': Value(literal:'Giuletta Nefaria')}]	136	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What characters appear in hopeless (but you give me hope)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""hopeless (but you give me hope)"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What characters appear in Your Friendly Neighborhood Death Eater?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Your Friendly Neighborhood Death Eater"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: Does a major character die in Quartet?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Quartet"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

Question: What characters appear in No-One But You (Only The Good Die Young)?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?characters WHERE { 
  ?story golem:title ""No-One But You (Only The Good Die Young)"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Lily Evans Potter')}, {'characters': Value(literal:'Severus Snape')}, {'characters': Value(literal:'Clint Barton')}, {'characters': Value(literal:'Howard Stark')}, {'characters': Value(literal:'Phil Coulson')}, {'characters': Value(literal:'Steve Rogers')}, {'characters': Value(literal:'Tony Stark')}, {'characters': Value(literal:'Madame Masque')}, {'characters': Value(literal:'Giuletta Nefaria')}]	1	0	0			
137	137	en	What characters appear in Last Holiday?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Last Holiday"" . ?story golem:characters ?characters . }"	"[{'characters': Value(literal:'Adrian Pucey')}, {'characters': Value(literal:'Astoria Greengrass')}, {'characters': Value(literal:'Blaise Zabini')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Theodore Nott')}, {'characters': Value(literal:'Daphne Greengrass')}, {'characters': Value(literal:'Emma Swan')}, {'characters': Value(literal:'Captain Hook | Killian Jones')}, {'characters': Value(literal:'Belle (Once Upon a Time)')}, {'characters': Value(literal:'Rumplestiltskin | Mr. Gold')}, {'characters': Value(literal:'Snow White | Mary Margaret Blanchard')}, {'characters': Value(literal:'Red Riding Hood | Ruby')}, {'characters': Value(literal:'Baelfire | Neal Cassidy')}, {'characters': Value(literal:'Prince ""Charming"" James | David Nolan')}, {'characters': Value(literal:'Milah (Once Upon a Time)')}, {'characters': Value(literal:'Widow Lucas | Granny')}, {'characters': Value(literal:'Gus | Billy')}, {'characters': Value(literal:'Oliver Queen')}, {'characters': Value(literal:'Roy Harper')}, {'characters': Value(literal:'Nyssa al Ghul')}, {'characters': Value(literal:'Sara Lance')}, {'characters': Value(literal:'Thea Queen')}, {'characters': Value(literal:'Laurel Lance')}, {'characters': Value(literal:'Moira Queen')}, {'characters': Value(literal:'Robert Queen')}, {'characters': Value(literal:'Isabel Rochev')}, {'characters': Value(literal:'Walter Steele')}, {'characters': Value(literal:'Bobby Singer')}, {'characters': Value(literal:'Castiel (Supernatural)')}, {'characters': Value(literal:'Dean Winchester')}, {'characters': Value(literal:'Jack Kline')}, {'characters': Value(literal:'Sam Winchester')}, {'characters': Value(literal:'Crowley (Supernatural)')}, {'characters': Value(literal:'Eileen Leahy')}, {'characters': Value(literal:'The Shadow | The Cosmic Entity (Supernatural)')}, {'characters': Value(literal:'Mrs. Butters (Supernatural)')}]"	137	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What characters appear in December Delights?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""December Delights"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What characters appear in [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What stories is [[character]] featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""[[character]]"" . }
    </SPARQL>

    ###
    

Question: What characters appear in Last Holiday?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?characters WHERE { 
?story golem:title ""Last Holiday"" . 
?story golem:characters ?characters . 
}
"	"[{'characters': Value(literal:'Adrian Pucey')}, {'characters': Value(literal:'Astoria Greengrass')}, {'characters': Value(literal:'Blaise Zabini')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Theodore Nott')}, {'characters': Value(literal:'Daphne Greengrass')}, {'characters': Value(literal:'Emma Swan')}, {'characters': Value(literal:'Captain Hook | Killian Jones')}, {'characters': Value(literal:'Belle (Once Upon a Time)')}, {'characters': Value(literal:'Rumplestiltskin | Mr. Gold')}, {'characters': Value(literal:'Snow White | Mary Margaret Blanchard')}, {'characters': Value(literal:'Red Riding Hood | Ruby')}, {'characters': Value(literal:'Baelfire | Neal Cassidy')}, {'characters': Value(literal:'Prince ""Charming"" James | David Nolan')}, {'characters': Value(literal:'Milah (Once Upon a Time)')}, {'characters': Value(literal:'Widow Lucas | Granny')}, {'characters': Value(literal:'Gus | Billy')}, {'characters': Value(literal:'Oliver Queen')}, {'characters': Value(literal:'Roy Harper')}, {'characters': Value(literal:'Nyssa al Ghul')}, {'characters': Value(literal:'Sara Lance')}, {'characters': Value(literal:'Thea Queen')}, {'characters': Value(literal:'Laurel Lance')}, {'characters': Value(literal:'Moira Queen')}, {'characters': Value(literal:'Robert Queen')}, {'characters': Value(literal:'Isabel Rochev')}, {'characters': Value(literal:'Walter Steele')}, {'characters': Value(literal:'Bobby Singer')}, {'characters': Value(literal:'Castiel (Supernatural)')}, {'characters': Value(literal:'Dean Winchester')}, {'characters': Value(literal:'Jack Kline')}, {'characters': Value(literal:'Sam Winchester')}, {'characters': Value(literal:'Crowley (Supernatural)')}, {'characters': Value(literal:'Eileen Leahy')}, {'characters': Value(literal:'The Shadow | The Cosmic Entity (Supernatural)')}, {'characters': Value(literal:'Mrs. Butters (Supernatural)')}]"	1	0	0			
138	138	en	What characters appear in While We Were Constellations?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""While We Were Constellations"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Remus Lupin')}, {'characters': Value(literal:'Sirius Black')}]	138	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me all the stories from the FAINALFANTASYXIV universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""FAINALFANTASYXIV"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: What characters appear in December Delights?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""December Delights"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What characters appear in Time line?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Time line"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: What characters appear in While We Were Constellations?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?characters WHERE { 
?story golem:title ""While We Were Constellations"" . 
?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Remus Lupin')}, {'characters': Value(literal:'Sirius Black')}]	1	0	0			
139	139	en	What characters appear in December Delights?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""December Delights"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Draco Malfoy')}, {'characters': Value(literal:'Harry Potter')}]	139	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What characters appear in Last Holiday?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Last Holiday"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What characters appear in February 15?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""February 15"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What characters appear in Tick Tock Moon?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Tick Tock Moon"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: What characters appear in December Delights?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?characters WHERE { 
  ?story golem:title ""December Delights"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Draco Malfoy')}, {'characters': Value(literal:'Harry Potter')}]	1	0	0			
140	140	en	What characters appear in The Two Names of Xiomara Rolanda Hooch?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""The Two Names of Xiomara Rolanda Hooch"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Albus Dumbledore')}, {'characters': Value(literal:'Minerva McGonagall')}, {'characters': Value(literal:'Madam Hooch')}]	140	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What stories is __ featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""__"" . }
    </SPARQL>

    ###
    

    Question: What are the keywords of Davina Claire and the Mikaelson wizard?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Davina Claire and the Mikaelson wizard"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: Who is the author of Lily's Masquerade?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Lily's Masquerade"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: What characters appear in The Two Names of Xiomara Rolanda Hooch?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?character WHERE { 
?story golem:title ""The Two Names of Xiomara Rolanda Hooch"" . 
?story golem:characters ?character . 
}
"	[{'character': Value(literal:'Albus Dumbledore')}, {'character': Value(literal:'Minerva McGonagall')}, {'character': Value(literal:'Madam Hooch')}]	0	1	1	Evaluation method error	Non-grouped	
142	142	en	What characters appear in Time line?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Time line"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Albus Dumbledore')}, {'characters': Value(literal:'Draco Malfoy')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Lucius Malfoy')}, {'characters': Value(literal:'Neville Longbottom')}, {'characters': Value(literal:'Ron Weasley')}, {'characters': Value(literal:'Lord Voldemort')}, {'characters': Value(literal:'Narcissa Malfoy')}, {'characters': Value(literal:'Bellatrix Lestrange')}, {'characters': Value(literal:'Alice Marvolo Riddle')}]	142	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What characters appear in [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What characters appear in February 15?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""February 15"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What characters appear in While We Were Constellations?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""While We Were Constellations"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: What characters appear in Time line?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?characters WHERE { 
  ?story golem:title ""Time line"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Albus Dumbledore')}, {'characters': Value(literal:'Draco Malfoy')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Lucius Malfoy')}, {'characters': Value(literal:'Neville Longbottom')}, {'characters': Value(literal:'Ron Weasley')}, {'characters': Value(literal:'Lord Voldemort')}, {'characters': Value(literal:'Narcissa Malfoy')}, {'characters': Value(literal:'Bellatrix Lestrange')}, {'characters': Value(literal:'Alice Marvolo Riddle')}]	1	0	0			
143	143	en	What characters appear in hopeless (but you give me hope)?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""hopeless (but you give me hope)"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'James Potter')}, {'characters': Value(literal:'Regulus Black')}, {'characters': Value(literal:'Remus Lupin')}, {'characters': Value(literal:'Sirius Black')}]	143	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What characters appear in No-One But You (Only The Good Die Young)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""No-One But You (Only The Good Die Young)"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What stories is [[character]] featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""[[character]]"" . }
    </SPARQL>

    ###
    

    Question: What characters appear in [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: What characters appear in hopeless (but you give me hope)?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?characters WHERE { 
?story golem:title ""hopeless (but you give me hope)"" . 
?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'James Potter')}, {'characters': Value(literal:'Regulus Black')}, {'characters': Value(literal:'Remus Lupin')}, {'characters': Value(literal:'Sirius Black')}]	1	0	0			
144	144	en	What characters appear in February 15?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""February 15"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Draco Malfoy')}, {'characters': Value(literal:'Ginny Weasley')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Lucius Malfoy')}, {'characters': Value(literal:'Narcissa Black Malfoy')}, {'characters': Value(literal:'Pansy Parkinson')}, {'characters': Value(literal:'Albus Severus Potter')}, {'characters': Value(literal:'John Lennon')}, {'characters': Value(literal:'Paul McCartney')}, {'characters': Value(literal:'Ringo Starr')}, {'characters': Value(literal:'George Harrison')}, {'characters': Value(literal:'Greg Lestrade')}, {'characters': Value(literal:'Sherlock Holmes')}, {'characters': Value(literal:'Becky Lynch | Rebecca Knox')}, {'characters': Value(literal:'Rhea Ripley')}]	144	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What characters appear in December Delights?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""December Delights"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What characters appear in Last Holiday?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Last Holiday"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: What characters appear in Time line?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Time line"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: What characters appear in February 15?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
SELECT ?characters WHERE { 
  ?story golem:title ""February 15"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Draco Malfoy')}, {'characters': Value(literal:'Ginny Weasley')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Lucius Malfoy')}, {'characters': Value(literal:'Narcissa Black Malfoy')}, {'characters': Value(literal:'Pansy Parkinson')}, {'characters': Value(literal:'Albus Severus Potter')}, {'characters': Value(literal:'John Lennon')}, {'characters': Value(literal:'Paul McCartney')}, {'characters': Value(literal:'Ringo Starr')}, {'characters': Value(literal:'George Harrison')}, {'characters': Value(literal:'Greg Lestrade')}, {'characters': Value(literal:'Sherlock Holmes')}, {'characters': Value(literal:'Becky Lynch | Rebecca Knox')}, {'characters': Value(literal:'Rhea Ripley')}]	1	0	0			
146	146	en	What series is (fanart) Wolfstar prompts a part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""(fanart) Wolfstar prompts"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}]	146	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What series is Sparked by Design a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Sparked by Design"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What series is Two Lions and a Badger a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Two Lions and a Badger"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What series is [[story]] a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: What series is (fanart) Wolfstar prompts a part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series WHERE { 
?story golem:title ""Wolfstar prompts"" . 
?story golem:series ?series . }
"	[]	0	0	1	Failed NER		
147	147	en	What series is Two Lions and a Badger a part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Two Lions and a Badger"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}]	147	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What series is The Forest Again a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""The Forest Again"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What series is (fanart) Wolfstar prompts a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""(fanart) Wolfstar prompts"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What series is [[story]] a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: What series is Two Lions and a Badger a part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series WHERE { 
?story golem:title ""Two Lions and a Badger"" . 
?story golem:series ?series . 
}
"	[{'series': Value(literal:'None')}]	1	0	0			
148	148	en	What series is July 28th Hunger Games a part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""July 28th Hunger Games"" . ?story golem:series ?series . }"	[{'series': Value(literal:'My Hunger Games Simulations [3]')}]	148	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is Harry Potter and the year fate stepped in part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Harry Potter and the year fate stepped in"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: When was Those Dead Eyes (Harry Potter) published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Those Dead Eyes (Harry Potter)"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: What series is The Forest Again a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""The Forest Again"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: What series is July 28th Hunger Games a part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series WHERE { 
  ?story golem:title ""July 28th Hunger Games"" . 
  ?story golem:series ?series . 
}
"	[{'series': Value(literal:'My Hunger Games Simulations [3]')}]	1	0	0			
149	149	en	What series is When the Masons came to dinner a part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""When the Masons came to dinner"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}]	149	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What series is The Forest Again a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""The Forest Again"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What series is [[story]] a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What series is Good morning, Harry a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Good morning, Harry"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: What series is When the Masons came to dinner a part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series WHERE { 
?story golem:title ""When the Masons came to dinner"" . 
?story golem:series ?series . 
}
"	[{'series': Value(literal:'None')}]	1	0	0			
150	150	en	What series is The Forest Again a part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""The Forest Again"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}]	150	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What series is Two Lions and a Badger a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Two Lions and a Badger"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What is Forbidden Like The Forest about?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Forbidden Like The Forest"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: What series is [[story]] a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: What series is The Forest Again a part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series WHERE { 
  ?story golem:title ""The Forest Again"" . 
  ?story golem:series ?series . 
}
"	[{'series': Value(literal:'None')}]	1	0	0			
151	151	en	What series is Recompense and Redress a part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Recompense and Redress"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}]	151	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What series is A Place a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""A Place"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What collections is Justice and Learning part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Justice and Learning"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What series is [[story]] a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: What series is Recompense and Redress a part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?series WHERE { 
?story golem:title ""Recompense and Redress"" . 
?story golem:series ?series . 
}
"	[{'series': Value(literal:'None')}]	1	0	0			
152	152	en	What series is Good morning, Harry a part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Good morning, Harry"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}]	152	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is Harry Potter and the year fate stepped in part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Harry Potter and the year fate stepped in"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: What series is When the Masons came to dinner a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""When the Masons came to dinner"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What series is [[story]] a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: What series is Good morning, Harry a part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?series WHERE { 
?story golem:title ""Good morning, Harry"" . 
?story golem:series ?series . 
}
"	[{'series': Value(literal:'None')}]	1	0	0			
153	153	en	What series is A Place a part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""A Place"" . ?story golem:series ?series . }"	"[{'series': Value(literal:""Spinner's End [2]"")}, {'series': Value(literal:'None')}, {'series': Value(literal:'Guild Wars 2 Stories [6]')}]"	153	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What series is [[story]] a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What series is Sparked by Design a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Sparked by Design"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What series is Recompense and Redress a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Recompense and Redress"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: What series is A Place a part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?series WHERE { 
?story golem:title ""A Place"" . 
?story golem:series ?series . 
}
"	"[{'series': Value(literal:""Spinner's End [2]"")}, {'series': Value(literal:'None')}, {'series': Value(literal:'Guild Wars 2 Stories [6]')}]"	1	0	0			
154	154	en	What series is High Cotton a part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""High Cotton"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}]	154	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What series is A Place a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""A Place"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: Is keyword ABC Challenge a given keyword in Of Splendour in the Grass?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""Of Splendour in the Grass"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""ABC Challenge"") . }
    </SPARQL>

    ###
    

    Question: What collections is The Tides of Power part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""The Tides of Power"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: What series is High Cotton a part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""High Cotton"" . ?story golem:series ?series . }
"	[{'series': Value(literal:'None')}]	1	0	0			
155	155	en	What series is Sparked by Design a part of?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Sparked by Design"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}]	155	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What series is [[story]] a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What series is (fanart) Wolfstar prompts a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""(fanart) Wolfstar prompts"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: What series is A Place a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""A Place"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: What series is Sparked by Design a part of?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series WHERE { 
  ?story golem:title ""Sparked by Design"" . 
  ?story golem:series ?series . 
}
"	[{'series': Value(literal:'None')}]	1	0	0			
156	156	en	Show me all multi-chapter stories	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:title ?title . ?story golem:numberOfChapters ?chapters . FILTER(?chapters > 1) }		156	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many chapters does [[story]] have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: How many chapters does Prologue have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Prologue"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: Show me all multi-chapter stories

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?story WHERE { 
?story golem:numberOfChapters ?chapters .
FILTER(?chapters > 1)
}
"	[{'story': Value(uri:'https://golemlab.eu/graph/28716786')}, {'story': Value(uri:'https://golemlab.eu/graph/28736067')}, {'story': Value(uri:'https://golemlab.eu/graph/28740072')}, {'story': Value(uri:'https://golemlab.eu/graph/28757979')}, {'story': Value(uri:'https://golemlab.eu/graph/28758684')}, {'story': Value(uri:'https://golemlab.eu/graph/28764234')}, {'story': Value(uri:'https://golemlab.eu/graph/28777617')}, {'story': Value(uri:'https://golemlab.eu/graph/28782303')}, {'story': Value(uri:'https://golemlab.eu/graph/28783053')}, {'story': Value(uri:'https://golemlab.eu/graph/28787166')}, {'story': Value(uri:'https://golemlab.eu/graph/28790646')}, {'story': Value(uri:'https://golemlab.eu/graph/28793721')}, {'story': Value(uri:'https://golemlab.eu/graph/28802139')}, {'story': Value(uri:'https://golemlab.eu/graph/28812510')}, {'story': Value(uri:'https://golemlab.eu/graph/28826841')}, {'story': Value(uri:'https://golemlab.eu/graph/28827996')}, {'story': Value(uri:'https://golemlab.eu/graph/28830345')}, {'story': Value(uri:'https://golemlab.eu/graph/28833111')}, {'story': Value(uri:'https://golemlab.eu/graph/28834788')}, {'story': Value(uri:'https://golemlab.eu/graph/28837122')}, {'story': Value(uri:'https://golemlab.eu/graph/28840947')}, {'story': Value(uri:'https://golemlab.eu/graph/28848873')}, {'story': Value(uri:'https://golemlab.eu/graph/28854909')}, {'story': Value(uri:'https://golemlab.eu/graph/28861092')}, {'story': Value(uri:'https://golemlab.eu/graph/28869417')}, {'story': Value(uri:'https://golemlab.eu/graph/28871640')}, {'story': Value(uri:'https://golemlab.eu/graph/2888468')}, {'story': Value(uri:'https://golemlab.eu/graph/28895625')}, {'story': Value(uri:'https://golemlab.eu/graph/28903380')}, {'story': Value(uri:'https://golemlab.eu/graph/28910655')}, {'story': Value(uri:'https://golemlab.eu/graph/28913376')}, {'story': Value(uri:'https://golemlab.eu/graph/28916880')}, {'story': Value(uri:'https://golemlab.eu/graph/28924149')}, {'story': Value(uri:'https://golemlab.eu/graph/28935648')}, {'story': Value(uri:'https://golemlab.eu/graph/28937739')}, {'story': Value(uri:'https://golemlab.eu/graph/28961790')}, {'story': Value(uri:'https://golemlab.eu/graph/28965414')}, {'story': Value(uri:'https://golemlab.eu/graph/28965882')}, {'story': Value(uri:'https://golemlab.eu/graph/28966494')}, {'story': Value(uri:'https://golemlab.eu/graph/28973481')}, {'story': Value(uri:'https://golemlab.eu/graph/28977186')}, {'story': Value(uri:'https://golemlab.eu/graph/28980069')}, {'story': Value(uri:'https://golemlab.eu/graph/28983381')}, {'story': Value(uri:'https://golemlab.eu/graph/28985037')}, {'story': Value(uri:'https://golemlab.eu/graph/28985385')}, {'story': Value(uri:'https://golemlab.eu/graph/29010378')}, {'story': Value(uri:'https://golemlab.eu/graph/29015277')}, {'story': Value(uri:'https://golemlab.eu/graph/29018478')}, {'story': Value(uri:'https://golemlab.eu/graph/29022723')}, {'story': Value(uri:'https://golemlab.eu/graph/29028033')}, {'story': Value(uri:'https://golemlab.eu/graph/29028213')}, {'story': Value(uri:'https://golemlab.eu/graph/29034816')}, {'story': Value(uri:'https://golemlab.eu/graph/29038932')}, {'story': Value(uri:'https://golemlab.eu/graph/29053368')}, {'story': Value(uri:'https://golemlab.eu/graph/29067216')}, {'story': Value(uri:'https://golemlab.eu/graph/2907182')}, {'story': Value(uri:'https://golemlab.eu/graph/29085138')}, {'story': Value(uri:'https://golemlab.eu/graph/29094981')}, {'story': Value(uri:'https://golemlab.eu/graph/29104473')}, {'story': Value(uri:'https://golemlab.eu/graph/29107125')}, {'story': Value(uri:'https://golemlab.eu/graph/29109741')}, {'story': Value(uri:'https://golemlab.eu/graph/29126295')}, {'story': Value(uri:'https://golemlab.eu/graph/29143119')}, {'story': Value(uri:'https://golemlab.eu/graph/29148225')}, {'story': Value(uri:'https://golemlab.eu/graph/29158200')}, {'story': Value(uri:'https://golemlab.eu/graph/29175687')}, {'story': Value(uri:'https://golemlab.eu/graph/29178471')}, {'story': Value(uri:'https://golemlab.eu/graph/29183955')}, {'story': Value(uri:'https://golemlab.eu/graph/29185464')}, {'story': Value(uri:'https://golemlab.eu/graph/29202681')}, {'story': Value(uri:'https://golemlab.eu/graph/29238810')}, {'story': Value(uri:'https://golemlab.eu/graph/29256195')}, {'story': Value(uri:'https://golemlab.eu/graph/29288016')}, {'story': Value(uri:'https://golemlab.eu/graph/29292417')}, {'story': Value(uri:'https://golemlab.eu/graph/29294115')}, {'story': Value(uri:'https://golemlab.eu/graph/29296215')}, {'story': Value(uri:'https://golemlab.eu/graph/29315091')}, {'story': Value(uri:'https://golemlab.eu/graph/29317170')}, {'story': Value(uri:'https://golemlab.eu/graph/29317875')}, {'story': Value(uri:'https://golemlab.eu/graph/29319393')}, {'story': Value(uri:'https://golemlab.eu/graph/29322567')}, {'story': Value(uri:'https://golemlab.eu/graph/29325663')}, {'story': Value(uri:'https://golemlab.eu/graph/29332518')}, {'story': Value(uri:'https://golemlab.eu/graph/29335626')}, {'story': Value(uri:'https://golemlab.eu/graph/29338668')}, {'story': Value(uri:'https://golemlab.eu/graph/29354037')}, {'story': Value(uri:'https://golemlab.eu/graph/29356665')}, {'story': Value(uri:'https://golemlab.eu/graph/29374035')}, {'story': Value(uri:'https://golemlab.eu/graph/29381187')}, {'story': Value(uri:'https://golemlab.eu/graph/29390175')}, {'story': Value(uri:'https://golemlab.eu/graph/29393733')}, {'story': Value(uri:'https://golemlab.eu/graph/29398884')}, {'story': Value(uri:'https://golemlab.eu/graph/29412252')}, {'story': Value(uri:'https://golemlab.eu/graph/29412807')}, {'story': Value(uri:'https://golemlab.eu/graph/29414877')}, {'story': Value(uri:'https://golemlab.eu/graph/29427996')}, {'story': Value(uri:'https://golemlab.eu/graph/29435250')}, {'story': Value(uri:'https://golemlab.eu/graph/29438172')}, {'story': Value(uri:'https://golemlab.eu/graph/29446041')}, {'story': Value(uri:'https://golemlab.eu/graph/29453331')}, {'story': Value(uri:'https://golemlab.eu/graph/29454939')}, {'story': Value(uri:'https://golemlab.eu/graph/29463504')}, {'story': Value(uri:'https://golemlab.eu/graph/29475612')}, {'story': Value(uri:'https://golemlab.eu/graph/29476785')}, {'story': Value(uri:'https://golemlab.eu/graph/29481423')}, {'story': Value(uri:'https://golemlab.eu/graph/29497266')}, {'story': Value(uri:'https://golemlab.eu/graph/29497326')}, {'story': Value(uri:'https://golemlab.eu/graph/29497557')}, {'story': Value(uri:'https://golemlab.eu/graph/29512083')}, {'story': Value(uri:'https://golemlab.eu/graph/29558199')}, {'story': Value(uri:'https://golemlab.eu/graph/29563290')}, {'story': Value(uri:'https://golemlab.eu/graph/29563644')}, {'story': Value(uri:'https://golemlab.eu/graph/29564181')}, {'story': Value(uri:'https://golemlab.eu/graph/29572575')}, {'story': Value(uri:'https://golemlab.eu/graph/29578716')}, {'story': Value(uri:'https://golemlab.eu/graph/29590653')}, {'story': Value(uri:'https://golemlab.eu/graph/29590659')}, {'story': Value(uri:'https://golemlab.eu/graph/29591628')}, {'story': Value(uri:'https://golemlab.eu/graph/29595597')}, {'story': Value(uri:'https://golemlab.eu/graph/29603976')}, {'story': Value(uri:'https://golemlab.eu/graph/29608488')}, {'story': Value(uri:'https://golemlab.eu/graph/29608809')}, {'story': Value(uri:'https://golemlab.eu/graph/29614644')}, {'story': Value(uri:'https://golemlab.eu/graph/29618511')}, {'story': Value(uri:'https://golemlab.eu/graph/29619099')}, {'story': Value(uri:'https://golemlab.eu/graph/29620971')}, {'story': Value(uri:'https://golemlab.eu/graph/29621727')}, {'story': Value(uri:'https://golemlab.eu/graph/29646615')}, {'story': Value(uri:'https://golemlab.eu/graph/29652525')}, {'story': Value(uri:'https://golemlab.eu/graph/29652630')}, {'story': Value(uri:'https://golemlab.eu/graph/29670906')}, {'story': Value(uri:'https://golemlab.eu/graph/29730609')}, {'story': Value(uri:'https://golemlab.eu/graph/29745042')}, {'story': Value(uri:'https://golemlab.eu/graph/29746968')}, {'story': Value(uri:'https://golemlab.eu/graph/29755761')}, {'story': Value(uri:'https://golemlab.eu/graph/29771139')}, {'story': Value(uri:'https://golemlab.eu/graph/29774334')}, {'story': Value(uri:'https://golemlab.eu/graph/29786109')}, {'story': Value(uri:'https://golemlab.eu/graph/29793915')}, {'story': Value(uri:'https://golemlab.eu/graph/29799909')}, {'story': Value(uri:'https://golemlab.eu/graph/3262439')}, {'story': Value(uri:'https://golemlab.eu/graph/32643745')}, {'story': Value(uri:'https://golemlab.eu/graph/32708542')}, {'story': Value(uri:'https://golemlab.eu/graph/3270962')}, {'story': Value(uri:'https://golemlab.eu/graph/32709964')}, {'story': Value(uri:'https://golemlab.eu/graph/32735410')}, {'story': Value(uri:'https://golemlab.eu/graph/32841823')}, {'story': Value(uri:'https://golemlab.eu/graph/32864941')}, {'story': Value(uri:'https://golemlab.eu/graph/32983921')}, {'story': Value(uri:'https://golemlab.eu/graph/32991847')}, {'story': Value(uri:'https://golemlab.eu/graph/33013366')}, {'story': Value(uri:'https://golemlab.eu/graph/33014758')}, {'story': Value(uri:'https://golemlab.eu/graph/3303485')}, {'story': Value(uri:'https://golemlab.eu/graph/3305177')}, {'story': Value(uri:'https://golemlab.eu/graph/3305558')}, {'story': Value(uri:'https://golemlab.eu/graph/33082468')}, {'story': Value(uri:'https://golemlab.eu/graph/33104080')}, {'story': Value(uri:'https://golemlab.eu/graph/33173890')}, {'story': Value(uri:'https://golemlab.eu/graph/33223441')}, {'story': Value(uri:'https://golemlab.eu/graph/33231475')}, {'story': Value(uri:'https://golemlab.eu/graph/33267973')}, {'story': Value(uri:'https://golemlab.eu/graph/33296224')}, {'story': Value(uri:'https://golemlab.eu/graph/33373339')}, {'story': Value(uri:'https://golemlab.eu/graph/33392554')}, {'story': Value(uri:'https://golemlab.eu/graph/33578878')}, {'story': Value(uri:'https://golemlab.eu/graph/33587608')}, {'story': Value(uri:'https://golemlab.eu/graph/3362102')}, {'story': Value(uri:'https://golemlab.eu/graph/33652909')}, {'story': Value(uri:'https://golemlab.eu/graph/33728647')}, {'story': Value(uri:'https://golemlab.eu/graph/33759463')}, {'story': Value(uri:'https://golemlab.eu/graph/33790081')}, {'story': Value(uri:'https://golemlab.eu/graph/338153')}, {'story': Value(uri:'https://golemlab.eu/graph/33825685')}, {'story': Value(uri:'https://golemlab.eu/graph/33874996')}, {'story': Value(uri:'https://golemlab.eu/graph/33964654')}, {'story': Value(uri:'https://golemlab.eu/graph/33992320')}, {'story': Value(uri:'https://golemlab.eu/graph/34013278')}, {'story': Value(uri:'https://golemlab.eu/graph/34086793')}, {'story': Value(uri:'https://golemlab.eu/graph/34115056')}, {'story': Value(uri:'https://golemlab.eu/graph/34128406')}, {'story': Value(uri:'https://golemlab.eu/graph/341291')}, {'story': Value(uri:'https://golemlab.eu/graph/34136992')}, {'story': Value(uri:'https://golemlab.eu/graph/34165486')}, {'story': Value(uri:'https://golemlab.eu/graph/341789')}, {'story': Value(uri:'https://golemlab.eu/graph/34193032')}, {'story': Value(uri:'https://golemlab.eu/graph/34213732')}, {'story': Value(uri:'https://golemlab.eu/graph/342243')}, {'story': Value(uri:'https://golemlab.eu/graph/34267396')}, {'story': Value(uri:'https://golemlab.eu/graph/34302184')}, {'story': Value(uri:'https://golemlab.eu/graph/34348966')}, {'story': Value(uri:'https://golemlab.eu/graph/34431877')}, {'story': Value(uri:'https://golemlab.eu/graph/34440967')}, {'story': Value(uri:'https://golemlab.eu/graph/34466551')}, {'story': Value(uri:'https://golemlab.eu/graph/34558204')}, {'story': Value(uri:'https://golemlab.eu/graph/34589662')}, {'story': Value(uri:'https://golemlab.eu/graph/3460034')}, {'story': Value(uri:'https://golemlab.eu/graph/34621873')}, {'story': Value(uri:'https://golemlab.eu/graph/34681714')}, {'story': Value(uri:'https://golemlab.eu/graph/34744186')}, {'story': Value(uri:'https://golemlab.eu/graph/34745044')}, {'story': Value(uri:'https://golemlab.eu/graph/34750645')}, {'story': Value(uri:'https://golemlab.eu/graph/34796650')}, {'story': Value(uri:'https://golemlab.eu/graph/34820476')}, {'story': Value(uri:'https://golemlab.eu/graph/34836289')}, {'story': Value(uri:'https://golemlab.eu/graph/34862122')}, {'story': Value(uri:'https://golemlab.eu/graph/3489395')}, {'story': Value(uri:'https://golemlab.eu/graph/3503957')}, {'story': Value(uri:'https://golemlab.eu/graph/3508493')}, {'story': Value(uri:'https://golemlab.eu/graph/3511937')}, {'story': Value(uri:'https://golemlab.eu/graph/3535046')}, {'story': Value(uri:'https://golemlab.eu/graph/35518528')}, {'story': Value(uri:'https://golemlab.eu/graph/3557798')}, {'story': Value(uri:'https://golemlab.eu/graph/3564602')}, {'story': Value(uri:'https://golemlab.eu/graph/3566228')}, {'story': Value(uri:'https://golemlab.eu/graph/35705566')}, {'story': Value(uri:'https://golemlab.eu/graph/3576006')}, {'story': Value(uri:'https://golemlab.eu/graph/3581778')}, {'story': Value(uri:'https://golemlab.eu/graph/3589467')}, {'story': Value(uri:'https://golemlab.eu/graph/3593511')}, {'story': Value(uri:'https://golemlab.eu/graph/3605766')}, {'story': Value(uri:'https://golemlab.eu/graph/36085039')}, {'story': Value(uri:'https://golemlab.eu/graph/3617925')}, {'story': Value(uri:'https://golemlab.eu/graph/3630858')}, {'story': Value(uri:'https://golemlab.eu/graph/36408835')}, {'story': Value(uri:'https://golemlab.eu/graph/3643995')}, {'story': Value(uri:'https://golemlab.eu/graph/36459238')}, {'story': Value(uri:'https://golemlab.eu/graph/36475261')}, {'story': Value(uri:'https://golemlab.eu/graph/36479614')}, {'story': Value(uri:'https://golemlab.eu/graph/36500095')}, {'story': Value(uri:'https://golemlab.eu/graph/36561118')}, {'story': Value(uri:'https://golemlab.eu/graph/3658206')}, {'story': Value(uri:'https://golemlab.eu/graph/36695269')}, {'story': Value(uri:'https://golemlab.eu/graph/36764710')}, {'story': Value(uri:'https://golemlab.eu/graph/3683547')}, {'story': Value(uri:'https://golemlab.eu/graph/36862222')}, {'story': Value(uri:'https://golemlab.eu/graph/36960835')}, {'story': Value(uri:'https://golemlab.eu/graph/36978898')}, {'story': Value(uri:'https://golemlab.eu/graph/3717688')}, {'story': Value(uri:'https://golemlab.eu/graph/372262')}, {'story': Value(uri:'https://golemlab.eu/graph/37314532')}, {'story': Value(uri:'https://golemlab.eu/graph/37366351')}, {'story': Value(uri:'https://golemlab.eu/graph/37499935')}, {'story': Value(uri:'https://golemlab.eu/graph/37519291')}, {'story': Value(uri:'https://golemlab.eu/graph/37521145')}, {'story': Value(uri:'https://golemlab.eu/graph/3753910')}, {'story': Value(uri:'https://golemlab.eu/graph/37542397')}, {'story': Value(uri:'https://golemlab.eu/graph/37552810')}, {'story': Value(uri:'https://golemlab.eu/graph/37594159')}, {'story': Value(uri:'https://golemlab.eu/graph/37625539')}, {'story': Value(uri:'https://golemlab.eu/graph/37629394')}, {'story': Value(uri:'https://golemlab.eu/graph/37632703')}, {'story': Value(uri:'https://golemlab.eu/graph/37658329')}, {'story': Value(uri:'https://golemlab.eu/graph/37668592')}, {'story': Value(uri:'https://golemlab.eu/graph/37677439')}, {'story': Value(uri:'https://golemlab.eu/graph/37683562')}, {'story': Value(uri:'https://golemlab.eu/graph/37685626')}, {'story': Value(uri:'https://golemlab.eu/graph/37692259')}, {'story': Value(uri:'https://golemlab.eu/graph/37710292')}, {'story': Value(uri:'https://golemlab.eu/graph/37729960')}, {'story': Value(uri:'https://golemlab.eu/graph/37736620')}, {'story': Value(uri:'https://golemlab.eu/graph/37750717')}, {'story': Value(uri:'https://golemlab.eu/graph/37767358')}, {'story': Value(uri:'https://golemlab.eu/graph/37816528')}, {'story': Value(uri:'https://golemlab.eu/graph/37883062')}, {'story': Value(uri:'https://golemlab.eu/graph/37914295')}, {'story': Value(uri:'https://golemlab.eu/graph/37926721')}, {'story': Value(uri:'https://golemlab.eu/graph/37957138')}, {'story': Value(uri:'https://golemlab.eu/graph/37963843')}, {'story': Value(uri:'https://golemlab.eu/graph/38022460')}, {'story': Value(uri:'https://golemlab.eu/graph/38046748')}, {'story': Value(uri:'https://golemlab.eu/graph/38051950')}, {'story': Value(uri:'https://golemlab.eu/graph/38062645')}, {'story': Value(uri:'https://golemlab.eu/graph/38077543')}, {'story': Value(uri:'https://golemlab.eu/graph/38102383')}, {'story': Value(uri:'https://golemlab.eu/graph/38158444')}, {'story': Value(uri:'https://golemlab.eu/graph/30450153')}, {'story': Value(uri:'https://golemlab.eu/graph/30459603')}, {'story': Value(uri:'https://golemlab.eu/graph/30462972')}, {'story': Value(uri:'https://golemlab.eu/graph/30463200')}, {'story': Value(uri:'https://golemlab.eu/graph/30465156')}, {'story': Value(uri:'https://golemlab.eu/graph/30473214')}, {'story': Value(uri:'https://golemlab.eu/graph/30474096')}, {'story': Value(uri:'https://golemlab.eu/graph/30476757')}, {'story': Value(uri:'https://golemlab.eu/graph/30503433')}, {'story': Value(uri:'https://golemlab.eu/graph/30514326')}, {'story': Value(uri:'https://golemlab.eu/graph/30521559')}, {'story': Value(uri:'https://golemlab.eu/graph/30549882')}, {'story': Value(uri:'https://golemlab.eu/graph/30549918')}, {'story': Value(uri:'https://golemlab.eu/graph/30557202')}, {'story': Value(uri:'https://golemlab.eu/graph/30559753')}, {'story': Value(uri:'https://golemlab.eu/graph/30560318')}, {'story': Value(uri:'https://golemlab.eu/graph/30563825')}, {'story': Value(uri:'https://golemlab.eu/graph/30564908')}, {'story': Value(uri:'https://golemlab.eu/graph/30568817')}, {'story': Value(uri:'https://golemlab.eu/graph/30571382')}, {'story': Value(uri:'https://golemlab.eu/graph/30579608')}, {'story': Value(uri:'https://golemlab.eu/graph/30582983')}, {'story': Value(uri:'https://golemlab.eu/graph/30599771')}, {'story': Value(uri:'https://golemlab.eu/graph/30599783')}, {'story': Value(uri:'https://golemlab.eu/graph/30600950')}, {'story': Value(uri:'https://golemlab.eu/graph/30602144')}, {'story': Value(uri:'https://golemlab.eu/graph/30623450')}, {'story': Value(uri:'https://golemlab.eu/graph/30648173')}, {'story': Value(uri:'https://golemlab.eu/graph/30656876')}, {'story': Value(uri:'https://golemlab.eu/graph/30664211')}, {'story': Value(uri:'https://golemlab.eu/graph/30666374')}, {'story': Value(uri:'https://golemlab.eu/graph/30675761')}, {'story': Value(uri:'https://golemlab.eu/graph/30680924')}, {'story': Value(uri:'https://golemlab.eu/graph/3068288')}, {'story': Value(uri:'https://golemlab.eu/graph/3068501')}, {'story': Value(uri:'https://golemlab.eu/graph/30685691')}, {'story': Value(uri:'https://golemlab.eu/graph/30701903')}, {'story': Value(uri:'https://golemlab.eu/graph/30706589')}, {'story': Value(uri:'https://golemlab.eu/graph/30707549')}, {'story': Value(uri:'https://golemlab.eu/graph/30707792')}, {'story': Value(uri:'https://golemlab.eu/graph/30709160')}, {'story': Value(uri:'https://golemlab.eu/graph/30712631')}, {'story': Value(uri:'https://golemlab.eu/graph/30723506')}, {'story': Value(uri:'https://golemlab.eu/graph/30725402')}, {'story': Value(uri:'https://golemlab.eu/graph/30738995')}, {'story': Value(uri:'https://golemlab.eu/graph/30756965')}, {'story': Value(uri:'https://golemlab.eu/graph/30757925')}, {'story': Value(uri:'https://golemlab.eu/graph/30763781')}, {'story': Value(uri:'https://golemlab.eu/graph/30770105')}, {'story': Value(uri:'https://golemlab.eu/graph/30777668')}, {'story': Value(uri:'https://golemlab.eu/graph/30818909')}, {'story': Value(uri:'https://golemlab.eu/graph/30820670')}, {'story': Value(uri:'https://golemlab.eu/graph/30822221')}, {'story': Value(uri:'https://golemlab.eu/graph/30823184')}, {'story': Value(uri:'https://golemlab.eu/graph/30833945')}, {'story': Value(uri:'https://golemlab.eu/graph/30838997')}, {'story': Value(uri:'https://golemlab.eu/graph/30841769')}, {'story': Value(uri:'https://golemlab.eu/graph/30853214')}, {'story': Value(uri:'https://golemlab.eu/graph/30858653')}, {'story': Value(uri:'https://golemlab.eu/graph/30860411')}, {'story': Value(uri:'https://golemlab.eu/graph/30863561')}, {'story': Value(uri:'https://golemlab.eu/graph/30880946')}, {'story': Value(uri:'https://golemlab.eu/graph/30883553')}, {'story': Value(uri:'https://golemlab.eu/graph/30892067')}, {'story': Value(uri:'https://golemlab.eu/graph/308927')}, {'story': Value(uri:'https://golemlab.eu/graph/30895517')}, {'story': Value(uri:'https://golemlab.eu/graph/30896378')}, {'story': Value(uri:'https://golemlab.eu/graph/30897128')}, {'story': Value(uri:'https://golemlab.eu/graph/30898793')}, {'story': Value(uri:'https://golemlab.eu/graph/30899702')}, {'story': Value(uri:'https://golemlab.eu/graph/30907640')}, {'story': Value(uri:'https://golemlab.eu/graph/30911855')}, {'story': Value(uri:'https://golemlab.eu/graph/30915917')}, {'story': Value(uri:'https://golemlab.eu/graph/30920834')}, {'story': Value(uri:'https://golemlab.eu/graph/30927452')}, {'story': Value(uri:'https://golemlab.eu/graph/30930278')}, {'story': Value(uri:'https://golemlab.eu/graph/30984224')}, {'story': Value(uri:'https://golemlab.eu/graph/31011035')}, {'story': Value(uri:'https://golemlab.eu/graph/31011545')}, {'story': Value(uri:'https://golemlab.eu/graph/31022048')}, {'story': Value(uri:'https://golemlab.eu/graph/3102827')}, {'story': Value(uri:'https://golemlab.eu/graph/31032950')}, {'story': Value(uri:'https://golemlab.eu/graph/31049660')}, {'story': Value(uri:'https://golemlab.eu/graph/31061594')}, {'story': Value(uri:'https://golemlab.eu/graph/31068830')}, {'story': Value(uri:'https://golemlab.eu/graph/31076405')}, {'story': Value(uri:'https://golemlab.eu/graph/31079219')}, {'story': Value(uri:'https://golemlab.eu/graph/31092701')}, {'story': Value(uri:'https://golemlab.eu/graph/31100753')}, {'story': Value(uri:'https://golemlab.eu/graph/31109846')}, {'story': Value(uri:'https://golemlab.eu/graph/31111883')}, {'story': Value(uri:'https://golemlab.eu/graph/31123853')}, {'story': Value(uri:'https://golemlab.eu/graph/31124390')}, {'story': Value(uri:'https://golemlab.eu/graph/31135673')}, {'story': Value(uri:'https://golemlab.eu/graph/31143482')}, {'story': Value(uri:'https://golemlab.eu/graph/31156208')}, {'story': Value(uri:'https://golemlab.eu/graph/31158365')}, {'story': Value(uri:'https://golemlab.eu/graph/31168715')}, {'story': Value(uri:'https://golemlab.eu/graph/31208978')}, {'story': Value(uri:'https://golemlab.eu/graph/31230710')}, {'story': Value(uri:'https://golemlab.eu/graph/31233419')}, {'story': Value(uri:'https://golemlab.eu/graph/31238513')}, {'story': Value(uri:'https://golemlab.eu/graph/3125591')}, {'story': Value(uri:'https://golemlab.eu/graph/31262414')}, {'story': Value(uri:'https://golemlab.eu/graph/31280534')}, {'story': Value(uri:'https://golemlab.eu/graph/31318625')}, {'story': Value(uri:'https://golemlab.eu/graph/31321382')}, {'story': Value(uri:'https://golemlab.eu/graph/31333997')}, {'story': Value(uri:'https://golemlab.eu/graph/31345262')}, {'story': Value(uri:'https://golemlab.eu/graph/31356323')}, {'story': Value(uri:'https://golemlab.eu/graph/31358033')}, {'story': Value(uri:'https://golemlab.eu/graph/31365977')}, {'story': Value(uri:'https://golemlab.eu/graph/31386506')}, {'story': Value(uri:'https://golemlab.eu/graph/31397333')}, {'story': Value(uri:'https://golemlab.eu/graph/31399976')}, {'story': Value(uri:'https://golemlab.eu/graph/31405340')}, {'story': Value(uri:'https://golemlab.eu/graph/31405526')}, {'story': Value(uri:'https://golemlab.eu/graph/31407272')}, {'story': Value(uri:'https://golemlab.eu/graph/31428962')}, {'story': Value(uri:'https://golemlab.eu/graph/31489091')}, {'story': Value(uri:'https://golemlab.eu/graph/31493000')}, {'story': Value(uri:'https://golemlab.eu/graph/314988')}, {'story': Value(uri:'https://golemlab.eu/graph/31504676')}, {'story': Value(uri:'https://golemlab.eu/graph/31518704')}, {'story': Value(uri:'https://golemlab.eu/graph/3153758')}, {'story': Value(uri:'https://golemlab.eu/graph/31541792')}, {'story': Value(uri:'https://golemlab.eu/graph/3154739')}, {'story': Value(uri:'https://golemlab.eu/graph/31548680')}, {'story': Value(uri:'https://golemlab.eu/graph/3154910')}, {'story': Value(uri:'https://golemlab.eu/graph/31573454')}, {'story': Value(uri:'https://golemlab.eu/graph/31584086')}, {'story': Value(uri:'https://golemlab.eu/graph/31586192')}, {'story': Value(uri:'https://golemlab.eu/graph/31600121')}, {'story': Value(uri:'https://golemlab.eu/graph/31602518')}, {'story': Value(uri:'https://golemlab.eu/graph/31605782')}, {'story': Value(uri:'https://golemlab.eu/graph/3161828')}, {'story': Value(uri:'https://golemlab.eu/graph/31620743')}, {'story': Value(uri:'https://golemlab.eu/graph/31626728')}, {'story': Value(uri:'https://golemlab.eu/graph/31628369')}, {'story': Value(uri:'https://golemlab.eu/graph/31632434')}, {'story': Value(uri:'https://golemlab.eu/graph/31634543')}, {'story': Value(uri:'https://golemlab.eu/graph/31636310')}, {'story': Value(uri:'https://golemlab.eu/graph/31642691')}, {'story': Value(uri:'https://golemlab.eu/graph/31653977')}, {'story': Value(uri:'https://golemlab.eu/graph/31654706')}, {'story': Value(uri:'https://golemlab.eu/graph/31664684')}, {'story': Value(uri:'https://golemlab.eu/graph/31671779')}, {'story': Value(uri:'https://golemlab.eu/graph/31688681')}, {'story': Value(uri:'https://golemlab.eu/graph/3169556')}, {'story': Value(uri:'https://golemlab.eu/graph/31713631')}, {'story': Value(uri:'https://golemlab.eu/graph/31760248')}, {'story': Value(uri:'https://golemlab.eu/graph/31772026')}, {'story': Value(uri:'https://golemlab.eu/graph/31775377')}, {'story': Value(uri:'https://golemlab.eu/graph/31775638')}, {'story': Value(uri:'https://golemlab.eu/graph/31781458')}, {'story': Value(uri:'https://golemlab.eu/graph/3178544')}, {'story': Value(uri:'https://golemlab.eu/graph/31789021')}, {'story': Value(uri:'https://golemlab.eu/graph/31790668')}, {'story': Value(uri:'https://golemlab.eu/graph/31790890')}, {'story': Value(uri:'https://golemlab.eu/graph/31816693')}, {'story': Value(uri:'https://golemlab.eu/graph/31825390')}, {'story': Value(uri:'https://golemlab.eu/graph/31851214')}, {'story': Value(uri:'https://golemlab.eu/graph/31853086')}, {'story': Value(uri:'https://golemlab.eu/graph/31871803')}, {'story': Value(uri:'https://golemlab.eu/graph/31874524')}, {'story': Value(uri:'https://golemlab.eu/graph/31881949')}, {'story': Value(uri:'https://golemlab.eu/graph/3188816')}, {'story': Value(uri:'https://golemlab.eu/graph/31890343')}, {'story': Value(uri:'https://golemlab.eu/graph/31891711')}, {'story': Value(uri:'https://golemlab.eu/graph/31921696')}, {'story': Value(uri:'https://golemlab.eu/graph/31923409')}, {'story': Value(uri:'https://golemlab.eu/graph/31927990')}, {'story': Value(uri:'https://golemlab.eu/graph/31951927')}, {'story': Value(uri:'https://golemlab.eu/graph/31961206')}, {'story': Value(uri:'https://golemlab.eu/graph/31966219')}, {'story': Value(uri:'https://golemlab.eu/graph/31968958')}, {'story': Value(uri:'https://golemlab.eu/graph/31976080')}, {'story': Value(uri:'https://golemlab.eu/graph/31982893')}, {'story': Value(uri:'https://golemlab.eu/graph/31984018')}, {'story': Value(uri:'https://golemlab.eu/graph/31986118')}, {'story': Value(uri:'https://golemlab.eu/graph/31986769')}, {'story': Value(uri:'https://golemlab.eu/graph/31988194')}, {'story': Value(uri:'https://golemlab.eu/graph/31990723')}, {'story': Value(uri:'https://golemlab.eu/graph/31997710')}, {'story': Value(uri:'https://golemlab.eu/graph/32004163')}, {'story': Value(uri:'https://golemlab.eu/graph/32014285')}, {'story': Value(uri:'https://golemlab.eu/graph/32018554')}, {'story': Value(uri:'https://golemlab.eu/graph/32031145')}, {'story': Value(uri:'https://golemlab.eu/graph/32045182')}, {'story': Value(uri:'https://golemlab.eu/graph/32056453')}, {'story': Value(uri:'https://golemlab.eu/graph/32094913')}, {'story': Value(uri:'https://golemlab.eu/graph/32096002')}, {'story': Value(uri:'https://golemlab.eu/graph/32112160')}, {'story': Value(uri:'https://golemlab.eu/graph/32112922')}, {'story': Value(uri:'https://golemlab.eu/graph/32116042')}, {'story': Value(uri:'https://golemlab.eu/graph/32133508')}, {'story': Value(uri:'https://golemlab.eu/graph/32133511')}, {'story': Value(uri:'https://golemlab.eu/graph/32152840')}, {'story': Value(uri:'https://golemlab.eu/graph/32157250')}, {'story': Value(uri:'https://golemlab.eu/graph/32160580')}, {'story': Value(uri:'https://golemlab.eu/graph/32166505')}, {'story': Value(uri:'https://golemlab.eu/graph/32171179')}, {'story': Value(uri:'https://golemlab.eu/graph/32183617')}, {'story': Value(uri:'https://golemlab.eu/graph/3218879')}, {'story': Value(uri:'https://golemlab.eu/graph/32196097')}, {'story': Value(uri:'https://golemlab.eu/graph/32202247')}, {'story': Value(uri:'https://golemlab.eu/graph/3221594')}, {'story': Value(uri:'https://golemlab.eu/graph/32232982')}, {'story': Value(uri:'https://golemlab.eu/graph/32236126')}, {'story': Value(uri:'https://golemlab.eu/graph/32245603')}, {'story': Value(uri:'https://golemlab.eu/graph/32262505')}, {'story': Value(uri:'https://golemlab.eu/graph/32280616')}, {'story': Value(uri:'https://golemlab.eu/graph/32282197')}, {'story': Value(uri:'https://golemlab.eu/graph/32285638')}, {'story': Value(uri:'https://golemlab.eu/graph/322932')}, {'story': Value(uri:'https://golemlab.eu/graph/32300974')}, {'story': Value(uri:'https://golemlab.eu/graph/32316997')}, {'story': Value(uri:'https://golemlab.eu/graph/3232559')}, {'story': Value(uri:'https://golemlab.eu/graph/3232595')}, {'story': Value(uri:'https://golemlab.eu/graph/32338084')}, {'story': Value(uri:'https://golemlab.eu/graph/32359963')}, {'story': Value(uri:'https://golemlab.eu/graph/32361712')}, {'story': Value(uri:'https://golemlab.eu/graph/3239585')}, {'story': Value(uri:'https://golemlab.eu/graph/32416009')}, {'story': Value(uri:'https://golemlab.eu/graph/32426341')}, {'story': Value(uri:'https://golemlab.eu/graph/32429392')}, {'story': Value(uri:'https://golemlab.eu/graph/32429677')}, {'story': Value(uri:'https://golemlab.eu/graph/32448463')}, {'story': Value(uri:'https://golemlab.eu/graph/32452768')}, {'story': Value(uri:'https://golemlab.eu/graph/32455852')}, {'story': Value(uri:'https://golemlab.eu/graph/32457199')}, {'story': Value(uri:'https://golemlab.eu/graph/32471140')}, {'story': Value(uri:'https://golemlab.eu/graph/32474731')}, {'story': Value(uri:'https://golemlab.eu/graph/32478478')}, {'story': Value(uri:'https://golemlab.eu/graph/32481238')}, {'story': Value(uri:'https://golemlab.eu/graph/32481562')}, {'story': Value(uri:'https://golemlab.eu/graph/32482831')}, {'story': Value(uri:'https://golemlab.eu/graph/32496424')}, {'story': Value(uri:'https://golemlab.eu/graph/32499010')}, {'story': Value(uri:'https://golemlab.eu/graph/32507788')}, {'story': Value(uri:'https://golemlab.eu/graph/32508694')}, {'story': Value(uri:'https://golemlab.eu/graph/32519371')}, {'story': Value(uri:'https://golemlab.eu/graph/32538769')}, {'story': Value(uri:'https://golemlab.eu/graph/32541472')}, {'story': Value(uri:'https://golemlab.eu/graph/32555446')}, {'story': Value(uri:'https://golemlab.eu/graph/32555647')}, {'story': Value(uri:'https://golemlab.eu/graph/32556130')}, {'story': Value(uri:'https://golemlab.eu/graph/32582263')}, {'story': Value(uri:'https://golemlab.eu/graph/32582455')}, {'story': Value(uri:'https://golemlab.eu/graph/32585515')}, {'story': Value(uri:'https://golemlab.eu/graph/32609758')}, {'story': Value(uri:'https://golemlab.eu/graph/32612953')}, {'story': Value(uri:'https://golemlab.eu/graph/32616751')}, {'story': Value(uri:'https://golemlab.eu/graph/32617171')}, {'story': Value(uri:'https://golemlab.eu/graph/3261836')}, {'story': Value(uri:'https://golemlab.eu/graph/32633623')}, {'story': Value(uri:'https://golemlab.eu/graph/32642074')}, {'story': Value(uri:'https://golemlab.eu/graph/32651428')}, {'story': Value(uri:'https://golemlab.eu/graph/32660329')}, {'story': Value(uri:'https://golemlab.eu/graph/32661610')}, {'story': Value(uri:'https://golemlab.eu/graph/32662375')}, {'story': Value(uri:'https://golemlab.eu/graph/32670361')}, {'story': Value(uri:'https://golemlab.eu/graph/32676553')}, {'story': Value(uri:'https://golemlab.eu/graph/32684584')}, {'story': Value(uri:'https://golemlab.eu/graph/32688544')}, {'story': Value(uri:'https://golemlab.eu/graph/32695582')}, {'story': Value(uri:'https://golemlab.eu/graph/32695642')}, {'story': Value(uri:'https://golemlab.eu/graph/36394705')}, {'story': Value(uri:'https://golemlab.eu/graph/36395104')}, {'story': Value(uri:'https://golemlab.eu/graph/36401023')}, {'story': Value(uri:'https://golemlab.eu/graph/36402076')}, {'story': Value(uri:'https://golemlab.eu/graph/36403168')}, {'stor	0	1	1	Annotation error		
158	158	en	How many Kudos did Leaving it like this receive?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Leaving it like this"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'76')}]	158	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos did If receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""If"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did [[story]] receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did Unruly Hearts receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Unruly Hearts"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos did Leaving it like this receive?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
?story golem:title ""Leaving it like this"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'76')}]	1	0	0			
159	159	en	How many Kudos did If receive?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""If"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(literal:'None')}, {'kudos': Value(typed-literal:'3')}, {'kudos': Value(typed-literal:'2')}, {'kudos': Value(typed-literal:'14')}, {'kudos': Value(typed-literal:'24')}, {'kudos': Value(typed-literal:'38')}, {'kudos': Value(typed-literal:'102')}, {'kudos': Value(typed-literal:'26')}, {'kudos': Value(typed-literal:'9')}, {'kudos': Value(typed-literal:'52')}, {'kudos': Value(typed-literal:'46')}, {'kudos': Value(typed-literal:'18')}, {'kudos': Value(typed-literal:'59')}, {'kudos': Value(typed-literal:'33')}, {'kudos': Value(typed-literal:'42')}, {'kudos': Value(typed-literal:'68')}, {'kudos': Value(typed-literal:'49')}, {'kudos': Value(typed-literal:'58')}, {'kudos': Value(typed-literal:'10')}, {'kudos': Value(typed-literal:'143')}, {'kudos': Value(typed-literal:'25')}, {'kudos': Value(typed-literal:'139')}, {'kudos': Value(typed-literal:'47')}, {'kudos': Value(typed-literal:'27')}, {'kudos': Value(typed-literal:'13')}, {'kudos': Value(typed-literal:'28')}, {'kudos': Value(typed-literal:'87')}, {'kudos': Value(typed-literal:'31')}, {'kudos': Value(typed-literal:'55')}, {'kudos': Value(typed-literal:'4')}, {'kudos': Value(typed-literal:'1')}, {'kudos': Value(typed-literal:'50')}, {'kudos': Value(typed-literal:'12')}, {'kudos': Value(typed-literal:'128')}, {'kudos': Value(typed-literal:'5')}, {'kudos': Value(typed-literal:'54')}, {'kudos': Value(typed-literal:'350')}, {'kudos': Value(typed-literal:'120')}, {'kudos': Value(typed-literal:'45')}, {'kudos': Value(typed-literal:'130')}, {'kudos': Value(typed-literal:'226')}, {'kudos': Value(typed-literal:'7')}, {'kudos': Value(typed-literal:'17')}, {'kudos': Value(typed-literal:'16')}, {'kudos': Value(typed-literal:'230')}, {'kudos': Value(typed-literal:'35')}, {'kudos': Value(typed-literal:'82')}, {'kudos': Value(typed-literal:'180')}, {'kudos': Value(typed-literal:'92')}, {'kudos': Value(typed-literal:'122')}, {'kudos': Value(typed-literal:'119')}, {'kudos': Value(typed-literal:'69')}, {'kudos': Value(typed-literal:'15')}, {'kudos': Value(typed-literal:'309')}, {'kudos': Value(typed-literal:'56')}, {'kudos': Value(typed-literal:'37')}, {'kudos': Value(typed-literal:'2260')}, {'kudos': Value(typed-literal:'11')}, {'kudos': Value(typed-literal:'217')}, {'kudos': Value(typed-literal:'319')}, {'kudos': Value(typed-literal:'57')}, {'kudos': Value(typed-literal:'48')}, {'kudos': Value(typed-literal:'121')}, {'kudos': Value(typed-literal:'142')}, {'kudos': Value(typed-literal:'61')}, {'kudos': Value(typed-literal:'70')}, {'kudos': Value(typed-literal:'1121')}, {'kudos': Value(typed-literal:'148')}, {'kudos': Value(typed-literal:'379')}, {'kudos': Value(typed-literal:'101')}, {'kudos': Value(typed-literal:'86')}, {'kudos': Value(typed-literal:'133')}, {'kudos': Value(typed-literal:'66')}, {'kudos': Value(typed-literal:'74')}, {'kudos': Value(typed-literal:'160')}, {'kudos': Value(typed-literal:'67')}, {'kudos': Value(typed-literal:'158')}]	159	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos did [[story]] receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did Leaving it like this receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Leaving it like this"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did Unruly Hearts receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Unruly Hearts"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos did If receive?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?kudos WHERE { 
?story golem:title ""If"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(literal:'None')}, {'kudos': Value(typed-literal:'3')}, {'kudos': Value(typed-literal:'2')}, {'kudos': Value(typed-literal:'14')}, {'kudos': Value(typed-literal:'24')}, {'kudos': Value(typed-literal:'38')}, {'kudos': Value(typed-literal:'102')}, {'kudos': Value(typed-literal:'26')}, {'kudos': Value(typed-literal:'9')}, {'kudos': Value(typed-literal:'52')}, {'kudos': Value(typed-literal:'46')}, {'kudos': Value(typed-literal:'18')}, {'kudos': Value(typed-literal:'59')}, {'kudos': Value(typed-literal:'33')}, {'kudos': Value(typed-literal:'42')}, {'kudos': Value(typed-literal:'68')}, {'kudos': Value(typed-literal:'49')}, {'kudos': Value(typed-literal:'58')}, {'kudos': Value(typed-literal:'10')}, {'kudos': Value(typed-literal:'143')}, {'kudos': Value(typed-literal:'25')}, {'kudos': Value(typed-literal:'139')}, {'kudos': Value(typed-literal:'47')}, {'kudos': Value(typed-literal:'27')}, {'kudos': Value(typed-literal:'13')}, {'kudos': Value(typed-literal:'28')}, {'kudos': Value(typed-literal:'87')}, {'kudos': Value(typed-literal:'31')}, {'kudos': Value(typed-literal:'55')}, {'kudos': Value(typed-literal:'4')}, {'kudos': Value(typed-literal:'1')}, {'kudos': Value(typed-literal:'50')}, {'kudos': Value(typed-literal:'12')}, {'kudos': Value(typed-literal:'128')}, {'kudos': Value(typed-literal:'5')}, {'kudos': Value(typed-literal:'54')}, {'kudos': Value(typed-literal:'350')}, {'kudos': Value(typed-literal:'120')}, {'kudos': Value(typed-literal:'45')}, {'kudos': Value(typed-literal:'130')}, {'kudos': Value(typed-literal:'226')}, {'kudos': Value(typed-literal:'7')}, {'kudos': Value(typed-literal:'17')}, {'kudos': Value(typed-literal:'16')}, {'kudos': Value(typed-literal:'230')}, {'kudos': Value(typed-literal:'35')}, {'kudos': Value(typed-literal:'82')}, {'kudos': Value(typed-literal:'180')}, {'kudos': Value(typed-literal:'92')}, {'kudos': Value(typed-literal:'122')}, {'kudos': Value(typed-literal:'119')}, {'kudos': Value(typed-literal:'69')}, {'kudos': Value(typed-literal:'15')}, {'kudos': Value(typed-literal:'309')}, {'kudos': Value(typed-literal:'56')}, {'kudos': Value(typed-literal:'37')}, {'kudos': Value(typed-literal:'2260')}, {'kudos': Value(typed-literal:'11')}, {'kudos': Value(typed-literal:'217')}, {'kudos': Value(typed-literal:'319')}, {'kudos': Value(typed-literal:'57')}, {'kudos': Value(typed-literal:'48')}, {'kudos': Value(typed-literal:'121')}, {'kudos': Value(typed-literal:'142')}, {'kudos': Value(typed-literal:'61')}, {'kudos': Value(typed-literal:'70')}, {'kudos': Value(typed-literal:'1121')}, {'kudos': Value(typed-literal:'148')}, {'kudos': Value(typed-literal:'379')}, {'kudos': Value(typed-literal:'101')}, {'kudos': Value(typed-literal:'86')}, {'kudos': Value(typed-literal:'133')}, {'kudos': Value(typed-literal:'66')}, {'kudos': Value(typed-literal:'74')}, {'kudos': Value(typed-literal:'160')}, {'kudos': Value(typed-literal:'67')}, {'kudos': Value(typed-literal:'158')}]	1	0	0			
160	160	en	How many Kudos did The Wayward Wand receive?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""The Wayward Wand"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'13')}, {'kudos': Value(typed-literal:'350')}, {'kudos': Value(typed-literal:'366')}]	160	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos did Three Wizards and a Little Lady receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Three Wizards and a Little Lady"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did A Marauder's Life receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""A Marauder's Life"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did If receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""If"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos did The Wayward Wand receive?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?kudos WHERE { 
?story golem:title ""The Wayward Wand"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'13')}, {'kudos': Value(typed-literal:'350')}, {'kudos': Value(typed-literal:'366')}]	1	0	0			
161	161	en	How many Kudos did The Bonds That Bind Us receive?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""The Bonds That Bind Us"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'845')}, {'kudos': Value(typed-literal:'73')}, {'kudos': Value(typed-literal:'75')}, {'kudos': Value(typed-literal:'82')}, {'kudos': Value(typed-literal:'54')}, {'kudos': Value(typed-literal:'6')}]	161	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos did If receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""If"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did Leaving it like this receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Leaving it like this"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did [[story]] receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos did The Bonds That Bind Us receive?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
?story golem:title ""The Bonds That Bind Us"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'845')}, {'kudos': Value(typed-literal:'73')}, {'kudos': Value(typed-literal:'75')}, {'kudos': Value(typed-literal:'82')}, {'kudos': Value(typed-literal:'54')}, {'kudos': Value(typed-literal:'6')}]	1	0	0			
162	162	en	How many Kudos did Its Her Secret receive?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Its Her Secret"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'36')}, {'kudos': Value(typed-literal:'37')}]	162	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos did If receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""If"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did [[story]] receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did The Wayward Wand receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""The Wayward Wand"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos did Its Her Secret receive?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
  ?story golem:title ""Its Her Secret"" . 
  ?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'36')}, {'kudos': Value(typed-literal:'37')}]	1	0	0			
163	163	en	How many Kudos did Three Wizards and a Little Lady receive?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Three Wizards and a Little Lady"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'535')}, {'kudos': Value(typed-literal:'1274')}, {'kudos': Value(typed-literal:'1446')}]	163	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos did The Wayward Wand receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""The Wayward Wand"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did If receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""If"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did Its Her Secret receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Its Her Secret"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos did Three Wizards and a Little Lady receive?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
  ?story golem:title ""Three Wizards and a Little Lady"" . 
  ?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'535')}, {'kudos': Value(typed-literal:'1274')}, {'kudos': Value(typed-literal:'1446')}]	1	0	0			
164	164	en	How many Kudos did This Is Not A Story - Harry Goes To Music School receive?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""This Is Not A Story - Harry Goes To Music School"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'6')}]	164	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos did [[story]] receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did The Wayward Wand receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""The Wayward Wand"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did Its Her Secret receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Its Her Secret"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos did This Is Not A Story - Harry Goes To Music School receive?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
  ?story golem:title ""This Is Not A Story - Harry Goes To Music School"" . 
  ?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'6')}]	1	0	0			
165	165	en	How many Kudos did Unruly Hearts receive?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Unruly Hearts"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'21')}, {'kudos': Value(typed-literal:'11')}, {'kudos': Value(typed-literal:'56')}]	165	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos did If receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""If"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did A Marauder's Life receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""A Marauder's Life"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did Leaving it like this receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Leaving it like this"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos did Unruly Hearts receive?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
  ?story golem:title ""Unruly Hearts"" . 
  ?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'21')}, {'kudos': Value(typed-literal:'11')}, {'kudos': Value(typed-literal:'56')}]	1	0	0			
166	166	en	How many Kudos did Winter kisses receive?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Winter kisses"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'20')}, {'kudos': Value(typed-literal:'19')}]	166	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos did If receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""If"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did [[story]] receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did Unruly Hearts receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Unruly Hearts"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos did Winter kisses receive?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
  ?story golem:title ""Winter kisses"" . 
  ?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'20')}, {'kudos': Value(typed-literal:'19')}]	1	0	0			
167	167	en	How many Kudos did A Marauder's Life receive?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""A Marauder's Life"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'9')}, {'kudos': Value(typed-literal:'190')}]	167	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos did The Wayward Wand receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""The Wayward Wand"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did If receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""If"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos did [[story]] receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos did A Marauder's Life receive?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
  ?story golem:title ""A Marauder's Life"" . 
  ?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'9')}, {'kudos': Value(typed-literal:'190')}]	1	0	0			
169	169	en	Where is A Family Christmas published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""A Family Christmas"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	169	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: When was Oh To Be Lonely at Christmas published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Oh To Be Lonely at Christmas"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: When was Codeword: Christmas Socks published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Codeword: Christmas Socks"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: Where is [[story]] published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: Where is A Family Christmas published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?publisher WHERE { 
  ?story golem:title ""A Family Christmas"" . 
  ?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
170	170	en	Where is Resistance of the Mind published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Resistance of the Mind"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	170	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Where is Death's Chokehold published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Death's Chokehold"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: Where is Future Shocks published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Future Shocks"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: Where is Horizon published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Horizon"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: Where is Resistance of the Mind published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Resistance of the Mind"" . ?story golem:publisher ?publisher . }
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
171	171	en	Where is you're my flesh and blood, whether you like it or not published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""you're my flesh and blood, whether you like it or not"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	171	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who is the author of and yours is in red underlined?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""and yours is in red underlined"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: When was You Caused Me Pain (So I Did The Same) published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""You Caused Me Pain (So I Did The Same)"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: Who is the author of Watching Over You?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Watching Over You"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Where is you're my flesh and blood, whether you like it or not published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?publisher WHERE { 
?story golem:title ""you're my flesh and blood, whether you like it or not"" . 
?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
172	172	en	Where is Pansy's Inheritance published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Pansy's Inheritance"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	172	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is Harry Potter and the year fate stepped in part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Harry Potter and the year fate stepped in"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: Where is A Family Christmas published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""A Family Christmas"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: When was Those Dead Eyes (Harry Potter) published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Those Dead Eyes (Harry Potter)"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: Where is Pansy's Inheritance published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?publisher WHERE { 
?story golem:title ""Pansy's Inheritance"" . 
?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
173	173	en	Where is Death's Chokehold published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Death's Chokehold"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	173	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: When was Those Dead Eyes (Harry Potter) published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Those Dead Eyes (Harry Potter)"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: Where is What A Ghostly Scene published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""What A Ghostly Scene"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: Where is Future Shocks published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Future Shocks"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: Where is Death's Chokehold published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?publisher WHERE { 
  ?story golem:title ""Death's Chokehold"" . 
  ?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
174	174	en	Where is Out of Harm's Way - A Frank & Alice Longbottom Short Story published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Out of Harm's Way - A Frank & Alice Longbottom Short Story"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	174	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: When was It Takes A Little Mistletoe published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""It Takes A Little Mistletoe"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: Who wrote The Misadventures of a Muggleborn Maid?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Misadventures of a Muggleborn Maid"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: When was [[story]] published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[[story]]"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: Where is Out of Harm's Way - A Frank & Alice Longbottom Short Story published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
SELECT DISTINCT ?publisher WHERE { 
  ?story golem:title ""Out of Harm's Way - A Frank & Alice Longbottom Short Story"" . 
  ?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
175	175	en	Where is I Don't Get Paid Enough For This published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""I Don't Get Paid Enough For This"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	175	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: When was I Just Want... published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""I Just Want..."" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: Where is [[story]] published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: When was [[story]] published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[[story]]"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: Where is I Don't Get Paid Enough For This published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?publisher WHERE { 
  ?story golem:title ""I Don't Get Paid Enough For This"" . 
  ?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
176	176	en	Where is Horizon published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Horizon"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	176	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Where is Future Shocks published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Future Shocks"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: Where is [[story]] published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: Where is Death's Chokehold published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Death's Chokehold"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: Where is Horizon published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?publisher WHERE { 
?story golem:title ""Horizon"" . 
?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
177	177	en	Where is What A Ghostly Scene published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""What A Ghostly Scene"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	177	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote Anatomy of The Haunted?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Anatomy of The Haunted"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Where is Death's Chokehold published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Death's Chokehold"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: When was It Takes A Little Mistletoe published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""It Takes A Little Mistletoe"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: Where is What A Ghostly Scene published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?publisher WHERE { 
  ?story golem:title ""What A Ghostly Scene"" . 
  ?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
178	178	en	Where is Future Shocks published?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Future Shocks"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	178	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Where is Horizon published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Horizon"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: How many chapters does What the Future Holds have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""What the Future Holds"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: Where is Death's Chokehold published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Death's Chokehold"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: Where is Future Shocks published?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?publisher WHERE { 
  ?story golem:title ""Future Shocks"" . 
  ?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
180	180	en	What is What the Heart Wants about?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""What the Heart Wants"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"		180	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Is the story A heart connection completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""A heart connection"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: What is the average word length of Be My Everything?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""Be My Everything"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

    Question: What is [[story]] about?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""[[story]]"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: What is What the Heart Wants about?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { 
?story golem:title ""What the Heart Wants"" . 
?story golem:keyword ?keyword . 
?story golem:romanticCategory ?romantic_category . 
?story golem:series ?series . 
?story golem:collections ?collection . 
?story golem:contentWarning ?content_warning . 
?story golem:summary ?summary . 
}
"	"[{'series': Value(literal:'Pixie Dust Never Lies [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'Alternate Universe - Canon Divergence, Curses, Homophobia, Magic, Storybrooke'), 'summary': Value(literal:'Emma and Regina are happily married in Storybrooke, living with Henry in Regina\'s mansion. However, after Regina has a chilling nightmare both are on edge. Their fears are confirmed when they realize that Cora has returned. And she is not too happy with Regina\'s choice of spouse. - This is the second part of the ""Pixie Dust Never Lies"" series. I recommend reading ""Pixie Dust Never Lies"" before this story.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Dubious Consent, Evil trickery is afoot!, Slash, Spoliers for 8.21'), 'summary': Value(literal:'Alternative scene for The Great Escapist. Crowley has Castiel at his mercy. He wants the angel tablet and will tear through anyone Cas cares about to get it.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Alpha Arthur Morgan, Alpha Dutch Van Der Linde, Alpha John Marston, Alpha/Beta/Omega Dynamics, Alpha/Omega, Arthur Morgan Does Not Have Tuberculosis, Attempted Rape/Non-Con, Attempted Sexual Assault, Canon-Typical Violence, Implied/Referenced Alcohol Abuse/Alcoholism, Implied/Referenced Child Abuse, Loss of Parent(s), Non-Traditional Alpha/Beta/Omega Dynamics, Omega Original Character, Original Character(s), Protective Arthur Morgan, Slow Romance, alpha micah bell, alphas fighting over omega, jealous alphas'), 'summary': Value(literal:'While at Clemens Point Arthur runs into a young omega woman when out on a hunting trip. She seems callous, demanding that he leave her property and not return. Arthur agrees but finds himself wanting to know more about her. Why is she out here all alone? Why does she hate alphas so much? and can he do anything to help?')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Multi'), 'keywords': Value(literal:'Alternate Universe, Alternate Universe - Canon Divergence, Angst, Fluff and Angst, Identity Reveal, Other Additional Tags to Be Added, Rating May Change, Soulmates, Teen Angst'), 'summary': Value(literal:""A manufactured soul mate formula causes heartache for headstrong young teenagers trying to find their matched pair and navigate the dangers of high school. It is easy to explain why home-schooled and sheltered model Adrien has been able to see colors since he locked eyes with a young girl when he was six.  And it's hard to explain why Adrien can't stop thinking about how he would rather his soulmate be someone else. It is easy to explain why suddenly poor Marinette can see colors after meeting Chat Noir, and hundreds of other people at a press conference during one of her first transformations as Ladybug. And it's hard to explain why Marinette can see color, but doesn't know who her soulmate is."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'Other'), 'keywords': Value(literal:'Bakugou Katsuki is a fucking Serial Killer, Blood and Gore, Harems, Midoriya Izuku is an oblivious cinnamon roll, Mystery, Serial Killers, Yandere Bakugou Katsuki, adding tags as I write, but he’s not alone, shit about to go down'), 'summary': Value(literal:'The twisted tale of admiration gone too far... ~_~*~_~*~_~*~_~*~_~ That dated day sealed the deal. He was hooked. He couldn’t stop wondering about that green haired boy. His childhood friend. He’s a constant hum in his thoughts. The untamable storm raging through his mind. It barely exists when he’s around, but when he leaves it’s a painful ache. Only he can make the ache go away. He is his and beside him he shall stay. He will have it his way... In other words... Bakugou goes full on yandere. ————— Note: I update when I want.')}, {'series': Value(literal:'The Other Guardian [6]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Action/Adventure, Angst, Hurt/Comfort, Mystery, Other Guardian verse, Pre-Slash, Romance, mild AU'), 'summary': Value(literal:""Dean's pissed. Sam's pulling back. Castiel is caught between them. After Sam learns the truth about Dean's time in Hell, the Winchesters split over a case in LA, and everything falls apart at once, leaving Sam in peril on the edge of the sea. Dean isn't the only one who needs an angel sometimes. Sam/Cas centric, pre-slash; mild AU. Part of the Other Guardian 'verse."")}, {'series': Value(literal:'Geralt/Jaskier [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Alcohol Abuse/Alcoholism, Angst, Crying, Fluff and Angst, Homophobic Language, Implied/Referenced Homophobia, Internalized Homophobia, Jaskier | Dandelion Whump, Light Angst, Men Crying, Self-Esteem Issues, Short & Sweet'), 'summary': Value(literal:'Seeing his friend (for that\'s truly what he was, even if Geralt denied it) hunched over a mug of ale with his eyes puffy and red pulled at Geralt\'s heartstrings in just the right way. He moved closer to the bard. ""Talk to me.""')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Fluff, Gender Neutral Reader Insert, Reader Insert, flirty klaus'), 'summary': Value(literal:'Much to your own dismay, you find you have a crush on a certain Hybrid. And much to your surprise, he seems to be showing interest in you. But you are smart enough to be suspicious. Is he asking about you because he shares your feelings, or is there something he wants from you?')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Fluff, Foreign trip, slowburn'), 'summary': Value(literal:'Stelena human AU of an after high school trip that the characters take through different places. She ran away from home for finding herself, he ran away from home to find love. Also has ships: Klaroline, Forwood, Beremy, Bonenzo, Jalaric, Elejah, Kalijah, Steferine, Bamon friendship, Debekah')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'First Time, Friends to Lovers, Futanari, Oral Sex, Plot What Plot/Porn Without Plot'), 'summary': Value(literal:'An early-loop Homura finds herself exploring the intricacies of magic on the floor of Madoka’s bedroom.')}, {'series': Value(literal:'Heart of Camelot [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'AU, Golden Age'), 'summary': Value(literal:'Merlin is happy, but he\'s also human, and sometimes he can\'t help but think of what he\'s given up and wonder at what might have been. Sequel to ""In a Heartbeat.""  Banner by 1917farmgirl.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:""Secret Admirer, Valentine's Day Fluff""), 'summary': Value(literal:'Raven hates Valentine’s Day more than any other day in the year. A week before the big day however, an admirer starts leaving gifts and love notes. Raven isn’t sure if she believes it. Surely it’s just a joke…right?')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Underage'), 'romantic_category': Value(literal:'Other'), 'keywords': Value(literal:'Bakugou Katsuki is a fucking Serial Killer, Blood and Gore, Harems, Midoriya Izuku is an oblivious cinnamon roll, Mystery, Serial Killers, Yandere Bakugou Katsuki, adding tags as I write, but he’s not alone, shit about to go down'), 'summary': Value(literal:'The twisted tale of admiration gone too far... ~_~*~_~*~_~*~_~*~_~ That dated day sealed the deal. He was hooked. He couldn’t stop wondering about that green haired boy. His childhood friend. He’s a constant hum in his thoughts. The untamable storm raging through his mind. It barely exists when he’s around, but when he leaves it’s a painful ache. Only he can make the ache go away. He is his and beside him he shall stay. He will have it his way... In other words... Bakugou goes full on yandere. ————— Note: I update when I want.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Depression, Episode 2, Fluff and Angst, Forehead Kisses, Low key suicidal thoughts warning, mentions of blowjobs?, soft moments'), 'summary': Value(literal:""Tian can't eat spicy food anymore and feels like he can't breath when having the meal with the village elder. Phupha talks to Tian after that and some real feelings are introduced."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Underage'), 'romantic_category': Value(literal:'Multi'), 'keywords': Value(literal:'Fluff, Foreign trip, slowburn'), 'summary': Value(literal:'Stelena human AU of an after high school trip that the characters take through different places. She ran away from home for finding herself, he ran away from home to find love. Also has ships: Klaroline, Forwood, Beremy, Bonenzo, Jalaric, Elejah, Kalijah, Steferine, Bamon friendship, Debekah')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:""Alternate Universe, Barebacking, Bottom Park Jimin, But still chronological, Clumsy Kim Namjoon | Rap Monster, Embarrassed Jeon Jungkook, For Me, I'm sorry if this is bad, Lots of dialogue, One Shot, Possessive Jungkook, Protective Jungkook, Public Sex, Time Skips, Top Jeon Jungkook, Very cringey, Wealthy, butt plug, by his mother, namjin - Freeform""), 'summary': Value(literal:""When Jeongguk went to his father's business party, he was expecting to meet the girl his father said he is to marry to appease him. Little does he know that a nice and plump blond would get on his nerves, piquing his interest. The blond's name is Jimin, and let's just say that Jeonnguk doesn't like to share."")}, {'series': Value(literal:'Story Prompts for Tumblr [8]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Falling In Love, Lost Love'), 'summary': Value(literal:""Prompt written for December's Follower Appreciation winner."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'Fluff, Foreign trip, slowburn'), 'summary': Value(literal:'Stelena human AU of an after high school trip that the characters take through different places. She ran away from home for finding herself, he ran away from home to find love. Also has ships: Klaroline, Forwood, Beremy, Bonenzo, Jalaric, Elejah, Kalijah, Steferine, Bamon friendship, Debekah')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'Angst, Autistic Entrapta (She-Ra), Banishment, Beast Island (She-Ra), Catra (She-Ra) Redemption, Emotional Hurt/Comfort, Entrapta makes a choice, Friendship/Love, Heartache, Hordak has self-worth issues, Post-Canon, Reunions, Separations'), 'summary': Value(literal:""Post-canon fic. After the defeat of the galactic Horde, the kingdoms of Etheria have settled into a new time of peace. Entrapta has returned to Dryl to assume rulership once more and rebuild with Catra's assistance. Now without an empire and a refugee in the one-time Fright Zone alongside his stranded clone brothers, Hordak makes a decision on his fate which forces Entrapta to consider what is truly important to her."")}, {'series': Value(literal:'Vigcup Week 2022 [4]'), 'collection': Value(literal:'Vigcup Week 2022'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alternate Universe - Magic, Battle, Blood, First Kiss, Magical Battle, Requited Love'), 'summary': Value(literal:'King Hiccup of Berk is sure he’s in love with his court wizard, Viggo Grimborn. He’s also sure that it’s a mistake.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:""Angst, Arrangements, Billy Hargrove enters the chat, Canon-Typical Violence, Eating Disorders, Enemies to Friends to Lovers, Eventual Smut, Flirting, Friends to Lovers, Heartbreak, Henderson Sibling Insert, Hurt No Comfort, Hurt/Comfort, I will absolutely mess up this timeline forgive me, It's trauma related to Barb's death, Jealousy, Loss of Virginity, Love Triangles?, Love squares???, Messy, Mostly revolves around the older cluster, Not beta read we die like chrissy, Nsfw content, One-Sided Attraction, Pining, Reader Insert, Slow Burn, Sorry reader u get fucked up, Steve Harrington Being an Asshole, Trigger Warning for ED content, Underage Drinking, Unrequited Love, kind of, starts up in S1 and follows canon timeline pretty much""), 'summary': Value(literal:""Falling in love with him was the easy part of this whole arrangement. The rest of it was what hurt. That stinging feeling in your heart when you caught his gaze lingering on the back of Nancy Wheeler’s head. When he would pass her something and his fingers brushed her skin ever so slightly but it was enough to make him flush. Steve Harrington was so hopelessly in love with her. It made you want to hurl. Reader is a Henderson bc I'm a sucker for sibling Au's and makes a deal with Steve to get the girl of his dreams. That girl not being you, however. Going to be a long slow burn so my chapters are hopefully going to be moderate length but plentiful :) Hope you stick around! Update: I promise you 15 is in the works at about 75% complete, but life is tearing it’s ugly head with school, work and the rona beating my ass but I will upload as soon as I can muster the strength to finish, I hope you all stay patient with me <3"")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Underage'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Bakugou Katsuki is a fucking Serial Killer, Blood and Gore, Harems, Midoriya Izuku is an oblivious cinnamon roll, Mystery, Serial Killers, Yandere Bakugou Katsuki, adding tags as I write, but he’s not alone, shit about to go down'), 'summary': Value(literal:'The twisted tale of admiration gone too far... ~_~*~_~*~_~*~_~*~_~ That dated day sealed the deal. He was hooked. He couldn’t stop wondering about that green haired boy. His childhood friend. He’s a constant hum in his thoughts. The untamable storm raging through his mind. It barely exists when he’s around, but when he leaves it’s a painful ache. Only he can make the ache go away. He is his and beside him he shall stay. He will have it his way... In other words... Bakugou goes full on yandere. ————— Note: I update when I want.')}, {'series': Value(literal:'Fic Prompts - Broadchurch [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Developing Relationship, First Time, Heart-to-Heart, Post-Coital'), 'summary': Value(literal:'Hardy and Miller finally cross the line from colleagues to something more - but once the passion settles, there are conversations that need to be had.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Underage'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Fluff, Foreign trip, slowburn'), 'summary': Value(literal:'Stelena human AU of an after high school trip that the characters take through different places. She ran away from home for finding herself, he ran away from home to find love. Also has ships: Klaroline, Forwood, Beremy, Bonenzo, Jalaric, Elejah, Kalijah, Steferine, Bamon friendship, Debekah')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Major Character Death'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Bakugou Katsuki is a fucking Serial Killer, Blood and Gore, Harems, Midoriya Izuku is an oblivious cinnamon roll, Mystery, Serial Killers, Yandere Bakugou Katsuki, adding tags as I write, but he’s not alone, shit about to go down'), 'summary': Value(literal:'The twisted tale of admiration gone too far... ~_~*~_~*~_~*~_~*~_~ That dated day sealed the deal. He was hooked. He couldn’t stop wondering about that green haired boy. His childhood friend. He’s a constant hum in his thoughts. The untamable storm raging through his mind. It barely exists when he’s around, but when he leaves it’s a painful ache. Only he can make the ache go away. He is his and beside him he shall stay. He will have it his way... In other words... Bakugou goes full on yandere. ————— Note: I update when I want.')}, {'series': Value(literal:'As Time Goes By (AU) [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Romance, Suspense'), 'summary': Value(literal:'Raydor/ Flynn. Set after season 1. Sequel to ""As Time Goes By."" Andy proposes to Sharon but their future plans are put on hold when a dangerous person from Flynn\'s past threatens their happiness. Romance & Suspense.  Complete.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Bakugou Katsuki is a fucking Serial Killer, Blood and Gore, Harems, Midoriya Izuku is an oblivious cinnamon roll, Mystery, Serial Killers, Yandere Bakugou Katsuki, adding tags as I write, but he’s not alone, shit about to go down'), 'summary': Value(literal:'The twisted tale of admiration gone too far... ~_~*~_~*~_~*~_~*~_~ That dated day sealed the deal. He was hooked. He couldn’t stop wondering about that green haired boy. His childhood friend. He’s a constant hum in his thoughts. The untamable storm raging through his mind. It barely exists when he’s around, but when he leaves it’s a painful ache. Only he can make the ache go away. He is his and beside him he shall stay. He will have it his way... In other words... Bakugou goes full on yandere. ————— Note: I update when I want.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Past Abuse, Therapy, brian is really messed up and really loves justin, s4'), 'summary': Value(literal:'In which Brian attends a therapy session and maybe possibly gets his shit together.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Blood and Injury, Friends to Lovers, Grief/Mourning, Hurt/Comfort, Implied/Referenced Suicide, Misunderstandings, Permanent Injury, Secret Relationship, Serious Injuries, Slow Burn, kinda sorta'), 'summary': Value(literal:'Edmund and Hector had a lot in common.  They were both strong warriors, dedicating their lives to what most people would call a lost cause.  Most of all though, they were both lonely.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Cute, Love, Romantic Friendship, Sweet'), 'summary': Value(literal:'Kirishima has been getting some odd feelings for his best friend. The only way he can work through this is by working out. However, when his best friend becomes his work out partner will he be able to keep in his emotions.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'AU, Alternate Universe, Angst, Explicit Sexual Content, Love at First Sight, Romance, Sexual content later on in story'), 'summary': Value(literal:'""There\'s no way this...bread boy can hypnotize me after setting eyes on him for the first time. There\'s just no way."" Katniss is torn. She\'s dating her best friend of seven years, Gale, and is perfectly happy. Until Peeta Mellark steps into the picture, and she\'s instantly attracted to him. She needs to follow her heart, but where will it take her?')}, {'series': Value(literal:'The Other Guardian [6]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Action/Adventure, Angst, Hurt/Comfort, Mystery, Other Guardian verse, Pre-Slash, Romance, mild AU'), 'summary': Value(literal:""Dean's pissed. Sam's pulling back. Castiel is caught between them. After Sam learns the truth about Dean's time in Hell, the Winchesters split over a case in LA, and everything falls apart at once, leaving Sam in peril on the edge of the sea. Dean isn't the only one who needs an angel sometimes. Sam/Cas centric, pre-slash; mild AU. Part of the Other Guardian 'verse."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Underage'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'Fluff, Foreign trip, slowburn'), 'summary': Value(literal:'Stelena human AU of an after high school trip that the characters take through different places. She ran away from home for finding herself, he ran away from home to find love. Also has ships: Klaroline, Forwood, Beremy, Bonenzo, Jalaric, Elejah, Kalijah, Steferine, Bamon friendship, Debekah')}, {'series': Value(literal:'None'), 'collection': Value(literal:'One Million Words'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Community: 1_million_words, Fluff'), 'summary': Value(literal:'The heart wants what it wants.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Underage'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Bakugou Katsuki is a fucking Serial Killer, Blood and Gore, Harems, Midoriya Izuku is an oblivious cinnamon roll, Mystery, Serial Killers, Yandere Bakugou Katsuki, adding tags as I write, but he’s not alone, shit about to go down'), 'summary': Value(literal:'The twisted tale of admiration gone too far... ~_~*~_~*~_~*~_~*~_~ That dated day sealed the deal. He was hooked. He couldn’t stop wondering about that green haired boy. His childhood friend. He’s a constant hum in his thoughts. The untamable storm raging through his mind. It barely exists when he’s around, but when he leaves it’s a painful ache. Only he can make the ache go away. He is his and beside him he shall stay. He will have it his way... In other words... Bakugou goes full on yandere. ————— Note: I update when I want.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'Barbara Gordon is Oracle, Bisexual Barbara Gordon, Bisexual Dinah Lance, Femslash, Fluff and Angst, Friends to Lovers, Friendship/Love, Happy Ending, Love Confessions, Not Actually Unrequited Love, Past Barbara Gordon/Dick Grayson, Past Dinah Lance/Oliver Queen, Pining, Stream of Consciousness, Unrequited Love, dick grayson is a good friend, maybe smut later?'), 'summary': Value(literal:""Dinah decides it's time to tell her friend how she really feels. Barbara is forced to reexamine the nature of their relationship."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'Multifandom Drabble Exchange 2017'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Drabble, Fluff, Introspection'), 'summary': Value(literal:""Even though Rogue knows she shouldn't her heart wants what it wants."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Angst, Canon-Typical Violence, Crushes, First Kiss, Getting Together, Many first kisses, Mutual Pining, Polyamory'), 'summary': Value(literal:'Growing up, Caleb always thought he would marry a beautiful woman and have exactly two kids: one boy and one girl. It was a plan he made when he was young, when he longed for a sister. It was a Plan that his parents reinforced. It was a Plan he believed was on track when he met Astrid. It was a Plan entirely derailed when he burned down his childhood home. Ever since, Caleb believed he never deserved a perfect life like that. Especially not with Astrid, the only woman he ever had a chance to love. If she was still alive. But also, recently, there had been some ...interesting developments. Or, Caleb, Fjord, and Jester struggle to figure out what they want from each other.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Fluff, Gender Neutral Reader Insert, Reader Insert, flirty klaus'), 'summary': Value(literal:'Much to your own dismay, you find you have a crush on a certain Hybrid. And much to your surprise, he seems to be showing interest in you. But you are smart enough to be suspicious. Is he asking about you because he shares your feelings, or is there something he wants from you?')}, {'series': Value(literal:'Geralt/Jaskier [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alcohol Abuse/Alcoholism, Angst, Crying, Fluff and Angst, Homophobic Language, Implied/Referenced Homophobia, Internalized Homophobia, Jaskier | Dandelion Whump, Light Angst, Men Crying, Self-Esteem Issues, Short & Sweet'), 'summary': Value(literal:'Seeing his friend (for that\'s truly what he was, even if Geralt denied it) hunched over a mug of ale with his eyes puffy and red pulled at Geralt\'s heartstrings in just the right way. He moved closer to the bard. ""Talk to me.""')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Friendship, Hurt/Comfort, Light Discussion of Romance, Oneshot'), 'summary': Value(literal:'On a lonely night, Flora finds Riven at the Fruitti Music Bar. They talk about love, about life, and about how people perceive them. Flora & Riven friendship.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Bakugou Katsuki is a fucking Serial Killer, Blood and Gore, Harems, Midoriya Izuku is an oblivious cinnamon roll, Mystery, Serial Killers, Yandere Bakugou Katsuki, adding tags as I write, but he’s not alone, shit about to go down'), 'summary': Value(literal:'The twisted tale of admiration gone too far... ~_~*~_~*~_~*~_~*~_~ That dated day sealed the deal. He was hooked. He couldn’t stop wondering about that green haired boy. His childhood friend. He’s a constant hum in his thoughts. The untamable storm raging through his mind. It barely exists when he’s around, but when he leaves it’s a painful ache. Only he can make the ache go away. He is his and beside him he shall stay. He will have it his way... In other words... Bakugou goes full on yandere. ————— Note: I update when I want.')}, {'series': Value(literal:'Geralt/Jaskier [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alcohol Abuse/Alcoholism, Angst, Crying, Fluff and Angst, Homophobic Language, Implied/Referenced Homophobia, Internalized Homophobia, Jaskier | Dandelion Whump, Light Angst, Men Crying, Self-Esteem Issues, Short & Sweet'), 'summary': Value(literal:'Seeing his friend (for that\'s truly what he was, even if Geralt denied it) hunched over a mug of ale with his eyes puffy and red pulled at Geralt\'s heartstrings in just the right way. He moved closer to the bard. ""Talk to me.""')}, {'series': Value(literal:'The Heart Series [5]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Rape/Non-Con'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Difficult Relationships, Romance, Songfic'), 'summary': Value(literal:""Josh's past comes back to haunt him, and with unexpected results for his friends Mac and Kelly."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'Multi'), 'keywords': Value(literal:'Alpha Arthur Morgan, Alpha Dutch Van Der Linde, Alpha John Marston, Alpha/Beta/Omega Dynamics, Alpha/Omega, Arthur Morgan Does Not Have Tuberculosis, Attempted Rape/Non-Con, Attempted Sexual Assault, Canon-Typical Violence, Implied/Referenced Alcohol Abuse/Alcoholism, Implied/Referenced Child Abuse, Loss of Parent(s), Non-Traditional Alpha/Beta/Omega Dynamics, Omega Original Character, Original Character(s), Protective Arthur Morgan, Slow Romance, alpha micah bell, alphas fighting over omega, jealous alphas'), 'summary': Value(literal:'While at Clemens Point Arthur runs into a young omega woman when out on a hunting trip. She seems callous, demanding that he leave her property and not return. Arthur agrees but finds himself wanting to know more about her. Why is she out here all alone? Why does she hate alphas so much? and can he do anything to help?')}, {'series': Value(literal:'The House on the Beach: the Tom and Mandy Story [1]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Angst, Long-Distance Relationship, Meet-Cute'), 'summary': Value(literal:'Mandy has a nice, quiet life, teaching English, walking her dog and minding her own business. Then her beloved Great Aunt Dorothy dies and leaves her everything, including a house on the beach at Aldeburgh...')}, {'series': Value(literal:'The Heart Series [5]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'Gen'), 'k"	0	1	1	Annotation error		
182	182	en	What is Theodore Not Sends little girl Luna a Sext about?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Theodore Not Sends little girl Luna a Sext"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	"[{'series': Value(literal:'Suddenly Sexting [4]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'AMAZING ARTIST MOODBOARD COLLAB, Age Play, BDSM, BDT, Big Dick Theo, Brat!Luna, CLICK THE LINK FOR THAT ALONE!, Can stand alone but is best read in the series, Consent is Sexy, Daddy Kink, Dirty Jokes, Dirty Talk, Explicit Language, Explicit Sexual Content, I AM SO LUCKY, In-Jokes, Lols, Luna wants to Play, NSFW, Praise Kink, Real Freaky Naughty, Sexting, Shameless Smut, She likes it rough, Size Kink, Theo is HERE FOR IT!, role play, strawberries and cream'), 'summary': Value(literal:'*******Part 4 in the Suddenly Sexting Series!!!!******* ""What are you doing now that you’re home?"" ""I’m replying to you.  I would also like to make a snack."" ""Luna...You do realise you don’t have to ask for permission?"" ""Wanna play?"" *** Luna Lovegood is is a sweet sub little girl to her Daddy Nott.  She\'s just got home safe and sends a text to let him know. Are you curious yet? ;) Click the link to find out what happens next! Sometimes the best conversations are the ones that aren’t said out loud ;)')}]"	182	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote Luna and the Milkshakes?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Luna and the Milkshakes"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Is the story Luna Lovegood and the Chamber of Innocence completed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Luna Lovegood and the Chamber of Innocence"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Who wrote The Misadventures of a Muggleborn Maid?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Misadventures of a Muggleborn Maid"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: What is Theodore Not Sends little girl Luna a Sext about?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?content WHERE { 
?story golem:title ""Theodore Not Sends"" .
?story golem:characters ?character .
?character golem:name ""Luna"" .
?story golem:summary ?content .
}
"	[]	0	0	1	Failed NER		
183	183	en	What is A Golden Snitch about?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""A Golden Snitch"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	"[{'series': Value(literal:'Severitus drabbles [1]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:""Just a drabble, Severitus | Severus Snape is Harry Potter's Parent, follows the usual severitus guidelines, harry and sev go on an adventure to diagon alley, just get it in drabble form, not really up to writing the whole fic rn but i had a plot bunny so""), 'summary': Value(literal:'Harry and Sev go on an adventure to Diagon Alley. Drabble for a severitus challenge. Series: Severitus drabbles [1]')}]"	183	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is Hide that Potion about?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Hide that Potion"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: How many Kudos did Its Her Secret receive?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Its Her Secret"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: What stories is Mutual Pining - Character featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Mutual Pining - Character"" . }
    </SPARQL>

    ###
    

Question: What is A Golden Snitch about?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary 
WHERE { 
    ?story golem:title ""A Golden Snitch"" . 
    ?story golem:keyword ?keyword . 
    ?story golem:romanticCategory ?romantic_category . 
    ?story golem:series ?series . 
    ?story golem:collections ?collection . 
    ?story golem:contentWarning ?content_warning . 
    ?story golem:summary ?summary . 
}
"	"[{'series': Value(literal:'Severitus drabbles [1]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:""Just a drabble, Severitus | Severus Snape is Harry Potter's Parent, follows the usual severitus guidelines, harry and sev go on an adventure to diagon alley, just get it in drabble form, not really up to writing the whole fic rn but i had a plot bunny so""), 'summary': Value(literal:'Harry and Sev go on an adventure to Diagon Alley. Drabble for a severitus challenge. Series: Severitus drabbles [1]')}]"	1	0	0			
184	184	en	What is Forbidden Like The Forest about?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Forbidden Like The Forest"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	[{'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Banter, Cowgirl Position, Cunnilingus, Explicit Sexual Content, I Was Drunk When I Wrote This, Missionary Position, Plot What Plot/Porn Without Plot, Rough Sex, mention of grandmothers'), 'summary': Value(literal:'Scorpius shouldn’t be doing this and yet he is.')}]	184	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What series is The Forest Again a part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""The Forest Again"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: Does "" I HATE YOU OLIVER WOOD! "" have any content warnings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title "" I HATE YOU OLIVER WOOD! "" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: Where is What A Ghostly Scene published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""What A Ghostly Scene"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: What is Forbidden Like The Forest about?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?about WHERE { 
?story golem:title ""Forbidden Like The Forest"" . 
?story golem:summary ?about . 
}
"	[{'about': Value(literal:'Scorpius shouldn’t be doing this and yet he is.')}]	0	1	1	Incomplete query	Underfull	
185	185	en	What is His First Choice about?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""His First Choice"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	"[{'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:""Angst, Love, Romance, Valentine's Day, being picked first, no to settling""), 'summary': Value(literal:'Molly is tired of being unloved and passed over. She wants a special someone but she wants to be his first choice, not the good-enough girl to pass the time with until someone of value is finally free to pursue. But when she literally runs into her partner from Care of Magical Creatures class on her way back from Hogsmeade, will she finally find exactly what she is looking for?')}, {'series': Value(literal:'911 Weeks [4]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'911week2020, Bad Things Happen Bingo, Family, Fluff, Loneliness, Love Confessions'), 'summary': Value(literal:""Buck feels lonely, like everyone around him has a family, someone who cares about them more than anything, but he doesn't. Turns out he is wrong."")}, {'series': Value(literal:""Mrs Bennet's Daughters Universe [2]""), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Major Character Death'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:""But is forced to develop grudging respect., Humour, Judgey-Judginess, Lizzy was named after her, Looking Down From On High, Mrs Bennet's Perspective, She does NOT like Charlotte Lucas, They're not dissimilar, We meet Mrs Bennet's mother""), 'summary': Value(literal:'In the Mrs Bennet\'s Daughters universe, the first Mrs Bennet is dead, and the second (Charlotte Lucas) is tasked with bringing up her daughters. What does Mrs Bennet think of the arrangement? And all the goings on at Longbourn, in her absence? Now we can find out... “He is marrying Charlotte LUCAS!” Mrs Bennet wailed. “CHARLOTTE LUCAS. The little tramp!” *** ""Charlotte Lucas has just told Lady Lucas that Jane shall have two thousand pounds on her come out, and so will each girl when their time comes.” Mrs Bennet flapped her hands excitedly. ""I suppose I shall have to like her now."" ""She has taken very good care of your girls in your stead, and there are many who would not have been so generous.” “Very well.... But, I will not really like her until I see how well she does for them in marriage. THAT is the material concern.” *You probably don\'t need to read MBD first, this is pretty easy to follow by itself.*')}, {'series': Value(literal:""Mrs Bennet's Daughters Universe [2]""), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Major Character Death'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:""But is forced to develop grudging respect., Humour, Judgey-Judginess, Lizzy was named after her, Looking Down From On High, Mrs Bennet's Perspective, She does NOT like Charlotte Lucas, They're not dissimilar, We meet Mrs Bennet's mother""), 'summary': Value(literal:'In the Mrs Bennet\'s Daughters universe, the first Mrs Bennet is dead, and the second (Charlotte Lucas) is tasked with bringing up her daughters. What does Mrs Bennet think of the arrangement? And all the goings on at Longbourn, in her absence? Now we can find out... “He is marrying Charlotte LUCAS!” Mrs Bennet wailed. “CHARLOTTE LUCAS. The little tramp!” *** ""Charlotte Lucas has just told Lady Lucas that Jane shall have two thousand pounds on her come out, and so will each girl when their time comes.” Mrs Bennet flapped her hands excitedly. ""I suppose I shall have to like her now."" ""She has taken very good care of your girls in your stead, and there are many who would not have been so generous.” “Very well.... But, I will not really like her until I see how well she does for them in marriage. THAT is the material concern.” *You probably don\'t need to read MBD first, this is pretty easy to follow by itself.*')}]"	185	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the Mean Segmental Token Type Ratio of you know i love a london boy - one shots?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?msttr  WHERE { ?story golem:title ""you know i love a london boy - one shots"" . ?story golem:MSTTR ?msttr . }
    </SPARQL>

    ###
    

    Question: What is Theodore Not Sends little girl Luna a Sext about?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Theodore Not Sends little girl Luna a Sext"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Who is the author of The First Moon?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The First Moon"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: What is His First Choice about?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { 
?story golem:title ""His First Choice"" . 
?story golem:keyword ?keyword . 
?story golem:romanticCategory ?romantic_category . 
?story golem:series ?series . 
?story golem:collections ?collection . 
?story golem:contentWarning ?content_warning . 
?story golem:summary ?summary . 
}
"	"[{'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:""Angst, Love, Romance, Valentine's Day, being picked first, no to settling""), 'summary': Value(literal:'Molly is tired of being unloved and passed over. She wants a special someone but she wants to be his first choice, not the good-enough girl to pass the time with until someone of value is finally free to pursue. But when she literally runs into her partner from Care of Magical Creatures class on her way back from Hogsmeade, will she finally find exactly what she is looking for?')}, {'series': Value(literal:'911 Weeks [4]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'911week2020, Bad Things Happen Bingo, Family, Fluff, Loneliness, Love Confessions'), 'summary': Value(literal:""Buck feels lonely, like everyone around him has a family, someone who cares about them more than anything, but he doesn't. Turns out he is wrong."")}, {'series': Value(literal:""Mrs Bennet's Daughters Universe [2]""), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Major Character Death'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:""But is forced to develop grudging respect., Humour, Judgey-Judginess, Lizzy was named after her, Looking Down From On High, Mrs Bennet's Perspective, She does NOT like Charlotte Lucas, They're not dissimilar, We meet Mrs Bennet's mother""), 'summary': Value(literal:'In the Mrs Bennet\'s Daughters universe, the first Mrs Bennet is dead, and the second (Charlotte Lucas) is tasked with bringing up her daughters. What does Mrs Bennet think of the arrangement? And all the goings on at Longbourn, in her absence? Now we can find out... “He is marrying Charlotte LUCAS!” Mrs Bennet wailed. “CHARLOTTE LUCAS. The little tramp!” *** ""Charlotte Lucas has just told Lady Lucas that Jane shall have two thousand pounds on her come out, and so will each girl when their time comes.” Mrs Bennet flapped her hands excitedly. ""I suppose I shall have to like her now."" ""She has taken very good care of your girls in your stead, and there are many who would not have been so generous.” “Very well.... But, I will not really like her until I see how well she does for them in marriage. THAT is the material concern.” *You probably don\'t need to read MBD first, this is pretty easy to follow by itself.*')}, {'series': Value(literal:""Mrs Bennet's Daughters Universe [2]""), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Major Character Death'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:""But is forced to develop grudging respect., Humour, Judgey-Judginess, Lizzy was named after her, Looking Down From On High, Mrs Bennet's Perspective, She does NOT like Charlotte Lucas, They're not dissimilar, We meet Mrs Bennet's mother""), 'summary': Value(literal:'In the Mrs Bennet\'s Daughters universe, the first Mrs Bennet is dead, and the second (Charlotte Lucas) is tasked with bringing up her daughters. What does Mrs Bennet think of the arrangement? And all the goings on at Longbourn, in her absence? Now we can find out... “He is marrying Charlotte LUCAS!” Mrs Bennet wailed. “CHARLOTTE LUCAS. The little tramp!” *** ""Charlotte Lucas has just told Lady Lucas that Jane shall have two thousand pounds on her come out, and so will each girl when their time comes.” Mrs Bennet flapped her hands excitedly. ""I suppose I shall have to like her now."" ""She has taken very good care of your girls in your stead, and there are many who would not have been so generous.” “Very well.... But, I will not really like her until I see how well she does for them in marriage. THAT is the material concern.” *You probably don\'t need to read MBD first, this is pretty easy to follow by itself.*')}]"	1	0	0			
186	186	en	What is Mad Tea Party about?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Mad Tea Party"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	"[{'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Drug Use, Non-Consensual Drug Use, back on my shit again, welcome back to me'), 'summary': Value(literal:""Mad Hatter wants to have a tea party, but his guests aren't too keen on being there themselves."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:""Disney World, Fluff, Hotel, Mad Tea Party, One Shot, Peter Pan's Flight, Plane, Pre-Pandemic, boy band, dizzy - Freeform""), 'summary': Value(literal:'Pure fluff. Juan and Luke have a challenge on who can spin the tea cups at Disney World faster.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Crossover, Humor, One Shot, WhoVengerLock'), 'summary': Value(literal:'Even evil masterminds enjoy tea.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'Multi'), 'keywords': Value(literal:'Alice in Wonderland References, Alternate Canon, Alternate Character Interpretation, Alternate Universe - Once Upon a Time Fusion, Awkward Conversations, Backstory, Breaking the Fourth Wall, Cannibalism, Crazy Mad Hatter | Jefferson, Crossovers & Fandom Fusions, Dark Comedy, Dark Fantasy, Food, Madness, Mythology References, Mytology, Nonsense, Prequel, References to Canon, Sweeney Todd References, Tea Parties'), 'summary': Value(literal:'A certain Demon Barber wakes up in Wonderland and finds himself among the mad crowd at the wildest tea party in fabled history.')}]"	186	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the Mean Segmental Token Type Ratio of I'm Nuts, Baby I'm Mad?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?msttr  WHERE { ?story golem:title ""I'm Nuts, Baby I'm Mad"" . ?story golem:MSTTR ?msttr . }
    </SPARQL>

    ###
    

    Question: When was Tea and a Biscuit published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tea and a Biscuit"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: What is Hide that Potion about?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Hide that Potion"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: What is Mad Tea Party about?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { 
?story golem:title ""Mad Tea Party"" . 
?story golem:keyword ?keyword . 
?story golem:romanticCategory ?romantic_category . 
?story golem:series ?series . 
?story golem:collections ?collection . 
?story golem:contentWarning ?content_warning . 
?story golem:summary ?summary . 
}
"	"[{'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Drug Use, Non-Consensual Drug Use, back on my shit again, welcome back to me'), 'summary': Value(literal:""Mad Hatter wants to have a tea party, but his guests aren't too keen on being there themselves."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:""Disney World, Fluff, Hotel, Mad Tea Party, One Shot, Peter Pan's Flight, Plane, Pre-Pandemic, boy band, dizzy - Freeform""), 'summary': Value(literal:'Pure fluff. Juan and Luke have a challenge on who can spin the tea cups at Disney World faster.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Crossover, Humor, One Shot, WhoVengerLock'), 'summary': Value(literal:'Even evil masterminds enjoy tea.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'Multi'), 'keywords': Value(literal:'Alice in Wonderland References, Alternate Canon, Alternate Character Interpretation, Alternate Universe - Once Upon a Time Fusion, Awkward Conversations, Backstory, Breaking the Fourth Wall, Cannibalism, Crazy Mad Hatter | Jefferson, Crossovers & Fandom Fusions, Dark Comedy, Dark Fantasy, Food, Madness, Mythology References, Mytology, Nonsense, Prequel, References to Canon, Sweeney Todd References, Tea Parties'), 'summary': Value(literal:'A certain Demon Barber wakes up in Wonderland and finds himself among the mad crowd at the wildest tea party in fabled history.')}]"	1	0	0			
187	187	en	What is By the Sea about?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""By the Sea"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"		187	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What collections is The Tides of Power part of?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""The Tides of Power"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: Where is Horizon published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Horizon"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: What is Forbidden Like The Forest about?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Forbidden Like The Forest"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: What is By the Sea about?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { 
?story golem:title ""By the Sea"" . 
?story golem:keyword ?keyword . 
?story golem:romanticCategory ?romantic_category . 
?story golem:series ?series . 
?story golem:collections ?collection . 
?story golem:contentWarning ?content_warning . 
?story golem:summary ?summary . 
}
"	"[{'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Pre-Slash'), 'summary': Value(literal:'At the end of a hard day, Barry goes to the seashore. Leonard comes across him and tries to start a peaceful conversation.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Major Character Death'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'characters to be added as story progresses, tags to be added as story progresses'), 'summary': Value(literal:'The Last Dragonborn will be remembered in history, but what of the man who became the legend? This follows the life of the Last Dragonborn, from his birth to when he finds himself captured by the Imperials.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Character Study, Established Relationship, Gay Sex, Happy Sex, Rough Oral Sex'), 'summary': Value(literal:'A dalliance by the sea, for Pride.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'DenNor, Hetalia Countries Using Human Names, Human AU, Ocean, POV First Person, descriptive, love of the ocean, mmm scenery'), 'summary': Value(literal:'Plotless standing by the sea, just messing around and being goofballs. Norway appreciates the scenery.')}, {'series': Value(literal:'The Potter Longbottom Family [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Cause movie Ginny sucks, Falling In Love, Friendship/Love, More Harry without Ginny, Polyamory, Polyamory ftw, Pregnancy'), 'summary': Value(literal:'It had been 3 months since that fateful night on top of the Astronomy Tower, when the day had started there would have been no way that Harry could have known what would happen to him, or that fact that he would start a relationship with his best friends.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'First Dates, First Kiss, Fluff, Friendship/Love, I Wrote This Instead of Sleeping, Love Confessions, Meditation, One Shot, Romance, Sleepy Cuddles, harmless fluff'), 'summary': Value(literal:'Once they are both comfortable, Rin begins to narrate in a soothing voice, his deep voice, but with a hoarse rasp from fatigue. However, the rasp does not bother Ai. Rather, it makes Rin sound quite soothing...and attractive, and Ai loves it.. “It is a bright, early summer day in June. It’s late morning. You look up at the blue sky. It is mostly clear, with a few puffy clouds littered here and there...The weather is surprisingly moderate for summer. It isn’t hot as H*ll. There’s even a gentle breeze in the air. It is the beginning of summer, yet the perfect weather is reminiscent of spring..."" When nerves keep Aiichirou awake, Rin offers to help him fall asleep. He tells him a story about two Samezuka swimmers who go to the beach for a date on one warm June day. Set during ""Eternal Summer"".')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Angst, Canon Compliant, Introspection, One of My Favorites, POV Uchiha Itachi, Uchiha Itachi Needs a Hug'), 'summary': Value(literal:'It was not often that Itachi could say he felt wistful, but the girl, with her long black hair and pretty blue eyes and watery smile, made him wish for things that were impossible. (pretty girls make itachi sad)')}, {'series': Value(literal:'Bedrabbled [74]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alternate Universe, Banter, Drabble, Established Relationship, Fluff and Humor, Seaside, drabble challenge'), 'summary': Value(literal:'The sterekdrabbles blog challenge for 04/13/18: “snap, beach, waste” For those who may not know, ""sex on the beach"" is the name of a colorful fruity cocktail.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'Weddings'), 'summary': Value(literal:'Ashley and Jessica try to decide on a song.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Beaches, Established Relationship, No (Y/N), Reader-Insert, Vacation'), 'summary': Value(literal:""It's those everyday moments that mean the most."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Angst, Canon Compliant, Introspection, One of My Favorites, POV Uchiha Itachi, Uchiha Itachi Needs a Hug'), 'summary': Value(literal:'It was not often that Itachi could say he felt wistful, but the girl, with her long black hair and pretty blue eyes and watery smile, made him wish for things that were impossible. (pretty girls make itachi sad)')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Complete, Post-Hogwarts, epilogue compliant'), 'summary': Value(literal:'Victoire loves the sea and the conversations she shares with her grandmother, Mère Appolline.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Rape/Non-Con'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Anal Sex, Canon Era, Dead Dove: Do Not Eat, Forced Orgasm, Get Your Words Out 2020, Minor Aesop Carl | Embalmer/Joseph Desaulniers | Photographer, Non-Consensual Voyeurism, Restraints, Tentacle Rape, Unrequited Love, Victim Aroused'), 'summary': Value(literal:""Hastur uses Aesop to punish Joseph. A lone tentacle slithers its way up the leg of Aesop's pants, tickling the back of his knee. His body shies away from the touch, but there is no escape. No one will be saving him now. Not from this."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Haymitch and Effie being cute with River, Haymitch never gets a break with any of the kids, River playing in the sea, Sunset in Four, post rebellion'), 'summary': Value(literal:'Hayffie take River for a walk down to the sea, and River decides he wants a swim.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'AU, Alternate Universe - Everyone Lives/Nobody Dies, Angst, Emotional Intimacy, Fluff, Friends to Lovers, Friendship, Hugging, Kissing, Physical Intimacy, Romance, but not graphic, discovering feelings, post!sdc, some nsfw'), 'summary': Value(literal:'Some weeks after the fight with DIO, Polnareff invites Avdol to come spend the week with him in Marseille. Avdol, tired and plagued by nightmares, gratefully accepts the invitation.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Multi'), 'keywords': Value(literal:'Mermaid Reader, Reader Insert, Siren, mermaid! reader'), 'summary': Value(literal:""The waves crashing against the rocks seemed to be softer than usual, and the sound was so comforting to her. She grew up here, the sea seemed to like her. Never once did she get stuck in a current, or knocked down by one of the waves. Maybe it was just luck... She didn't want to move to a city without the ocean, but her mom had said there would be a river and maybe a lake. Still, she didn't think those would be as comforting. She had lots of friends, all different, but good friends. Some dropped out and moved away, but the others would miss her too. But now, she's moving away to a place where she had no relatives or friends. And to top it off, she was a bit shy to make new friends at a new school. She never really /had/ to make friends, they came to her. But [Y/N] knew everyone in Malibu, and everyone knew who she was. The night before she would officially leave, the sea was dark and seemed to have no end. Rain was pouring, more like crying for her to stay.  She sat through it on the beach, no umbrella. Letting the rain wash through her hair. The moon was bright. It seemed to be smiling, then again it always did, and the tide rose to her feet. Cold, but comforting."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'BUT IT WILL BE HAPPY, Cheating, Emotional/Psychological Abuse, Eventual Smut, Happy Ending, I promise, Implied/Referenced Domestic Violence, Niko is a dick, Please somebody hug Eve, Psychological Drama, Psychological Trauma, Slow Burn, Villanelle is just like we know her, eventually'), 'summary': Value(literal:'All Villanelle wanted was a peaceful Summer working with Konstatin at the family business. She never thought she would meet Eve in the way.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'characters to be added as story progresses, tags to be added as story progresses'), 'summary': Value(literal:'The Last Dragonborn will be remembered in history, but what of the man who became the legend? This follows the life of the Last Dragonborn, from his birth to when he finds himself captured by the Imperials.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'Mermaids, Pirate/Mermaid AU'), 'summary': Value(literal:'Live and die by the sea, a pirate’s aphorism. It was America’s too. Before she considered living in the sea.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Oneshot, date'), 'summary': Value(literal:'All dressed up and no place to go...')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'characters to be added as story progresses, tags to be added as story progresses'), 'summary': Value(literal:'The Last Dragonborn will be remembered in history, but what of the man who became the legend? This follows the life of the Last Dragonborn, from his birth to when he finds himself captured by the Imperials.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'Trick or Treat Exchange 2019'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Enjoying Hero Retirement, Post-Canon, Slice of Life'), 'summary': Value(literal:""In which we last left Galavant and Isabella settled by the sea, and we see how they're doing."")}, {'series': Value(literal:'A Very Sterek Summer 2020 [1]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'A Very Sterek Summer Fest 2020, Angst, Consensual Spanking (mentioned), Dirty Talk, Knotting, Not Really a Song Fic but a Song is Featured, Spoilers, Uncomfortable Conversations with Peter, When in Doubt-Contact Author for Full List of Warnings'), 'summary': Value(literal:""A day at the beach seemed like such a simple thing. The old adage was true, never judge a book by it's cover."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'First Time, Honeymoon, Love, Romance, Sex'), 'summary': Value(literal:'""Above them the night sky began to bloom with the twinkling lights of stars and the brilliance of the full moon bathed the shore in cool lunar rays. The sound of his heart beneath her ear was steady and strong. She held him closer to her."" This is their first night together as husband and wife. They spend their honeymoon on an island in Tropical Country.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Captain Swan - Freeform, Captain Swan AU - Freeform, captain swan fluff, ghost story'), 'summary': Value(literal:'When Emma Swan moves to a small town in Maine to escape her past the last thing she expects is for her new place to have a ghost. Much less the 300 year old ghost of a pirate. But maybe he will be exactly what she needs as she starts over and finds love.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alternate Universe - Modern Setting, Angst, First Time, Near Drowning, Panic Attacks, Slash'), 'summary': Value(literal:""Merlin is afraid of the water. And in love with Arthur. It's not a good combination."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Adorable Jester Lavorre, Fluff, Friendship, Jester Lavorre-centric, Pre-Canon, Trickster Gods'), 'summary': Value(literal:'Or: Jester meets the Traveler. And then, the meets him again. And again.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Beaches, Cute, Established Relationship, Fluff, Kissing, Magicians, Male Pronouns for Asra (The Arcana), Ocean, Original Female Character(s) - Freeform, Playful Faust, Sneaking Around, Sneaking Out, Teasing, Vacation, commission, hints of jealousy, playful banter, post-route'), 'summary': Value(literal:'Finally taking Nadia up on her offer to visit Praka for a while, Jenna and Asra find themselves unable to stay put in the castle and choose to go have some good-natured fun instead, as magicians do. for @ourloveisgone/@asrasdarling!!')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'Multi'), 'keywords': Value(literal:'Mermaid Reader, Reader Insert, Siren, mermaid! reader'), 'summary': Value(literal:""The waves crashing against the rocks seemed to be softer than usual, and the sound was so comforting to her. She grew up here, the sea seemed to like her. Never once did she get stuck in a current, or knocked down by one of the waves. Maybe it was just luck... She didn't want to move to a city without the ocean, but her mom had said there would be a river and maybe a lake. Still, she didn't think those would be as comforting. She had lots of friends, all different, but good friends. Some dropped out and moved away, but the others would miss her too. But now, she's moving away to a place where she had no relatives or friends. And to top it off, she was a bit shy to make new friends at a new school. She never really /had/ to make friends, they came to her. But [Y/N] knew everyone in Malibu, and everyone knew who she was. The night before she would officially leave, the sea was dark and seemed to have no end. Rain was pouring, more like crying for her to stay.  She sat through it on the beach, no umbrella. Letting the rain wash through her hair. The moon was bright. It seemed to be smiling, then again it always did, and the tide rose to her feet. Cold, but comforting."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Drabble, Fluff, I got a toothache just writing it, Memes, Post-War, Rare Pairings, this is really fluffy'), 'summary': Value(literal:'Lance & Coran in love by the Sea A Commission')}, {'series': Value(literal:'Kinky Is The New Spooky (Kinktober 2021) [8]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'First Kiss, Getting Together, Mermaid Isabelle Lightwood, Mermaids, Tentacle Sex, Tentacles, alternative universe, human clary fray, mermaid'), 'summary': Value(literal:""Kinktober Day 8: Tentacles When Clary goes to a cottage on the seaside to finish her novel she wasn't expecting to meet a mermaid. * “They could hurt you, Clary!” Clary swallows and looks down at the tentacles floating by Isabelle’s sides. She reaches out and touches the one closest to her with the tip of her finger. Immediately, the tentacle wraps itself around her wrist. What if I didn’t mind if they hurt me?”"")}, {'series': Value(literal:'None'), 'collection': Value(literal:""The Mystrade Valentine's Calendar""), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:""Fluff, Married Couple, Mystrade Valentine's Calendar 2018, Pining, Surprises, Valentine's Day""), 'summary': Value(literal:""Greg is missing Mycroft on Valentine's Day. Mycroft has some surprises in store."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'Peaceful, prompt'), 'summary': Value(literal:'They leave the base unnoticed and make their way down to the little inlet nearby. The air is brisk and the sky is cloudy, but it’s a gorgeous scene: a verdant green forest spreads over nearby hills and mountains, only halting at the sea’s edge, marked by thin strips of rocky beach and sharp little cliff faces. The grey sea stretches out into eternity, sparkling with faint sunlight that breaks through the clouds above. It’s beautiful here, certainly, but more beautiful is her company: currently brushing against Fareeha’s arm playfully as she points out a pair of grey herons flying above. Or, Angela and Fareeha have lunch by the sea.')}, {'series': Value(literal:'Rosander/Sobbe Headcanons, Ficlets, Dribbles & Drabbles [1]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Ficlet, Short'), 'summary': Value(literal:'A short ficlet I posted on Tumblr after Robbe and Sander first meet.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Rape/Non-Con'), 'romantic_category': Value(literal:'Other'), 'keywords': Value(literal:'Anal Sex, Canon Era, Dead Dove: Do Not Eat, Forced Orgasm, Get Your Words Out 2020, Minor Aesop Carl | Embalmer/Joseph Desaulniers | Photographer, Non-Consensual Voyeurism, Restraints, Tentacle Rape, Unrequited Love, Victim Aroused'), 'summary': Value(literal:""Hastur uses Aesop to punish Joseph. A lone tentacle slithers its way up the leg of Aesop's pants, tickling the back of his knee. His body shies away from the touch, but there is no escape. No one will be saving him now. Not from this."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'The 2017 Sid/Geno Exchange'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alternate Universe, Fisherman Sidney, Merman Geno, Minor Injuries, Mythical Beings & Creatures, mermaid au'), 'summary': Value(literal:'The first time Sid meets the stranger is when he returns from sea after a long day. The man is sitting on his dock, feet dangling into the water.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alternate Universe - Royalty, Consensual Relationship, Established Relationship, Infidelity, King Taekwoon, Known Infidelity, Master/Slave, Mild Hurt/Comfort, Minor Injuries, Power Dynamics, Slave Hongbin'), 'summary': Value(literal:'A king, Taekwoon, will never find comfort in the arms of his queen. But his slave, Hongbin, on the other hand...')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Mermaid Reader, Reader Insert, Siren, mermaid! reader'), 'summary': Value(literal:""The waves crashing against the rocks seemed to be softer than usual, and the sound was so comforting to her. She grew up here, the sea seemed to like her. Never once did she get stuck in a current, or knocked down by one of the waves. Maybe it was just luck... She didn't want to move to a city without the ocean, but her mom had said there would be a river and maybe a lake. Still, she didn't think those would be as comforting. She had lots of friends, all different, but good friends. Some dropped out and moved away, but the others would miss her too. But now, she's moving away to a place where she had no relatives or friends. And to top it off, she was a bit shy to make new friends at a new school. She never really /had/ to make friends, they came to her. But [Y/N] knew everyone in Malibu, and everyone knew who she was. The night before she would officially leave, the sea was dark and seemed to have no end. Rain was pouring, more like crying for her to stay.  She sat through it on the beach, no umbrella. Letting the rain wash through her hair. The moon was bright. It seemed to be smiling, then again it always did, and the tide rose to her feet. Cold, but comforting."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Beach shenanigans, Summertime Prompts, the ocean'), 'summary': Value(literal:""Two short ficlets from the Spy AU and Fairy AU for Katie's Birthday!"")}, {'series': Value(literal:'The blue house on the hill [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Bathroom Sex, Friends to Lovers, Not so accidental baby acquisition, Oral Sex, Some Fluff, a bit of angst'), 'summary': Value(literal:""Poe cannot help being attracted into Hux's orbit and comes back for more, though nothing can be completely easy for him, right?"")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Mermaid Reader, Reader Insert, Siren, mermaid! reader'), 'summary': Value(literal:""The waves crashing against the rocks seemed to be softer than usual, and the sound was so comforting to her. She grew up here, the sea seemed to like her. Never once did she get stuck in a current, or knocked down by one of the waves. Maybe it was just luck... She didn't want to move to a city without the ocean, but her mom had said there would be a river and maybe a lake. Still, she didn't think those would be as comforting. She had lots of friends, all different, but good friends. Some dropped out and moved away, but the others would miss her too. But now, she's moving away to a place where she had no relatives or friends. And to top it off, she was a bit shy to make new friends at a new school. She never really /had/ to make friends, they came to her. But [Y/N] knew everyone in Malibu, and everyone knew who she was. The night before she would officially leave, the sea was dark and seemed to have no end. Rain was pouring, more like crying for her to stay.  She sat through it on the beach, no umbrella. Letting the rain wash through her hair. The moon was bright. It seemed to be smiling, then again it always did, and the tide rose to her feet. Cold, but comforting."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Beach Day, Before they were rivals they were besties, Best Friends, Canadian references, Childhood Friends, Future Fic, Urban Exploration, Webcomic Fanfic, Woo Hoo!, Woo Hoo! - Webcomic'), 'summary': Value(literal:'Rhiys and Sam, childhood best friends, go on a beach day and find an interesting cave while they explore. Rumor has it that caves have interesting things in them...like...fairies, or nymphs, or maybe...bears?!')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Default Shepard, Fluff, Post-Canon'), 'summary': Value(literal:'Shepard goes off to watch the sunset by the sea, and Kaidan joins him. Simple short fluff fic.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Complete, Post-Hogwarts, epilogue compliant'), 'summary': Value(literal:'Victoire loves the sea and the conversations she shares with her grandmother, Mère Appolline.')}, {'series': Value(literal:'The Potter Longbottom Family [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Cause movie Ginny sucks, Falling In Love, Friendship/Love, More Harry without Ginny, Polyamory, Polyamory ftw, Pregnancy'), 'summary': Value(literal:'It had been 3 months since that fateful night on top of the Astronomy Tower, when the day had started there would have been no way that Harry could have known what would happen to him, or that fact that he would start a relationship with his best friends.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Major Character Death'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'characters to be added as story progresses, tags to be added as story progresses'), 'summary': Value(literal:'The Last Dragonborn will be remembered in history, but what of the man who became the legend? This follows the life of the Last Dragonborn, from his birth to when he finds himself captured by the Imperials.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'AU where everything is fine and shit, Alternate Universe - College/University, Alternate Universe - Modern Setting, Childhood Friends, Comedy, Eremin - Freeform, Eren and Armin gay, Fluff, Friends to Lovers, LMAO, Mikasa and Annie gay too, No Spoilers, Nobody Dies, Nobody is Dead, Other Additional Tags to Be Added, Romance, also the setting is in paradis island but in a new town I have created for this fic., but mikannie will probs be a little more interesting idk, enjoy, eremin is the main ship tho, everything is okay, just a college AU, life is good, mikannie - Freeform, spoiler free, will have comedy assuming im funny'), 'summary': Value(literal:""Eren Jaeger had fallen in love with his childhood best friend many years ago. Eventually they had to part ways when they were about to start highschool. Years have passed, now Eren and his sister Mikasa are going to college. Will Eren meet his first love again? (Might pick up again eventually but lost motivation due to spoilers of the ending. I'm very sorry) EDIT: Fic on hiatus but im gonna be working on it again. when im at least half way done through the story i will be uploading chapters"")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Angst and Romance, Bloodplay, Domestic Fluff, Encephalitis the Dog, Love on the Run, Mention of Kidnapping, Murder, Murder Husbands, Sappy, Suspension Of Disbelief, Switching, married Hannigram'), 'summary': Value(literal:""Set Post Wrath of the Lamb. Will wakes up in an unknown home, realizing Hannibal saved them. As he and Hannibal grow closer faster than he would've expected Will can't help but let go of his past to embrace the future he's always held himself back from. Unapologetic sappy fluff combined with Murder as always. First real Hannigram I've written. Not beta read."")}, {'series': Value(literal:'The Potter Longbottom Family [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'Cause movie Ginny sucks, Falling In Love, Friendship/Love, More Harry without Ginny, Polyamory, Polyamory ftw, Pregnancy'), 'summary': Value(literal:'It had been 3 months since that fateful night on top of the Astronomy Tower, when the day had started there would have been no way that Harry could have known what would happen to him, or that fact that he would start a relationship with his best friends.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Underage'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Ancient Greece, Beach Sex, Hand Jobs, Pederasty'), 'summary': Value(literal:'The scene where I have always presumed Alexias and Lysis consummated their love. It was only ever implied in the book, but I took the liberty of making it clear. I wrote this work several years ago but now it is NEW AND IMPROVED. Yeah, it sucked before. It was one of my first fics.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Underage'), 'romantic_category': Value(literal:'Multi'), 'keywords': Value(literal:'Mermaid Reader, Reader Insert, Siren, mermaid! reader'), 'summary': Value(literal:""The waves crashing against the rocks seemed to be softer than usual, and the sound was so comforting to her. She grew up here, the sea seemed to like her. Never once did she get stuck in a current, or knocked down by one of the waves. Maybe it was just luck... She didn't want to move to a city without the ocean, but her mom had said there would be a river and maybe a lake. Still, she didn't think those would be as comforting. She had lots of friends, all different, but good friends. Some dropped out and moved away, but the others would miss her too. But now, she's moving away to a place where she had no relatives or friends. And to top it off, she was a bit shy to make new friends at a new school. She never really /had/ to make friends, they ca"	0	1	1	Annotation error		
189	189	en	What is Surprise about?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Surprise"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"		189	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What are the keywords of That Secret We Never Knew?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""That Secret We Never Knew"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: What is Hide that Potion about?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Hide that Potion"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: How long is Wonder and Fright and Nothing that Nice?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Wonder and Fright and Nothing that Nice"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: What is Surprise about?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
?story golem:title ""Surprise"" . 
?story golem:summary ?summary . 
}
"	"[{'summary': Value(literal:'Prompt: Harry Potter, James/Lily, surprise')}, {'summary': Value(literal:""Draco Malfoy has an interesting intimate encounter with... himself?! Things are definitely not what they seem but that's a normal thing when you go to Hogwarts"")}, {'summary': Value(literal:'Rose and Hugo have been brought to laughter and tears by their parents’ letters to friends, family, and each other. What surprises will the next packet of letters hold?')}, {'summary': Value(literal:'A random puppy, a strange book and an enlightening conversation')}, {'summary': Value(literal:""Harry and Severus' family and friends want to throw Severus a surprise party despite Harry warning them what a bad idea it is"")}, {'summary': Value(literal:'None')}, {'summary': Value(literal:'Read it and find out')}, {'summary': Value(literal:""Someone's about to receive a very special gift..."")}, {'summary': Value(literal:'She may have only received a letter from him for her birthday, but she knows him by now. Or so she thought.')}, {'summary': Value(literal:""‘What if?’ Harry’s formative years were a lot worse and Harry’s first Potions class went a little differently? A dark look at what could have been with a few changes at the beginning. Part of the series but not necessary to read to follow the rest, if any of the warnings bother you please just skip this one! READ the WARNINGS!!! The opinions within are FICTION! I in no way condone or agree with them in reality, which is very different to fiction! I in no way condone or agree with Chan in reality, it's fine in FICTION but in reality it is paedophilia and not only illegal but a serious mental illness. Reality and fiction are two very different things, just ask Steven King, John Saul and the many other amazing authors in the world, please do not confuse the two and show me the courtesy of not assuming that I do.  It's a good thing JK's mind isn't as twisted as mine or the series would have been a hell of a lot shorter!"")}, {'summary': Value(literal:""Okay so I am unhealthily invested in CeleryThesis' The Return. To the point where Chapter 13 inspired...well, this. Don't read this before hitting Chapter 13 of The Return, because it won't make any sense and it will spoil that story. Which is...such a good story, you guys, I don't even have words to explain how good it is. Seriously, it's fucking fantastic and EVERYONE IN THE WORLD should be following along. And when you hit Chapter 13, and you feel the rage consume you, come over here. I've got what you need."")}, {'summary': Value(literal:'Written for the prompt: Surprise')}, {'summary': Value(literal:""Madam Puddifoot has been in business for a long time, and she knows that sex sells better than tea. During the week, Madam Puddifoot's teashop is transformed into a brothel. Her business is a clean, high-class establishment, and offers discretion to all staff and clientele. Which is a good thing for those who are dealing with unexpected fame now that the war's finished, as well as those who were left outcast and bankrupt after the war."")}, {'summary': Value(literal:'you surprise your husband for the holidays')}, {'summary': Value(literal:'Boyfriend!James throws reader a surprise birthday party')}, {'summary': Value(literal:""Kagome visits her boyfriend's house with the intention of surprising him, but as it turns out, she's the one who gets one hell of a surprise."")}, {'summary': Value(literal:'Bagi Porco, penyelamat hidupnya adalah Pieck. Mendengar hal ini, membuat Pieck tertawa. Diam-diam, penyelamat hidupnya—Pieck—memberikan kejutan untuk Porco! PokkoPikuWeek2022 Day 4 PROMPT #4: Cuddles Disclaimer apply.')}, {'summary': Value(literal:'Tonks tries to keep a surprise party a secret from Remus.')}, {'summary': Value(literal:""Unbeta'ed. Please point out the mistakes you may find."")}, {'summary': Value(literal:'Dean surprises Seamus with a passionate kiss Written for the Drarry Fanfiction 30 days of kissing challenge')}, {'summary': Value(literal:'sequel to whatever you want. After Peter annoys Derek, he and stiles go to JC penny, where Derek gets his  boyfriend a surprise.')}, {'summary': Value(literal:'Allison turns 18.')}, {'summary': Value(literal:'Kira has important news for Scott.')}, {'summary': Value(literal:""Alot of weird things happen in Beacon Hills. But no one expected Isaac and Jackson to come back, with a baby. - So I started writing this a while back and in the beginning it has a lot of typos, grammer mistakes etc, but it get's better through out the chapters!"")}, {'summary': Value(literal:'Peter and Stiles have been together for a year, so Stiles asks Lydia to help him surprise Peter for their anniversary. Sexy times ensue.')}, {'summary': Value(literal:'“It’s just that, I thought it’d be a long time.” Peggy rose from her seat and deposited herself under his arm and tucked in to his side. “Which is why it’s a surprise.” They stayed like that. A small quiet moment. “And because we’d need the practice.”')}, {'summary': Value(literal:'Tony knows that something like an arranged marriage would happen to him eventually, like it does to all omegas. He also knew that it would happen because of Howard. The fact that he’d be unwanted shouldn’t have come as a surprise.')}, {'summary': Value(literal:'Winter Drabble Prompt: Coat')}, {'summary': Value(literal:'Cassandra waits alone on a hill, expecting Varric and hoping.')}, {'summary': Value(literal:'TRESPASSER SPOILERS Dorian meets the Inquisitor for a romantic tryst in the Winter Palace.')}, {'summary': Value(literal:'John and Sherlock together in the kitchen during one of the few non raining days in London. (First One Shot)')}, {'summary': Value(literal:'John tells Greg why Joan came to Sunset Yard.')}, {'summary': Value(literal:'“You a shy one?”, he asked, attention once again on you. You chewed on the inside of your cheek, pressing yourself further against Sherlock.')}, {'summary': Value(literal:'Young Mycroft meets his new baby brother and gets a surprise. Written for the prompt *one small change to canon*. This was the result.')}, {'summary': Value(literal:'Daichi returns home from a week away to a happy Koushi. Warning: Smut. Mpreg. Pissy baby Tobio. Miscellaneous KNB ships and offspring')}, {'summary': Value(literal:'Your boyfriend Hoseok picks you up from work and tells you that you have a surprise waiting at home. You arrive to find your best friend Kim Namjoon who is visiting from out of town. After a few drinks too many, your evening becomes more than you had bargained for.')}, {'summary': Value(literal:'Bringing your boyfriend home to meet your friends is somehow both easier and harder than you thought it would be.')}, {'summary': Value(literal:'“Yoongi dresses up as your favourite character as a sexy, little surprise. He is not ready however for just how good he will get you with it. Not that he is complaining.”')}, {'summary': Value(literal:'Yoongi falls in love with Hoseok every second, minute and hour. That would be the same for Hoseok too, of course.')}, {'summary': Value(literal:""Jimin wants to surprise Jungkook. Basically this is a demo for a possible story I might upload. I haven't written anything in quite a while, so please be very honest"")}, {'summary': Value(literal:'Yoongi plans to surprise Jimin, but little does he know that Jimin has an even bigger surprise for him.')}, {'summary': Value(literal:'Hawks gets home from a long shift and finds Dabi in his home. They talk, and Hawks gives up. Funny how he feels so much better now. \'""Shhh, Angel. It\'s okay, you\'re safe,"" a rough voice whispered soothingly, one hand in his hair and the other stroking through crimson feathers. Keigo wanted so badly to believe him, to just accept that the Villain was being nice for some unknown reason and that this was okay.\'')}, {'summary': Value(literal:""[reader x todoroki shouto] Parties aren't your forte, but you didn't mind this one. [birthday fic for victoria.]"")}, {'summary': Value(literal:'Izuku wants to surprise Shouto. Shouto has a surprise for Izuku.')}, {'summary': Value(literal:'Denki surprises Hitoshi.')}, {'summary': Value(literal:'Momo thinks about what her class has gone through and what she has and hasn’t expected. Drabblish.')}, {'summary': Value(literal:""“You smell like milk.” “Excuse me?” Hitoshi shrugs. “I don’t know, you smell different, milky almost.” Or Shouta discovers he's pregnant."")}, {'summary': Value(literal:'After Jirou broke into the top twenty pro heroes, life had become more stressful. Luckily for her, she has a doting boyfriend to help ease that stress.')}, {'summary': Value(literal:'Bakusquad thinks they are the only traitors.')}, {'summary': Value(literal:""A man has an open marriage and while he's away on business he meets up with a woman and her daughter."")}, {'summary': Value(literal:'Caerven patiently sat alone at the desk in Trementhe’s office, the bouquet of pastel-colored flowers he brought along idly laid on its surface.')}, {'summary': Value(literal:""On my mom's birthday, I put on my best suit. I get a haircut. I pretend she's coming home. Series: A Softer World [19]"")}, {'summary': Value(literal:""Imagine you coming home and there's a surprise waiting for you."")}, {'summary': Value(literal:'“I’m wearing a vibrator. That’s the remote.” A pale hand folds Obito\'s fingers over the plastic object, inducing him. ""I want you to,"" Kakashi begins, cheeks flushed and eyes deep, ""Press the button.""')}, {'summary': Value(literal:'John catches Vriska watching his favourite movie.')}, {'summary': Value(literal:'Belle has a surprise for her true love, if he can be brave enough to accept it.  Pure PWP and I am not even sorry.')}, {'summary': Value(literal:""Everyone forgets Emma's birthday. Everyone except Regina."")}, {'summary': Value(literal:'Anon Prompt from my Tumblr: write a fic where Emma gives Regina a necklace :) Oneshot. Fluffy goodness.')}, {'summary': Value(literal:'prompted by alwaysdearie: Belle and Rumple have sexy time before the curse, Belle is pregnant when he kicks her out, neither one knows yet. When he finds her in Storybrooke she has a grown up daughter with his eyes.')}, {'summary': Value(literal:""Emma finds out Regina's birthday is approaching and decides to surprise her in the best way possible."")}, {'summary': Value(literal:'It’s been a long week for you. You seem so tired and stressed out; you look like you want to give up most days. For days I’ve been planning this moment. All I kept thinking about was that small cabin deep in the woods. We discovered this cottage out of the blue.  The sun was its hottest that day and this was where you first kissed me. Your lips were warm and inviting, much like the interior of the cabin.')}, {'summary': Value(literal:'“Your lonely, and away from the woman you love.  I understand that, but please don’t use me.”')}, {'summary': Value(literal:'Short Married!Blam ficlet - Blaine comes home to a surprise from his Husband and daughter. (Blaine/Sam)')}, {'summary': Value(literal:""Blaine comes back home one day from work, only to get something that he wasn't expecting."")}, {'summary': Value(literal:""Hux thinks he's clever. Kylo imagines the worst. It all ends in fluff. Original, less polished version was posted on Twitter."")}, {'summary': Value(literal:""After the Duchess of Mandalore comes to Coruscant after Voyage of Temptation, Ashoka doesn't think much of it. But, when going to meet Obi-Wan and Anakin for lunch one day, she finds a little more than she bargained for in Obi-Wan's apartment..."")}, {'summary': Value(literal:'The nine Strawhats saw a little boy emerge from the imposing ship to stand by Sanji’s side clasping his hand. They stared in slack jawed wonder at the light green hair, grey piercing eyes and slightly curled eyebrow of the boy. He looked like a miniature version of their swordsman with a bokken strapped to his side. No one was more blown away than Zoro. Nami found her voice first. “Sanji-kun why do you have a mini Zoro?” Sanji chuckled nervously. “Hee Hee surprise.”')}, {'summary': Value(literal:'Sanji surprises Zoro in public. There are no complaints.')}, {'summary': Value(literal:""Lexa has been deployed and Clarke misses her. It's their anniversary and it doesn't look like Lexa will be home for it. Or will she?"")}, {'summary': Value(literal:'""Playing your dream card again, Harold?"" John says, hands linked around the waist, ""That I’m a host in your world, a figment of your dream and a sex toy when you need a good fuck,"" and lowers to grope the ass mounds. ""Rather than to believe that I’m not a machine?"" Small attempt on the Westworld universe.')}, {'summary': Value(literal:'Hawke decides to give Fenris a sexy surprise....with unexpected results.')}, {'summary': Value(literal:'Based on the watcherlove prompts reckless, argue, passion and ""The gang finds out.""')}, {'summary': Value(literal:""One of the most basic tropes you can come up with for fanfiction prompts. It's Daryl's birthday, and he's never had a good one. But Paul is going to change that."")}, {'summary': Value(literal:'Tris recalls the thrill of running with the Dauntless for the first time, jumping trains and chasing adrenaline for the sole purpose of pleasure, and it’s similar to this, giving in to need and desire and not caring about logic. There’s nothing to be afraid of in this, in physicality and honesty and passion, and she knew that before now but something about the feel of black lace on her body definitely enhances it.')}, {'summary': Value(literal:""Simon has a way of appearing at the most embarrassing times, but it's okay... He'll make it better."")}, {'summary': Value(literal:'Written for the Open on Sunday challenge, with a prompt of ""funny non-con.""  Which was a tricksy prompt to write for, let me tell you. Set post-Chosen and post-Not Fade Away.')}, {'summary': Value(literal:""Even when you think you're ready for life's little surprises, Alistair finds out that fate will still manage to throw you a curveball."")}, {'summary': Value(literal:'Hux gets Kylo a lovely gift.')}, {'summary': Value(literal:'While Mikey is busy getting into the holiday spirits, Leonardo has plans of his own.')}, {'summary': Value(literal:""Written for Ulquiorra Cifer's birthday December 1st, 2020. It's all Ina could give him so she went all out."")}, {'summary': Value(literal:'...sometimes they come back.')}, {'summary': Value(literal:""Shyla hadn't anticipated seeing Henry Cavill again, and if if she had, she wouldn't have guessed it included a lap dance."")}, {'summary': Value(literal:'After a routine physical JJ gets quite a surprise that will affect herself,Will, and Henry. Set between 10x22 and 10x23.')}, {'summary': Value(literal:'Will gets a surprise, Hannibal does too.')}, {'summary': Value(literal:'Rafael has a surprise for you in his office, but you have to be quiet about it.')}, {'summary': Value(literal:'“This was a bad idea,” Dawn muttered, pacing back and forth in Cisco’s kitchen. “No, it was a great idea. No, it was a bad idea. No, it was a great idea. No, it was a bad idea. No, it was a great idea. No, it was a bad idea. No-”')}, {'summary': Value(literal:""Joe walks in on Barry and Len kissing. Funny enough he isn't the one the most surprised."")}, {'summary': Value(literal:""For Day 2: Free Day from OlivarryHoliday2015 AU where Barry is still a forensic scientist and Oliver is a soldier. Barry is sad because he won't spend Christmas with his boyfriend. Or is he wrong?"")}, {'summary': Value(literal:""Ficlet based on a manip: Myka has a surprise for Helena. Established relationship. Sort of spoiler for Season 3 finale, but don't blink or you'll miss it."")}, {'summary': Value(literal:'Enzo cooks for Sasha.')}, {'summary': Value(literal:""Happy Halloween Everyone! For starters, I would like to apologize for completely falling off the grid from writing. With the pandemic, it has been absolutely crazy. I have been working non-stop over the summer. But this weekend I took off from work to catch up on some sleep and binge-watch some tv shows. But while having this weekend off I had an idea. I played it through my head and this is what I have come up with. Also, I would like to say I know what Sylvie Brett is going through because I have been there myself. I know what it is like to miss your significant other. I have done a long-distance relationship for the first 3 years of my relationship with my now-husband. We started out as strangers, became best friends, and then when he was heading out for basic training I couldn't imagine my life without him. While he was training to fight for our country. I stayed home continued my schooling and worked 2 jobs. My cell phone became my best friend during that time. We video chatted when we could. We sent letters and I sent care packages. It sounds cute and romantic. But nobody knows how hard it was not being able to see your love at holiday times etc. But when he was stateside, airplanes and road trips became the new adventurous thing to look forward to. Anyway, I will let you all get to reading. I hope you enjoy a little fluff. I sure. Brettsey is endgame. Have a little faith and trust. Everything works out for a reason."")}, {'summary': Value(literal:'Mick has a surprise for Len')}, {'summary': Value(literal:'just some cute short davenzi <3')}, {'summary': Value(literal:'I seem to have only fluff at the moment.  A bit of angst and upheaval for Thomas, but nothing too serious.  Sit back with a coffee or a scotch and indulge me :-)')}, {'summary': Value(literal:""because Garak is happy to play Julian's little game - even though most people wouldn't be encouraged to pretend to sneak up on him"")}, {'summary': Value(literal:'Lwaxana/Odo.  Sometimes, the best surprises are the simplest ones.')}, {'summary': Value(literal:""Malcolm has noticed something is wrong......but he can't put his finger on what it is......then he sees something he wasn't meant to see........."")}, {'summary': Value(literal:""Helping Lan Wangji is a usual enough occurrence. What happens the day after isn't."")}, {'summary': Value(literal:'Reader Request: Reader and Jask were getting together, so reader decides to dress up sexy for him or something, but didnt realize Jask had also brought along Geralt and they both walk in on the whole display?')}, {'summary': Value(literal:""Umm this is super old and I just found it last night so I posted it . Should warm anyone up :) unfortunately it's unfinished"")}, {'summary': Value(literal:""Wallace was so occupied with outwitting Veronica, he didn't notice what was happening right in front of him. A ficlet cross-posted from Tumblr, set during the movie."")}, {'summary': Value(literal:'Anne has a surprise for Phillip.')}, {'summary': Value(literal:""Maddie's very own Chad does come along. He isn't quite what she wished for."")}, {'summary': Value(literal:'Kakucho decides to surprise Izana')}, {'summary': Value(literal:'Papa IV returns to his bedroom to find you wearing his papal robes. He wants to touch, but you don’t let him.')}, {'summary': Value(literal:""Dib's spying goes wrong. Zim is so done with Dib's shit."")}, {'summary': Value(literal:'ABO verse Dib gets a surprise heat and Zim helps him through it Pure smut')}, {'summary': Value(literal:'Rinne has an idea after gambling one night')}, {'summary': Value(literal:'Raimu gets a horrible shock when she learns what the corruption caused to happen to her husband. Important: NO LONGER GETTING REGULAR UPDATES. Read Chapter 9 for more info')}, {'summary': Value(literal:'Vyse gets a nice surprise gift from Aika and Fina.')}, {'summary': Value(literal:'Just a little thong-related blurb that I wrote a while ago and forgot to post.  :D')}, {'summary': Value(literal:'Sorrow comes home from a trip out of town to find that Michael has missed him a little more than he had anticipated(*cough* If ya catch my cold! *cough*). Slazo enjoys himself as he listens to his boyfriend, but is surprised when he hears Michael let something slip.')}, {'summary': Value(literal:""Karl didn't expect anything special to happen to him today, especially after only winning a box of chocolates for the valentine's challenges they did for a video, but the world has proven him wrong once again."")}, {'summary': Value(literal:'Another quite comfy work, mostly explicit with some facesitting. F MalO x M Reader Length: Short (1400 Words)')}, {'summary': Value(literal:""The sides prepare for Logan's birthday. Day 5 of LAMP Week."")}, {'summary': Value(literal:'Logan has had a tough day at work. What else is Roman and Janus supposed to do than to sneak into his apartment before he gets home to surprise him?')}, {'summary': Value(literal:'Prompt: Surprise Eiji comes home at exactly eight thirty. He smiles when walks in, giggles slightly when Ash kisses him on the cheek. ""I\'m sorry again I had to work Valentine\'s Day."" Eiji apologizes even though they\'ve established before it was perfectly fine. ""Don\'t worry, we still have the evening."" Ash says, heading back into the living room to grab the box he left on the coffee table.')}, {'summary': Value(literal:'Tanjiro is wondering what his husband and daughter are up too. I do not own Demon Slayer. Chie Kamado is my oc.______')}, {'summary': Value(literal:'Kai, for unknown reasons, has become very stressed. Naturally, Lloyd has an idea of how to help him. Just some cute, plotless, fluffy smut.')}, {'summary': Value(literal:'this is short and bad bc i want 2 sleep thank you (btw jay can absolutely tap out at any time but hes a bitch who likes being used so winks)')}, {'summary': Value(literal:'""Eh? Today\'s my birthday?! Oh yea, those guys have the same birthday too, but since I\'m the eldest, you can just celebrate mine.""')}, {'summary': Value(literal:'Joey has the perfect end-of-summer surprise for Kaiba.')}, {'summary': Value(literal:""And here Yugi thought he was the surprise. Boy, was he wrong. Written after being inspired by a fanfic created by 'ifwegettherebysunset'. Their fic is called Double Joy and is a Synchroshipping fic. My fic is obviously Monarchshipping, but it also has no connection to the original. Except the fact it gave me a whole bunch of inspiration. Currently M rated, but that is because of future chapters to come. First chapter can be read as a one-shot."")}, {'summary': Value(literal:'Someone else got to Chuuya first after the fog clears')}, {'summary': Value(literal:'Kunikida thought he had seen it all')}, {'summary': Value(literal:'Loki surprises Jane with a last minute trip to Asgard.')}, {'summary': Value(literal:""As a note I have no Beta's at present, whatsoever and this was also written while tired so there will be mistakes I have missed in the clean up, so many apologies for any mistakes"")}, {'summary': Value(literal:'The team chases the sneaky Spiderman and manages to track him down, only to receive the surprise of a lifetime.')}, {'summary': Value(literal:'Tsuna knew going back to school, at night and alone, just to get his forgotten textbook was a bad idea. M27')}, {'summary': Value(literal:'Vergil wakes up to a most unusual present.')}, {'summary': Value(literal:'Non streamer Tubbo surprises Atreamer Ranboo for his birthday, however Ranboo doesn’t realise his Streamer friends (Freddie, Bill and Aimsey) Have plans to surprise him too!')}, {'summary': Value(literal:""Usaka Kazuomi is the person who dedicated with his work and didn't remember little things about himself, like his own birthday. How about if Arisu become the person who remember it? What will he do?"")}, {'summary': Value(literal:'______ For Your Eyes Only_')}, {'summary': Value(literal:'__________ __700_________')}, {'summary': Value(literal:'Sam____top___________Castiel__________bottom____')}, {'summary': Value(literal:'Draco Malfoy ist der neue Lehrer in Hogwarts. Jedoch hat er einige Geheimnisse, von denen keiner was weiß.')}, {'summary': Value(literal:'Ricordava ancora quella festa in maschera di diversi anni addietro in cui, a causa di una scommessa persa con Yusei, era stato costretto a presenziare durante la serata vestendosi in quel modo.')}, {'summary': Value(literal:'“Speravo in un effetto sorpresa” disse salendo in piedi sul letto, per sedersi vicino ad Oliver. “Nulla può sorprendermi … bè … tranne questo” sorrise afferrando un biscotto, mordendone la metà.')}, {'summary': Value(literal:""Loki et ses enfants font une sortie le soir d'Halloween et rencontrent un humain qui croit faire face à d'autres humains (très bien) déguisés."")}, {'summary': Value(literal:'Jisung não sabia mais o que fazer para acabar com todo aquele desânimo e solidão que tomava conta de si. Era algo anormal, mas por mais que estivesse cercado de gente, parecia que nada era o suficiente. Um dia acordou com uma vontade enorme de se isolar de todos, mas essa tentativa foi em vão, uma surpresa mudou todo o rumo de seu dia, assim, como o ajudou a recuperar todo o humor antes perdido.')}, {'summary': Value(literal:'Iruka asks Kakashi out for ramen, only for the chunin to get flustered and disappear.')}, {'summary': Value(literal:'Now, would you please sit on my face already?')}, {'summary': Value(literal:""Sasuke is being forced to marry a woman he despises so, to cheer him up, the night before his wedding his best friend throws him a bachelor party, complete with a stripper cake. But wait...something isn't right here!"")}, {'summary': Value(literal:'Shiro walks in on Keith and finds a secret the cadet has been hiding.')}, {'summary': Value(literal:'Kolivan and Allura are cuddling late at night and they talk about their future.')}, {'summary': Value(literal:""It's Mal and Ben's first anniversary, and she's starting to worry that he forgot."")}, {'summary': Value(literal:""An older Kanan and Ruby have been together for a few years. Kanan's been away for a while. A lonely Ruby plans to surprise her upon her return. You know what they say about the best laid plans."")}, {'summary': Value(literal:'After writing nothing but Euro fluff it’s time for something different. Fluff platonic rival with a side of confused Yugi because that’s how it should be ;) Tldr; Yugi meets someone he didn’t expect he would. Not for a long while but hey life happens.')}, {'summary': Value(literal:""As if having to take care of his work in New year's eve wasn't enough to annoy Chuuya, his ex partner had to make it all worse by reserving the worst surprise for him .. or was it the best ?"")}, {'summary': Value(literal:'Omegaverse - A/B/O Dazai and Chuuya are celebrating their first wedding anniversary when a surprise changes their life')}, {'summary': Value(literal:'Jihoon and Soonyoung are in a long distance relationship. Jihoon is a music producer in South Korea and Soonyoung is a dance choreographer in Japan. They will be celebrating their anniversary during the holidays. However, given their jobs, it will be hard to spend time together. In the end, one will surprise the other.')}, {'summary': Value(literal:'Bankotsu gets an eyeful when surprises Inuyasha.')}, {'summary': Value(literal:'« Mi stai dicendo veramente che vuoi preparare dei biscotti per Snow? TU? » la voce urlata tra lo sconvolto e il divertito di Tifa risuonò nella stanza tramite il vivavoce del telefono della ninja. « Cosa urli? Vuoi forse farti sentire? Vabbè che proprio ora è in coma che ronfa come un drago ma non si sa mai. » la rimproverò Yuffie, abbassando i toni e dando un’occhiata al biondo che semplicemente si girò dall’altro lato ancora nel mondo dei sogni. « Allora, che dici se lo spedisco con gli altri chissà dove e tu mi aiuti a fare questa cosa? »')}, {'summary': Value(literal:'______ ___ ____ _____________, ______ ___ _____ ___ ___. _____ ___ _____ _________ ________, ___ ______ _______ ___ ___. _ _______, __ ___ _________ _______ _ _______ ___ ________ ___, ___ ___ ____ _____, _ ___ _____ _ __________. _ _________, ______, ______, _____ __ ____, ___ _________ ______. _____, ___________, ______ __ ____ ______ ______. ________ _______.')}, {'summary': Value(literal:'A little coming home fun for the pair. Light smut till later.')}, {'summary': Value(literal:""When Cas woke him at three in the morning, looking overly anxious, Dean hadn't really expected to be crying an hour later."")}, {'summary': Value(literal:'Draco, Little.. er... -coughs & looks down- um.. Big Draco -wink, wink-, and a surprise.')}, {'summary': Value(literal:'Vernon Dursley terrifies Harry, much more than Voldemort does, and seeing Harry tremble in fear makes Voldemort’s cock swell nicely. It makes him feel more powerful. Even if they are almost equal when it comes to ruling the world, it all stops when they enter the bedroom.')}, {'summary': Value(literal:'Severus really should be surprise at the sight of his birthday gift.')}, {'summary': Value(literal:'Harry is tired after the war and has lost the one certainty he had had in life. Kreacher helps.')}, {'summary': Value(literal:""It shouldn't be possible, but sometimes, it happens. And of course they need to get married--but then Severus starts pulling away."")}, {'summary': Value(literal:'Fred wasn’t used to being surprised so when he was he had to learn everything there was about that quite Hufflepuff girl')}, {'summary': Value(literal:'Remus finds himself constantly surprised by Snape. Companion fic to May Nights #2 from the May Nights Series.')}, {'summary': Value(literal:'Hermione Granger disappeared eight months ago.  Now she’s returned, much to the surprise of Harry Potter and Ron Weasley.')}, {'summary': Value(literal:'Dumbledore hopes to get Harry back under his control after nearly dying at the Ministry, the first thing he does is to drug a omega and force Severus to mate with him.')}, {'summary': Value(literal:'A surprise waits at the end of a trip through the forest.')}, {'summary': Value(literal:""Kinktober 2019 Day 23 - Consensual Non-Consent Peter knows Tony will show up at some point. Peter just doesn't know when, or what Tony has planned."")}, {'summary': Value(literal:""He sneaks off every night to the back garden shed and you want to know just what he's up to out there."")}, {'summary': Value(literal:""Steve is coleader of New York's criminal underground, who also happens to be crushing on a mechanic. His husband decides that what they need is an extra guest at their secret cabin."")}, {'summary': Value(literal:""Stiles has a day marked on the calendar and it's driving Derek insane with curiosity."")}, {'summary': Value(literal:'Eloise returns to Haven with the Mages in tow, and all she really wants is rest after the war meeting with the leaders of the Inquisition. She receives a surprise visit from someone she did not expect.')}, {'summary': Value(literal:'Lavellan is bad at keeping secrets. This has worked out for Dorian before...')}, {'summary': Value(literal:'Dorian has been strangely distant lately. Adaar is determined to find out why.')}, {'summary': Value(literal:'Enjoy!')}, {'summary': Value(literal:""I have no idea where I'm going with this fic to be honest. Hope everyone enjoys this, Chapter 3 is going to be kind of a nightmare."")}, {'summary': Value(literal:""Happy father's day, daddy"")}, {'summary': Value(literal:'Today is friendship. Nathaniel has more friends than he thinks.')}, {'summary': Value(literal:'Regina finds more than she bargained for when she goes back to her office one night.')}, {'summary': Value(literal:'Robin and Regina have been seperated for a while when Robin gets a call from the hospital and finds out Regina has been keeping something from him. Written for Love From OQ for @ThisShallPass21 on Twitter')}, {'summary': Value(literal:'Emma has a surprise for Regina. Set about two years after the ending of Hide and Seek .')}, {'summary': Value(literal:'Rumpelstiltskin cannot find any of his favorite ties.')}, {'summary': Value(literal:'AU - Modern - In which Tywin receives a very special name day present... Picset is viewable HERE')}, {'summary': Value(literal:'Rose is awakened by an explosion on the TARDIS, but she discovers the cause is nothing like what she expected.')}, {'summary': Value(literal:'And, yes, he was a Big Bad Slytherin cuddling his two boyfriends in a blanket fort in the second floor girl’s bathroom. So what? Or: Wolffe gets a surprise for his birthday from his two boyfriends')}, {'summary': Value(literal:""It was Baekhyun's birthday and Chanyeol prepared a surprise."")}, {'summary': Value(literal:'Kyungsoo smells something burning For #ittybittysparks 100 words microfic challenge Day 5 Theme: Danger, Cloud Nine')}, {'summary': Value(literal:'""Tsk, fine! Go date your sexy reports, I\'m eloping with my pizza!"" ""Don\'t you always,"" All that she wants is spend more time with him, but it seems she\'ll get more than she has asked.')}, {'summary': Value(literal:'Summary: ONE SHOT. Zor"	0	1	1	Annotation error		
193	193	en	Does a major character die in Ghost's Rebellion?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Ghost's Rebellion"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }"	[{'warning': Value(literal:'Major Character Death')}]	193	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does a major character die in The Fireball & Opaleye?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""The Fireball & Opaleye"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: Does a major character die in Absolute Carnage?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Absolute Carnage"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: Does a major character die in [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

Question: Does a major character die in Ghost's Rebellion?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?warning WHERE { 
  ?story golem:title ""Ghost's Rebellion"" . 
  ?story golem:contentWarning ?warning . 
  FILTER(?warning = ""Major Character Death"") 
}
"	[{'warning': Value(literal:'Major Character Death')}]	1	0	0			
199	199	en	Does a major character die in bad habit?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""bad habit"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }"	[{'warning': Value(literal:'Major Character Death')}]	199	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does a major character die in [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: Does a major character die in Quartet?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Quartet"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: Does a major character die in The Wizzard Who Lived?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""The Wizzard Who Lived"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

Question: Does a major character die in bad habit?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?warning WHERE { 
  ?story golem:title ""bad habit"" . 
  ?story golem:contentWarning ?warning . 
  FILTER(?warning = ""Major Character Death"") 
}
"	[{'warning': Value(literal:'Major Character Death')}]	1	0	0			
200	200	en	Does a major character die in Quartet?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Quartet"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }"	[{'warning': Value(literal:'Major Character Death')}]	200	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does a major character die in [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: Does a major character die in The Fireball & Opaleye?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""The Fireball & Opaleye"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: Does a major character die in Absolute Carnage?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Absolute Carnage"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

Question: Does a major character die in Quartet?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?warning WHERE { 
?story golem:title ""Quartet"" . 
?story golem:contentWarning ?warning . 
FILTER(?warning = ""Major Character Death"") 
}
"	[{'warning': Value(literal:'Major Character Death')}]	1	0	0			
202	202	en	What stories is Mutual Pining - Character featured in?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Mutual Pining - Character"" . }"	"[{'title': Value(literal:'Complicated')}, {'title': Value(literal:'would you like to share a dance?')}, {'title': Value(literal:'the summer I listened')}, {'title': Value(literal:'Evan ""Buck"" Buckley begins')}, {'title': Value(literal:'could we be more than friends? or am i being too optimistic?')}, {'title': Value(literal:'Fading Memories of The Down pour')}, {'title': Value(literal:'""Open your eyes, silly.""')}]"	202	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What stories is [[character]] featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""[[character]]"" . }
    </SPARQL>

    ###
    

    Question: What stories is ___ featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: What stories is __ featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""__"" . }
    </SPARQL>

    ###
    

Question: What stories is Mutual Pining - Character featured in?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?title WHERE { 
  ?story golem:title ?title . 
  ?story golem:characters ""Mutual Pining - Character"" . 
}
"	"[{'title': Value(literal:'Complicated')}, {'title': Value(literal:'would you like to share a dance?')}, {'title': Value(literal:'the summer I listened')}, {'title': Value(literal:'Evan ""Buck"" Buckley begins')}, {'title': Value(literal:'could we be more than friends? or am i being too optimistic?')}, {'title': Value(literal:'Fading Memories of The Down pour')}, {'title': Value(literal:'""Open your eyes, silly.""')}]"	1	0	0			
203	203	en	What stories is __ featured in?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""__"" . }"	[{'title': Value(literal:'______________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'_______________')}, {'title': Value(literal:'__')}, {'title': Value(literal:'______')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'__________03')}, {'title': Value(literal:'________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'______________')}, {'title': Value(literal:'__________')}, {'title': Value(literal:'______________')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'______……')}, {'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'_____/__AU/ABO_________by ___')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'__________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'_____-____')}, {'title': Value(literal:'____________')}, {'title': Value(literal:'__________01-02')}, {'title': Value(literal:'____________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'_______________paro/ABO_')}, {'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'__ Homing')}, {'title': Value(literal:'________________')}, {'title': Value(literal:'___________________')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'___x_____')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'__________')}, {'title': Value(literal:'__________________')}, {'title': Value(literal:'__________')}, {'title': Value(literal:'_____/______/___  by ___')}, {'title': Value(literal:'___')}, {'title': Value(literal:'__________')}, {'title': Value(literal:'___________________')}]	203	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What stories is ___ featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: How many __/___ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__/___"" . }
    </SPARQL>

    ###
    

Question: What stories is __ featured in?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
SELECT ?title WHERE { 
  ?story golem:characters ""__"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'______________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'_______________')}, {'title': Value(literal:'__')}, {'title': Value(literal:'______')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'__________03')}, {'title': Value(literal:'________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'______________')}, {'title': Value(literal:'__________')}, {'title': Value(literal:'______________')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'______……')}, {'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'_____/__AU/ABO_________by ___')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'__________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'_____-____')}, {'title': Value(literal:'____________')}, {'title': Value(literal:'__________01-02')}, {'title': Value(literal:'____________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'_______________paro/ABO_')}, {'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'__ Homing')}, {'title': Value(literal:'________________')}, {'title': Value(literal:'___________________')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'___x_____')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'__________')}, {'title': Value(literal:'__________________')}, {'title': Value(literal:'__________')}, {'title': Value(literal:'_____/______/___  by ___')}, {'title': Value(literal:'___')}, {'title': Value(literal:'__________')}, {'title': Value(literal:'___________________')}]	1	0	0			
204	204	en	What stories is Ubuyashiki Kuina featured in?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Ubuyashiki Kuina"" . }"	"[{'title': Value(literal:'____/Tender Is the Memory')}, {'title': Value(literal:""I don't love her"")}, {'title': Value(literal:'Boars and Shiny Acorns')}, {'title': Value(literal:'Young love, so special')}, {'title': Value(literal:'Fists of Calamity')}, {'title': Value(literal:'Marked: Breath of Water')}, {'title': Value(literal:'Up the wisteria tree')}, {'title': Value(literal:'KNY Phobiatober 2021')}, {'title': Value(literal:'Something Like Heart')}, {'title': Value(literal:'Wistful')}, {'title': Value(literal:'What if...Shinobu Koch_ lived?')}, {'title': Value(literal:'This is 204.5 canon and you cannot change my mind')}, {'title': Value(literal:'kintsugi')}, {'title': Value(literal:'Butterfly Kiss')}, {'title': Value(literal:'Your tear precious to me')}, {'title': Value(literal:'when we faced off together against death')}, {'title': Value(literal:'Duty to Our Deathbed')}, {'title': Value(literal:'The Pillar Training Oath')}, {'title': Value(literal:""Kiriya's cats"")}, {'title': Value(literal:'Miracle')}, {'title': Value(literal:'Miracle (Short hiatus)')}, {'title': Value(literal:'Destinos Cambiados')}, {'title': Value(literal:'The Pig, The Mask, and The Slayers')}, {'title': Value(literal:'The Pig, The Mask, and The Slayers [Prolonged Hiatus due to Technoblades unfortunate passing]')}, {'title': Value(literal:'The bloody end of it all')}, {'title': Value(literal:'successors and cogs at work,')}, {'title': Value(literal:""Ubuyashiki's Protector"")}, {'title': Value(literal:'Construyendo Nuestros Pilares')}, {'title': Value(literal:'Breath of the Void')}, {'title': Value(literal:'Unravel')}, {'title': Value(literal:'Divine Unknown')}, {'title': Value(literal:""Zenitsu Isn't Just a Boy's Name"")}, {'title': Value(literal:'Tender Is the Memory')}, {'title': Value(literal:'Breath of the Wisteria')}, {'title': Value(literal:'Life Changes')}, {'title': Value(literal:'Affinity')}]"	204	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What stories is __ featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""__"" . }
    </SPARQL>

    ###
    

    Question: What stories is ___ featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: Show me all the stories from the KenshiYonezu - Fandom universe

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""KenshiYonezu - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: What stories is Ubuyashiki Kuina featured in?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?title WHERE { 
  ?story golem:characters ""Ubuyashiki Kuina"" . 
  ?story golem:title ?title . 
}
"	"[{'title': Value(literal:'____/Tender Is the Memory')}, {'title': Value(literal:""I don't love her"")}, {'title': Value(literal:'Boars and Shiny Acorns')}, {'title': Value(literal:'Young love, so special')}, {'title': Value(literal:'Fists of Calamity')}, {'title': Value(literal:'Marked: Breath of Water')}, {'title': Value(literal:'Up the wisteria tree')}, {'title': Value(literal:'KNY Phobiatober 2021')}, {'title': Value(literal:'Something Like Heart')}, {'title': Value(literal:'Wistful')}, {'title': Value(literal:'What if...Shinobu Koch_ lived?')}, {'title': Value(literal:'This is 204.5 canon and you cannot change my mind')}, {'title': Value(literal:'kintsugi')}, {'title': Value(literal:'Butterfly Kiss')}, {'title': Value(literal:'Your tear precious to me')}, {'title': Value(literal:'when we faced off together against death')}, {'title': Value(literal:'Duty to Our Deathbed')}, {'title': Value(literal:'The Pillar Training Oath')}, {'title': Value(literal:""Kiriya's cats"")}, {'title': Value(literal:'Miracle')}, {'title': Value(literal:'Miracle (Short hiatus)')}, {'title': Value(literal:'Destinos Cambiados')}, {'title': Value(literal:'The Pig, The Mask, and The Slayers')}, {'title': Value(literal:'The Pig, The Mask, and The Slayers [Prolonged Hiatus due to Technoblades unfortunate passing]')}, {'title': Value(literal:'The bloody end of it all')}, {'title': Value(literal:'successors and cogs at work,')}, {'title': Value(literal:""Ubuyashiki's Protector"")}, {'title': Value(literal:'Construyendo Nuestros Pilares')}, {'title': Value(literal:'Breath of the Void')}, {'title': Value(literal:'Unravel')}, {'title': Value(literal:'Divine Unknown')}, {'title': Value(literal:""Zenitsu Isn't Just a Boy's Name"")}, {'title': Value(literal:'Tender Is the Memory')}, {'title': Value(literal:'Breath of the Wisteria')}, {'title': Value(literal:'Life Changes')}, {'title': Value(literal:'Affinity')}]"	1	0	0			
205	205	en	What stories is Massimo Torricelli featured in?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Massimo Torricelli"" . }"	"[{'title': Value(literal:'Next stop: Sicily')}, {'title': Value(literal:'Nothing in Life is Easy')}, {'title': Value(literal:'Never Escape')}, {'title': Value(literal:'Daughter of the Don')}, {'title': Value(literal:'365 Songs')}, {'title': Value(literal:'Melted Chocolate')}, {'title': Value(literal:'Waterful')}, {'title': Value(literal:'Fuck the Rules')}, {'title': Value(literal:'Can’t seem to make you mine')}, {'title': Value(literal:""I'm not your property"")}, {'title': Value(literal:'Maid for Massimo')}, {'title': Value(literal:""Me And My Husband (We're sticking together)"")}, {'title': Value(literal:'The Lion and the Phoenix')}]"	205	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What stories is Marco Diaz (Star vs. The Forces of Evil) featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Marco Diaz (Star vs. The Forces of Evil)"" . }
    </SPARQL>

    ###
    

    Question: Show me summaries of Il Volo stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""Il Volo"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: What stories is Tomá_ Rosick_ featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Tomá_ Rosick_"" . }
    </SPARQL>

    ###
    

Question: What stories is Massimo Torricelli featured in?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?title WHERE { 
  ?story golem:characters ""Massimo Torricelli"" . 
  ?story golem:title ?title . 
}
"	"[{'title': Value(literal:'Next stop: Sicily')}, {'title': Value(literal:'Nothing in Life is Easy')}, {'title': Value(literal:'Never Escape')}, {'title': Value(literal:'Daughter of the Don')}, {'title': Value(literal:'365 Songs')}, {'title': Value(literal:'Melted Chocolate')}, {'title': Value(literal:'Waterful')}, {'title': Value(literal:'Fuck the Rules')}, {'title': Value(literal:'Can’t seem to make you mine')}, {'title': Value(literal:""I'm not your property"")}, {'title': Value(literal:'Maid for Massimo')}, {'title': Value(literal:""Me And My Husband (We're sticking together)"")}, {'title': Value(literal:'The Lion and the Phoenix')}]"	1	0	0			
206	206	en	What stories is minor oc’s irrelevant to the storyline featured in?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""minor oc’s irrelevant to the storyline"" . }"	[{'title': Value(literal:'I’m howling at the moon (and sleeping in the middle of a summer afternoon)')}, {'title': Value(literal:'Werewolf (name suggestions are welcome)')}, {'title': Value(literal:'Howling at the moon (and sleeping in the middle of a summer afternoon)')}]	206	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Does a major character die in [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: What stories is [[character]] featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""[[character]]"" . }
    </SPARQL>

    ###
    

    Question: What stories is Mutual Pining - Character featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Mutual Pining - Character"" . }
    </SPARQL>

    ###
    

Question: What stories is minor oc’s irrelevant to the storyline featured in?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?title WHERE { 
  ?story golem:title ?title . 
  ?story golem:characters ""[[minor oc's irrelevant to the storyline]]"" . 
}
"	[]	0	0	1	Failed NER		
207	207	en	What stories is Tracey Stewart featured in?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Tracey Stewart"" . }"	"[{'title': Value(literal:'____Books and Their Covers')}, {'title': Value(literal:'We Who Wait')}, {'title': Value(literal:'angel in the night')}, {'title': Value(literal:'Resurrection')}, {'title': Value(literal:'Prayer for Help')}, {'title': Value(literal:'An Empty Garden')}, {'title': Value(literal:'High (Blood) Pressure')}, {'title': Value(literal:'This Is A Fact.')}, {'title': Value(literal:'Night Terrors')}, {'title': Value(literal:'When I Go Backwards')}, {'title': Value(literal:'Regression to the Mean')}, {'title': Value(literal:'Scandal')}, {'title': Value(literal:""I didn't just kiss her"")}, {'title': Value(literal:'The one with relationship advice')}, {'title': Value(literal:'Shadows Of The Night')}, {'title': Value(literal:'Shadows Of The Night')}, {'title': Value(literal:""I've been calling you for days"")}, {'title': Value(literal:'The perfect pack')}, {'title': Value(literal:'The one with the tent')}, {'title': Value(literal:'The one with the traffic jam')}, {'title': Value(literal:'Wires')}, {'title': Value(literal:'Strange Love')}, {'title': Value(literal:'Trapped')}, {'title': Value(literal:'This is my town- Book 1')}, {'title': Value(literal:'Shooting Stars')}, {'title': Value(literal:'The Way You Make Me Feel')}, {'title': Value(literal:'Safe')}, {'title': Value(literal:'Love Me True')}, {'title': Value(literal:'Enter the Mage')}, {'title': Value(literal:'Both the Absurd and the Unexpected')}, {'title': Value(literal:'My Name is Mieczyslaw Zor El')}, {'title': Value(literal:'Putting on a Show')}, {'title': Value(literal:'Dancing in the Dark')}, {'title': Value(literal:'Seven Minutes In Heaven')}, {'title': Value(literal:'gymnastic rings')}, {'title': Value(literal:'Smile, And Maybe Tomorrow')}, {'title': Value(literal:'Chasing Cars')}, {'title': Value(literal:""baby, my soul is yours (please say you'll have me)"")}, {'title': Value(literal:'Jon/""Stephen"" Drabbles & Ficlets (II)')}, {'title': Value(literal:'From Eternity, Stephen Colbert.')}, {'title': Value(literal:'You are my Sunshine')}, {'title': Value(literal:'In Chaos There Is Silence (And In Silence There Is Chaos)')}, {'title': Value(literal:'Night over America')}, {'title': Value(literal:'He Wonders When He Forgot How to Laugh')}, {'title': Value(literal:'Catfished')}, {'title': Value(literal:'And The Songbirds Are Singing (Like They Know The Score)')}, {'title': Value(literal:'Hit Me with Your Best Shot')}, {'title': Value(literal:'Thunder And Lightening, Very Very Frightening')}, {'title': Value(literal:'Making The Pieces Fit')}, {'title': Value(literal:'Prenuptial Agreements')}, {'title': Value(literal:'At The End Of All Things')}, {'title': Value(literal:'You only get one')}, {'title': Value(literal:'The Time of The Pill')}]"	207	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What stories is Mutual Pining - Character featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Mutual Pining - Character"" . }
    </SPARQL>

    ###
    

    Question: Who is the author of Lily's Masquerade?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Lily's Masquerade"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: What stories is [[character]] featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""[[character]]"" . }
    </SPARQL>

    ###
    

Question: What stories is Tracey Stewart featured in?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?title WHERE { 
?story golem:characters ""Tracey Stewart"" . 
?story golem:title ?title . 
}
"	"[{'title': Value(literal:'____Books and Their Covers')}, {'title': Value(literal:'We Who Wait')}, {'title': Value(literal:'angel in the night')}, {'title': Value(literal:'Resurrection')}, {'title': Value(literal:'Prayer for Help')}, {'title': Value(literal:'An Empty Garden')}, {'title': Value(literal:'High (Blood) Pressure')}, {'title': Value(literal:'This Is A Fact.')}, {'title': Value(literal:'Night Terrors')}, {'title': Value(literal:'When I Go Backwards')}, {'title': Value(literal:'Regression to the Mean')}, {'title': Value(literal:'Scandal')}, {'title': Value(literal:""I didn't just kiss her"")}, {'title': Value(literal:'The one with relationship advice')}, {'title': Value(literal:'Shadows Of The Night')}, {'title': Value(literal:'Shadows Of The Night')}, {'title': Value(literal:""I've been calling you for days"")}, {'title': Value(literal:'The perfect pack')}, {'title': Value(literal:'The one with the tent')}, {'title': Value(literal:'The one with the traffic jam')}, {'title': Value(literal:'Wires')}, {'title': Value(literal:'Strange Love')}, {'title': Value(literal:'Trapped')}, {'title': Value(literal:'This is my town- Book 1')}, {'title': Value(literal:'Shooting Stars')}, {'title': Value(literal:'The Way You Make Me Feel')}, {'title': Value(literal:'Safe')}, {'title': Value(literal:'Love Me True')}, {'title': Value(literal:'Enter the Mage')}, {'title': Value(literal:'Both the Absurd and the Unexpected')}, {'title': Value(literal:'My Name is Mieczyslaw Zor El')}, {'title': Value(literal:'Putting on a Show')}, {'title': Value(literal:'Dancing in the Dark')}, {'title': Value(literal:'Seven Minutes In Heaven')}, {'title': Value(literal:'gymnastic rings')}, {'title': Value(literal:'Smile, And Maybe Tomorrow')}, {'title': Value(literal:'Chasing Cars')}, {'title': Value(literal:""baby, my soul is yours (please say you'll have me)"")}, {'title': Value(literal:'Jon/""Stephen"" Drabbles & Ficlets (II)')}, {'title': Value(literal:'From Eternity, Stephen Colbert.')}, {'title': Value(literal:'You are my Sunshine')}, {'title': Value(literal:'In Chaos There Is Silence (And In Silence There Is Chaos)')}, {'title': Value(literal:'Night over America')}, {'title': Value(literal:'He Wonders When He Forgot How to Laugh')}, {'title': Value(literal:'Catfished')}, {'title': Value(literal:'And The Songbirds Are Singing (Like They Know The Score)')}, {'title': Value(literal:'Hit Me with Your Best Shot')}, {'title': Value(literal:'Thunder And Lightening, Very Very Frightening')}, {'title': Value(literal:'Making The Pieces Fit')}, {'title': Value(literal:'Prenuptial Agreements')}, {'title': Value(literal:'At The End Of All Things')}, {'title': Value(literal:'You only get one')}, {'title': Value(literal:'The Time of The Pill')}]"	1	0	0			
208	208	en	What stories is Marco Diaz (Star vs. The Forces of Evil) featured in?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Marco Diaz (Star vs. The Forces of Evil)"" . }"	"[{'title': Value(literal:'Forgive but never forget')}, {'title': Value(literal:'_tomstar____')}, {'title': Value(literal:'Taquinerie Nocturne')}, {'title': Value(literal:'La misteriosa marca')}, {'title': Value(literal:'LOVE')}, {'title': Value(literal:'Orgia en las islas Hirvientes.')}, {'title': Value(literal:'Freeze your brain')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'Jukebox Musical')}, {'title': Value(literal:'The karaoke Realm')}, {'title': Value(literal:'If I Killed Someone For You')}, {'title': Value(literal:'Monkey and Butterfly')}, {'title': Value(literal:'crossover nexus 2: reloaded')}, {'title': Value(literal:'Strange Ninjas in a Strange Land')}, {'title': Value(literal:'The Queen of Borrowed Powers')}, {'title': Value(literal:'A Rainha dos Monstros')}, {'title': Value(literal:'Unidos por la luna roja')}, {'title': Value(literal:'Mi salvador, Marco Díaz')}, {'title': Value(literal:'Tomados de las Manos')}, {'title': Value(literal:'Caricias')}, {'title': Value(literal:'Disfraz')}, {'title': Value(literal:'Tanabata.')}, {'title': Value(literal:'Amigos de la infancia')}, {'title': Value(literal:'uau')}, {'title': Value(literal:'And they said Infinity War was the most ambitious crossover')}, {'title': Value(literal:'Babes, Bullets and a whole lot of Adam')}, {'title': Value(literal:'Yandere Oneshots (mostly Genshin)')}, {'title': Value(literal:'Dreams Come True')}, {'title': Value(literal:'A Dip Into Another World')}, {'title': Value(literal:""Nautiscarader's Smutember 2020"")}, {'title': Value(literal:'Marvelous Zombies.')}, {'title': Value(literal:'Multiverse Wars Reactions!')}, {'title': Value(literal:'Falling For Yanderes')}, {'title': Value(literal:'Five Sparks of Life: The Blossoming Beginning')}, {'title': Value(literal:'The Loud House: Doujinshi!')}, {'title': Value(literal:'Rick vs. the Multiverse')}, {'title': Value(literal:'El valor de un alma')}, {'title': Value(literal:'Dulce canela.')}, {'title': Value(literal:'Omovember 2021')}, {'title': Value(literal:'Infinity Train: Kingdom Come')}, {'title': Value(literal:'It Sucks to be a Prince')}, {'title': Value(literal:'A Beginning with an Unexpected Ending')}, {'title': Value(literal:'Unrequited Love Support Group')}, {'title': Value(literal:'Marcnificent Weirdness')}, {'title': Value(literal:'Summer Love')}, {'title': Value(literal:'The Gods')}, {'title': Value(literal:'Fantasizing about tomorrow')}, {'title': Value(literal:'12 Days of Mariposamas')}, {'title': Value(literal:'The collision of worlds')}, {'title': Value(literal:'Light as a Star')}, {'title': Value(literal:'The Beautiful Princess')}, {'title': Value(literal:'A Whole New World, A Star vs the Forces of Evil Lemon Story')}, {'title': Value(literal:'A Cold Night.')}, {'title': Value(literal:""Demons Don't Like Sprinkles"")}, {'title': Value(literal:'One Last Drink')}, {'title': Value(literal:'Kings of Old')}, {'title': Value(literal:'Star vs the Forces of Evil Presents: Lizards and Dragons One Shots')}, {'title': Value(literal:'Get Together')}, {'title': Value(literal:'Janna vs the forces the Earth-ni')}, {'title': Value(literal:'The King is Dead, Long Live the King')}, {'title': Value(literal:'Painted Lies & Demon Eyes')}, {'title': Value(literal:'Fond Remembrances')}, {'title': Value(literal:'Yammy')}, {'title': Value(literal:'Beach Date')}, {'title': Value(literal:""Surviving St. Olga's"")}, {'title': Value(literal:'Forsake')}, {'title': Value(literal:'Bones')}, {'title': Value(literal:'Even After it All.')}, {'title': Value(literal:'A Real Lady Never Kisses and Tell')}, {'title': Value(literal:'Alchmey, Impetus, and Volatile Catalysts')}, {'title': Value(literal:'Emma')}, {'title': Value(literal:'Big Mistakes and Cornshakes')}, {'title': Value(literal:'Tell the Truth')}, {'title': Value(literal:'Strangled')}, {'title': Value(literal:'Milfology-Star/Moon')}, {'title': Value(literal:'Milfology-Marco/Angie')}, {'title': Value(literal:'Asking for a Favor')}, {'title': Value(literal:'A Butterfly Effect')}, {'title': Value(literal:'Janna Does Illegal Shit')}, {'title': Value(literal:'Quit being overworked')}, {'title': Value(literal:'My Knight')}, {'title': Value(literal:'To Tell the Truth')}, {'title': Value(literal:'Linked')}, {'title': Value(literal:'Blood Moon Mania')}, {'title': Value(literal:'Star in a Jar')}, {'title': Value(literal:'The Butterfly Who Lost Her Wings')}, {'title': Value(literal:'Marco and Tom make out on the sidewalk.')}, {'title': Value(literal:'The Haunted Mansion')}, {'title': Value(literal:'The Mysterious Maroon')}, {'title': Value(literal:'Princess Star')}, {'title': Value(literal:'Star and Marcie and the Forces of Evil Part One: Star Comes to Earth')}, {'title': Value(literal:""Dragon's Revenge, A Star vs the Forces of Evil Lemon Story"")}, {'title': Value(literal:'A Greedy Heart')}, {'title': Value(literal:'Corn & Circuses')}, {'title': Value(literal:'A Toast')}, {'title': Value(literal:'The Other Way')}, {'title': Value(literal:'Dilfology-Marco/Rafael')}, {'title': Value(literal:'Flaming Rose')}, {'title': Value(literal:'Magic and Madness')}, {'title': Value(literal:'The Most Important Things You Might Lose')}, {'title': Value(literal:'Tales From Mew-Earth')}, {'title': Value(literal:'Never too Late?')}, {'title': Value(literal:'Escape From Fanfic Island (SVTFOE)')}, {'title': Value(literal:'Star vs. The Forces of Evil: The Bloomen Legacy')}, {'title': Value(literal:'The Demon and Her Knight')}, {'title': Value(literal:""His Majesty's Dark Queen"")}, {'title': Value(literal:'The Contract')}, {'title': Value(literal:'In The End')}, {'title': Value(literal:'The Mewnight Society')}, {'title': Value(literal:'Who Needs Star When You Have Each Other?')}, {'title': Value(literal:'Anchors and Lighthouses')}, {'title': Value(literal:'Patches')}, {'title': Value(literal:'If You Love Me, Please Say It')}, {'title': Value(literal:'Time-Out of Time Vacation')}, {'title': Value(literal:""How can I move on (when I'm still in love with you.)"")}, {'title': Value(literal:'Reduce To Tears')}, {'title': Value(literal:'Pushing Up Daises')}, {'title': Value(literal:'Smutember 2020 Foreplay')}, {'title': Value(literal:'Marcowpoo')}, {'title': Value(literal:'We Belong Together')}, {'title': Value(literal:'Worth It')}, {'title': Value(literal:'Butterfly Hunt')}, {'title': Value(literal:'Breakup Buddies')}, {'title': Value(literal:'Smutember 2020 Naked Photo Shoot')}, {'title': Value(literal:'Marcuck')}, {'title': Value(literal:'Star Vs The Forces of Evil')}, {'title': Value(literal:'The Ritual')}, {'title': Value(literal:'Untouched Truths')}, {'title': Value(literal:'The Dance of the Stars')}, {'title': Value(literal:'The Story of Vegetarianism!')}, {'title': Value(literal:'The MonSTAR Princess')}, {'title': Value(literal:'Streetlight People')}, {'title': Value(literal:'5. Vivisection')}, {'title': Value(literal:'Prince of Mewni')}, {'title': Value(literal:'SVTFOE: The Thief')}, {'title': Value(literal:'What We Found and Forgot')}, {'title': Value(literal:'Smutember 2020 Ecstasy')}, {'title': Value(literal:'What the Heart Wants.')}, {'title': Value(literal:'Claiming the Queen')}, {'title': Value(literal:'The Light in Your Eyes')}, {'title': Value(literal:'New Bloom')}, {'title': Value(literal:'Once Upon A Genderbend: Marcia Diaz & the Seven Monsters')}, {'title': Value(literal:'The Demon Within')}, {'title': Value(literal:'Lasting Mark')}, {'title': Value(literal:'Misadventurous Mabi')}, {'title': Value(literal:'A Bit of Help Here?')}, {'title': Value(literal:'Nothing')}, {'title': Value(literal:'Broken Hearts And Bloody Bodies')}, {'title': Value(literal:'The lost princess')}, {'title': Value(literal:'Shenanigans: Caught')}, {'title': Value(literal:'Relapse')}, {'title': Value(literal:'Finally Mine')}, {'title': Value(literal:'Star and Marcie and the Forces of Evil Part Two: Inevitable Rise, Inevitable Fall')}, {'title': Value(literal:'catcing some zs')}, {'title': Value(literal:'Like An Echo In The Forest')}, {'title': Value(literal:'Will of the Septarian')}, {'title': Value(literal:'it’s alright (no it’s not)')}, {'title': Value(literal:'Magic of Mistletoe')}, {'title': Value(literal:'I’m a pond and you’re an ocean')}, {'title': Value(literal:'one, two princes kneel before you')}, {'title': Value(literal:'A Gingerbread House')}, {'title': Value(literal:'the ways that you say my name have me running on and on')}, {'title': Value(literal:'Asteris of Septarsis')}, {'title': Value(literal:'Suspicious Dessert')}, {'title': Value(literal:'Butterfly blossoms')}, {'title': Value(literal:'Marco Vs The Forces of Evil')}, {'title': Value(literal:'The Sugar Cookie Man')}, {'title': Value(literal:'Kinkmas Unwrapping Presents')}, {'title': Value(literal:""Star and Marco's Virtual Adventure"")}, {'title': Value(literal:'Bottom of the Pyramid')}, {'title': Value(literal:'Follow Me')}, {'title': Value(literal:'Echo Geeks')}, {'title': Value(literal:'The Once and Future Queen')}, {'title': Value(literal:'Flipped Star')}, {'title': Value(literal:'A Broken Crown.')}, {'title': Value(literal:'The Working Girls of Echo Creek')}, {'title': Value(literal:'Marco and his Demon Boyfriend')}, {'title': Value(literal:'The Perfect Remedy For Angry Demons')}, {'title': Value(literal:'Memorytale')}, {'title': Value(literal:'A New Frontier Redux')}, {'title': Value(literal:""Cleaved, but it's the opposite"")}, {'title': Value(literal:'The bitter truth of the world')}, {'title': Value(literal:'For everyone else right?')}, {'title': Value(literal:'Before We Say Goodnight')}, {'title': Value(literal:'Just Think About It')}, {'title': Value(literal:'Recruits, Part 1')}, {'title': Value(literal:'Attack of the 700 Metre Lizard!!!')}, {'title': Value(literal:'Star vs the Forces of the Negative Multiverse')}, {'title': Value(literal:'When Two Worlds Collide')}, {'title': Value(literal:'Polyamory')}, {'title': Value(literal:'The pros, cons, and quirks of having friends')}, {'title': Value(literal:'Please Don’t Stare at Me')}, {'title': Value(literal:'Puppeteer')}, {'title': Value(literal:'A Brief Foray Into Filipino Cuisine')}, {'title': Value(literal:'Relapse: The Full Story')}, {'title': Value(literal:'hobbies')}, {'title': Value(literal:'Why Bother?')}, {'title': Value(literal:'Everyone Feels Pain Even Demons')}, {'title': Value(literal:'Older Janna')}, {'title': Value(literal:'The Mewni Knights: Katie Comes to Town')}, {'title': Value(literal:'in the night i know you burn (with feelings i cannot return, my dear)')}, {'title': Value(literal:'Star in the Pub')}, {'title': Value(literal:'Spin the Bottle')}, {'title': Value(literal:'Wayward Princesses')}, {'title': Value(literal:""Ready As I'll Ever Be"")}, {'title': Value(literal:'Tomco Story')}, {'title': Value(literal:'The Working Girls of the Multiverse')}, {'title': Value(literal:'The Princess of the Backalley')}, {'title': Value(literal:'Spill')}, {'title': Value(literal:'Recruits, Part 2')}, {'title': Value(literal:'Overnight Failure')}, {'title': Value(literal:'Personal Heaters!')}, {'title': Value(literal:""You'll Do"")}, {'title': Value(literal:'Necromaster')}, {'title': Value(literal:'Tomco Hand Job')}, {'title': Value(literal:""bury me when i'm dead"")}, {'title': Value(literal:'Starco Experimentation')}, {'title': Value(literal:'A bets a bet. And a princess makes good on her word')}, {'title': Value(literal:'Tomco Blow Job')}, {'title': Value(literal:""The Butterfly's Marital Woes"")}, {'title': Value(literal:'Nachos And The Breakfast')}, {'title': Value(literal:'Remember Paris?')}, {'title': Value(literal:'The Intruderess')}, {'title': Value(literal:'Name Or Title?')}, {'title': Value(literal:'Marco Loving')}, {'title': Value(literal:'Soul Bound')}, {'title': Value(literal:""That's All"")}, {'title': Value(literal:'Marco Diaz vs The world (Scott Pilgrim AU)')}, {'title': Value(literal:'Parental Affairs')}, {'title': Value(literal:'Time Is A Fragile Thing')}, {'title': Value(literal:'Seth')}, {'title': Value(literal:'The Warnicorn Stampede – Unleashed')}, {'title': Value(literal:'Playing with Fire')}, {'title': Value(literal:'Monster Crush')}, {'title': Value(literal:'Marco the Squire')}, {'title': Value(literal:'Scattered Stars AU')}, {'title': Value(literal:""Marco's Harem"")}, {'title': Value(literal:'Unknowing')}, {'title': Value(literal:'screw your wishes, it’s your life i’m saving')}, {'title': Value(literal:'Misconceptions and Misunderstandings')}, {'title': Value(literal:'The Chronicles of Selesdria Butterfly')}, {'title': Value(literal:'Marco’s Temptation')}, {'title': Value(literal:'Unchanging wish')}, {'title': Value(literal:'Our Mothers Suck')}, {'title': Value(literal:'The Magic Of Love')}, {'title': Value(literal:'Star and Marco vs Evil Book 2')}, {'title': Value(literal:""Nautiscarader's Smutember Day 3: Whatcha starin' at? Starco (SVTFOE)"")}, {'title': Value(literal:'Slow Burn')}, {'title': Value(literal:'Slow Burn: Chapter 1.')}, {'title': Value(literal:'Warm Hot Coco')}, {'title': Value(literal:'Star vs the forces of evil AU fic Season 2')}, {'title': Value(literal:'u/BadBoyNachos')}, {'title': Value(literal:'starco fic')}, {'title': Value(literal:'Smutember 2021 In a Vehicle')}, {'title': Value(literal:'Smutember 2021 Nature Date')}, {'title': Value(literal:'Smutember 2021 Yes!')}, {'title': Value(literal:'IVTPOC season 1')}, {'title': Value(literal:'Smutember 2021 Celebration Night')}, {'title': Value(literal:'Smutember 2021 Dirty Talk')}, {'title': Value(literal:'The Birth of Mariposa Diaz')}, {'title': Value(literal:'Queen’s Wrath')}, {'title': Value(literal:'Star vs. The Forces of Evil: A Shining Star')}, {'title': Value(literal:'Cleaver of Worlds')}, {'title': Value(literal:""Marco's New Outfit"")}, {'title': Value(literal:'Starlight Justiciar - Book 2')}, {'title': Value(literal:'Solace the Hidden')}, {'title': Value(literal:'Pimping my sister')}, {'title': Value(literal:'Started Under the Moonlight Ball/ Tomco')}, {'title': Value(literal:'Star and Marcie and the Forces of Evil Part Three: Spirits, Sidesteps, and Strange Writings')}, {'title': Value(literal:'The Arrangement')}, {'title': Value(literal:'Shenanigans: Doubt')}, {'title': Value(literal:'Shenanigans: Education')}, {'title': Value(literal:'Star VS the Forces of Evil request section')}, {'title': Value(literal:'The Blood Moon Ball')}, {'title': Value(literal:""I'll Hate You Properly"")}, {'title': Value(literal:'Haremco vs The 12 Days of Christmas REWRITE')}, {'title': Value(literal:'To Fall in love')}, {'title': Value(literal:'Cleaved Together (Or Cleaved Apart)')}, {'title': Value(literal:'Family Gathering')}, {'title': Value(literal:'Marco’s Crisis')}, {'title': Value(literal:'A VERY Merry Christmas')}, {'title': Value(literal:'A Star and Marco vs Evil Story')}, {'title': Value(literal:'The Finest Warrior Of Mewni')}, {'title': Value(literal:'Star Vs The Story')}, {'title': Value(literal:'How to Switch a Star')}, {'title': Value(literal:'Feelings For A Demon  ( A TOMCO Fanfic )[OLD]')}, {'title': Value(literal:'Set my heart on fire (and burn with me)')}, {'title': Value(literal:'The Plain Jane and the Magical Princess')}, {'title': Value(literal:'Star’s Secret')}, {'title': Value(literal:'From the dark, Into the little star')}, {'title': Value(literal:'Alien Romance')}, {'title': Value(literal:'The Measure of a Man')}, {'title': Value(literal:""Why can't i hate you?"")}, {'title': Value(literal:'Smooshed (Or, The Nine Wives of Marco Diaz)')}, {'title': Value(literal:'Spoiler Alert!')}, {'title': Value(literal:'A Brush To The Heart')}, {'title': Value(literal:'Sleeping with the princess')}, {'title': Value(literal:'The secret that is us')}, {'title': Value(literal:'Starcorned Lovers')}, {'title': Value(literal:'The Secret Butterfly')}, {'title': Value(literal:'The Four of Them')}, {'title': Value(literal:'A bets a bet. And a princess makes good on her word')}, {'title': Value(literal:'Ludo and the Lost Laser Puppy (Short Story)')}, {'title': Value(literal:'A Contemplation of Who the boy in the Mirror is')}, {'title': Value(literal:'Remnants of the Past')}, {'title': Value(literal:""Let Be What Isn't"")}, {'title': Value(literal:'A Wonderful Relationship')}, {'title': Value(literal:'Commission: A Wonderful Relationship')}, {'title': Value(literal:""It's It's a ballroom blitz!"")}, {'title': Value(literal:'A Few Sizes Bigger')}, {'title': Value(literal:'SVTFOE Continuation')}, {'title': Value(literal:'Let Me Help You - Tomco')}, {'title': Value(literal:'Bucket for a Crown')}, {'title': Value(literal:'Cleaning House')}, {'title': Value(literal:""A hero's reward"")}, {'title': Value(literal:""A hero's reward- chopped up version"")}, {'title': Value(literal:'Training Session')}, {'title': Value(literal:'Star and Marco vs Evil Book 3')}, {'title': Value(literal:'Butterfly Interludes')}, {'title': Value(literal:'Explicit Content Warning')}, {'title': Value(literal:""We're a Miracle"")}, {'title': Value(literal:'Unintended Repercussions')}, {'title': Value(literal:'Unbroken Bonds')}, {'title': Value(literal:'Blood Moon Knight')}, {'title': Value(literal:'LHi5W: Star Cucked')}, {'title': Value(literal:'LHi5W: Eclipsa Cuddles')}, {'title': Value(literal:'LHi5W: Anal Star')}, {'title': Value(literal:'LHi5W: Butterfly Sisters')}, {'title': Value(literal:'Wacky Wednesday (Short Story)')}, {'title': Value(literal:""Couple's Thursday"")}, {'title': Value(literal:'another starred sky (star versus the forces of evil rewrite)')}, {'title': Value(literal:'another stared sky (star versus the forces of evil rewrite)')}, {'title': Value(literal:'Vigorously Flies the Star')}, {'title': Value(literal:'Señora Diaz')}, {'title': Value(literal:'Home Intrusion')}, {'title': Value(literal:'Back to school.. Well not for Tom  by ')}, {'title': Value(literal:'It was never the Blood Moon')}, {'title': Value(literal:'Butterfly Ballad')}, {'title': Value(literal:'To Be A Boy or A Princess For The Day?')}, {'title': Value(literal:'Unconnected Tomco Stories')}, {'title': Value(literal:'Confession and a Choice')}, {'title': Value(literal:'go, fight, win!')}, {'title': Value(literal:'Star vs. the forces of evil ONESHOTS')}, {'title': Value(literal:'Tomco scenarios')}, {'title': Value(literal:'Commission: A Good Day')}, {'title': Value(literal:'Commission: The Many Faces of Hekapoo')}, {'title': Value(literal:'LUMINARY')}, {'title': Value(literal:'Full Flame')}, {'title': Value(literal:'Dress Torn and Battle Worn')}, {'title': Value(literal:'Unbroken Bonds')}, {'title': Value(literal:'Luminaries')}, {'title': Value(literal:""Daddy's Little Monster"")}, {'title': Value(literal:'Star!!')}, {'title': Value(literal:'No, Just No')}, {'title': Value(literal:'Butterfly')}, {'title': Value(literal:'Lifelong Post')}, {'title': Value(literal:'some justice at last will be served')}, {'title': Value(literal:'All the Difference')}, {'title': Value(literal:'Tomco Fanfic Thing')}, {'title': Value(literal:'Cuddles and Confessions')}, {'title': Value(literal:'How to win a prince')}, {'title': Value(literal:""Vacay Through the 'Verse"")}, {'title': Value(literal:""An Earthling's Saga"")}, {'title': Value(literal:'Tales of Celestia')}, {'title': Value(literal:'An Offer')}, {'title': Value(literal:""i knew you'd linger like a tattoo kiss"")}, {'title': Value(literal:'When Two Moons Eclipse')}, {'title': Value(literal:""Smutember 2022 Don't Get Caught"")}, {'title': Value(literal:'Smutember 2022 Be Quiet!')}, {'title': Value(literal:'If Turdina went to the blood moon ball')}, {'title': Value(literal:'Switched  (a star vs. forces of evil fanfiction) - Chapter One ""Oh No""')}, {'title': Value(literal:'Eleven')}, {'title': Value(literal:'Enamorada de mi maestro')}, {'title': Value(literal:'Quirky Humans')}, {'title': Value(literal:'Frostbite')}, {'title': Value(literal:'Song Fic’s')}, {'title': Value(literal:'Remember Me')}, {'title': Value(literal:'Moonlight Serenading')}, {'title': Value(literal:""You're From A Whole Other World"")}, {'title': Value(literal:'A Different Dimension')}, {'title': Value(literal:'Techs Vs The Forces of Glitches')}, {'title': Value(literal:'_You Fall In Love_')}, {'title': Value(literal:'Dinastia Butterfly Vs Las Fuerzas de la Maldad')}, {'title': Value(literal:'A Snapshot From Another Place')}, {'title': Value(literal:'Avaricia y Orgullo.')}, {'title': Value(literal:'Counting Stars')}, {'title': Value(literal:'Kinktober 2021')}, {'title': Value(literal:'The Miraculous Story of Jackie Lynn Thomas')}, {'title': Value(literal:'Kinktober 2021 Oneshots Part 2!')}, {'title': Value(literal:""Group Therapy: When's the last time that's been normal?"")}, {'title': Value(literal:'The Butterfly Gambit')}, {'title': Value(literal:'The Hell Raisers - Star Vs the Forces of Evil X Helluva Boss AU')}, {'title': Value(literal:'JOYEUX ANNIVERSAIREEEEEEEEEE')}, {'title': Value(literal:'The opening (CollegeAu!)')}, {'title': Value(literal:'I Wanna be the Troll')}, {'title': Value(literal:'Hurricane Star Overdrive - The Neo Earth Saga')}, {'title': Value(literal:'United')}, {'title': Value(literal:'To Light The Spark')}, {'title': Value(literal:'____ _________________ __________')}, {'title': Value(literal:'..._ ____ ___, _____ _____ ________ ___')}, {'title': Value(literal:""Toffee's precious gem"")}, {'title': Value(literal:'Sailor Star')}, {'title': Value(literal:'Distorted Dimensions: The Power Princesses')}, {'title': Value(literal:'Apenas talvez...')}, {'title': Value(literal:'Jemio_a _starkie oneshot_')}, {'title': Value(literal:'Monstruoso amor.')}, {'title': Value(literal:'Diferencias y Parecidos')}, {'title': Value(literal:'I Promise-Lance Mcclain X Reader')}, {'title': Value(literal:'battle for an amazing wish')}, {'title': Value(literal:'Infinity Train Book 0: Infinite Beyond')}, {'title': Value(literal:'Ao seu lado')}, {'title': Value(literal:'Surfing Lessons')}, {'title': Value(literal:'My Trauma is Abnormal (the server)')}, {'title': Value(literal:'Dangers to the Universe')}, {'title': Value(literal:'Disney Channel: Junior Heroes Academy')}, {'title': Value(literal:""Demons Don't Love"")}, {'title': Value(literal:'Star Trek: The Bold Voyage')}, {'title': Value(literal:'Into The Multiverse')}, {'title': Value(literal:'Cheer Each Other Up')}, {'title': Value(literal:'After The ""Incident""')}, {'title': Value(literal:""i'll be with you"")}, {'title': Value(literal:'The Big Crossover- War of Z')}, {'title': Value(literal:'Code Spells')}, {'title': Value(literal:'Map of My Fanfic Multiverse')}, {'title': Value(literal:'Tied Fates X Star vs crossover special')}, {'title': Value(literal:'Merged Worlds')}, {'title': Value(literal:'Worlds Collide')}, {'title': Value(literal:""Gay Ol' Time"")}, {'title': Value(literal:'The Echo Falls Groupchat')}, {'title': Value(literal:'When Worlds Collide')}, {'title': Value(literal:'Five Sparks of Life (Quinque Scintillae Vitae) Side Stories + One Shots')}, {'title': Value(literal:'Mewni’s Medical Facility for Maturing Mewmans')}, {'title': Value(literal:'Misc Cartoon Imagines')}, {'title': Value(literal:'Muppet Wash!')}, {'title': Value(literal:'A Shopping Spree To Calm The Nerves')}, {'title': Value(literal:'Stars In The Universe')}, {'title': Value(literal:'The Owl House: Owl Sees All')}, {'title': Value(literal:'To Love Again: Epilogue')}, {'title': Value(literal:'The Protectors: Clash of Gems')}, {'title': Value(literal:'Lunar AUs One Shots (Mostly Crack!)')}]"	208	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What stories is Massimo Torricelli featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Massimo Torricelli"" . }
    </SPARQL>

    ###
    

    Question: What stories is Tomá_ Rosick_ featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Tomá_ Rosick_"" . }
    </SPARQL>

    ###
    

    Question: What stories is Mutual Pining - Character featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Mutual Pining - Character"" . }
    </SPARQL>

    ###
    

Question: What stories is Marco Diaz (Star vs. The Forces of Evil) featured in?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?title WHERE { 
?story golem:title ?title . 
?story golem:characters ""Marco Diaz (Star vs. The Forces of Evil)"" . 
}
"	"[{'title': Value(literal:'Forgive but never forget')}, {'title': Value(literal:'_tomstar____')}, {'title': Value(literal:'Taquinerie Nocturne')}, {'title': Value(literal:'La misteriosa marca')}, {'title': Value(literal:'LOVE')}, {'title': Value(literal:'Orgia en las islas Hirvientes.')}, {'title': Value(literal:'Freeze your brain')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'Jukebox Musical')}, {'title': Value(literal:'The karaoke Realm')}, {'title': Value(literal:'If I Killed Someone For You')}, {'title': Value(literal:'Monkey and Butterfly')}, {'title': Value(literal:'crossover nexus 2: reloaded')}, {'title': Value(literal:'Strange Ninjas in a Strange Land')}, {'title': Value(literal:'The Queen of Borrowed Powers')}, {'title': Value(literal:'A Rainha dos Monstros')}, {'title': Value(literal:'Unidos por la luna roja')}, {'title': Value(literal:'Mi salvador, Marco Díaz')}, {'title': Value(literal:'Tomados de las Manos')}, {'title': Value(literal:'Caricias')}, {'title': Value(literal:'Disfraz')}, {'title': Value(literal:'Tanabata.')}, {'title': Value(literal:'Amigos de la infancia')}, {'title': Value(literal:'uau')}, {'title': Value(literal:'And they said Infinity War was the most ambitious crossover')}, {'title': Value(literal:'Babes, Bullets and a whole lot of Adam')}, {'title': Value(literal:'Yandere Oneshots (mostly Genshin)')}, {'title': Value(literal:'Dreams Come True')}, {'title': Value(literal:'A Dip Into Another World')}, {'title': Value(literal:""Nautiscarader's Smutember 2020"")}, {'title': Value(literal:'Marvelous Zombies.')}, {'title': Value(literal:'Multiverse Wars Reactions!')}, {'title': Value(literal:'Falling For Yanderes')}, {'title': Value(literal:'Five Sparks of Life: The Blossoming Beginning')}, {'title': Value(literal:'The Loud House: Doujinshi!')}, {'title': Value(literal:'Rick vs. the Multiverse')}, {'title': Value(literal:'El valor de un alma')}, {'title': Value(literal:'Dulce canela.')}, {'title': Value(literal:'Omovember 2021')}, {'title': Value(literal:'Infinity Train: Kingdom Come')}, {'title': Value(literal:'It Sucks to be a Prince')}, {'title': Value(literal:'A Beginning with an Unexpected Ending')}, {'title': Value(literal:'Unrequited Love Support Group')}, {'title': Value(literal:'Marcnificent Weirdness')}, {'title': Value(literal:'Summer Love')}, {'title': Value(literal:'The Gods')}, {'title': Value(literal:'Fantasizing about tomorrow')}, {'title': Value(literal:'12 Days of Mariposamas')}, {'title': Value(literal:'The collision of worlds')}, {'title': Value(literal:'Light as a Star')}, {'title': Value(literal:'The Beautiful Princess')}, {'title': Value(literal:'A Whole New World, A Star vs the Forces of Evil Lemon Story')}, {'title': Value(literal:'A Cold Night.')}, {'title': Value(literal:""Demons Don't Like Sprinkles"")}, {'title': Value(literal:'One Last Drink')}, {'title': Value(literal:'Kings of Old')}, {'title': Value(literal:'Star vs the Forces of Evil Presents: Lizards and Dragons One Shots')}, {'title': Value(literal:'Get Together')}, {'title': Value(literal:'Janna vs the forces the Earth-ni')}, {'title': Value(literal:'The King is Dead, Long Live the King')}, {'title': Value(literal:'Painted Lies & Demon Eyes')}, {'title': Value(literal:'Fond Remembrances')}, {'title': Value(literal:'Yammy')}, {'title': Value(literal:'Beach Date')}, {'title': Value(literal:""Surviving St. Olga's"")}, {'title': Value(literal:'Forsake')}, {'title': Value(literal:'Bones')}, {'title': Value(literal:'Even After it All.')}, {'title': Value(literal:'A Real Lady Never Kisses and Tell')}, {'title': Value(literal:'Alchmey, Impetus, and Volatile Catalysts')}, {'title': Value(literal:'Emma')}, {'title': Value(literal:'Big Mistakes and Cornshakes')}, {'title': Value(literal:'Tell the Truth')}, {'title': Value(literal:'Strangled')}, {'title': Value(literal:'Milfology-Star/Moon')}, {'title': Value(literal:'Milfology-Marco/Angie')}, {'title': Value(literal:'Asking for a Favor')}, {'title': Value(literal:'A Butterfly Effect')}, {'title': Value(literal:'Janna Does Illegal Shit')}, {'title': Value(literal:'Quit being overworked')}, {'title': Value(literal:'My Knight')}, {'title': Value(literal:'To Tell the Truth')}, {'title': Value(literal:'Linked')}, {'title': Value(literal:'Blood Moon Mania')}, {'title': Value(literal:'Star in a Jar')}, {'title': Value(literal:'The Butterfly Who Lost Her Wings')}, {'title': Value(literal:'Marco and Tom make out on the sidewalk.')}, {'title': Value(literal:'The Haunted Mansion')}, {'title': Value(literal:'The Mysterious Maroon')}, {'title': Value(literal:'Princess Star')}, {'title': Value(literal:'Star and Marcie and the Forces of Evil Part One: Star Comes to Earth')}, {'title': Value(literal:""Dragon's Revenge, A Star vs the Forces of Evil Lemon Story"")}, {'title': Value(literal:'A Greedy Heart')}, {'title': Value(literal:'Corn & Circuses')}, {'title': Value(literal:'A Toast')}, {'title': Value(literal:'The Other Way')}, {'title': Value(literal:'Dilfology-Marco/Rafael')}, {'title': Value(literal:'Flaming Rose')}, {'title': Value(literal:'Magic and Madness')}, {'title': Value(literal:'The Most Important Things You Might Lose')}, {'title': Value(literal:'Tales From Mew-Earth')}, {'title': Value(literal:'Never too Late?')}, {'title': Value(literal:'Escape From Fanfic Island (SVTFOE)')}, {'title': Value(literal:'Star vs. The Forces of Evil: The Bloomen Legacy')}, {'title': Value(literal:'The Demon and Her Knight')}, {'title': Value(literal:""His Majesty's Dark Queen"")}, {'title': Value(literal:'The Contract')}, {'title': Value(literal:'In The End')}, {'title': Value(literal:'The Mewnight Society')}, {'title': Value(literal:'Who Needs Star When You Have Each Other?')}, {'title': Value(literal:'Anchors and Lighthouses')}, {'title': Value(literal:'Patches')}, {'title': Value(literal:'If You Love Me, Please Say It')}, {'title': Value(literal:'Time-Out of Time Vacation')}, {'title': Value(literal:""How can I move on (when I'm still in love with you.)"")}, {'title': Value(literal:'Reduce To Tears')}, {'title': Value(literal:'Pushing Up Daises')}, {'title': Value(literal:'Smutember 2020 Foreplay')}, {'title': Value(literal:'Marcowpoo')}, {'title': Value(literal:'We Belong Together')}, {'title': Value(literal:'Worth It')}, {'title': Value(literal:'Butterfly Hunt')}, {'title': Value(literal:'Breakup Buddies')}, {'title': Value(literal:'Smutember 2020 Naked Photo Shoot')}, {'title': Value(literal:'Marcuck')}, {'title': Value(literal:'Star Vs The Forces of Evil')}, {'title': Value(literal:'The Ritual')}, {'title': Value(literal:'Untouched Truths')}, {'title': Value(literal:'The Dance of the Stars')}, {'title': Value(literal:'The Story of Vegetarianism!')}, {'title': Value(literal:'The MonSTAR Princess')}, {'title': Value(literal:'Streetlight People')}, {'title': Value(literal:'5. Vivisection')}, {'title': Value(literal:'Prince of Mewni')}, {'title': Value(literal:'SVTFOE: The Thief')}, {'title': Value(literal:'What We Found and Forgot')}, {'title': Value(literal:'Smutember 2020 Ecstasy')}, {'title': Value(literal:'What the Heart Wants.')}, {'title': Value(literal:'Claiming the Queen')}, {'title': Value(literal:'The Light in Your Eyes')}, {'title': Value(literal:'New Bloom')}, {'title': Value(literal:'Once Upon A Genderbend: Marcia Diaz & the Seven Monsters')}, {'title': Value(literal:'The Demon Within')}, {'title': Value(literal:'Lasting Mark')}, {'title': Value(literal:'Misadventurous Mabi')}, {'title': Value(literal:'A Bit of Help Here?')}, {'title': Value(literal:'Nothing')}, {'title': Value(literal:'Broken Hearts And Bloody Bodies')}, {'title': Value(literal:'The lost princess')}, {'title': Value(literal:'Shenanigans: Caught')}, {'title': Value(literal:'Relapse')}, {'title': Value(literal:'Finally Mine')}, {'title': Value(literal:'Star and Marcie and the Forces of Evil Part Two: Inevitable Rise, Inevitable Fall')}, {'title': Value(literal:'catcing some zs')}, {'title': Value(literal:'Like An Echo In The Forest')}, {'title': Value(literal:'Will of the Septarian')}, {'title': Value(literal:'it’s alright (no it’s not)')}, {'title': Value(literal:'Magic of Mistletoe')}, {'title': Value(literal:'I’m a pond and you’re an ocean')}, {'title': Value(literal:'one, two princes kneel before you')}, {'title': Value(literal:'A Gingerbread House')}, {'title': Value(literal:'the ways that you say my name have me running on and on')}, {'title': Value(literal:'Asteris of Septarsis')}, {'title': Value(literal:'Suspicious Dessert')}, {'title': Value(literal:'Butterfly blossoms')}, {'title': Value(literal:'Marco Vs The Forces of Evil')}, {'title': Value(literal:'The Sugar Cookie Man')}, {'title': Value(literal:'Kinkmas Unwrapping Presents')}, {'title': Value(literal:""Star and Marco's Virtual Adventure"")}, {'title': Value(literal:'Bottom of the Pyramid')}, {'title': Value(literal:'Follow Me')}, {'title': Value(literal:'Echo Geeks')}, {'title': Value(literal:'The Once and Future Queen')}, {'title': Value(literal:'Flipped Star')}, {'title': Value(literal:'A Broken Crown.')}, {'title': Value(literal:'The Working Girls of Echo Creek')}, {'title': Value(literal:'Marco and his Demon Boyfriend')}, {'title': Value(literal:'The Perfect Remedy For Angry Demons')}, {'title': Value(literal:'Memorytale')}, {'title': Value(literal:'A New Frontier Redux')}, {'title': Value(literal:""Cleaved, but it's the opposite"")}, {'title': Value(literal:'The bitter truth of the world')}, {'title': Value(literal:'For everyone else right?')}, {'title': Value(literal:'Before We Say Goodnight')}, {'title': Value(literal:'Just Think About It')}, {'title': Value(literal:'Recruits, Part 1')}, {'title': Value(literal:'Attack of the 700 Metre Lizard!!!')}, {'title': Value(literal:'Star vs the Forces of the Negative Multiverse')}, {'title': Value(literal:'When Two Worlds Collide')}, {'title': Value(literal:'Polyamory')}, {'title': Value(literal:'The pros, cons, and quirks of having friends')}, {'title': Value(literal:'Please Don’t Stare at Me')}, {'title': Value(literal:'Puppeteer')}, {'title': Value(literal:'A Brief Foray Into Filipino Cuisine')}, {'title': Value(literal:'Relapse: The Full Story')}, {'title': Value(literal:'hobbies')}, {'title': Value(literal:'Why Bother?')}, {'title': Value(literal:'Everyone Feels Pain Even Demons')}, {'title': Value(literal:'Older Janna')}, {'title': Value(literal:'The Mewni Knights: Katie Comes to Town')}, {'title': Value(literal:'in the night i know you burn (with feelings i cannot return, my dear)')}, {'title': Value(literal:'Star in the Pub')}, {'title': Value(literal:'Spin the Bottle')}, {'title': Value(literal:'Wayward Princesses')}, {'title': Value(literal:""Ready As I'll Ever Be"")}, {'title': Value(literal:'Tomco Story')}, {'title': Value(literal:'The Working Girls of the Multiverse')}, {'title': Value(literal:'The Princess of the Backalley')}, {'title': Value(literal:'Spill')}, {'title': Value(literal:'Recruits, Part 2')}, {'title': Value(literal:'Overnight Failure')}, {'title': Value(literal:'Personal Heaters!')}, {'title': Value(literal:""You'll Do"")}, {'title': Value(literal:'Necromaster')}, {'title': Value(literal:'Tomco Hand Job')}, {'title': Value(literal:""bury me when i'm dead"")}, {'title': Value(literal:'Starco Experimentation')}, {'title': Value(literal:'A bets a bet. And a princess makes good on her word')}, {'title': Value(literal:'Tomco Blow Job')}, {'title': Value(literal:""The Butterfly's Marital Woes"")}, {'title': Value(literal:'Nachos And The Breakfast')}, {'title': Value(literal:'Remember Paris?')}, {'title': Value(literal:'The Intruderess')}, {'title': Value(literal:'Name Or Title?')}, {'title': Value(literal:'Marco Loving')}, {'title': Value(literal:'Soul Bound')}, {'title': Value(literal:""That's All"")}, {'title': Value(literal:'Marco Diaz vs The world (Scott Pilgrim AU)')}, {'title': Value(literal:'Parental Affairs')}, {'title': Value(literal:'Time Is A Fragile Thing')}, {'title': Value(literal:'Seth')}, {'title': Value(literal:'The Warnicorn Stampede – Unleashed')}, {'title': Value(literal:'Playing with Fire')}, {'title': Value(literal:'Monster Crush')}, {'title': Value(literal:'Marco the Squire')}, {'title': Value(literal:'Scattered Stars AU')}, {'title': Value(literal:""Marco's Harem"")}, {'title': Value(literal:'Unknowing')}, {'title': Value(literal:'screw your wishes, it’s your life i’m saving')}, {'title': Value(literal:'Misconceptions and Misunderstandings')}, {'title': Value(literal:'The Chronicles of Selesdria Butterfly')}, {'title': Value(literal:'Marco’s Temptation')}, {'title': Value(literal:'Unchanging wish')}, {'title': Value(literal:'Our Mothers Suck')}, {'title': Value(literal:'The Magic Of Love')}, {'title': Value(literal:'Star and Marco vs Evil Book 2')}, {'title': Value(literal:""Nautiscarader's Smutember Day 3: Whatcha starin' at? Starco (SVTFOE)"")}, {'title': Value(literal:'Slow Burn')}, {'title': Value(literal:'Slow Burn: Chapter 1.')}, {'title': Value(literal:'Warm Hot Coco')}, {'title': Value(literal:'Star vs the forces of evil AU fic Season 2')}, {'title': Value(literal:'u/BadBoyNachos')}, {'title': Value(literal:'starco fic')}, {'title': Value(literal:'Smutember 2021 In a Vehicle')}, {'title': Value(literal:'Smutember 2021 Nature Date')}, {'title': Value(literal:'Smutember 2021 Yes!')}, {'title': Value(literal:'IVTPOC season 1')}, {'title': Value(literal:'Smutember 2021 Celebration Night')}, {'title': Value(literal:'Smutember 2021 Dirty Talk')}, {'title': Value(literal:'The Birth of Mariposa Diaz')}, {'title': Value(literal:'Queen’s Wrath')}, {'title': Value(literal:'Star vs. The Forces of Evil: A Shining Star')}, {'title': Value(literal:'Cleaver of Worlds')}, {'title': Value(literal:""Marco's New Outfit"")}, {'title': Value(literal:'Starlight Justiciar - Book 2')}, {'title': Value(literal:'Solace the Hidden')}, {'title': Value(literal:'Pimping my sister')}, {'title': Value(literal:'Started Under the Moonlight Ball/ Tomco')}, {'title': Value(literal:'Star and Marcie and the Forces of Evil Part Three: Spirits, Sidesteps, and Strange Writings')}, {'title': Value(literal:'The Arrangement')}, {'title': Value(literal:'Shenanigans: Doubt')}, {'title': Value(literal:'Shenanigans: Education')}, {'title': Value(literal:'Star VS the Forces of Evil request section')}, {'title': Value(literal:'The Blood Moon Ball')}, {'title': Value(literal:""I'll Hate You Properly"")}, {'title': Value(literal:'Haremco vs The 12 Days of Christmas REWRITE')}, {'title': Value(literal:'To Fall in love')}, {'title': Value(literal:'Cleaved Together (Or Cleaved Apart)')}, {'title': Value(literal:'Family Gathering')}, {'title': Value(literal:'Marco’s Crisis')}, {'title': Value(literal:'A VERY Merry Christmas')}, {'title': Value(literal:'A Star and Marco vs Evil Story')}, {'title': Value(literal:'The Finest Warrior Of Mewni')}, {'title': Value(literal:'Star Vs The Story')}, {'title': Value(literal:'How to Switch a Star')}, {'title': Value(literal:'Feelings For A Demon  ( A TOMCO Fanfic )[OLD]')}, {'title': Value(literal:'Set my heart on fire (and burn with me)')}, {'title': Value(literal:'The Plain Jane and the Magical Princess')}, {'title': Value(literal:'Star’s Secret')}, {'title': Value(literal:'From the dark, Into the little star')}, {'title': Value(literal:'Alien Romance')}, {'title': Value(literal:'The Measure of a Man')}, {'title': Value(literal:""Why can't i hate you?"")}, {'title': Value(literal:'Smooshed (Or, The Nine Wives of Marco Diaz)')}, {'title': Value(literal:'Spoiler Alert!')}, {'title': Value(literal:'A Brush To The Heart')}, {'title': Value(literal:'Sleeping with the princess')}, {'title': Value(literal:'The secret that is us')}, {'title': Value(literal:'Starcorned Lovers')}, {'title': Value(literal:'The Secret Butterfly')}, {'title': Value(literal:'The Four of Them')}, {'title': Value(literal:'A bets a bet. And a princess makes good on her word')}, {'title': Value(literal:'Ludo and the Lost Laser Puppy (Short Story)')}, {'title': Value(literal:'A Contemplation of Who the boy in the Mirror is')}, {'title': Value(literal:'Remnants of the Past')}, {'title': Value(literal:""Let Be What Isn't"")}, {'title': Value(literal:'A Wonderful Relationship')}, {'title': Value(literal:'Commission: A Wonderful Relationship')}, {'title': Value(literal:""It's It's a ballroom blitz!"")}, {'title': Value(literal:'A Few Sizes Bigger')}, {'title': Value(literal:'SVTFOE Continuation')}, {'title': Value(literal:'Let Me Help You - Tomco')}, {'title': Value(literal:'Bucket for a Crown')}, {'title': Value(literal:'Cleaning House')}, {'title': Value(literal:""A hero's reward"")}, {'title': Value(literal:""A hero's reward- chopped up version"")}, {'title': Value(literal:'Training Session')}, {'title': Value(literal:'Star and Marco vs Evil Book 3')}, {'title': Value(literal:'Butterfly Interludes')}, {'title': Value(literal:'Explicit Content Warning')}, {'title': Value(literal:""We're a Miracle"")}, {'title': Value(literal:'Unintended Repercussions')}, {'title': Value(literal:'Unbroken Bonds')}, {'title': Value(literal:'Blood Moon Knight')}, {'title': Value(literal:'LHi5W: Star Cucked')}, {'title': Value(literal:'LHi5W: Eclipsa Cuddles')}, {'title': Value(literal:'LHi5W: Anal Star')}, {'title': Value(literal:'LHi5W: Butterfly Sisters')}, {'title': Value(literal:'Wacky Wednesday (Short Story)')}, {'title': Value(literal:""Couple's Thursday"")}, {'title': Value(literal:'another starred sky (star versus the forces of evil rewrite)')}, {'title': Value(literal:'another stared sky (star versus the forces of evil rewrite)')}, {'title': Value(literal:'Vigorously Flies the Star')}, {'title': Value(literal:'Señora Diaz')}, {'title': Value(literal:'Home Intrusion')}, {'title': Value(literal:'Back to school.. Well not for Tom  by ')}, {'title': Value(literal:'It was never the Blood Moon')}, {'title': Value(literal:'Butterfly Ballad')}, {'title': Value(literal:'To Be A Boy or A Princess For The Day?')}, {'title': Value(literal:'Unconnected Tomco Stories')}, {'title': Value(literal:'Confession and a Choice')}, {'title': Value(literal:'go, fight, win!')}, {'title': Value(literal:'Star vs. the forces of evil ONESHOTS')}, {'title': Value(literal:'Tomco scenarios')}, {'title': Value(literal:'Commission: A Good Day')}, {'title': Value(literal:'Commission: The Many Faces of Hekapoo')}, {'title': Value(literal:'LUMINARY')}, {'title': Value(literal:'Full Flame')}, {'title': Value(literal:'Dress Torn and Battle Worn')}, {'title': Value(literal:'Unbroken Bonds')}, {'title': Value(literal:'Luminaries')}, {'title': Value(literal:""Daddy's Little Monster"")}, {'title': Value(literal:'Star!!')}, {'title': Value(literal:'No, Just No')}, {'title': Value(literal:'Butterfly')}, {'title': Value(literal:'Lifelong Post')}, {'title': Value(literal:'some justice at last will be served')}, {'title': Value(literal:'All the Difference')}, {'title': Value(literal:'Tomco Fanfic Thing')}, {'title': Value(literal:'Cuddles and Confessions')}, {'title': Value(literal:'How to win a prince')}, {'title': Value(literal:""Vacay Through the 'Verse"")}, {'title': Value(literal:""An Earthling's Saga"")}, {'title': Value(literal:'Tales of Celestia')}, {'title': Value(literal:'An Offer')}, {'title': Value(literal:""i knew you'd linger like a tattoo kiss"")}, {'title': Value(literal:'When Two Moons Eclipse')}, {'title': Value(literal:""Smutember 2022 Don't Get Caught"")}, {'title': Value(literal:'Smutember 2022 Be Quiet!')}, {'title': Value(literal:'If Turdina went to the blood moon ball')}, {'title': Value(literal:'Switched  (a star vs. forces of evil fanfiction) - Chapter One ""Oh No""')}, {'title': Value(literal:'Eleven')}, {'title': Value(literal:'Enamorada de mi maestro')}, {'title': Value(literal:'Quirky Humans')}, {'title': Value(literal:'Frostbite')}, {'title': Value(literal:'Song Fic’s')}, {'title': Value(literal:'Remember Me')}, {'title': Value(literal:'Moonlight Serenading')}, {'title': Value(literal:""You're From A Whole Other World"")}, {'title': Value(literal:'A Different Dimension')}, {'title': Value(literal:'Techs Vs The Forces of Glitches')}, {'title': Value(literal:'_You Fall In Love_')}, {'title': Value(literal:'Dinastia Butterfly Vs Las Fuerzas de la Maldad')}, {'title': Value(literal:'A Snapshot From Another Place')}, {'title': Value(literal:'Avaricia y Orgullo.')}, {'title': Value(literal:'Counting Stars')}, {'title': Value(literal:'Kinktober 2021')}, {'title': Value(literal:'The Miraculous Story of Jackie Lynn Thomas')}, {'title': Value(literal:'Kinktober 2021 Oneshots Part 2!')}, {'title': Value(literal:""Group Therapy: When's the last time that's been normal?"")}, {'title': Value(literal:'The Butterfly Gambit')}, {'title': Value(literal:'The Hell Raisers - Star Vs the Forces of Evil X Helluva Boss AU')}, {'title': Value(literal:'JOYEUX ANNIVERSAIREEEEEEEEEE')}, {'title': Value(literal:'The opening (CollegeAu!)')}, {'title': Value(literal:'I Wanna be the Troll')}, {'title': Value(literal:'Hurricane Star Overdrive - The Neo Earth Saga')}, {'title': Value(literal:'United')}, {'title': Value(literal:'To Light The Spark')}, {'title': Value(literal:'____ _________________ __________')}, {'title': Value(literal:'..._ ____ ___, _____ _____ ________ ___')}, {'title': Value(literal:""Toffee's precious gem"")}, {'title': Value(literal:'Sailor Star')}, {'title': Value(literal:'Distorted Dimensions: The Power Princesses')}, {'title': Value(literal:'Apenas talvez...')}, {'title': Value(literal:'Jemio_a _starkie oneshot_')}, {'title': Value(literal:'Monstruoso amor.')}, {'title': Value(literal:'Diferencias y Parecidos')}, {'title': Value(literal:'I Promise-Lance Mcclain X Reader')}, {'title': Value(literal:'battle for an amazing wish')}, {'title': Value(literal:'Infinity Train Book 0: Infinite Beyond')}, {'title': Value(literal:'Ao seu lado')}, {'title': Value(literal:'Surfing Lessons')}, {'title': Value(literal:'My Trauma is Abnormal (the server)')}, {'title': Value(literal:'Dangers to the Universe')}, {'title': Value(literal:'Disney Channel: Junior Heroes Academy')}, {'title': Value(literal:""Demons Don't Love"")}, {'title': Value(literal:'Star Trek: The Bold Voyage')}, {'title': Value(literal:'Into The Multiverse')}, {'title': Value(literal:'Cheer Each Other Up')}, {'title': Value(literal:'After The ""Incident""')}, {'title': Value(literal:""i'll be with you"")}, {'title': Value(literal:'The Big Crossover- War of Z')}, {'title': Value(literal:'Code Spells')}, {'title': Value(literal:'Map of My Fanfic Multiverse')}, {'title': Value(literal:'Tied Fates X Star vs crossover special')}, {'title': Value(literal:'Merged Worlds')}, {'title': Value(literal:'Worlds Collide')}, {'title': Value(literal:""Gay Ol' Time"")}, {'title': Value(literal:'The Echo Falls Groupchat')}, {'title': Value(literal:'When Worlds Collide')}, {'title': Value(literal:'Five Sparks of Life (Quinque Scintillae Vitae) Side Stories + One Shots')}, {'title': Value(literal:'Mewni’s Medical Facility for Maturing Mewmans')}, {'title': Value(literal:'Misc Cartoon Imagines')}, {'title': Value(literal:'Muppet Wash!')}, {'title': Value(literal:'A Shopping Spree To Calm The Nerves')}, {'title': Value(literal:'Stars In The Universe')}, {'title': Value(literal:'The Owl House: Owl Sees All')}, {'title': Value(literal:'To Love Again: Epilogue')}, {'title': Value(literal:'The Protectors: Clash of Gems')}, {'title': Value(literal:'Lunar AUs One Shots (Mostly Crack!)')}]"	1	0	0			
209	209	en	What stories is All the Gingers featured in?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""All the Gingers"" . }"	[{'title': Value(literal:'Hold On, I Still Want You')}]	209	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What stories is Mutual Pining - Character featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Mutual Pining - Character"" . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: What stories is __ featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""__"" . }
    </SPARQL>

    ###
    

Question: What stories is All the Gingers featured in?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?title WHERE { 
  ?story golem:title ?title . 
  ?story golem:characters ""All the Gingers"" . 
}
"	[{'title': Value(literal:'Hold On, I Still Want You')}]	1	0	0			
210	210	en	What stories is ___ featured in?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }"	[{'title': Value(literal:'_The Echoing Hearts_ ______')}, {'title': Value(literal:'___/R____')}, {'title': Value(literal:'____/_____')}, {'title': Value(literal:'101110111000')}, {'title': Value(literal:'_Bone Moon_\u3000___')}, {'title': Value(literal:'____/_____')}, {'title': Value(literal:'___/R___')}]	210	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What stories is __ featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""__"" . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: How many __/___ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__/___"" . }
    </SPARQL>

    ###
    

Question: What stories is ___ featured in?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?title WHERE { 
?story golem:characters ""___"" . 
?story golem:title ?title . 
}
"	[{'title': Value(literal:'_The Echoing Hearts_ ______')}, {'title': Value(literal:'___/R____')}, {'title': Value(literal:'____/_____')}, {'title': Value(literal:'101110111000')}, {'title': Value(literal:'_Bone Moon_\u3000___')}, {'title': Value(literal:'____/_____')}, {'title': Value(literal:'___/R___')}]	1	0	0			
211	211	en	What stories is Tomá_ Rosick_ featured in?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Tomá_ Rosick_"" . }"	"[{'title': Value(literal:'_______')}, {'title': Value(literal:'________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Unimportant Life in Ost-Berlin')}, {'title': Value(literal:'One For All, All For One')}, {'title': Value(literal:'Of Arsenal and Sour Candy')}, {'title': Value(literal:'The Mercy Part')}, {'title': Value(literal:'The Worst of Starts')}, {'title': Value(literal:'Kissed by the Devil & Saved by an Angel')}, {'title': Value(literal:'Banter and (B)romance // DISCONTINUED')}, {'title': Value(literal:'On Returning')}, {'title': Value(literal:""It's Going Down"")}, {'title': Value(literal:'Not Misdirected')}, {'title': Value(literal:'Return us our futures')}, {'title': Value(literal:'The Best Of Starts')}, {'title': Value(literal:'The Phone')}, {'title': Value(literal:'The Faithful And The Low')}, {'title': Value(literal:'The Broken Heart')}]"	211	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What stories is Massimo Torricelli featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Massimo Torricelli"" . }
    </SPARQL>

    ###
    

    Question: Who is the author of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: What stories is Ubuyashiki Kuina featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Ubuyashiki Kuina"" . }
    </SPARQL>

    ###
    

Question: What stories is Tomá_ Rosick_ featured in?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Tomá_ Rosick_"" . }
"	"[{'title': Value(literal:'_______')}, {'title': Value(literal:'________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Unimportant Life in Ost-Berlin')}, {'title': Value(literal:'One For All, All For One')}, {'title': Value(literal:'Of Arsenal and Sour Candy')}, {'title': Value(literal:'The Mercy Part')}, {'title': Value(literal:'The Worst of Starts')}, {'title': Value(literal:'Kissed by the Devil & Saved by an Angel')}, {'title': Value(literal:'Banter and (B)romance // DISCONTINUED')}, {'title': Value(literal:'On Returning')}, {'title': Value(literal:""It's Going Down"")}, {'title': Value(literal:'Not Misdirected')}, {'title': Value(literal:'Return us our futures')}, {'title': Value(literal:'The Best Of Starts')}, {'title': Value(literal:'The Phone')}, {'title': Value(literal:'The Faithful And The Low')}, {'title': Value(literal:'The Broken Heart')}]"	1	0	0			
212	212	en	How many stories are uploaded per year?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }	[{'uploads': Value(typed-literal:'8546450')}]	212	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many authors have uploaded a story?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?uploads) WHERE { ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from [[fandom]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from DS - Fandom?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""DS - Fandom"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: How many stories are uploaded per year?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
SELECT (COUNT(?story) AS ?count_stories) WHERE { ?story a golem:Story . } GROUP BY (YEAR(?datePublished) AS ?year) ORDER BY ?year
"	"EndPointInternalError: The endpoint returned the HTTP status code 500. 

Response:
b'Virtuoso 22007 Error DT001: Function year needs a datetime, date or time as argument 1, not an arg of type DB_NULL (204)\n\nSPARQL query:\ndefine sql:big-data-const 0\n#output-format:application/sparql-results+json\n\nprefix golem: <https://golemlab.eu/graph/> \nprefix dc: <http://purl.org/dc/terms/> \nSELECT (COUNT(?story) AS ?count_stories) WHERE { ?story a golem:Story . } GROUP BY (YEAR(?datePublished) AS ?year) ORDER BY ?year\n'"	0	1	1	Failed execution		
214	214	en	How many 1984 - George Orwell stories are there?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""1984 - George Orwell"" . }"	[{'uploads': Value(typed-literal:'141')}]	214	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are there on Archive of Our Own?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:story_id ?id }
    </SPARQL>

    ###
    

    Question: How many __ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
    </SPARQL>

    ###
    

    Question: How many Kudos do Mr.Vampire (1985) stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Mr.Vampire (1985)"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many 1984 - George Orwell stories are there?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT (COUNT(DISTINCT ?story) as ?stories) WHERE { ?story golem:datePublished ""1984 - George Orwell"" . }
"	[{'stories': Value(typed-literal:'0')}]	0	1	1	Wrong predicate	Wrong choice	
215	215	en	How many __/___ stories are there?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__/___"" . }"	[{'uploads': Value(typed-literal:'1')}]	215	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many __ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
    </SPARQL>

    ###
    

    Question: How many _________ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_________"" . }
    </SPARQL>

    ###
    

    Question: How many __ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
    </SPARQL>

    ###
    

Question: How many __/___ stories are there?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__/___"" . }
"	[{'uploads': Value(typed-literal:'1')}]	1	0	0			
216	216	en	How many chuangzaoying2021 stories are there?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""chuangzaoying2021"" . }"	[{'uploads': Value(typed-literal:'2')}]	216	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many __/___ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__/___"" . }
    </SPARQL>

    ###
    

    Question: How many __ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
    </SPARQL>

    ###
    

    Question: How many __ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
    </SPARQL>

    ###
    

Question: How many chuangzaoying2021 stories are there?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { 
  ?story golem:fandom ""chuangzaoying2021"" . 
}
"	[{'uploads': Value(typed-literal:'2')}]	1	0	0			
217	217	en	How many _________ stories are there?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_________"" . }"	[{'uploads': Value(typed-literal:'1')}]	217	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many __/___ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__/___"" . }
    </SPARQL>

    ###
    

    Question: How many __ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
    </SPARQL>

    ###
    

    Question: How many __ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
    </SPARQL>

    ###
    

Question: How many _________ stories are there?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { 
    ?story golem:fandom ""_________"" . 
}
"	[{'uploads': Value(typed-literal:'1')}]	1	0	0			
218	218	en	How many Humour - Fandom stories are there?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Humour - Fandom"" . }"	[{'uploads': Value(typed-literal:'6')}]	218	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many [[fandom]] stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""[[fandom]]"" . }
    </SPARQL>

    ###
    

    Question: How many Kudos do [[fandom]] stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: Show me summaries of [[fandom]] stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: How many Humour - Fandom stories are there?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT (COUNT(DISTINCT ?story) as ?count) WHERE { 
    ?story golem:fandom ""Humour"" . 
    ?story golem:romanticCategory ""Fandom"" . 
}
"	[{'count': Value(typed-literal:'0')}]	0	1	1	Failed NER		
219	219	en	How many __ stories are there?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }"	[{'uploads': Value(typed-literal:'10')}]	219	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many __ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
    </SPARQL>

    ###
    

    Question: How many _________ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_________"" . }
    </SPARQL>

    ###
    

    Question: How many __/___ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__/___"" . }
    </SPARQL>

    ###
    

Question: How many __ stories are there?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
"	[{'uploads': Value(typed-literal:'10')}]	1	0	0			
220	220	en	How many GetBackers stories are there?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""GetBackers"" . }"	[{'uploads': Value(typed-literal:'376')}]	220	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories have received no feedback?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?no_feedback_stories WHERE { ?story golem:numberOfComments ?comments . ?story golem:numberOfKudos ?kudos . FILTER(?comments=0 && ?kudos=0) }
    </SPARQL>

    ###
    

    Question: How much feedback do stories usually get?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos AVG(?comments) AS ?average_number_of_comments WHERE { ?story golem:numberOfKudos ?kudos . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: How many stories are uploaded per year?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }
    </SPARQL>

    ###
    

Question: How many GetBackers stories are there?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(?story) AS ?count_getbackers_stories WHERE { 
  ?story golem:series ""GetBackers"" .
}
"	[{'count_getbackers_stories': Value(typed-literal:'0')}]	0	1	1	Wrong predicate	Wrong choice	
221	221	en	How many __ stories are there?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }"	[{'uploads': Value(typed-literal:'6')}]	221	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many __/___ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__/___"" . }
    </SPARQL>

    ###
    

    Question: How many _________ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_________"" . }
    </SPARQL>

    ###
    

    Question: How many __ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
    </SPARQL>

    ###
    

Question: How many __ stories are there?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>
prefix dc: <http://purl.org/dc/terms/>
prefix gc: <https://ontology.golemlab.eu/>
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
"	[{'uploads': Value(typed-literal:'6')}]	1	0	0			
222	222	en	How many Wuhu Couple stories are there?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Wuhu Couple"" . }"	[{'uploads': Value(typed-literal:'3')}]	222	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many __ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
    </SPARQL>

    ###
    

    Question: How many __/___ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__/___"" . }
    </SPARQL>

    ###
    

    Question: How many __ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
    </SPARQL>

    ###
    

Question: How many Wuhu Couple stories are there?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { 
    ?story golem:fandom ""Wuhu Couple"" . 
}
"	[{'uploads': Value(typed-literal:'3')}]	1	0	0			
223	223	en	How many Tartaglia - Fandom stories are there?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Tartaglia - Fandom"" . }"	[{'uploads': Value(typed-literal:'2')}]	223	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many [[fandom]] stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""[[fandom]]"" . }
    </SPARQL>

    ###
    

    Question: Show me stories from the [[fandom]] fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me summaries of [[fandom]] stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: How many Tartaglia - Fandom stories are there?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT (COUNT(DISTINCT ?story) as ?count) WHERE { 
?story golem:fandom ""[[fandom]]"" ;
    golem:characters ""Tartaglia"".
}
"	[{'count': Value(typed-literal:'0')}]	0	1	1	Failed NER		
225	225	en	How many Kudos do ____ stories get on average?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'174')}]	225	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos do ____ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do ____ - ___ & ___ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____ - ___ & ___"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do __ - Fandom stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""__ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos do ____ stories get on average?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }
"	[{'average_number_of_kudos': Value(typed-literal:'174')}]	1	0	0			
226	226	en	How many Kudos do __ - Fandom stories get on average?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""__ - Fandom"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'16')}]	226	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos do [[fandom]] stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do ____ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do ____ - ___ & ___ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____ - ___ & ___"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos do __ - Fandom stories get on average?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
    ?story golem:fandom ""__ - Fandom"" . 
    ?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'16')}]	1	0	0			
227	227	en	How many Kudos do ____ - ___ & ___ stories get on average?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____ - ___ & ___"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'42.285714285714286')}]	227	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos do ____ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do ____ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do __ - Fandom stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""__ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos do ____ - ___ & ___ stories get on average?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>   
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
?story golem:fandom ""____ - ___ & ___"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'42.285714285714286')}]	1	0	0			
228	228	en	How many Kudos do ____ stories get on average?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'8.2')}]	228	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos do ____ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do ____ - ___ & ___ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____ - ___ & ___"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do __ - Fandom stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""__ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos do ____ stories get on average?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>   
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
?story golem:fandom ""____"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{}]	0	1	1	Failed NER		
229	229	en	How many Kudos do Right Or Wrong - Fandom stories get on average?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Right Or Wrong - Fandom"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'39')}]	229	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos do [[fandom]] stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do __ - Fandom stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""__ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do Evak - Fandom stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Evak - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos do Right Or Wrong - Fandom stories get on average?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
?story golem:fandom ""Right Or Wrong - Fandom"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'39')}]	1	0	0			
230	230	en	How many Kudos do Digimon Adventure Zero Two stories get on average?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Digimon Adventure Zero Two"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'32.536974789915966')}]	230	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos do ____ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do [[fandom]] stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do __________/JoJo no kimyou na bouken/JOJO's Bizarre Adventure stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""__________/JoJo no kimyou na bouken/JOJO's Bizarre Adventure"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos do Digimon Adventure Zero Two stories get on average?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
    ?story golem:fandom ""Digimon Adventure Zero Two"" . 
    ?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'32.536974789915966')}]	1	0	0			
231	231	en	How many Kudos do Mr.Vampire (1985) stories get on average?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Mr.Vampire (1985)"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'5')}]	231	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos do [[fandom]] stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do Evak - Fandom stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Evak - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do Digimon Adventure Zero Two stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Digimon Adventure Zero Two"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos do Mr.Vampire (1985) stories get on average?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
?story golem:publisher ""Mr.Vampire (1985)"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{}]	0	1	1	Wrong predicate	Wrong choice	
232	232	en	How many Kudos do __________/JoJo no kimyou na bouken/JOJO's Bizarre Adventure stories get on average?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""__________/JoJo no kimyou na bouken/JOJO's Bizarre Adventure"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'57')}]	232	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos do ____ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do ____ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do ____ - ___ & ___ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____ - ___ & ___"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos do __________/JoJo no kimyou na bouken/JOJO's Bizarre Adventure stories get on average?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
?story golem:fandom ""__________/JoJo no kimyou na bouken/JOJO's Bizarre Adventure"" . 
?story golem:numberOfKudos ?kudos . }
"	[{'average_number_of_kudos': Value(typed-literal:'57')}]	1	0	0			
233	233	en	How many Kudos do Virgin Territory (2007) stories get on average?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Virgin Territory (2007)"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'27')}]	233	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos do Evak - Fandom stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Evak - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do [[fandom]] stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do ____ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos do Virgin Territory (2007) stories get on average?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
    ?story golem:publisher ""Virgin Territory (2007)"" . 
    ?story golem:numberOfKudos ?kudos . 
}
"	[{}]	0	1	1	Wrong predicate	Wrong choice	
234	234	en	How many Kudos do Evak - Fandom stories get on average?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Evak - Fandom"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'79.333333333333333')}]	234	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many Kudos do [[fandom]] stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do __ - Fandom stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""__ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: How many Kudos do ____ stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: How many Kudos do Evak - Fandom stories get on average?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
?story golem:fandom ""Evak - Fandom"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'79.333333333333333')}]	1	0	0			
235	235	en	How many authors have uploaded a story?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?uploads) WHERE { ?story golem:author ?author . }	[{'uploads': Value(typed-literal:'1234209')}]	235	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are uploaded per year?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }
    </SPARQL>

    ###
    

    Question: How many [[fandom]] stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""[[fandom]]"" . }
    </SPARQL>

    ###
    

    Question: How many stories are there on Archive of Our Own?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:story_id ?id }
    </SPARQL>

    ###
    

Question: How many authors have uploaded a story?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT (COUNT(DISTINCT ?author) as ?authors) WHERE { 
  ?story golem:publisher ?author .
}
"	[{'authors': Value(typed-literal:'1')}]	0	1	1	Wrong predicate	Wrong choice	
236	236	en	How many stories have received no feedback?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?no_feedback_stories WHERE { ?story golem:numberOfComments ?comments . ?story golem:numberOfKudos ?kudos . FILTER(?comments=0 && ?kudos=0) }	[{'no_feedback_stories': Value(typed-literal:'401')}]	236	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How much feedback do stories usually get?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos AVG(?comments) AS ?average_number_of_comments WHERE { ?story golem:numberOfKudos ?kudos . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: How many GetBackers stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""GetBackers"" . }
    </SPARQL>

    ###
    

    Question: How many authors have uploaded a story?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?uploads) WHERE { ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: How many stories have received no feedback?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT (COUNT(DISTINCT ?story) as ?no_feedback_stories) WHERE { 
  ?story golem:numberOfKudos ?kudos . 
  FILTER(?kudos = 0) 
}
"	[{'no_feedback_stories': Value(typed-literal:'414')}]	0	1	1	Incomplete query	Underfull	
238	238	en	Who wrote Fancy Meeting You Here?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Fancy Meeting You Here"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000252993')}, {'author': Value(literal:'A000028635')}, {'author': Value(literal:'A000437185')}, {'author': Value(literal:'A000082825')}, {'author': Value(literal:'A000231996')}, {'author': Value(literal:'A000037742')}, {'author': Value(literal:'A000004581')}, {'author': Value(literal:'A000064918')}, {'author': Value(literal:'A000538970')}, {'author': Value(literal:'A000027995')}, {'author': Value(literal:'A000215322')}, {'author': Value(literal:'A000062982')}, {'author': Value(literal:'A000572310')}, {'author': Value(literal:'A000034643')}, {'author': Value(literal:'A000608920')}, {'author': Value(literal:'A000078918')}, {'author': Value(literal:'A000032450')}, {'author': Value(literal:'A000211313')}, {'author': Value(literal:'A000013779')}, {'author': Value(literal:'A000029513')}, {'author': Value(literal:'A000080024')}, {'author': Value(literal:'A000022591')}, {'author': Value(literal:'A000001488')}, {'author': Value(literal:'A000448253')}, {'author': Value(literal:'A000015283')}, {'author': Value(literal:'A000000253')}, {'author': Value(literal:'A000794791')}, {'author': Value(literal:'A001174435')}, {'author': Value(literal:'A000288444')}, {'author': Value(literal:'A000083737')}, {'author': Value(literal:'A000739840')}, {'author': Value(literal:'A000944447')}, {'author': Value(literal:'A000000028')}, {'author': Value(literal:'A000000718')}, {'author': Value(literal:'A000005170')}, {'author': Value(literal:'A000053713')}, {'author': Value(literal:'A000697408')}, {'author': Value(literal:'A000001270')}, {'author': Value(literal:'A000957929')}, {'author': Value(literal:'A000006876')}, {'author': Value(literal:'A000000623')}, {'author': Value(literal:'A000005429')}, {'author': Value(literal:'A000994801')}, {'author': Value(literal:'A001096980')}, {'author': Value(literal:'A000029549')}, {'author': Value(literal:'A000051202')}, {'author': Value(literal:'A000041448')}, {'author': Value(literal:'A000036794')}, {'author': Value(literal:'A000034855')}, {'author': Value(literal:'A000215860')}, {'author': Value(literal:'A000014409')}, {'author': Value(literal:'A001045027')}]	238	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote Hold My Hand?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Hold My Hand"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who wrote [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of Watching Over You?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Watching Over You"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who wrote Fancy Meeting You Here?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Fancy Meeting You Here"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000252993')}, {'author': Value(literal:'A000028635')}, {'author': Value(literal:'A000437185')}, {'author': Value(literal:'A000082825')}, {'author': Value(literal:'A000231996')}, {'author': Value(literal:'A000037742')}, {'author': Value(literal:'A000004581')}, {'author': Value(literal:'A000064918')}, {'author': Value(literal:'A000538970')}, {'author': Value(literal:'A000027995')}, {'author': Value(literal:'A000215322')}, {'author': Value(literal:'A000062982')}, {'author': Value(literal:'A000572310')}, {'author': Value(literal:'A000034643')}, {'author': Value(literal:'A000608920')}, {'author': Value(literal:'A000078918')}, {'author': Value(literal:'A000032450')}, {'author': Value(literal:'A000211313')}, {'author': Value(literal:'A000013779')}, {'author': Value(literal:'A000029513')}, {'author': Value(literal:'A000080024')}, {'author': Value(literal:'A000022591')}, {'author': Value(literal:'A000001488')}, {'author': Value(literal:'A000448253')}, {'author': Value(literal:'A000015283')}, {'author': Value(literal:'A000000253')}, {'author': Value(literal:'A000794791')}, {'author': Value(literal:'A001174435')}, {'author': Value(literal:'A000288444')}, {'author': Value(literal:'A000083737')}, {'author': Value(literal:'A000739840')}, {'author': Value(literal:'A000944447')}, {'author': Value(literal:'A000000028')}, {'author': Value(literal:'A000000718')}, {'author': Value(literal:'A000005170')}, {'author': Value(literal:'A000053713')}, {'author': Value(literal:'A000697408')}, {'author': Value(literal:'A000001270')}, {'author': Value(literal:'A000957929')}, {'author': Value(literal:'A000006876')}, {'author': Value(literal:'A000000623')}, {'author': Value(literal:'A000005429')}, {'author': Value(literal:'A000994801')}, {'author': Value(literal:'A001096980')}, {'author': Value(literal:'A000029549')}, {'author': Value(literal:'A000051202')}, {'author': Value(literal:'A000041448')}, {'author': Value(literal:'A000036794')}, {'author': Value(literal:'A000034855')}, {'author': Value(literal:'A000215860')}, {'author': Value(literal:'A000014409')}, {'author': Value(literal:'A001045027')}]	1	0	0			
239	239	en	Who wrote Luna and the Milkshakes?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Luna and the Milkshakes"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000032985')}]	239	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who is the author of The First Moon?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The First Moon"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who wrote The Misadventures of a Muggleborn Maid?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Misadventures of a Muggleborn Maid"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: When was It Takes A Little Mistletoe published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""It Takes A Little Mistletoe"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: Who wrote Luna and the Milkshakes?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Luna and the Milkshakes"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000032985')}]	1	0	0			
240	240	en	Who wrote The Misadventures of a Muggleborn Maid?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Misadventures of a Muggleborn Maid"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000051273')}]	240	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who is the author of Lily's Masquerade?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Lily's Masquerade"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who wrote Harry Potter and the Rose's Thorns?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Harry Potter and the Rose's Thorns"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who wrote The Misadventures of a Muggleborn Maid?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""The Misadventures of a Muggleborn Maid"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000051273')}]	1	0	0			
241	241	en	Who wrote Big Time Wizards?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Big Time Wizards"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000039345')}]	241	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote Harry Potter and the Rose's Thorns?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Harry Potter and the Rose's Thorns"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as Spell cast to help populate the wizarding world?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Spell cast to help populate the wizarding world"" . }
    </SPARQL>

    ###
    

    Question: Who wrote [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who wrote Big Time Wizards?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Big Time Wizards"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000039345')}]	1	0	0			
242	242	en	Who wrote Harry Potter and the Rose's Thorns?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Harry Potter and the Rose's Thorns"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000294700')}]	242	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote The Misadventures of a Muggleborn Maid?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Misadventures of a Muggleborn Maid"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of Lily's Masquerade?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Lily's Masquerade"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of 10 Things Draco Hates About Harry Potter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""10 Things Draco Hates About Harry Potter"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who wrote Harry Potter and the Rose's Thorns?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Harry Potter and the Rose's Thorns"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000294700')}]	1	0	0			
243	243	en	Who wrote Hold My Hand?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Hold My Hand"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000000893')}, {'author': Value(literal:'A000049895')}, {'author': Value(literal:'A000000105')}, {'author': Value(literal:'A000036758')}, {'author': Value(literal:'A000349105')}, {'author': Value(literal:'A000266390')}, {'author': Value(literal:'A000435580')}, {'author': Value(literal:'A000301731')}, {'author': Value(literal:'A000273610')}, {'author': Value(literal:'A000218338')}, {'author': Value(literal:'A000068126')}, {'author': Value(literal:'A000026864')}, {'author': Value(literal:'A000091551')}, {'author': Value(literal:'A000191802')}, {'author': Value(literal:'A000002059')}, {'author': Value(literal:'A000041267')}, {'author': Value(literal:'A000269089')}, {'author': Value(literal:'A000000198')}, {'author': Value(literal:'A000217420')}, {'author': Value(literal:'A000022423')}, {'author': Value(literal:'A000331922')}, {'author': Value(literal:'A000099432')}, {'author': Value(literal:'A000008060')}, {'author': Value(literal:'A000107056')}, {'author': Value(literal:'A000479700')}, {'author': Value(literal:'A001124715')}, {'author': Value(literal:'A000205041')}, {'author': Value(literal:'A000603220')}, {'author': Value(literal:'A000208139')}, {'author': Value(literal:'A000390293')}, {'author': Value(literal:'A001116279')}, {'author': Value(literal:'A001182422')}, {'author': Value(literal:'A000000991')}, {'author': Value(literal:'A000064152')}, {'author': Value(literal:'A000006186')}, {'author': Value(literal:'A000229523')}, {'author': Value(literal:'A000016302')}, {'author': Value(literal:'A000547422')}, {'author': Value(literal:'A000000352')}, {'author': Value(literal:'A000260924')}, {'author': Value(literal:'A000003358')}, {'author': Value(literal:'A000015047')}, {'author': Value(literal:'A000002041')}, {'author': Value(literal:'A000646879')}, {'author': Value(literal:'A000497160')}, {'author': Value(literal:'A000492176')}, {'author': Value(literal:'A000448343')}, {'author': Value(literal:'A000024615')}, {'author': Value(literal:'A001175422')}, {'author': Value(literal:'A001106749')}, {'author': Value(literal:'A001175885')}, {'author': Value(literal:'A000010021')}, {'author': Value(literal:'A000038387')}, {'author': Value(literal:'A000218985')}, {'author': Value(literal:'A000492900')}, {'author': Value(literal:'A000441363')}, {'author': Value(literal:'A000623133')}, {'author': Value(literal:'A000001360')}, {'author': Value(literal:'A000084865')}, {'author': Value(literal:'A000001464')}, {'author': Value(literal:'A000004498')}, {'author': Value(literal:'A000179438')}, {'author': Value(literal:'A000008393')}, {'author': Value(literal:'A000080066')}, {'author': Value(literal:'A000010232')}, {'author': Value(literal:'A000108483')}, {'author': Value(literal:'A000000952')}, {'author': Value(literal:'A000009779')}, {'author': Value(literal:'A000003746')}, {'author': Value(literal:'A001190316')}, {'author': Value(literal:'A001137150')}, {'author': Value(literal:'A001176013')}, {'author': Value(literal:'A001195099')}, {'author': Value(literal:'A001106471')}, {'author': Value(literal:'A001177854')}, {'author': Value(literal:'A000076615')}, {'author': Value(literal:'A000110836')}, {'author': Value(literal:'A000102291')}, {'author': Value(literal:'A000699208')}, {'author': Value(literal:'A000183792')}, {'author': Value(literal:'A000086967')}, {'author': Value(literal:'A000039853')}, {'author': Value(literal:'A000005275')}, {'author': Value(literal:'A000019667')}, {'author': Value(literal:'A000685039')}, {'author': Value(literal:'A000008567')}, {'author': Value(literal:'A000390146')}, {'author': Value(literal:'A000138797')}, {'author': Value(literal:'A000003787')}, {'author': Value(literal:'A000001289')}, {'author': Value(literal:'A000093328')}, {'author': Value(literal:'A000241335')}, {'author': Value(literal:'A000244140')}, {'author': Value(literal:'A000087293')}, {'author': Value(literal:'A000000000')}, {'author': Value(literal:'A000405552')}, {'author': Value(literal:'A000681617')}, {'author': Value(literal:'A000013583')}, {'author': Value(literal:'A000778453')}, {'author': Value(literal:'A000663550')}, {'author': Value(literal:'A000003023')}, {'author': Value(literal:'A000089365')}, {'author': Value(literal:'A000010576')}, {'author': Value(literal:'A000082611')}, {'author': Value(literal:'A000013011')}, {'author': Value(literal:'A000002125')}, {'author': Value(literal:'A000724347')}, {'author': Value(literal:'A000375656')}, {'author': Value(literal:'A000870268')}, {'author': Value(literal:'A000087039')}, {'author': Value(literal:'A000000547')}, {'author': Value(literal:'A000008076')}, {'author': Value(literal:'A000006200')}, {'author': Value(literal:'A000668666')}, {'author': Value(literal:'A000008228')}, {'author': Value(literal:'A000122324')}, {'author': Value(literal:'A000035603')}, {'author': Value(literal:'A000006677')}, {'author': Value(literal:'A000050702')}, {'author': Value(literal:'A000107779')}, {'author': Value(literal:'A000002667')}, {'author': Value(literal:'A000088072')}, {'author': Value(literal:'A001025816')}, {'author': Value(literal:'A000784388')}, {'author': Value(literal:'A000000268')}, {'author': Value(literal:'A000018518')}, {'author': Value(literal:'A000046262')}, {'author': Value(literal:'A000170063')}, {'author': Value(literal:'A001010594')}, {'author': Value(literal:'A000948017')}, {'author': Value(literal:'A000005962')}, {'author': Value(literal:'A001114641')}, {'author': Value(literal:'A000000827')}, {'author': Value(literal:'A000282810')}, {'author': Value(literal:'A000001168')}, {'author': Value(literal:'A000750118')}, {'author': Value(literal:'A000001570')}, {'author': Value(literal:'A000075575')}, {'author': Value(literal:'A000103048')}, {'author': Value(literal:'A000000970')}, {'author': Value(literal:'A000633027')}, {'author': Value(literal:'A000099587')}, {'author': Value(literal:'A000008582')}, {'author': Value(literal:'A000575872')}, {'author': Value(literal:'A000001085')}, {'author': Value(literal:'A000543824')}, {'author': Value(literal:'A000080527')}, {'author': Value(literal:'A000013016')}, {'author': Value(literal:'A000000521')}, {'author': Value(literal:'A001088251')}, {'author': Value(literal:'A001188758')}, {'author': Value(literal:'A000049869')}, {'author': Value(literal:'A000019831')}, {'author': Value(literal:'A000259458')}, {'author': Value(literal:'A000302192')}, {'author': Value(literal:'A000916250')}, {'author': Value(literal:'A000924101')}, {'author': Value(literal:'A000023188')}, {'author': Value(literal:'A000094649')}, {'author': Value(literal:'A000348566')}, {'author': Value(literal:'A000086540')}, {'author': Value(literal:'A000616408')}, {'author': Value(literal:'A000828442')}, {'author': Value(literal:'A000005081')}, {'author': Value(literal:'A000829991')}, {'author': Value(literal:'A000926654')}, {'author': Value(literal:'A000801247')}, {'author': Value(literal:'A000040528')}, {'author': Value(literal:'A001121937')}, {'author': Value(literal:'A001114728')}, {'author': Value(literal:'A001161286')}, {'author': Value(literal:'A000067558')}, {'author': Value(literal:'A000022714')}, {'author': Value(literal:'A000103070')}, {'author': Value(literal:'A000947520')}, {'author': Value(literal:'A000262926')}, {'author': Value(literal:'A000003993')}, {'author': Value(literal:'A000002860')}, {'author': Value(literal:'A000966525')}, {'author': Value(literal:'A000006790')}, {'author': Value(literal:'A000002488')}, {'author': Value(literal:'A000904028')}, {'author': Value(literal:'A000098840')}, {'author': Value(literal:'A000000704')}, {'author': Value(literal:'A000018489')}, {'author': Value(literal:'A000422517')}, {'author': Value(literal:'A000105108')}, {'author': Value(literal:'A000484511')}, {'author': Value(literal:'A000616958')}, {'author': Value(literal:'A000169587')}, {'author': Value(literal:'A000103051')}, {'author': Value(literal:'A000077929')}, {'author': Value(literal:'A000000377')}, {'author': Value(literal:'A000123146')}, {'author': Value(literal:'A001028162')}, {'author': Value(literal:'A000120462')}, {'author': Value(literal:'A000034988')}, {'author': Value(literal:'A000002942')}, {'author': Value(literal:'A000009089')}, {'author': Value(literal:'A000895897')}, {'author': Value(literal:'A000068138')}, {'author': Value(literal:'A000045989')}, {'author': Value(literal:'A000659007')}, {'author': Value(literal:'A001218268')}, {'author': Value(literal:'A000001219')}, {'author': Value(literal:'A000893584')}, {'author': Value(literal:'A001043712')}, {'author': Value(literal:'A000040333')}, {'author': Value(literal:'A000163557')}, {'author': Value(literal:'A000297359')}, {'author': Value(literal:'A000024380')}, {'author': Value(literal:'A000164349')}, {'author': Value(literal:'A000028015')}, {'author': Value(literal:'A000631967')}, {'author': Value(literal:'A000028617')}, {'author': Value(literal:'A000660065')}, {'author': Value(literal:'A001175965')}, {'author': Value(literal:'A000016545')}, {'author': Value(literal:'A000060934')}, {'author': Value(literal:'A000051051')}, {'author': Value(literal:'A000238491')}, {'author': Value(literal:'A000064381')}, {'author': Value(literal:'A000012881')}, {'author': Value(literal:'A000045462')}]	243	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote Fancy Meeting You Here?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Fancy Meeting You Here"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who wrote [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who wrote A Simple Twist?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""A Simple Twist"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who wrote Hold My Hand?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""Hold My Hand"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000000893')}, {'author': Value(literal:'A000049895')}, {'author': Value(literal:'A000000105')}, {'author': Value(literal:'A000036758')}, {'author': Value(literal:'A000349105')}, {'author': Value(literal:'A000266390')}, {'author': Value(literal:'A000435580')}, {'author': Value(literal:'A000301731')}, {'author': Value(literal:'A000273610')}, {'author': Value(literal:'A000218338')}, {'author': Value(literal:'A000068126')}, {'author': Value(literal:'A000026864')}, {'author': Value(literal:'A000091551')}, {'author': Value(literal:'A000191802')}, {'author': Value(literal:'A000002059')}, {'author': Value(literal:'A000041267')}, {'author': Value(literal:'A000269089')}, {'author': Value(literal:'A000000198')}, {'author': Value(literal:'A000217420')}, {'author': Value(literal:'A000022423')}, {'author': Value(literal:'A000331922')}, {'author': Value(literal:'A000099432')}, {'author': Value(literal:'A000008060')}, {'author': Value(literal:'A000107056')}, {'author': Value(literal:'A000479700')}, {'author': Value(literal:'A001124715')}, {'author': Value(literal:'A000205041')}, {'author': Value(literal:'A000603220')}, {'author': Value(literal:'A000208139')}, {'author': Value(literal:'A000390293')}, {'author': Value(literal:'A001116279')}, {'author': Value(literal:'A001182422')}, {'author': Value(literal:'A000000991')}, {'author': Value(literal:'A000064152')}, {'author': Value(literal:'A000006186')}, {'author': Value(literal:'A000229523')}, {'author': Value(literal:'A000016302')}, {'author': Value(literal:'A000547422')}, {'author': Value(literal:'A000000352')}, {'author': Value(literal:'A000260924')}, {'author': Value(literal:'A000003358')}, {'author': Value(literal:'A000015047')}, {'author': Value(literal:'A000002041')}, {'author': Value(literal:'A000646879')}, {'author': Value(literal:'A000497160')}, {'author': Value(literal:'A000492176')}, {'author': Value(literal:'A000448343')}, {'author': Value(literal:'A000024615')}, {'author': Value(literal:'A001175422')}, {'author': Value(literal:'A001106749')}, {'author': Value(literal:'A001175885')}, {'author': Value(literal:'A000010021')}, {'author': Value(literal:'A000038387')}, {'author': Value(literal:'A000218985')}, {'author': Value(literal:'A000492900')}, {'author': Value(literal:'A000441363')}, {'author': Value(literal:'A000623133')}, {'author': Value(literal:'A000001360')}, {'author': Value(literal:'A000084865')}, {'author': Value(literal:'A000001464')}, {'author': Value(literal:'A000004498')}, {'author': Value(literal:'A000179438')}, {'author': Value(literal:'A000008393')}, {'author': Value(literal:'A000080066')}, {'author': Value(literal:'A000010232')}, {'author': Value(literal:'A000108483')}, {'author': Value(literal:'A000000952')}, {'author': Value(literal:'A000009779')}, {'author': Value(literal:'A000003746')}, {'author': Value(literal:'A001190316')}, {'author': Value(literal:'A001137150')}, {'author': Value(literal:'A001176013')}, {'author': Value(literal:'A001195099')}, {'author': Value(literal:'A001106471')}, {'author': Value(literal:'A001177854')}, {'author': Value(literal:'A000076615')}, {'author': Value(literal:'A000110836')}, {'author': Value(literal:'A000102291')}, {'author': Value(literal:'A000699208')}, {'author': Value(literal:'A000183792')}, {'author': Value(literal:'A000086967')}, {'author': Value(literal:'A000039853')}, {'author': Value(literal:'A000005275')}, {'author': Value(literal:'A000019667')}, {'author': Value(literal:'A000685039')}, {'author': Value(literal:'A000008567')}, {'author': Value(literal:'A000390146')}, {'author': Value(literal:'A000138797')}, {'author': Value(literal:'A000003787')}, {'author': Value(literal:'A000001289')}, {'author': Value(literal:'A000093328')}, {'author': Value(literal:'A000241335')}, {'author': Value(literal:'A000244140')}, {'author': Value(literal:'A000087293')}, {'author': Value(literal:'A000000000')}, {'author': Value(literal:'A000405552')}, {'author': Value(literal:'A000681617')}, {'author': Value(literal:'A000013583')}, {'author': Value(literal:'A000778453')}, {'author': Value(literal:'A000663550')}, {'author': Value(literal:'A000003023')}, {'author': Value(literal:'A000089365')}, {'author': Value(literal:'A000010576')}, {'author': Value(literal:'A000082611')}, {'author': Value(literal:'A000013011')}, {'author': Value(literal:'A000002125')}, {'author': Value(literal:'A000724347')}, {'author': Value(literal:'A000375656')}, {'author': Value(literal:'A000870268')}, {'author': Value(literal:'A000087039')}, {'author': Value(literal:'A000000547')}, {'author': Value(literal:'A000008076')}, {'author': Value(literal:'A000006200')}, {'author': Value(literal:'A000668666')}, {'author': Value(literal:'A000008228')}, {'author': Value(literal:'A000122324')}, {'author': Value(literal:'A000035603')}, {'author': Value(literal:'A000006677')}, {'author': Value(literal:'A000050702')}, {'author': Value(literal:'A000107779')}, {'author': Value(literal:'A000002667')}, {'author': Value(literal:'A000088072')}, {'author': Value(literal:'A001025816')}, {'author': Value(literal:'A000784388')}, {'author': Value(literal:'A000000268')}, {'author': Value(literal:'A000018518')}, {'author': Value(literal:'A000046262')}, {'author': Value(literal:'A000170063')}, {'author': Value(literal:'A001010594')}, {'author': Value(literal:'A000948017')}, {'author': Value(literal:'A000005962')}, {'author': Value(literal:'A001114641')}, {'author': Value(literal:'A000000827')}, {'author': Value(literal:'A000282810')}, {'author': Value(literal:'A000001168')}, {'author': Value(literal:'A000750118')}, {'author': Value(literal:'A000001570')}, {'author': Value(literal:'A000075575')}, {'author': Value(literal:'A000103048')}, {'author': Value(literal:'A000000970')}, {'author': Value(literal:'A000633027')}, {'author': Value(literal:'A000099587')}, {'author': Value(literal:'A000008582')}, {'author': Value(literal:'A000575872')}, {'author': Value(literal:'A000001085')}, {'author': Value(literal:'A000543824')}, {'author': Value(literal:'A000080527')}, {'author': Value(literal:'A000013016')}, {'author': Value(literal:'A000000521')}, {'author': Value(literal:'A001088251')}, {'author': Value(literal:'A001188758')}, {'author': Value(literal:'A000049869')}, {'author': Value(literal:'A000019831')}, {'author': Value(literal:'A000259458')}, {'author': Value(literal:'A000302192')}, {'author': Value(literal:'A000916250')}, {'author': Value(literal:'A000924101')}, {'author': Value(literal:'A000023188')}, {'author': Value(literal:'A000094649')}, {'author': Value(literal:'A000348566')}, {'author': Value(literal:'A000086540')}, {'author': Value(literal:'A000616408')}, {'author': Value(literal:'A000828442')}, {'author': Value(literal:'A000005081')}, {'author': Value(literal:'A000829991')}, {'author': Value(literal:'A000926654')}, {'author': Value(literal:'A000801247')}, {'author': Value(literal:'A000040528')}, {'author': Value(literal:'A001121937')}, {'author': Value(literal:'A001114728')}, {'author': Value(literal:'A001161286')}, {'author': Value(literal:'A000067558')}, {'author': Value(literal:'A000022714')}, {'author': Value(literal:'A000103070')}, {'author': Value(literal:'A000947520')}, {'author': Value(literal:'A000262926')}, {'author': Value(literal:'A000003993')}, {'author': Value(literal:'A000002860')}, {'author': Value(literal:'A000966525')}, {'author': Value(literal:'A000006790')}, {'author': Value(literal:'A000002488')}, {'author': Value(literal:'A000904028')}, {'author': Value(literal:'A000098840')}, {'author': Value(literal:'A000000704')}, {'author': Value(literal:'A000018489')}, {'author': Value(literal:'A000422517')}, {'author': Value(literal:'A000105108')}, {'author': Value(literal:'A000484511')}, {'author': Value(literal:'A000616958')}, {'author': Value(literal:'A000169587')}, {'author': Value(literal:'A000103051')}, {'author': Value(literal:'A000077929')}, {'author': Value(literal:'A000000377')}, {'author': Value(literal:'A000123146')}, {'author': Value(literal:'A001028162')}, {'author': Value(literal:'A000120462')}, {'author': Value(literal:'A000034988')}, {'author': Value(literal:'A000002942')}, {'author': Value(literal:'A000009089')}, {'author': Value(literal:'A000895897')}, {'author': Value(literal:'A000068138')}, {'author': Value(literal:'A000045989')}, {'author': Value(literal:'A000659007')}, {'author': Value(literal:'A001218268')}, {'author': Value(literal:'A000001219')}, {'author': Value(literal:'A000893584')}, {'author': Value(literal:'A001043712')}, {'author': Value(literal:'A000040333')}, {'author': Value(literal:'A000163557')}, {'author': Value(literal:'A000297359')}, {'author': Value(literal:'A000024380')}, {'author': Value(literal:'A000164349')}, {'author': Value(literal:'A000028015')}, {'author': Value(literal:'A000631967')}, {'author': Value(literal:'A000028617')}, {'author': Value(literal:'A000660065')}, {'author': Value(literal:'A001175965')}, {'author': Value(literal:'A000016545')}, {'author': Value(literal:'A000060934')}, {'author': Value(literal:'A000051051')}, {'author': Value(literal:'A000238491')}, {'author': Value(literal:'A000064381')}, {'author': Value(literal:'A000012881')}, {'author': Value(literal:'A000045462')}]	1	0	0			
244	244	en	Who wrote The Sultan's Slave?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Sultan's Slave"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000000638')}]	244	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote The Misadventures of a Muggleborn Maid?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Misadventures of a Muggleborn Maid"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who wrote [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who wrote The Sultan's Slave?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE { 
?story golem:title ""The Sultan's Slave"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000000638')}]	1	0	0			
245	245	en	Who wrote A Simple Twist?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""A Simple Twist"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000002759')}, {'author': Value(literal:'A000123726')}]	245	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who wrote The Misadventures of a Muggleborn Maid?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Misadventures of a Muggleborn Maid"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who wrote The Wheezes of Christmas Present?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Wheezes of Christmas Present"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who wrote A Simple Twist?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""A Simple Twist"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000002759')}, {'author': Value(literal:'A000123726')}]	1	0	0			
246	246	en	Who wrote The Wheezes of Christmas Present?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Wheezes of Christmas Present"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000071148')}]	246	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who wrote [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: When was Codeword: Christmas Socks published?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Codeword: Christmas Socks"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: Who wrote A Simple Twist?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""A Simple Twist"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who wrote The Wheezes of Christmas Present?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""The Wheezes of Christmas Present"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000071148')}]	1	0	0			
247	247	en	Who wrote Anatomy of The Haunted?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Anatomy of The Haunted"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000213485')}]	247	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Who is the author of A Sign from Beyond The Grave?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""A Sign from Beyond The Grave"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who is the author of [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: Who wrote The Misadventures of a Muggleborn Maid?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""The Misadventures of a Muggleborn Maid"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: Who wrote Anatomy of The Haunted?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Anatomy of The Haunted"" . 
?story golem:author ?author . }
"	[{'author': Value(literal:'A000213485')}]	1	0	0			
249	249	en	Show me summaries of Mr. Nobody (TV) stories	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""Mr. Nobody (TV)"" . ?story golem:summary ?summary . }"	"[{'summary': Value(literal:'“______________”____tag___')}, {'summary': Value(literal:'________________tag______')}, {'summary': Value(literal:'“_____________________”____tag______')}, {'summary': Value(literal:""Our stories will keep us alive. It's just a matter of time. ____tag___"")}, {'summary': Value(literal:'_________')}, {'summary': Value(literal:'______________________tag___')}, {'summary': Value(literal:'______________________________tag___')}, {'summary': Value(literal:'________________________tag___')}]"	249	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me summaries of New Blood (TV) stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""New Blood (TV)"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: What characters appear in No-One But You (Only The Good Die Young)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""No-One But You (Only The Good Die Young)"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: Show me summaries of Mr. Nobody (TV) stories

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?summary WHERE { 
  ?story golem:fandom ""Mr. Nobody (TV)"" . 
  ?story golem:summary ?summary . 
}
"	"[{'summary': Value(literal:'“______________”____tag___')}, {'summary': Value(literal:'________________tag______')}, {'summary': Value(literal:'“_____________________”____tag______')}, {'summary': Value(literal:""Our stories will keep us alive. It's just a matter of time. ____tag___"")}, {'summary': Value(literal:'_________')}, {'summary': Value(literal:'______________________tag___')}, {'summary': Value(literal:'______________________________tag___')}, {'summary': Value(literal:'________________________tag___')}]"	1	0	0			
250	250	en	Show me summaries of Pupa stories	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""Pupa"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'Sometimes, they say that learning the truth is painful. Ishida Naoki learnt this the hard way. But when curiosity strikes, he cannot help but to take notice of the flow of events unfolding in front of his eyes. However, maybe he has bitten off more than he can chew...? Originally posted on FFn on 27th July 2015')}]	250	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ___ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Show me summaries of Pupa stories

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
  ?story golem:fandom ""Pupa"" . 
  ?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'Sometimes, they say that learning the truth is painful. Ishida Naoki learnt this the hard way. But when curiosity strikes, he cannot help but to take notice of the flow of events unfolding in front of his eyes. However, maybe he has bitten off more than he can chew...? Originally posted on FFn on 27th July 2015')}]	1	0	0			
251	251	en	Show me summaries of _____ stories	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""_____"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'_______x___________x_____')}, {'summary': Value(literal:'____________________')}, {'summary': Value(literal:'________-______________________________rps________mv_______________________ __-______ __-________ __-______')}, {'summary': Value(literal:'_____________16______')}, {'summary': Value(literal:'_________')}, {'summary': Value(literal:'_____\u3000______ ______\u3000_____\u3000______')}, {'summary': Value(literal:'_____________________________________________________________________________________________________________________________________________________________')}, {'summary': Value(literal:'_________Lofter__________________Pixiv_____AO3______ _Pixiv_ID_momo____5609255______ _8_1______AO3_____________________________——_________________——________________________')}]	251	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ___ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Show me summaries of _____ stories

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
?story golem:fandom ""_____"" . 
?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'_______x___________x_____')}, {'summary': Value(literal:'____________________')}, {'summary': Value(literal:'________-______________________________rps________mv_______________________ __-______ __-________ __-______')}, {'summary': Value(literal:'_____________16______')}, {'summary': Value(literal:'_________')}, {'summary': Value(literal:'_____\u3000______ ______\u3000_____\u3000______')}, {'summary': Value(literal:'_____________________________________________________________________________________________________________________________________________________________')}, {'summary': Value(literal:'_________Lofter__________________Pixiv_____AO3______ _Pixiv_ID_momo____5609255______ _8_1______AO3_____________________________——_________________——________________________')}]	1	0	0			
252	252	en	Show me summaries of New Blood (TV) stories	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""New Blood (TV)"" . ?story golem:summary ?summary . }"	"[{'summary': Value(literal:'_________')}, {'summary': Value(literal:'________ ______ _ _______ ______ ___________ ______.')}, {'summary': Value(literal:'______ ____, _ ___ __ ______ _ ""_____ _______""')}, {'summary': Value(literal:'When Harrison arrives at Dexter’s cabin, he starts to feel some strange and frankly nasty “genetic sexual attraction” to his estranged son. After Harrison goes with Dexter instead of killing him when Dexter breaks out of jail, he doesn’t realize what he’s getting into. On the run with no one but each other, they inevitably begin a sexual relationship, which, for Harrison, is based moreso on the love he’d lost from his father after he’d been gone from his life for ten years. For Dexter, however, it was nothing but pure, unadulterated lust.')}, {'summary': Value(literal:'The death of a shady British business man on the A4 takes Semir Gerkhan, in the middle of a midlife crisis due to his impending 50th birthday, to London and to meet a young version of himself in the body of Iranian rooted London Officer Arrash Sayyad and his best friend Stefan Kowolski.')}, {'summary': Value(literal:'_______ 1. ____ 2. ______ 3. _________ 4. ______ 5. __ 6. ___ 7. ______ 8. _________ 9. _______ 10. ___ 11. ______ 12. ________ 13. ______ 14. __ 15. ______ 16. ________ 17. _______ 18. _____ 19. ____ 20. ____ 21. _____ 22. ______ 23. ________ 24. _________ 25. __ 26. _________ 27. ____ 28. _____ 29. _____ 30. ___')}, {'summary': Value(literal:'___________________________________ 1_________ 2______________ 3________ 4____________ 5_______________ 6________ 7________ 8_____ 9_____________ 10___________')}, {'summary': Value(literal:'basically the title + a case. crash is a metaphor.')}, {'summary': Value(literal:'_______________________________“__”___“_________”')}, {'summary': Value(literal:'Rash and Stefan find themselves in more strife post-case 3.  Because of course they do. Many thanks to mcicioni for introducing me to these two adorable prats, and to her and pantsaretherealheroes for beta suggestions.')}, {'summary': Value(literal:""Rash and Stefan's eternal search for a place to live continues.  Or starts again. For Heliophile as a (possibly belated) birthday present.  With thanks again for mcicioni for the beta, and for introducing me to these two adorable prats."")}, {'summary': Value(literal:""In which Stefan's prior renting experience comes in handy, and the Sayyad family are resourceful. With thanks as always to mcicioni to introducing me to these adorable prats, and for the beta help.  Special thanks to her workmate for help with the Farsi phrases."")}, {'summary': Value(literal:'It could be a fact that Rash was turning him into a romantic sap, but to be honest, Stefan didn’t care that much. He liked that. He liked everything about Rash and what was he making him feel. And that feeling, he thought, was called love. God, he was such a sap. He hated that. (He didn’t hate that at all.)')}, {'summary': Value(literal:'Rash and Stefan spend their first night in their new place.  Sleeping on one air mattress.  Yeah. With thanks as always to mcicioni for introducing me to these two adorable prats and for the beta work, and to pantsaretherealheroes and Heliophile for enouragment.')}, {'summary': Value(literal:""Rash and Stefan have a combination housefurnishing day and housefiring party, as Stefan's old flatmate Jan would put it. Thanks as always to mcicioni for introducing me to these two adorable prats and for the beta, to pantsaretherealheroes for listening to me blither all over Tumblr chat, and especially to Heliophile for the superb beta that helped me say what I meant to say, rather than what I typed.  *throws streamers*"")}, {'summary': Value(literal:""It takes extreme events for Rash and Stefan to finally Get A Clue. With thanks as always to mcicioni for introducing me to the two adorable prats, for SPAG and plot betaing and for challenging me on various plot points.  Thanks also to pantsaretherealheroes for listening to me geek out at her in the process of this novel and occasionally rant at her over a sticky bit via tumblr messenger.  And finally, the words 'thank you' are not enough for Heliophile for her Britpicking, help with various aspects of London lifestyle and copyediting the fic and somehow discerning what I wanted to say as opposed to what I'd actually written. ;) Dedicated to Tyhyin, who declared the series so far 'the slowest of slow boils' and wondered just how oblivious the two could be.  Challenge accepted.  :D"")}, {'summary': Value(literal:'In which various cases left open at the end of the last fic are investigated, and Rash and Stefan really start to settle into their new lives. With thanks as always to mcicioni for introducing me to these adorable prats, and for her beta work on early drafts of this fic as well as helping nursemaid the plot.  Thanks also to pantsaretherealheroes for the readover(s?) and listening to me curse the day I decided to write anything approaching casefic.  And as always, particular thanks to Heliophile for the Britpicking, copyediting words that slipped through and taking my occasionally - OK not so occasionally - tortured prose and transforming it into what I wanted to say as opposed to what I actually typed. :)')}, {'summary': Value(literal:'In which Rash and his cousin Rahim catch up over a beer or several and exchange news. With thanks as always to mcicioni for introducing me to these two adorable prats, and to her and pantsaretherealheroes for reading and making suggestions over the earlier draft.  Thanks also to pantsaretherealheroes for putting a face to Vihaan.  Thanks as always to Heliophile for the beta and Britpick.')}, {'summary': Value(literal:""Life was good. Life was simple. And then everything went to shit. ‘I’m getting married.’ (aka Stefan gets married and Rash really can't take it)"")}, {'summary': Value(literal:'Rash can’t leave Stefan alone for five minutes.')}, {'summary': Value(literal:""It's...weird. Living with Stefan."")}, {'summary': Value(literal:'Four times people thought that Rash and Stefan were dating and one time they realized it was a good idea.')}, {'summary': Value(literal:'On a case, Stefan’s baffling.')}, {'summary': Value(literal:'Rash is either going to teach Stefan how to handle a gun or die trying. Probably the latter.')}, {'summary': Value(literal:'Stefan is nothing if not predictable. And stubborn. And very, very annoying. And also, apparently, the guy Rash has fallen in love with.')}, {'summary': Value(literal:""This was a School project and now it's this"")}, {'summary': Value(literal:""With Stefan working long hours on things that he absolutely cannot talk about, Rash finds himself feeling lonely. The perfect solution: a couple of cats. He has listed the pros and cons, worked out a new budget, found their nearest vet and decided that he's ready. But Stefan, unaware of Rash's plans, has his own, decidedly canine, ideas."")}, {'summary': Value(literal:'Stefan has nice eyes and a lot of props, for some reason. (They move in together and Rash immediately develops a hideously inappropriate crush on his roommate.)')}, {'summary': Value(literal:""A simple tale of two bickering boys, who might just like each other rather more than they're letting on..."")}, {'summary': Value(literal:'The boys celebrate becoming home-owners and Rash tries to come to terms with his Massively Obvious Crush on Stefan.')}, {'summary': Value(literal:'The day after their swimming pool dive, Rash and Stefan are faced with an invoice for cleaning the pool of certain, er, items that dropped from their pockets - or, in other words, Rash gets a clue and Stefan is going to get what he deserves.')}, {'summary': Value(literal:""Moving in with Stefan, his mate, pal, buddy, friend, partner in crime (partner against crime?)- whatever, was definitely going to be an experience. Rash expected that. He just kind of didn't really expect to maybe end up developing a crush on him."")}, {'summary': Value(literal:'Rash and Stefan are completely clueless and Leila just wants to be left alone.')}, {'summary': Value(literal:'The morning after the house warming party.')}, {'summary': Value(literal:'Ever since he found out that Stefan essentially works as an undercover operative for the Serious Fraud Office a lot of the time, he’s been curious about how that works. As a police officer, it strikes him as something the SFO probably shouldn’t be doing. As a friend, it strikes him as pretty dangerous work for Stefan, considering who they’ve gone after and what the consequences have been so far. Arrash doesn’t fancy being shot at or trapped in a car about to burn to death ever again, thank you very much.')}, {'summary': Value(literal:'Stash cute fluff. Im sorry this is awful but i plan to improve from here. This is the first thing ive ever written, and corrections or improvements are always welcome!!')}, {'summary': Value(literal:""Three times Rash and Stefan didn't say 'I love you' and two times they did."")}, {'summary': Value(literal:'Requited Sexual Tension comes to a head.')}, {'summary': Value(literal:'Stefan gets hurt, Arrash gets worried.')}, {'summary': Value(literal:'Once again Stefan gets hurt, Arrash gets worried.')}, {'summary': Value(literal:'None')}, {'summary': Value(literal:'“Anyway is no problem, I have plan!” Stefan wonders if someone’s just turned the aircon on because he feels a distinct chill in the air all of a sudden. He has no idea what Jan’s planning but he suspects it isn’t good. And probably not 100% legal. “You do anything and I will stab you. In the throat. With a biro. And Rash’ll have to help me hide your body and it’ll be super unromantic so you’ll have doubly ruined my chances but at least they’ll never find your traitorous corpse.” The gang play a game of Never Have I Ever and Stefan reveals more than he means too.')}, {'summary': Value(literal:""Was this little plan ridiculous? Yes, of course. Was it badly thought-out and likely to end in tears? Absolutely, without a doubt. And was Arrash going to do it anyway? Yes. Yes, he was. _________________________________________________________________________________ Stefan asks Arrash to show him his flirting moves, and Arrash knows it's a bad idea - but he can't help going along with it anyway."")}, {'summary': Value(literal:'After three hours of hiding from some of his mother’s friends and downing almost four beers Rash was staring at Stefan and Leila and convincing himself that his crush was absolutely harmless. It would go away soon and he would be able to not imagine... things. Anyway, that crush was little. So, so tiny. His heart just always skipped a bit when Stefan was entering the room. And he wanted to sit with him on a couch and just look at the rain outside. And... okay, fuck, maybe it wasn’t that little. But what choice did he have?')}, {'summary': Value(literal:'Stefan really likes sharing a flat with Rash.')}, {'summary': Value(literal:""As Stefan and Rash are walking back after 'visiting' Daniel Lorca's flat, Stefan brings up an awkward topic of conversation, and Rash makes something of it."")}, {'summary': Value(literal:'where Stefan is the one stupidly in love. Ha, take that .')}, {'summary': Value(literal:'Arrash is investigating a case, Stefan is also investigating the same people. Stefan gets kidnapped and tortured. Arrash gets worried and angry.')}, {'summary': Value(literal:'""What is the most efficient way to passive-aggresively say \'fuck you\' in flowers?"" Stefan couldn\'t contain the burst of laughter that emitted from him. The man in question had slapped down £20 on the counter and was looking at him expectantly, ""Well?"" The florist!Stefan that clearly you all want.')}, {'summary': Value(literal:'Stefan gets tangled up in yet another gang that now want him dead. Stef and Rash need to work together. (woo more stash)')}, {'summary': Value(literal:""This fic picks up after series one in Rash and Stefan's flat. Stefan comes home in a crop top and booty shorts, but it isn't the outfit which surprises Rash. Stefan is behaving out of character and Rash is a detective. He works it out. Awkward British comfort ensues."")}, {'summary': Value(literal:'Rash was slowly but surely starting to lose count of the amount of times he found himself on the wrong end of a gun. It felt significant to note these types of life-threatening situations had never occurred before meeting, living with, and occasionally, teaming up with, Stefan Kowolski. Therefore, Rash could only come to the conclusion that out of the two of them, Stefan was the trouble magnet.')}, {'summary': Value(literal:'Time stretched on endlessly in the dark basement. Rash had no idea what time it was, nor how long he had been there, but it had to have been a day already. The pain had become a constant companion. He was a dead man, he knew that. Rash gets abducted on a case. The aftermath proves hard to bear.')}, {'summary': Value(literal:'Porn with feelings.')}, {'summary': Value(literal:""Arrash meets Gulliver, and he's not a forgiving man."")}, {'summary': Value(literal:""Rash is behaving rather strangely, and Stefan is 'mildly' concerned."")}, {'summary': Value(literal:'Rash, Stefan and a Netflix argument that ends well...')}, {'summary': Value(literal:""Rash realises he's the worst detective ever."")}, {'summary': Value(literal:'___ _ ______ ______ _ I spy with my little eye')}, {'summary': Value(literal:'_________ ____ _____ _______.')}, {'summary': Value(literal:'___ ____, _____ ___ _ ______ __ _______ «_____» _ ___ ____, _____ __________ _ _____.')}, {'summary': Value(literal:'___ __ ________ _ ____, _ _______ _________ _____ _____ ________ ________, _, ________, _______ ___-___ __________ ______.')}, {'summary': Value(literal:'_ ____ ____ ___ ___ _________... _____.')}, {'summary': Value(literal:'___ _____ _________ __________ _______, __ _____ __ _______')}, {'summary': Value(literal:'___________ _____, ______ ___ ___ __ ___ ___')}]"	252	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me summaries of DC vs. Vampires stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""DC vs. Vampires"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of Mr. Nobody (TV) stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""Mr. Nobody (TV)"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Show me summaries of New Blood (TV) stories

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
  ?story golem:fandom ""New Blood (TV)"" . 
  ?story golem:summary ?summary . 
}
"	"[{'summary': Value(literal:'_________')}, {'summary': Value(literal:'________ ______ _ _______ ______ ___________ ______.')}, {'summary': Value(literal:'______ ____, _ ___ __ ______ _ ""_____ _______""')}, {'summary': Value(literal:'When Harrison arrives at Dexter’s cabin, he starts to feel some strange and frankly nasty “genetic sexual attraction” to his estranged son. After Harrison goes with Dexter instead of killing him when Dexter breaks out of jail, he doesn’t realize what he’s getting into. On the run with no one but each other, they inevitably begin a sexual relationship, which, for Harrison, is based moreso on the love he’d lost from his father after he’d been gone from his life for ten years. For Dexter, however, it was nothing but pure, unadulterated lust.')}, {'summary': Value(literal:'The death of a shady British business man on the A4 takes Semir Gerkhan, in the middle of a midlife crisis due to his impending 50th birthday, to London and to meet a young version of himself in the body of Iranian rooted London Officer Arrash Sayyad and his best friend Stefan Kowolski.')}, {'summary': Value(literal:'_______ 1. ____ 2. ______ 3. _________ 4. ______ 5. __ 6. ___ 7. ______ 8. _________ 9. _______ 10. ___ 11. ______ 12. ________ 13. ______ 14. __ 15. ______ 16. ________ 17. _______ 18. _____ 19. ____ 20. ____ 21. _____ 22. ______ 23. ________ 24. _________ 25. __ 26. _________ 27. ____ 28. _____ 29. _____ 30. ___')}, {'summary': Value(literal:'___________________________________ 1_________ 2______________ 3________ 4____________ 5_______________ 6________ 7________ 8_____ 9_____________ 10___________')}, {'summary': Value(literal:'basically the title + a case. crash is a metaphor.')}, {'summary': Value(literal:'_______________________________“__”___“_________”')}, {'summary': Value(literal:'Rash and Stefan find themselves in more strife post-case 3.  Because of course they do. Many thanks to mcicioni for introducing me to these two adorable prats, and to her and pantsaretherealheroes for beta suggestions.')}, {'summary': Value(literal:""Rash and Stefan's eternal search for a place to live continues.  Or starts again. For Heliophile as a (possibly belated) birthday present.  With thanks again for mcicioni for the beta, and for introducing me to these two adorable prats."")}, {'summary': Value(literal:""In which Stefan's prior renting experience comes in handy, and the Sayyad family are resourceful. With thanks as always to mcicioni to introducing me to these adorable prats, and for the beta help.  Special thanks to her workmate for help with the Farsi phrases."")}, {'summary': Value(literal:'It could be a fact that Rash was turning him into a romantic sap, but to be honest, Stefan didn’t care that much. He liked that. He liked everything about Rash and what was he making him feel. And that feeling, he thought, was called love. God, he was such a sap. He hated that. (He didn’t hate that at all.)')}, {'summary': Value(literal:'Rash and Stefan spend their first night in their new place.  Sleeping on one air mattress.  Yeah. With thanks as always to mcicioni for introducing me to these two adorable prats and for the beta work, and to pantsaretherealheroes and Heliophile for enouragment.')}, {'summary': Value(literal:""Rash and Stefan have a combination housefurnishing day and housefiring party, as Stefan's old flatmate Jan would put it. Thanks as always to mcicioni for introducing me to these two adorable prats and for the beta, to pantsaretherealheroes for listening to me blither all over Tumblr chat, and especially to Heliophile for the superb beta that helped me say what I meant to say, rather than what I typed.  *throws streamers*"")}, {'summary': Value(literal:""It takes extreme events for Rash and Stefan to finally Get A Clue. With thanks as always to mcicioni for introducing me to the two adorable prats, for SPAG and plot betaing and for challenging me on various plot points.  Thanks also to pantsaretherealheroes for listening to me geek out at her in the process of this novel and occasionally rant at her over a sticky bit via tumblr messenger.  And finally, the words 'thank you' are not enough for Heliophile for her Britpicking, help with various aspects of London lifestyle and copyediting the fic and somehow discerning what I wanted to say as opposed to what I'd actually written. ;) Dedicated to Tyhyin, who declared the series so far 'the slowest of slow boils' and wondered just how oblivious the two could be.  Challenge accepted.  :D"")}, {'summary': Value(literal:'In which various cases left open at the end of the last fic are investigated, and Rash and Stefan really start to settle into their new lives. With thanks as always to mcicioni for introducing me to these adorable prats, and for her beta work on early drafts of this fic as well as helping nursemaid the plot.  Thanks also to pantsaretherealheroes for the readover(s?) and listening to me curse the day I decided to write anything approaching casefic.  And as always, particular thanks to Heliophile for the Britpicking, copyediting words that slipped through and taking my occasionally - OK not so occasionally - tortured prose and transforming it into what I wanted to say as opposed to what I actually typed. :)')}, {'summary': Value(literal:'In which Rash and his cousin Rahim catch up over a beer or several and exchange news. With thanks as always to mcicioni for introducing me to these two adorable prats, and to her and pantsaretherealheroes for reading and making suggestions over the earlier draft.  Thanks also to pantsaretherealheroes for putting a face to Vihaan.  Thanks as always to Heliophile for the beta and Britpick.')}, {'summary': Value(literal:""Life was good. Life was simple. And then everything went to shit. ‘I’m getting married.’ (aka Stefan gets married and Rash really can't take it)"")}, {'summary': Value(literal:'Rash can’t leave Stefan alone for five minutes.')}, {'summary': Value(literal:""It's...weird. Living with Stefan."")}, {'summary': Value(literal:'Four times people thought that Rash and Stefan were dating and one time they realized it was a good idea.')}, {'summary': Value(literal:'On a case, Stefan’s baffling.')}, {'summary': Value(literal:'Rash is either going to teach Stefan how to handle a gun or die trying. Probably the latter.')}, {'summary': Value(literal:'Stefan is nothing if not predictable. And stubborn. And very, very annoying. And also, apparently, the guy Rash has fallen in love with.')}, {'summary': Value(literal:""This was a School project and now it's this"")}, {'summary': Value(literal:""With Stefan working long hours on things that he absolutely cannot talk about, Rash finds himself feeling lonely. The perfect solution: a couple of cats. He has listed the pros and cons, worked out a new budget, found their nearest vet and decided that he's ready. But Stefan, unaware of Rash's plans, has his own, decidedly canine, ideas."")}, {'summary': Value(literal:'Stefan has nice eyes and a lot of props, for some reason. (They move in together and Rash immediately develops a hideously inappropriate crush on his roommate.)')}, {'summary': Value(literal:""A simple tale of two bickering boys, who might just like each other rather more than they're letting on..."")}, {'summary': Value(literal:'The boys celebrate becoming home-owners and Rash tries to come to terms with his Massively Obvious Crush on Stefan.')}, {'summary': Value(literal:'The day after their swimming pool dive, Rash and Stefan are faced with an invoice for cleaning the pool of certain, er, items that dropped from their pockets - or, in other words, Rash gets a clue and Stefan is going to get what he deserves.')}, {'summary': Value(literal:""Moving in with Stefan, his mate, pal, buddy, friend, partner in crime (partner against crime?)- whatever, was definitely going to be an experience. Rash expected that. He just kind of didn't really expect to maybe end up developing a crush on him."")}, {'summary': Value(literal:'Rash and Stefan are completely clueless and Leila just wants to be left alone.')}, {'summary': Value(literal:'The morning after the house warming party.')}, {'summary': Value(literal:'Ever since he found out that Stefan essentially works as an undercover operative for the Serious Fraud Office a lot of the time, he’s been curious about how that works. As a police officer, it strikes him as something the SFO probably shouldn’t be doing. As a friend, it strikes him as pretty dangerous work for Stefan, considering who they’ve gone after and what the consequences have been so far. Arrash doesn’t fancy being shot at or trapped in a car about to burn to death ever again, thank you very much.')}, {'summary': Value(literal:'Stash cute fluff. Im sorry this is awful but i plan to improve from here. This is the first thing ive ever written, and corrections or improvements are always welcome!!')}, {'summary': Value(literal:""Three times Rash and Stefan didn't say 'I love you' and two times they did."")}, {'summary': Value(literal:'Requited Sexual Tension comes to a head.')}, {'summary': Value(literal:'Stefan gets hurt, Arrash gets worried.')}, {'summary': Value(literal:'Once again Stefan gets hurt, Arrash gets worried.')}, {'summary': Value(literal:'None')}, {'summary': Value(literal:'“Anyway is no problem, I have plan!” Stefan wonders if someone’s just turned the aircon on because he feels a distinct chill in the air all of a sudden. He has no idea what Jan’s planning but he suspects it isn’t good. And probably not 100% legal. “You do anything and I will stab you. In the throat. With a biro. And Rash’ll have to help me hide your body and it’ll be super unromantic so you’ll have doubly ruined my chances but at least they’ll never find your traitorous corpse.” The gang play a game of Never Have I Ever and Stefan reveals more than he means too.')}, {'summary': Value(literal:""Was this little plan ridiculous? Yes, of course. Was it badly thought-out and likely to end in tears? Absolutely, without a doubt. And was Arrash going to do it anyway? Yes. Yes, he was. _________________________________________________________________________________ Stefan asks Arrash to show him his flirting moves, and Arrash knows it's a bad idea - but he can't help going along with it anyway."")}, {'summary': Value(literal:'After three hours of hiding from some of his mother’s friends and downing almost four beers Rash was staring at Stefan and Leila and convincing himself that his crush was absolutely harmless. It would go away soon and he would be able to not imagine... things. Anyway, that crush was little. So, so tiny. His heart just always skipped a bit when Stefan was entering the room. And he wanted to sit with him on a couch and just look at the rain outside. And... okay, fuck, maybe it wasn’t that little. But what choice did he have?')}, {'summary': Value(literal:'Stefan really likes sharing a flat with Rash.')}, {'summary': Value(literal:""As Stefan and Rash are walking back after 'visiting' Daniel Lorca's flat, Stefan brings up an awkward topic of conversation, and Rash makes something of it."")}, {'summary': Value(literal:'where Stefan is the one stupidly in love. Ha, take that .')}, {'summary': Value(literal:'Arrash is investigating a case, Stefan is also investigating the same people. Stefan gets kidnapped and tortured. Arrash gets worried and angry.')}, {'summary': Value(literal:'""What is the most efficient way to passive-aggresively say \'fuck you\' in flowers?"" Stefan couldn\'t contain the burst of laughter that emitted from him. The man in question had slapped down £20 on the counter and was looking at him expectantly, ""Well?"" The florist!Stefan that clearly you all want.')}, {'summary': Value(literal:'Stefan gets tangled up in yet another gang that now want him dead. Stef and Rash need to work together. (woo more stash)')}, {'summary': Value(literal:""This fic picks up after series one in Rash and Stefan's flat. Stefan comes home in a crop top and booty shorts, but it isn't the outfit which surprises Rash. Stefan is behaving out of character and Rash is a detective. He works it out. Awkward British comfort ensues."")}, {'summary': Value(literal:'Rash was slowly but surely starting to lose count of the amount of times he found himself on the wrong end of a gun. It felt significant to note these types of life-threatening situations had never occurred before meeting, living with, and occasionally, teaming up with, Stefan Kowolski. Therefore, Rash could only come to the conclusion that out of the two of them, Stefan was the trouble magnet.')}, {'summary': Value(literal:'Time stretched on endlessly in the dark basement. Rash had no idea what time it was, nor how long he had been there, but it had to have been a day already. The pain had become a constant companion. He was a dead man, he knew that. Rash gets abducted on a case. The aftermath proves hard to bear.')}, {'summary': Value(literal:'Porn with feelings.')}, {'summary': Value(literal:""Arrash meets Gulliver, and he's not a forgiving man."")}, {'summary': Value(literal:""Rash is behaving rather strangely, and Stefan is 'mildly' concerned."")}, {'summary': Value(literal:'Rash, Stefan and a Netflix argument that ends well...')}, {'summary': Value(literal:""Rash realises he's the worst detective ever."")}, {'summary': Value(literal:'___ _ ______ ______ _ I spy with my little eye')}, {'summary': Value(literal:'_________ ____ _____ _______.')}, {'summary': Value(literal:'___ ____, _____ ___ _ ______ __ _______ «_____» _ ___ ____, _____ __________ _ _____.')}, {'summary': Value(literal:'___ __ ________ _ ____, _ _______ _________ _____ _____ ________ ________, _, ________, _______ ___-___ __________ ______.')}, {'summary': Value(literal:'_ ____ ____ ___ ___ _________... _____.')}, {'summary': Value(literal:'___ _____ _________ __________ _______, __ _____ __ _______')}, {'summary': Value(literal:'___________ _____, ______ ___ ___ __ ___ ___')}]"	1	0	0			
253	253	en	Show me summaries of ___ stories	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'None')}]	253	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of _____ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""_____"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Show me summaries of ___ stories

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?summary WHERE {  
  ?story golem:fandom ""___"" .  
  ?story golem:summary ?summary .  
}
"	[{'summary': Value(literal:'None')}]	1	0	0			
254	254	en	Show me summaries of ______ stories	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'__________cp_____')}, {'summary': Value(literal:'________________________________________________________')}, {'summary': Value(literal:'___OOC')}, {'summary': Value(literal:'________LOFTER_________')}, {'summary': Value(literal:'__________LOFTER_________')}, {'summary': Value(literal:'_____ ___jk_____cp_____')}, {'summary': Value(literal:'None')}, {'summary': Value(literal:'abo___ alpha_________beta____________________omega____________________ ___________(_°_°_)__ cp_____')}]	254	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me summaries of _____ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""_____"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ___ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Show me summaries of ______ stories

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
?story golem:fandom ""______"" . 
?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'__________cp_____')}, {'summary': Value(literal:'________________________________________________________')}, {'summary': Value(literal:'___OOC')}, {'summary': Value(literal:'________LOFTER_________')}, {'summary': Value(literal:'__________LOFTER_________')}, {'summary': Value(literal:'_____ ___jk_____cp_____')}, {'summary': Value(literal:'None')}, {'summary': Value(literal:'abo___ alpha_________beta____________________omega____________________ ___________(_°_°_)__ cp_____')}]	1	0	0			
255	255	en	Show me summaries of ______ stories	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }"	"[{'summary': Value(literal:'______ ____________________……')}, {'summary': Value(literal:'______ __________________')}, {'summary': Value(literal:""Poetry I've written based off life experiences or thoughts I've had. Inspired by life in general. Series: My Poems [1]"")}]"	255	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me summaries of ___ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of _____ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""_____"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Show me summaries of ______ stories

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?summary WHERE { 
  ?story golem:fandom ""______"" . 
  ?story golem:summary ?summary . 
}
"	"[{'summary': Value(literal:'______ ____________________……')}, {'summary': Value(literal:'______ __________________')}, {'summary': Value(literal:""Poetry I've written based off life experiences or thoughts I've had. Inspired by life in general. Series: My Poems [1]"")}]"	1	0	0			
256	256	en	Show me summaries of DC vs. Vampires stories	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""DC vs. Vampires"" . ?story golem:summary ?summary . }"	"[{'summary': Value(literal:""Barry's caught.  Even with Hal's fangs pressing a dark promise against his racing pulse, Barry's mind refuses to connect the vampire, his attacker, and Hal. Or: Some of the homoerotic vampire Hal on Barry action we were denied in DC vs. Vampires, with some additions from the Tumblr version. Content warnings in the tags and notes."")}, {'summary': Value(literal:'——_________·____________________________________')}, {'summary': Value(literal:'“___” __________________________________ “________________” ——_____________ _DC___________')}, {'summary': Value(literal:'___________________ ____paro___master_______3p________')}, {'summary': Value(literal:""I'm not fucking Cattle and I was this close to putting a bullet in his head over that but I don’t know if the transformation can be reversed because SOMEONE ISN’T ANSWERING THEIR FUCKING PHONE! You fucking knew there was a vampire Apocalypse\xa0happening and you didn’t fucking tell me?! We’re supposed to be friends Roy! I thought you cared- it doesn't matter because obviously I was mistaken. Fuck you Harper."")}, {'summary': Value(literal:'...The Tragedy of Death As a mortal he had avoided her and the temptation she represented but as a Vampire? He was more than happy to taste the forbidden fruit.')}, {'summary': Value(literal:""In one universe, the Vampire Lord is one of the Batman's sons. In another, it's his father."")}, {'summary': Value(literal:'Hal’s used to looking in the mirror and not liking what he sees.  But it’s no comfort when he looks in the mirror and all but two of its teeth end in dull, blunt tips. Or: A Hal-centric retelling of DC vs. Vampires 1-6, and a parallel night, not so long ago.')}, {'summary': Value(literal:'“Drink.” It wasn’t a proposal or a suggestion. It was an order, plain as a cloudless sky— —“You’ll have an eternity to come to terms with it.” Dick succeeded in turning his brother against his will. (Spoiler: DC vs. Vampires #6)')}, {'summary': Value(literal:'“A bit much, wasn’t it, Hal?”')}, {'summary': Value(literal:'She tries and fails not to think about how the Heroes who haven’t answered her calls had been absent from the news lately. Something is happening, she knows it, she just doesn’t know what.')}, {'summary': Value(literal:""Not the whole week, just for the days I'm too lazy to come up with a narrative and rather just draw porn. Day One (15th of August): Under the Red Hood/Lost Days era Day Four (18th of August): DC vs Vampires Day Five (19th of August): All-Caste era"")}, {'summary': Value(literal:'Batman attempts to console Jayna after delivering the news of Zan’s murder, and retrieving nothing of her twin but his severed fingertip. But she isn’t there. She’s gone. She was devastated, sobbing, then overwhelmingly furious , but now she’s nothing. Without her dear Wonder Brother she’s nothing.')}]"	256	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me summaries of New Blood (TV) stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""New Blood (TV)"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me summaries of [[fandom]] stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: How many Kudos do Mr.Vampire (1985) stories get on average?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Mr.Vampire (1985)"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: Show me summaries of DC vs. Vampires stories

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?summary WHERE { 
?story golem:fandom ""DC vs. Vampires"" . 
?story golem:summary ?summary . 
}
"	"[{'summary': Value(literal:""Barry's caught.  Even with Hal's fangs pressing a dark promise against his racing pulse, Barry's mind refuses to connect the vampire, his attacker, and Hal. Or: Some of the homoerotic vampire Hal on Barry action we were denied in DC vs. Vampires, with some additions from the Tumblr version. Content warnings in the tags and notes."")}, {'summary': Value(literal:'——_________·____________________________________')}, {'summary': Value(literal:'“___” __________________________________ “________________” ——_____________ _DC___________')}, {'summary': Value(literal:'___________________ ____paro___master_______3p________')}, {'summary': Value(literal:""I'm not fucking Cattle and I was this close to putting a bullet in his head over that but I don’t know if the transformation can be reversed because SOMEONE ISN’T ANSWERING THEIR FUCKING PHONE! You fucking knew there was a vampire Apocalypse\xa0happening and you didn’t fucking tell me?! We’re supposed to be friends Roy! I thought you cared- it doesn't matter because obviously I was mistaken. Fuck you Harper."")}, {'summary': Value(literal:'...The Tragedy of Death As a mortal he had avoided her and the temptation she represented but as a Vampire? He was more than happy to taste the forbidden fruit.')}, {'summary': Value(literal:""In one universe, the Vampire Lord is one of the Batman's sons. In another, it's his father."")}, {'summary': Value(literal:'Hal’s used to looking in the mirror and not liking what he sees.  But it’s no comfort when he looks in the mirror and all but two of its teeth end in dull, blunt tips. Or: A Hal-centric retelling of DC vs. Vampires 1-6, and a parallel night, not so long ago.')}, {'summary': Value(literal:'“Drink.” It wasn’t a proposal or a suggestion. It was an order, plain as a cloudless sky— —“You’ll have an eternity to come to terms with it.” Dick succeeded in turning his brother against his will. (Spoiler: DC vs. Vampires #6)')}, {'summary': Value(literal:'“A bit much, wasn’t it, Hal?”')}, {'summary': Value(literal:'She tries and fails not to think about how the Heroes who haven’t answered her calls had been absent from the news lately. Something is happening, she knows it, she just doesn’t know what.')}, {'summary': Value(literal:""Not the whole week, just for the days I'm too lazy to come up with a narrative and rather just draw porn. Day One (15th of August): Under the Red Hood/Lost Days era Day Four (18th of August): DC vs Vampires Day Five (19th of August): All-Caste era"")}, {'summary': Value(literal:'Batman attempts to console Jayna after delivering the news of Zan’s murder, and retrieving nothing of her twin but his severed fingertip. But she isn’t there. She’s gone. She was devastated, sobbing, then overwhelmingly furious , but now she’s nothing. Without her dear Wonder Brother she’s nothing.')}]"	1	0	0			
257	257	en	Show me summaries of stony - Fandom stories	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""stony - Fandom"" . ?story golem:summary ?summary . }"	"[{'summary': Value(literal:'A veces lo que uno necesita esta frente a sus propios ojos.')}, {'summary': Value(literal:'Para Steve Rogers, el matrimonio que mantenía con Anthony Stark estaba siendo un caos, por su parte él ya no desea ser parte de su vida, y para terminar con todo esa incomodidad, decide firmar los papeles de divorcio. ¿Como tomara todo esto Peter?')}, {'summary': Value(literal:'Todo fue un malentendido, lo habían juzgado mal y no le dieron la oportunidad de hablar. Ahora vagaba sólo, bajo las cálidas calles de Italia, con sus memorias revueltas y su corazoncito hecho añicos.')}, {'summary': Value(literal:'Anthony está raro, su humor ya no es el mismo y sus ánimos están por los suelos. Steve, el Alfa de la manada, estaba bastante preocupado que el único Omega este así; no es sano para él ni mucho menos para su manda. ¿Qué es lo que quieres Tony?')}, {'summary': Value(literal:'Yo estaba por lo bajo de todos, no tenía sustento y para vivir me ofrecía. No podía tener hijos y tenía una marca en mi cuello. Estaba usado y botado cruelmente.')}, {'summary': Value(literal:'Tony conspira para deshacerse de Steve... Por desgracia, Steve descubre estar perdidamente enamorado y su traición va a romperle el corazón.')}, {'summary': Value(literal:""Steve rogers has been missing the past but when it comes to him, he noticed things have changed. he's changed."")}, {'summary': Value(literal:""Tony get's low. Too low"")}, {'summary': Value(literal:""Whenever Steve has nightmares, Tony sings him to sleep even if he's halfway across the world."")}, {'summary': Value(literal:'_______________')}, {'summary': Value(literal:'_____')}, {'summary': Value(literal:'__')}, {'summary': Value(literal:'La humanidad está al borde de la extinción, una amenaza insuperable esta venciendo lentamente a todos los “héroes” que quedan… pero cuando se cree que toda esperanza ha muerto, el primer vengador es encontrado por el joven Tony Stark. Gracias a este encuentro ¿la humanidad tendrá una oportunidad? ¿Qué podrá aprender un hombre de los años 40’s en un futuro incierto? ¡¿Qué podrá enseñarle un adolescente con demasiadas responsabilidades?')}, {'summary': Value(literal:'Lo que no vimos en la película Heroes United: IronMan & Captain America de Marvel. El capitán América es dorrotado por Hydra ante los incrédulos ojos de IronMan, pero las cosas no van a ser tan sencillas como para captar al capitán y esperar que su compañero no haga nada más que mirar. Gran sorpresa se ha de llevar el multimillonario al encontrarse con Steve portando otro traje y obedeciendo órdenes de Hydra. Trabajo para el Special Stony Challenge Multiverse')}, {'summary': Value(literal:'Steve se ve atrapado en una dimensión desconocida donde el amor y el instinto de supervivencia serán lo único que le mantenga a flote en ese viaje a la deriva. Adaptación Stony del cómic. __')}, {'summary': Value(literal:'Steve Rogers es dueño de una gran empresa, reconocida a nivel mundial. Siendo un hombre serio, de buen porte y con mucha dedicación a su trabajo, piensa que es una pérdida de tiempo dedicar su atención a otras cuestiones. A pesar de ello, muy en lo profundo de su corazón, sueña con algún día tener hijos y formar su propia familia. Sin embargo, para obtenerla, tendrá que encontrar a quien se atreva a vivir junto a él, la aventura más grande de sus vidas: fingir un  matrimonio consumado. ¿Logrará Steve cumplir su más grande deseo?')}, {'summary': Value(literal:'Shot basado en una foto de TuSecreto')}, {'summary': Value(literal:'Tony era un doncel excepcional y eso solo lo hacia más irresistible AllxTony Stony')}, {'summary': Value(literal:'¿ Y si un teléfono roto fuera lo único que te queda de aquel a quien amaste? ¿Lo repararías? ¿O repararías tu orgullo el cual lo dejo ir? ¿Podrías arreglarlo?')}, {'summary': Value(literal:'Después de la guerra Civil todo cambio. Los Vengadores jamás volvieron a ser los mismos de antes. Steve jamás volvió a ver a Tony, aún cuando lo buscaba incansablemente, su esperanza se fue desvaneciendo con los años, todo había terminado... Hasta que aquel pequeño niño de cuatro años y grandes ojos azules pronunció dos palabras: ""Soy Peter, Peter Stark""')}, {'summary': Value(literal:'None')}, {'summary': Value(literal:'________ pwp Nc17 ID____')}, {'summary': Value(literal:'_________')}, {'summary': Value(literal:""Tony était bourré et Steve, surprotecteur. Autrement dit, nuit de folie à l'horizon ! Ceci est la traduction d'un OS de Olivier_Mira, dont vous pouvez trouver la version originale sur ce même site. Beta-lectrice : Angel."")}, {'summary': Value(literal:""Steve and Tony are in the lab. Loki is an asshole. What happens next? SMUT THAT'S WHAT [read. I suck at summaries :)]"")}, {'summary': Value(literal:""In an alternative universe, Tony Stark and Steve Rogers have a complicated relationship. Between sadness and joy, here are 10 short stories about them. Warning: There's no link between the different chapters."")}, {'summary': Value(literal:'Being avengers and working for a safe world was one thing, but having to work even harder to take care of the person you love most, even if the situation is unexpected, is the challenge that they did not ask for and that no one should know. Oneshot Stony, based on a commission that draws and that brought me so much trouble that it avenges me making it a magnificent story with explicit delivery and a lot, enjoy it! STONY - MPREG - YAOI - PARTO - BABY PETER - MUCH LOVE!!')}, {'summary': Value(literal:'This is my nod and written thanks unto which I hope is allowed.')}, {'summary': Value(literal:""Tony spent years coming up with a plan. Ever since he laid eyes on the great Captain America at his party a few years back, all he wanted to do was go on one date. But life's shit with all the constant missions but now he finally has a chance. Until Bucky Barnes was found."")}, {'summary': Value(literal:'In which Steve can\'t believe he might be into guys but gets aroused by the thought of Tony. ""Oh god! Tony had really bought him a computer! And it wasn\'t a cheap one. That was amazing! Steve never had owned one and really didn\'t know how this thing worked. And he definitely couldn\'t ask Tony about it, could he? "" Includes Tony watching porn with Steve, masturbating and a little bit of fluff. ;)')}, {'summary': Value(literal:""Peter Parker has way too many problems as it is, being Spider Man and the son of two of the Avengers- and now, he has to deal with a certain psycho, armed with katanas, shitty pickup lines, and loads of sarcasm, following him around during his patrols. At first, it's annoying- but he finds himself growing fond of this man, Deadpool- the only person who doesn't treat him like he's made of glass all the time, the only person who takes him seriously, and the only person he feels he can trust. Peter finds himself slowly letting Pool into his everyday life, forming a fragile and unstable bond between the two of them, as they try to navigate the struggles of disapproving parents, depression, and the struggle of being a freak."")}, {'summary': Value(literal:'Tony walks in on Steve during a work out. Smut ensues.')}, {'summary': Value(literal:""Steve Rogers can't help himself from falling in love with the great Tony Stark. It was one thing to flirt with a man, but to be completely and utterly in love with him? Now that was something different."")}, {'summary': Value(literal:""Tony and Steve get in an argument... I just realized I should change this to M for character death, it used to be T..  I know it's sort of cliche but I feel like it keeps them in character the best way possible."")}, {'summary': Value(literal:'Tony and Steve meet Peters girlfriend, Gwen, for the first time. Awkward family moments ensue and lots of fluff is to be expected.')}, {'summary': Value(literal:'The Avengers have a night in- what better thing to do than sing? Tony starts to sing to a blushing Steve, but eventually he warms up to it.  ~SongFic for the songs ""Marvin Gaye"" by Charlie Puth ft. Meghan Trainor and ""Stay With Me"" by Sam Smith')}, {'summary': Value(literal:""Tony becomes determined to help Steve's nightmares go away"")}, {'summary': Value(literal:""Slice of life for Peter Parker. Some eventual Peter x Tony. I don't own any of these characters. If you are not aware of the glory that is the Marvel universe you need to crawl back under your rock."")}, {'summary': Value(literal:'Tony Stark is your average rich smart boy but what lies beneath the surface? How will the sudden change of working with ""The Steve Rodgers?"" I DO NOT OWN THESE CHARACTERS NOR DO I CLAM I DO. ALL CREDIT GOES TO MARVEL')}, {'summary': Value(literal:'14____________________')}, {'summary': Value(literal:'________________________________')}, {'summary': Value(literal:'__________________23333________HE_BE ______________ ____________________________')}, {'summary': Value(literal:'Loki escapó de la prisión donde Thanos lo encerró, luego de haber fingido su muerte, asustado y en pánico usa su ultimo vestigio de poder para llegar al único lugar donde recuerda alguien lo puede proteger: La torre Vengadores, en la tierra. Sin embargo no llega en el mejor momento, Tony se encuentra en un estado lamentable, dado al trago y lider de un equipo fragmentado, se encuentra con el dios de las mentiras, y contrario a su mejor juicio lo lleva a casa. Ambos comienzan un proceso extraño de recuperación, dónde comparten experiencias, tragos, bromas y promesas, por que tanto Tony como Loky saben que esa tregua es temporal y tarde o temprano tendrán que separarse.')}, {'summary': Value(literal:'Steve quería más, mucho más de lo que él le daba, pero exigir era algo fuera de su personalidad. Entonces, simplemente hizo puchero y dijo aquello prohibido. -No lo entiendes...')}, {'summary': Value(literal:'Johnny y Peter son dos niños de 11 años que se conocen en un campamento, en un principio se impresionan de lo iguales que sus rostros son, luego descubren que son gemelos y hacen un plan para volver a unir a sus padres. ----------------------- Novela basada en la pelicula ""Parent Trap"" o ""Juego de Gemelas"". Los gemelos son protagonizados por Peter Parker y Johnny Storm (Los 4 fantásticos). Aca: Peter Stark y Johnny Rogers.')}, {'summary': Value(literal:'Steve vuela directamente a Nueva York al enterarse por Natasha que Tony, su expareja, guardaba un secreto que casi pierde en siberia, el dolor de fallarle a alguien a quien juraste amar es un golpe mas helado que el hielo de donde salio. Tony lleva entre sus brazos aquella promesa de un futuro mejor. ¿podrá Steve recuperar su futuro?')}, {'summary': Value(literal:'El hijo de Howard Stark, Tony, es el omega más más deseado de la empresa, pero nadie se le acerca por ser el hijo del jefe. Todo cambiará el día en el que Howard tenga que salir de la ciudad y deje a su hijo a merced de los Alfas de la compañía, cuando pasa por un celo. Steve Rogers siempre intentó alejarse del hijo de su amigo, era demasiado joven para él, casi un adolescente. Pero cuando el olor dulzón llegue hacia a él, le es inevitable ir a su encuentro, junto a todos los alfas del lugar.')}, {'summary': Value(literal:'Steve found out that it\'s Tony\'s birthday. He needed to do something extra special for his ""friend"".')}, {'summary': Value(literal:'Tony _ã ch_a bao gi_ gi_i trong vi_c níu gi_ nh_ng _i_u t_t __p.')}, {'summary': Value(literal:'""Gi_ em nên cho r_ng h_ _ã phát tri_n m_t s_ lo_i thu_c cho b_nh này _i thôi."" Gã nói _ùa. Pepper b_n cho gã m_t cái l__m nghiêm kh_c khi cô xoay nh_ng cánh hoa màu h_ng dính __y máu trên tay, nhu_m vài v_t __ lên b_ móng ___c c_t t_a hoàn h_o c_a cô. ""Chuy_n này không _ùa ___c _âu, Tony."" ""Oh, anh không bi_t __y, Pep à. Có l_ _ó là trò _ùa l_n nh_t trong c_ cu_c __i anh. Và em bi_t anh _ã nói _ùa r_t nhi_u mà."" Gã nói thêm, nh_ m_t cánh hoa ra kh_i k_ r_ng. ""B_ gi_t ch_t b_i tình yêu. Chà, trong tr__ng h_p này, là tình yêu __n ph__ng. Th_t m_a mai làm sao.""')}, {'summary': Value(literal:'V_n v_ v_ t_n th__ng não v_nh vi_n chính là nó th__ng không liên quan __n s_ ph_c t_p c_a hôn nhân.')}, {'summary': Value(literal:'Sau ba n_m vui v_, H_c vi_n Avengers s_p k_t thúc m_t cách b_t ng_, và Tony d__ng nh_ v_n không th_ nói cho Steve bi_t c_u c_m th_y th_ nào v_ anh. Th_i gian không còn nhi_u, và c_u r_t c_n m_t l_i khuyên. Và ai t_t h_n __ __a ra nó h_n chính b_n thân? Ngh_a _en! Chuy_n sang _a v_ tr_ __ ___c giúp __, c_u g_p Tony Stark, m_t phiên b_n bu_n h_n, ng__i không ch_ nói cho c_u bi_t nh_ng gì c_u c_n nghe, mà còn cho c_u bi_t m_t l_ thuy_t thú v_, có tính t__ng tác: Steve Rogers và Tony Stark, trong các l_n l_p vô h_n c_a h_, __nh m_nh v_i nhau trong m_i v_ tr_?')}, {'summary': Value(literal:'Tony ch_ng bi_t nên c_m th_y th_ nào khi Steve _ã ch_ng minh, m_t cách th_t tàn nh_n, r_ng t_t c_ tình yêu gi_a h_ là _ích th_c.')}, {'summary': Value(literal:'Steve está embarazado y Tony se ha propuesto ser el mejor padre del mundo, sin embargo no contará con que existe un fetiche que será su perdición.')}, {'summary': Value(literal:'Steve Rogers es un Alpha poco convencional, pues al no sentirse atraído por los Omegas, un Beta peculiar ha robado su corazón pero, ¿eso será suficiente para llevar a cabo una unión?')}, {'summary': Value(literal:'""And here I thought the worst kind of parental problems were preventing your kids from sneaking out to parties... Not to stop fucking robberies under a mask as he sweeps from building to building."" Another one where Peter is Spiderman. Tony is overprotective. Steve is tired. And the Avengers are underattack.')}, {'summary': Value(literal:""Steve knows the man he loves, something's going on with Tony, he can't quite figure it out, but he can't ignore the fact that Tony's wearing a long sleeved sweater when they are at 113 °F"")}, {'summary': Value(literal:""While working in his lab, Tony Stark finds out that the reality he's currently living in is completely false. With his dear boyfriend, Steve Rogers and the Avengers, he's going to track the person who created their reality to put everything back in order."")}, {'summary': Value(literal:'Steve and Tony are finally moved into their new house as newlyweds!')}, {'summary': Value(literal:'Steve and Tony have a big fight. Happy ending.')}, {'summary': Value(literal:'Retired works until further notice. **Extreme editing in this set of works. You have been warned.')}, {'summary': Value(literal:'Tony gets drunk. Steve gets overprotective. Trouble ensues.')}, {'summary': Value(literal:""Clint and Bruce attend Tony's costume party. Things get pretty rowdy between a certain pair..."")}, {'summary': Value(literal:'Después de ser dolorosamente derrotados por Ultrón, Los Vengadores son recibidos por la familia de Clint para recuperar fuerzas y armar el plan de respuesta y ataque. Sin embargo, parece que el descanso será difícil para Tony y Steve, quienes tendrán que compartir habitación, obligándolos a hablar y aclarar su complicada y confusa relación.')}, {'summary': Value(literal:'What do you do when you run into your boss who is also scrolling through the appalling gay porn selection at the DVD store on a Friday night? You go home with him and together you make your own, of course.')}, {'summary': Value(literal:'Merry Christmas for The Rogers family :)')}, {'summary': Value(literal:'Porque el amor lo puedes encontrar en el momento menos inesperado. ""T___ __ ___ ____, __ ____ ___ __.""')}, {'summary': Value(literal:'Un mundo dividido en donde angeles y demonios no pueden unirse. Un rey en cada bando, descendientes de cada uno. Y los sucesores al trono viven un pecado que seria cruelmente castigado si alguien se entera. Pero, existe algo llamado amor, que va mucho más allá de cualquier ley.')}, {'summary': Value(literal:""Christmas doesn't feel the same, especially for one Peter Stark-Rogers...and it only starts with the ham.  (Post-Divorce fic)"")}, {'summary': Value(literal:'Tony Stark, the smart-ass playboy. Steve Rogers, the embodiment of justice and kindness himself. Unbelievable couple, right?')}, {'summary': Value(literal:'1970___A4_____HE __Forever_')}, {'summary': Value(literal:""Kissing Steve Rogers was one of the best decisions of Tony Stark's life. To be fair, he was a genius, so maybe the scales were tipped in his favor when it came to smart decision-making. Still, genius or not, he wasn't above patting himself on the back for recognizing a good thing when he saw it. And Steve was a very good thing. In a life that might generously be characterized as morally ambiguous, this was the one thing Tony could point to and say, without hesitation, “This is good.” Of course, that thought was immediately followed by, “Do not fuck this up.” Tony's old man balls were most definitely a factor, in his mind anyway, for potentially fucking this up."")}, {'summary': Value(literal:'Tonight was the night. Steve had been planning this for weeks and today was the perfect day. He’d wrote down what he was going to say rehearsed them in front of the mirror not caring how stupid he looked he needed this to be perfect. This is what he had been waiting to do ever since he woke up from his frozen sleep.')}, {'summary': Value(literal:""In the course of a very busy forty-eight hours, Tony Stark managed to enlist the scientific mind of Bruce Banner on a top secret project involving an anti-aging serum for his balls; admit and act on his attraction to America's superhero sweetheart himself, Steve Rogers, aka Captain America; and get caught in an altogether compromising position with his science bro.  It was all perfectly innocent, if a little weird.  He just had to find a way to explain it to Steve, and salvage their barely-begun relationship before it all went to hell."")}, {'summary': Value(literal:'Happy Hogan has some advice for his billionaire boss Toni Stark after a sour meeting with the Avengers who remain after the snap from the Infinity Gauntlet. The advice concerns a certain Captain America, who is still at odds with Toni. Will the scorned Iron Woman heed Happy’s advice, and take advantage of the opportunity presented to her?')}, {'summary': Value(literal:""Three years ago, if someone had told him that he would've been going shot for verbal shot with (an ALIVE) Captain America, getting ready to fight an alien army and one sassy God, and almost get sucked into a wormhole, he would have asked what they were smoking and if they'd share. But now, after everything with the Madarian and Extremis, and Steve and Natasha's little adventure in DC, it seemed like Ultron was the final candle on a really fucked up cake. But they survived- together. And somewhere along the way Tony Stark and Steve Rogers fell for one another; in the midst of all the craziness, they worked. But who could have imagined that before the war in New York, a young woman was fighting for her life, only to be saved by a serum that many thought to be lost.  When Natasha brings this young woman into the two Avenger's lives, hearts are broken and mended, and lives are on the line. **This story is on temporary hiatus. Not sure when it'll be picked back up!**"")}, {'summary': Value(literal:'Steve sacrifices himself to protect his team, but he doesn’t die. The serum lasts long enough to keep him alive but then fades, reverting Steve back to his pre-serum state. Steve once again finds himself out of place and questions his new role in The Avengers')}, {'summary': Value(literal:'Everything about them happened in seconds. Their first meeting was quick, with Tony landing next to the Captain, each man giving a curt nod and name in greeting. Their argument on the hellicarrier took mere seconds to escalate. Until Steve was goading Tony into putting on the suit and going a few rounds and Tony not so subtly reminding Steve that he wasn’t afraid to hit an old man. It was only seconds of staring at Tony on that New York City Street, his arc reactor dark, no rise and fall of his chest, for Steve to know that inside the tin can, was a good man. Then Ultron happened, and it took seconds for their world to change, seconds for Steve to throw his shield at Tony and for the billionaire to send a repulsor blast back. They went from laughing and relaxing to standing on an edge thousands of feet above solid ground. And now…now everything’s changed. And all it took was a combination of seconds; of decisions made, actions performed and words spoken that they couldn’t get back. Just a few ticks of the clock for their world to shatter. It’ll take more than that to make things right.')}, {'summary': Value(literal:""Apparently, he's not enjoying the feeling of being solitude."")}, {'summary': Value(literal:'Donde Peter busca al famoso mercernario para darle un pequeño trabajo')}, {'summary': Value(literal:'Después de  ver a Peter esfumarse, ahora Tony tiene que lidiar con la idea de que Steve haya tenido el mismo destino. Él junto con Nébula regresarán a la tierra para averiguar si la persona que tanto ama Tony está a salvo... | Drabble (Historia Corta)')}, {'summary': Value(literal:'Un shot basado en una foto que vi en el grupo Stony Shippers')}, {'summary': Value(literal:'Stony Like I can - Sam Smith')}, {'summary': Value(literal:'Tony spots Steve looking miserable at a party and helps him enjoy himself a little bit.')}, {'summary': Value(literal:""Ok, so I haven't written in the fandom in a while so forgive me for any mistakes in grammar, spelling, punctuation lol all of it. Had to take care of my mental, emotional, and physical health. In doing that, this came about. I hope you enjoy and again, forgive me for any and all mistakes, they are mine. As always, I do NOT own any rights to anything Marvel..This work is simply a work of fiction and only for entertainment :)"")}, {'summary': Value(literal:'The clock was ticking. And then, black.')}, {'summary': Value(literal:'Tony is dead. Its only been a year.')}, {'summary': Value(literal:'Captain Antonio Stark changes his mind on a certain Captain.')}, {'summary': Value(literal:'When Pepper takes Tony to the dentist for a procedure, he tells her an insane secret while hopped up on the wacky gas.')}, {'summary': Value(literal:'Peter enlists the help of his Uncle Clint when he decides that he wants to make the perfect costume to make his dads proud.')}, {'summary': Value(literal:'Steve lists all the best first times throughout his relationship with Tony, and parenthood with Peter in his first few years.')}, {'summary': Value(literal:'It’s Steve and Tony’s 3 month anniversary, and Steve has planned something special.')}, {'summary': Value(literal:'Tony contemplates death and admires the galaxy as he waits for his oxygen to run out. A blurb inspired by the Endgame Trailer.')}, {'summary': Value(literal:""[POST END GAME] Tony Stark came back to life as a super soldier after a successful experiment. It's been 10 years since Steve Rogers went into hiding after the funeral, nobody except Bucky know where he is. After several years of peace, it's finally coming to an end. Will the both meet each other and rewrite earth's fate, or are they destined to be star crossed lovers?"")}, {'summary': Value(literal:""Steve stared around him, his unfamiliar environment. “How’d I get here?” He asked himself aloud. As his eyes gradually accustomed to light, he realised that he was in Tony’s room. ----------------------------------------------------------------------------------------------------- So Steve wakes up in Tony's bed and learns quite a lot about his fellow Avengers. Cue Cute fluff and angst x"")}, {'summary': Value(literal:'""How the hell did they get here?"" It was a running theme in both men\'s minds. It popped up when they were arguing within the first few hours they\'d met, when Steve watched Tony\'s house fall into the Pacific, when Tony watched Steve fall from the sky, when Sokovia was hovering above the Earth. But somewhere in all that falling, they fell for one another, and that phrase turned into: ""Thank God we made it here."" It followed in the moments after their first kiss, in soft caresses against skin, in their first time coming together. But Steve has found that phrase entering his mind again. And he knows that all too soon, they\'re going to say something or do something that cannot be taken back. And there will be no where to go, but forward. Tony on the other hand, is hoping to stop all of this before it gets to that point. I have watched both trailers more times than I can count. This movie has broken me and it\'s not even out yet. I am a Stony shipper, and this is my way of writing out those feelings and making sense of the scenes we\'ve been given. And hopefully, keeping the bloodshed and broken hearts to a minimum.')}, {'summary': Value(literal:'Young Peter Parker is having some trouble sleeping, and his father Tony tries to comfort him the only way he knows how.')}, {'summary': Value(literal:""Peter Parker says his first words, much to his fathers' joy. AKA a huge ball of FLUFF :)"")}, {'summary': Value(literal:""As Steve and Tony prepare for their new son's arrival home from the orphanage, Tony begins to have doubts on whether or not he will be a good father."")}, {'summary': Value(literal:'Who would think that Steve would tell his feelings to Tony and what he thought was impossible to happen?')}, {'summary': Value(literal:'Before Steve had time to move, he felt a quick and sharp poke on his ass, causing his spine to tingle and his face to morph into a red glowing haze as he blushed. Tony was already laying there waiting. With his arms poised, and smiling at full capacity…')}, {'summary': Value(literal:'Agent Romanoff talks about Capt Rogers.')}, {'summary': Value(literal:""Papa Steve insists that twelve year old Ava drinks too much coffee, and forbids her from drinking it. Ava provides a bizarre defense. Another addition to a series of shorts involving Steve Rogers and Tony Stark with a daughter. Will hopefully lead up to a longer fic that follows Ava's transition into Iron Woman. Series can be read in any order."")}, {'summary': Value(literal:'Steve is once again believed to be dead, which leaves Tony as his child’s guardian. Years later Steve is found alive, but something isn’t right.')}, {'summary': Value(literal:'__au________________stony_______________________stony___________Steve_____…… ______________……')}, {'summary': Value(literal:""Just some random baby fluff about the Stony Peter Superfamily. Steve Rogers (a.k.a. Captain America) is married to Tony Stark (a.k.a. Iron Man) and decide to adopt a recently orphaned baby Peter Parker (future Spiderman). I do not own these characters, Marvel and Sony do. I pulled some ideas from other fanfics such as Je t'aime à la folie and Superhusbands: The Making of a Superfamily but I mostly liked the idea of how Stony came by Peter in Steve's Birthday Present. Please forgive me if some of it looks familiar. They are just very well written."")}]"	257	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me summaries of [[fandom]] stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Show me stories from the [[fandom]] fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Show me stories from the sildoctor fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""sildoctor"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Show me summaries of stony - Fandom stories

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
?story golem:fandom ""stony - Fandom"" . 
?story golem:summary ?summary . 
}
"	"[{'summary': Value(literal:'A veces lo que uno necesita esta frente a sus propios ojos.')}, {'summary': Value(literal:'Para Steve Rogers, el matrimonio que mantenía con Anthony Stark estaba siendo un caos, por su parte él ya no desea ser parte de su vida, y para terminar con todo esa incomodidad, decide firmar los papeles de divorcio. ¿Como tomara todo esto Peter?')}, {'summary': Value(literal:'Todo fue un malentendido, lo habían juzgado mal y no le dieron la oportunidad de hablar. Ahora vagaba sólo, bajo las cálidas calles de Italia, con sus memorias revueltas y su corazoncito hecho añicos.')}, {'summary': Value(literal:'Anthony está raro, su humor ya no es el mismo y sus ánimos están por los suelos. Steve, el Alfa de la manada, estaba bastante preocupado que el único Omega este así; no es sano para él ni mucho menos para su manda. ¿Qué es lo que quieres Tony?')}, {'summary': Value(literal:'Yo estaba por lo bajo de todos, no tenía sustento y para vivir me ofrecía. No podía tener hijos y tenía una marca en mi cuello. Estaba usado y botado cruelmente.')}, {'summary': Value(literal:'Tony conspira para deshacerse de Steve... Por desgracia, Steve descubre estar perdidamente enamorado y su traición va a romperle el corazón.')}, {'summary': Value(literal:""Steve rogers has been missing the past but when it comes to him, he noticed things have changed. he's changed."")}, {'summary': Value(literal:""Tony get's low. Too low"")}, {'summary': Value(literal:""Whenever Steve has nightmares, Tony sings him to sleep even if he's halfway across the world."")}, {'summary': Value(literal:'_______________')}, {'summary': Value(literal:'_____')}, {'summary': Value(literal:'__')}, {'summary': Value(literal:'La humanidad está al borde de la extinción, una amenaza insuperable esta venciendo lentamente a todos los “héroes” que quedan… pero cuando se cree que toda esperanza ha muerto, el primer vengador es encontrado por el joven Tony Stark. Gracias a este encuentro ¿la humanidad tendrá una oportunidad? ¿Qué podrá aprender un hombre de los años 40’s en un futuro incierto? ¡¿Qué podrá enseñarle un adolescente con demasiadas responsabilidades?')}, {'summary': Value(literal:'Lo que no vimos en la película Heroes United: IronMan & Captain America de Marvel. El capitán América es dorrotado por Hydra ante los incrédulos ojos de IronMan, pero las cosas no van a ser tan sencillas como para captar al capitán y esperar que su compañero no haga nada más que mirar. Gran sorpresa se ha de llevar el multimillonario al encontrarse con Steve portando otro traje y obedeciendo órdenes de Hydra. Trabajo para el Special Stony Challenge Multiverse')}, {'summary': Value(literal:'Steve se ve atrapado en una dimensión desconocida donde el amor y el instinto de supervivencia serán lo único que le mantenga a flote en ese viaje a la deriva. Adaptación Stony del cómic. __')}, {'summary': Value(literal:'Steve Rogers es dueño de una gran empresa, reconocida a nivel mundial. Siendo un hombre serio, de buen porte y con mucha dedicación a su trabajo, piensa que es una pérdida de tiempo dedicar su atención a otras cuestiones. A pesar de ello, muy en lo profundo de su corazón, sueña con algún día tener hijos y formar su propia familia. Sin embargo, para obtenerla, tendrá que encontrar a quien se atreva a vivir junto a él, la aventura más grande de sus vidas: fingir un  matrimonio consumado. ¿Logrará Steve cumplir su más grande deseo?')}, {'summary': Value(literal:'Shot basado en una foto de TuSecreto')}, {'summary': Value(literal:'Tony era un doncel excepcional y eso solo lo hacia más irresistible AllxTony Stony')}, {'summary': Value(literal:'¿ Y si un teléfono roto fuera lo único que te queda de aquel a quien amaste? ¿Lo repararías? ¿O repararías tu orgullo el cual lo dejo ir? ¿Podrías arreglarlo?')}, {'summary': Value(literal:'Después de la guerra Civil todo cambio. Los Vengadores jamás volvieron a ser los mismos de antes. Steve jamás volvió a ver a Tony, aún cuando lo buscaba incansablemente, su esperanza se fue desvaneciendo con los años, todo había terminado... Hasta que aquel pequeño niño de cuatro años y grandes ojos azules pronunció dos palabras: ""Soy Peter, Peter Stark""')}, {'summary': Value(literal:'None')}, {'summary': Value(literal:'________ pwp Nc17 ID____')}, {'summary': Value(literal:'_________')}, {'summary': Value(literal:""Tony était bourré et Steve, surprotecteur. Autrement dit, nuit de folie à l'horizon ! Ceci est la traduction d'un OS de Olivier_Mira, dont vous pouvez trouver la version originale sur ce même site. Beta-lectrice : Angel."")}, {'summary': Value(literal:""Steve and Tony are in the lab. Loki is an asshole. What happens next? SMUT THAT'S WHAT [read. I suck at summaries :)]"")}, {'summary': Value(literal:""In an alternative universe, Tony Stark and Steve Rogers have a complicated relationship. Between sadness and joy, here are 10 short stories about them. Warning: There's no link between the different chapters."")}, {'summary': Value(literal:'Being avengers and working for a safe world was one thing, but having to work even harder to take care of the person you love most, even if the situation is unexpected, is the challenge that they did not ask for and that no one should know. Oneshot Stony, based on a commission that draws and that brought me so much trouble that it avenges me making it a magnificent story with explicit delivery and a lot, enjoy it! STONY - MPREG - YAOI - PARTO - BABY PETER - MUCH LOVE!!')}, {'summary': Value(literal:'This is my nod and written thanks unto which I hope is allowed.')}, {'summary': Value(literal:""Tony spent years coming up with a plan. Ever since he laid eyes on the great Captain America at his party a few years back, all he wanted to do was go on one date. But life's shit with all the constant missions but now he finally has a chance. Until Bucky Barnes was found."")}, {'summary': Value(literal:'In which Steve can\'t believe he might be into guys but gets aroused by the thought of Tony. ""Oh god! Tony had really bought him a computer! And it wasn\'t a cheap one. That was amazing! Steve never had owned one and really didn\'t know how this thing worked. And he definitely couldn\'t ask Tony about it, could he? "" Includes Tony watching porn with Steve, masturbating and a little bit of fluff. ;)')}, {'summary': Value(literal:""Peter Parker has way too many problems as it is, being Spider Man and the son of two of the Avengers- and now, he has to deal with a certain psycho, armed with katanas, shitty pickup lines, and loads of sarcasm, following him around during his patrols. At first, it's annoying- but he finds himself growing fond of this man, Deadpool- the only person who doesn't treat him like he's made of glass all the time, the only person who takes him seriously, and the only person he feels he can trust. Peter finds himself slowly letting Pool into his everyday life, forming a fragile and unstable bond between the two of them, as they try to navigate the struggles of disapproving parents, depression, and the struggle of being a freak."")}, {'summary': Value(literal:'Tony walks in on Steve during a work out. Smut ensues.')}, {'summary': Value(literal:""Steve Rogers can't help himself from falling in love with the great Tony Stark. It was one thing to flirt with a man, but to be completely and utterly in love with him? Now that was something different."")}, {'summary': Value(literal:""Tony and Steve get in an argument... I just realized I should change this to M for character death, it used to be T..  I know it's sort of cliche but I feel like it keeps them in character the best way possible."")}, {'summary': Value(literal:'Tony and Steve meet Peters girlfriend, Gwen, for the first time. Awkward family moments ensue and lots of fluff is to be expected.')}, {'summary': Value(literal:'The Avengers have a night in- what better thing to do than sing? Tony starts to sing to a blushing Steve, but eventually he warms up to it.  ~SongFic for the songs ""Marvin Gaye"" by Charlie Puth ft. Meghan Trainor and ""Stay With Me"" by Sam Smith')}, {'summary': Value(literal:""Tony becomes determined to help Steve's nightmares go away"")}, {'summary': Value(literal:""Slice of life for Peter Parker. Some eventual Peter x Tony. I don't own any of these characters. If you are not aware of the glory that is the Marvel universe you need to crawl back under your rock."")}, {'summary': Value(literal:'Tony Stark is your average rich smart boy but what lies beneath the surface? How will the sudden change of working with ""The Steve Rodgers?"" I DO NOT OWN THESE CHARACTERS NOR DO I CLAM I DO. ALL CREDIT GOES TO MARVEL')}, {'summary': Value(literal:'14____________________')}, {'summary': Value(literal:'________________________________')}, {'summary': Value(literal:'__________________23333________HE_BE ______________ ____________________________')}, {'summary': Value(literal:'Loki escapó de la prisión donde Thanos lo encerró, luego de haber fingido su muerte, asustado y en pánico usa su ultimo vestigio de poder para llegar al único lugar donde recuerda alguien lo puede proteger: La torre Vengadores, en la tierra. Sin embargo no llega en el mejor momento, Tony se encuentra en un estado lamentable, dado al trago y lider de un equipo fragmentado, se encuentra con el dios de las mentiras, y contrario a su mejor juicio lo lleva a casa. Ambos comienzan un proceso extraño de recuperación, dónde comparten experiencias, tragos, bromas y promesas, por que tanto Tony como Loky saben que esa tregua es temporal y tarde o temprano tendrán que separarse.')}, {'summary': Value(literal:'Steve quería más, mucho más de lo que él le daba, pero exigir era algo fuera de su personalidad. Entonces, simplemente hizo puchero y dijo aquello prohibido. -No lo entiendes...')}, {'summary': Value(literal:'Johnny y Peter son dos niños de 11 años que se conocen en un campamento, en un principio se impresionan de lo iguales que sus rostros son, luego descubren que son gemelos y hacen un plan para volver a unir a sus padres. ----------------------- Novela basada en la pelicula ""Parent Trap"" o ""Juego de Gemelas"". Los gemelos son protagonizados por Peter Parker y Johnny Storm (Los 4 fantásticos). Aca: Peter Stark y Johnny Rogers.')}, {'summary': Value(literal:'Steve vuela directamente a Nueva York al enterarse por Natasha que Tony, su expareja, guardaba un secreto que casi pierde en siberia, el dolor de fallarle a alguien a quien juraste amar es un golpe mas helado que el hielo de donde salio. Tony lleva entre sus brazos aquella promesa de un futuro mejor. ¿podrá Steve recuperar su futuro?')}, {'summary': Value(literal:'El hijo de Howard Stark, Tony, es el omega más más deseado de la empresa, pero nadie se le acerca por ser el hijo del jefe. Todo cambiará el día en el que Howard tenga que salir de la ciudad y deje a su hijo a merced de los Alfas de la compañía, cuando pasa por un celo. Steve Rogers siempre intentó alejarse del hijo de su amigo, era demasiado joven para él, casi un adolescente. Pero cuando el olor dulzón llegue hacia a él, le es inevitable ir a su encuentro, junto a todos los alfas del lugar.')}, {'summary': Value(literal:'Steve found out that it\'s Tony\'s birthday. He needed to do something extra special for his ""friend"".')}, {'summary': Value(literal:'Tony _ã ch_a bao gi_ gi_i trong vi_c níu gi_ nh_ng _i_u t_t __p.')}, {'summary': Value(literal:'""Gi_ em nên cho r_ng h_ _ã phát tri_n m_t s_ lo_i thu_c cho b_nh này _i thôi."" Gã nói _ùa. Pepper b_n cho gã m_t cái l__m nghiêm kh_c khi cô xoay nh_ng cánh hoa màu h_ng dính __y máu trên tay, nhu_m vài v_t __ lên b_ móng ___c c_t t_a hoàn h_o c_a cô. ""Chuy_n này không _ùa ___c _âu, Tony."" ""Oh, anh không bi_t __y, Pep à. Có l_ _ó là trò _ùa l_n nh_t trong c_ cu_c __i anh. Và em bi_t anh _ã nói _ùa r_t nhi_u mà."" Gã nói thêm, nh_ m_t cánh hoa ra kh_i k_ r_ng. ""B_ gi_t ch_t b_i tình yêu. Chà, trong tr__ng h_p này, là tình yêu __n ph__ng. Th_t m_a mai làm sao.""')}, {'summary': Value(literal:'V_n v_ v_ t_n th__ng não v_nh vi_n chính là nó th__ng không liên quan __n s_ ph_c t_p c_a hôn nhân.')}, {'summary': Value(literal:'Sau ba n_m vui v_, H_c vi_n Avengers s_p k_t thúc m_t cách b_t ng_, và Tony d__ng nh_ v_n không th_ nói cho Steve bi_t c_u c_m th_y th_ nào v_ anh. Th_i gian không còn nhi_u, và c_u r_t c_n m_t l_i khuyên. Và ai t_t h_n __ __a ra nó h_n chính b_n thân? Ngh_a _en! Chuy_n sang _a v_ tr_ __ ___c giúp __, c_u g_p Tony Stark, m_t phiên b_n bu_n h_n, ng__i không ch_ nói cho c_u bi_t nh_ng gì c_u c_n nghe, mà còn cho c_u bi_t m_t l_ thuy_t thú v_, có tính t__ng tác: Steve Rogers và Tony Stark, trong các l_n l_p vô h_n c_a h_, __nh m_nh v_i nhau trong m_i v_ tr_?')}, {'summary': Value(literal:'Tony ch_ng bi_t nên c_m th_y th_ nào khi Steve _ã ch_ng minh, m_t cách th_t tàn nh_n, r_ng t_t c_ tình yêu gi_a h_ là _ích th_c.')}, {'summary': Value(literal:'Steve está embarazado y Tony se ha propuesto ser el mejor padre del mundo, sin embargo no contará con que existe un fetiche que será su perdición.')}, {'summary': Value(literal:'Steve Rogers es un Alpha poco convencional, pues al no sentirse atraído por los Omegas, un Beta peculiar ha robado su corazón pero, ¿eso será suficiente para llevar a cabo una unión?')}, {'summary': Value(literal:'""And here I thought the worst kind of parental problems were preventing your kids from sneaking out to parties... Not to stop fucking robberies under a mask as he sweeps from building to building."" Another one where Peter is Spiderman. Tony is overprotective. Steve is tired. And the Avengers are underattack.')}, {'summary': Value(literal:""Steve knows the man he loves, something's going on with Tony, he can't quite figure it out, but he can't ignore the fact that Tony's wearing a long sleeved sweater when they are at 113 °F"")}, {'summary': Value(literal:""While working in his lab, Tony Stark finds out that the reality he's currently living in is completely false. With his dear boyfriend, Steve Rogers and the Avengers, he's going to track the person who created their reality to put everything back in order."")}, {'summary': Value(literal:'Steve and Tony are finally moved into their new house as newlyweds!')}, {'summary': Value(literal:'Steve and Tony have a big fight. Happy ending.')}, {'summary': Value(literal:'Retired works until further notice. **Extreme editing in this set of works. You have been warned.')}, {'summary': Value(literal:'Tony gets drunk. Steve gets overprotective. Trouble ensues.')}, {'summary': Value(literal:""Clint and Bruce attend Tony's costume party. Things get pretty rowdy between a certain pair..."")}, {'summary': Value(literal:'Después de ser dolorosamente derrotados por Ultrón, Los Vengadores son recibidos por la familia de Clint para recuperar fuerzas y armar el plan de respuesta y ataque. Sin embargo, parece que el descanso será difícil para Tony y Steve, quienes tendrán que compartir habitación, obligándolos a hablar y aclarar su complicada y confusa relación.')}, {'summary': Value(literal:'What do you do when you run into your boss who is also scrolling through the appalling gay porn selection at the DVD store on a Friday night? You go home with him and together you make your own, of course.')}, {'summary': Value(literal:'Merry Christmas for The Rogers family :)')}, {'summary': Value(literal:'Porque el amor lo puedes encontrar en el momento menos inesperado. ""T___ __ ___ ____, __ ____ ___ __.""')}, {'summary': Value(literal:'Un mundo dividido en donde angeles y demonios no pueden unirse. Un rey en cada bando, descendientes de cada uno. Y los sucesores al trono viven un pecado que seria cruelmente castigado si alguien se entera. Pero, existe algo llamado amor, que va mucho más allá de cualquier ley.')}, {'summary': Value(literal:""Christmas doesn't feel the same, especially for one Peter Stark-Rogers...and it only starts with the ham.  (Post-Divorce fic)"")}, {'summary': Value(literal:'Tony Stark, the smart-ass playboy. Steve Rogers, the embodiment of justice and kindness himself. Unbelievable couple, right?')}, {'summary': Value(literal:'1970___A4_____HE __Forever_')}, {'summary': Value(literal:""Kissing Steve Rogers was one of the best decisions of Tony Stark's life. To be fair, he was a genius, so maybe the scales were tipped in his favor when it came to smart decision-making. Still, genius or not, he wasn't above patting himself on the back for recognizing a good thing when he saw it. And Steve was a very good thing. In a life that might generously be characterized as morally ambiguous, this was the one thing Tony could point to and say, without hesitation, “This is good.” Of course, that thought was immediately followed by, “Do not fuck this up.” Tony's old man balls were most definitely a factor, in his mind anyway, for potentially fucking this up."")}, {'summary': Value(literal:'Tonight was the night. Steve had been planning this for weeks and today was the perfect day. He’d wrote down what he was going to say rehearsed them in front of the mirror not caring how stupid he looked he needed this to be perfect. This is what he had been waiting to do ever since he woke up from his frozen sleep.')}, {'summary': Value(literal:""In the course of a very busy forty-eight hours, Tony Stark managed to enlist the scientific mind of Bruce Banner on a top secret project involving an anti-aging serum for his balls; admit and act on his attraction to America's superhero sweetheart himself, Steve Rogers, aka Captain America; and get caught in an altogether compromising position with his science bro.  It was all perfectly innocent, if a little weird.  He just had to find a way to explain it to Steve, and salvage their barely-begun relationship before it all went to hell."")}, {'summary': Value(literal:'Happy Hogan has some advice for his billionaire boss Toni Stark after a sour meeting with the Avengers who remain after the snap from the Infinity Gauntlet. The advice concerns a certain Captain America, who is still at odds with Toni. Will the scorned Iron Woman heed Happy’s advice, and take advantage of the opportunity presented to her?')}, {'summary': Value(literal:""Three years ago, if someone had told him that he would've been going shot for verbal shot with (an ALIVE) Captain America, getting ready to fight an alien army and one sassy God, and almost get sucked into a wormhole, he would have asked what they were smoking and if they'd share. But now, after everything with the Madarian and Extremis, and Steve and Natasha's little adventure in DC, it seemed like Ultron was the final candle on a really fucked up cake. But they survived- together. And somewhere along the way Tony Stark and Steve Rogers fell for one another; in the midst of all the craziness, they worked. But who could have imagined that before the war in New York, a young woman was fighting for her life, only to be saved by a serum that many thought to be lost.  When Natasha brings this young woman into the two Avenger's lives, hearts are broken and mended, and lives are on the line. **This story is on temporary hiatus. Not sure when it'll be picked back up!**"")}, {'summary': Value(literal:'Steve sacrifices himself to protect his team, but he doesn’t die. The serum lasts long enough to keep him alive but then fades, reverting Steve back to his pre-serum state. Steve once again finds himself out of place and questions his new role in The Avengers')}, {'summary': Value(literal:'Everything about them happened in seconds. Their first meeting was quick, with Tony landing next to the Captain, each man giving a curt nod and name in greeting. Their argument on the hellicarrier took mere seconds to escalate. Until Steve was goading Tony into putting on the suit and going a few rounds and Tony not so subtly reminding Steve that he wasn’t afraid to hit an old man. It was only seconds of staring at Tony on that New York City Street, his arc reactor dark, no rise and fall of his chest, for Steve to know that inside the tin can, was a good man. Then Ultron happened, and it took seconds for their world to change, seconds for Steve to throw his shield at Tony and for the billionaire to send a repulsor blast back. They went from laughing and relaxing to standing on an edge thousands of feet above solid ground. And now…now everything’s changed. And all it took was a combination of seconds; of decisions made, actions performed and words spoken that they couldn’t get back. Just a few ticks of the clock for their world to shatter. It’ll take more than that to make things right.')}, {'summary': Value(literal:""Apparently, he's not enjoying the feeling of being solitude."")}, {'summary': Value(literal:'Donde Peter busca al famoso mercernario para darle un pequeño trabajo')}, {'summary': Value(literal:'Después de  ver a Peter esfumarse, ahora Tony tiene que lidiar con la idea de que Steve haya tenido el mismo destino. Él junto con Nébula regresarán a la tierra para averiguar si la persona que tanto ama Tony está a salvo... | Drabble (Historia Corta)')}, {'summary': Value(literal:'Un shot basado en una foto que vi en el grupo Stony Shippers')}, {'summary': Value(literal:'Stony Like I can - Sam Smith')}, {'summary': Value(literal:'Tony spots Steve looking miserable at a party and helps him enjoy himself a little bit.')}, {'summary': Value(literal:""Ok, so I haven't written in the fandom in a while so forgive me for any mistakes in grammar, spelling, punctuation lol all of it. Had to take care of my mental, emotional, and physical health. In doing that, this came about. I hope you enjoy and again, forgive me for any and all mistakes, they are mine. As always, I do NOT own any rights to anything Marvel..This work is simply a work of fiction and only for entertainment :)"")}, {'summary': Value(literal:'The clock was ticking. And then, black.')}, {'summary': Value(literal:'Tony is dead. Its only been a year.')}, {'summary': Value(literal:'Captain Antonio Stark changes his mind on a certain Captain.')}, {'summary': Value(literal:'When Pepper takes Tony to the dentist for a procedure, he tells her an insane secret while hopped up on the wacky gas.')}, {'summary': Value(literal:'Peter enlists the help of his Uncle Clint when he decides that he wants to make the perfect costume to make his dads proud.')}, {'summary': Value(literal:'Steve lists all the best first times throughout his relationship with Tony, and parenthood with Peter in his first few years.')}, {'summary': Value(literal:'It’s Steve and Tony’s 3 month anniversary, and Steve has planned something special.')}, {'summary': Value(literal:'Tony contemplates death and admires the galaxy as he waits for his oxygen to run out. A blurb inspired by the Endgame Trailer.')}, {'summary': Value(literal:""[POST END GAME] Tony Stark came back to life as a super soldier after a successful experiment. It's been 10 years since Steve Rogers went into hiding after the funeral, nobody except Bucky know where he is. After several years of peace, it's finally coming to an end. Will the both meet each other and rewrite earth's fate, or are they destined to be star crossed lovers?"")}, {'summary': Value(literal:""Steve stared around him, his unfamiliar environment. “How’d I get here?” He asked himself aloud. As his eyes gradually accustomed to light, he realised that he was in Tony’s room. ----------------------------------------------------------------------------------------------------- So Steve wakes up in Tony's bed and learns quite a lot about his fellow Avengers. Cue Cute fluff and angst x"")}, {'summary': Value(literal:'""How the hell did they get here?"" It was a running theme in both men\'s minds. It popped up when they were arguing within the first few hours they\'d met, when Steve watched Tony\'s house fall into the Pacific, when Tony watched Steve fall from the sky, when Sokovia was hovering above the Earth. But somewhere in all that falling, they fell for one another, and that phrase turned into: ""Thank God we made it here."" It followed in the moments after their first kiss, in soft caresses against skin, in their first time coming together. But Steve has found that phrase entering his mind again. And he knows that all too soon, they\'re going to say something or do something that cannot be taken back. And there will be no where to go, but forward. Tony on the other hand, is hoping to stop all of this before it gets to that point. I have watched both trailers more times than I can count. This movie has broken me and it\'s not even out yet. I am a Stony shipper, and this is my way of writing out those feelings and making sense of the scenes we\'ve been given. And hopefully, keeping the bloodshed and broken hearts to a minimum.')}, {'summary': Value(literal:'Young Peter Parker is having some trouble sleeping, and his father Tony tries to comfort him the only way he knows how.')}, {'summary': Value(literal:""Peter Parker says his first words, much to his fathers' joy. AKA a huge ball of FLUFF :)"")}, {'summary': Value(literal:""As Steve and Tony prepare for their new son's arrival home from the orphanage, Tony begins to have doubts on whether or not he will be a good father."")}, {'summary': Value(literal:'Who would think that Steve would tell his feelings to Tony and what he thought was impossible to happen?')}, {'summary': Value(literal:'Before Steve had time to move, he felt a quick and sharp poke on his ass, causing his spine to tingle and his face to morph into a red glowing haze as he blushed. Tony was already laying there waiting. With his arms poised, and smiling at full capacity…')}, {'summary': Value(literal:'Agent Romanoff talks about Capt Rogers.')}, {'summary': Value(literal:""Papa Steve insists that twelve year old Ava drinks too much coffee, and forbids her from drinking it. Ava provides a bizarre defense. Another addition to a series of shorts involving Steve Rogers and Tony Stark with a daughter. Will hopefully lead up to a longer fic that follows Ava's transition into Iron Woman. Series can be read in any order."")}, {'summary': Value(literal:'Steve is once again believed to be dead, which leaves Tony as his child’s guardian. Years later Steve is found alive, but something isn’t right.')}, {'summary': Value(literal:'__au________________stony_______________________stony___________Steve_____…… ______________……')}, {'summary': Value(literal:""Just some random baby fluff about the Stony Peter Superfamily. Steve Rogers (a.k.a. Captain America) is married to Tony Stark (a.k.a. Iron Man) and decide to adopt a recently orphaned baby Peter Parker (future Spiderman). I do not own these characters, Marvel and Sony do. I pulled some ideas from other fanfics such as Je t'aime à la folie and Superhusbands: The Making of a Superfamily but I mostly liked the idea of how Stony came by Peter in Steve's Birthday Present. Please forgive me if some of it looks familiar. They are just very well written."")}]"	1	0	0			
258	258	en	Show me summaries of Il Volo stories	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""Il Volo"" . ?story golem:summary ?summary . }"	"[{'summary': Value(literal:'_______________(Seir_n)___Gianluca___________ *___Ignazio_______Gianluca______Piero________ *_________...__________')}, {'summary': Value(literal:""ad un matrimonio di un'amica in comune Alessandra incontra, dopo tanto tempo, Piero Barone (suo vecchio migliore amico di infanzia).... in compagnia di due suoi amici, Ignazio Boschetto e Gianluca Ginoble. Alla festa lei conosce subito Gianluca. Diventeranno amici? Nascerà fra i due qualcosa?"")}, {'summary': Value(literal:'Frank se siente infeliz desde que Gerard le puso punto final a ese amor prohibido que mantenían a escondidas (desde que eran adolescentes) al enterarse que Frank se iba a casar con Jamia, y aun así se arrepiente de haberlo perdido, porque según él, Gerard era el verdadero motivo para ser feliz. Tanto Anna como Sophia se preocupan por él, y con el paso del tiempo, tanto ellas como sus sobrinas Cherry y Lily, y la única amiga de las gemelas Bandit (hija de Gerard) se dan cuenta de que Frank aún sigue enamorado de Gerard, y las dos amigas harán lo posible para tratar de ayudarlo y harán lo posible para que vuelva a ser feliz. ¿Frank será lo suficiente para recuperar su felicidad?')}, {'summary': Value(literal:'Alright whose bright idea was it to not just to put the modern Eurovision participants in country separated houses on the same block,but put them in the same group chat as personified nations?')}, {'summary': Value(literal:""Ad Agrabah la vita è molto dura. C'è chi riesce a sopravvivere e chi invece per farlo deve rubare. Piero è uno di quelli, un ragazzo povero che non fa altro che sognare di essere felice e ricco. Un giorno si scontra - proprio letteralmente - con il principe Ignazio che si trovava al mercato per puro caso, per distrarsi dalla vita di palazzo... E si ritrova poi ad aiutare quel poveretto. Ma continuerà il giovane principe ad aiutare Piero? Che cosa accadrà? Piero riuscirà a compiere il suo sogno?"")}, {'summary': Value(literal:'Where Ignazio is bored, Piero is homesick and some cheering up is needed :D')}, {'summary': Value(literal:'It had been like this for a while now. They never had enough time, but being on tour, you simply had to take the time you could get and be happy with it..')}, {'summary': Value(literal:'Mafia!AU or *When there is literally no content of Il Volo so you say fuck it and write some yourself*')}, {'summary': Value(literal:""CONTROL Verb (used with object), controlled, controlling. 1. to exercise restraint or direction over; dominate; command. 2. to hold in check; curb: [ to control a horse; to control one's emotions ]"")}, {'summary': Value(literal:'""Truth be told, he wasn’t sure if it came out right, but one quick glance at Michele told him that at least their manager was pleased with him. So.. mission accomplished? Lying was a sin. None of this sat well with him at all.. ""')}, {'summary': Value(literal:'Piero gets sick in the middle of the night. Ignazio is there to help him.')}, {'summary': Value(literal:'A little fantasy on what may happen after mixing cold Italian wine and hot Italian men. I was just trying to write a sketch on Ignazio/OFC but then mr. Ginoble suddenly decided to join... :D (Disclaimer: English is not my native language!)')}, {'summary': Value(literal:'Some sing to be admired, some just to be heard. He sang to forget.')}, {'summary': Value(literal:""Prompt from anon: can you please do a piero/Ignazio Drabble were Ignazio is insanely in love with piero and piero finds out, and then he starts growing feelings for Ignazio and Ignazio thinks he's not in love with him but he pity's him."")}, {'summary': Value(literal:""Ignazio has temporal amnesia, and forgets about everything except his early years at the age of 16. Will he remember his daughter and husband before it's too late? Found out inside... Drabble series."")}, {'summary': Value(literal:'Prompt:  where Piero and Ignazio kiss for the first time... Pignazio Drabble')}, {'summary': Value(literal:'Prompt : Piero and Ignazio are in a relationship. And Piero wants to come out to everyone including their best friend and band mate ,gianluca. And Ignazio just want to be with Piero and have a good time.')}, {'summary': Value(literal:""Prompt: they are drunk and fooling around with each other and Ignazio unexpectedly gave something to Piero Te voglio bene assaje ma tanto tanto bene sai è una catena ormai. che scioglie il sangue dint'e vene sai..."")}, {'summary': Value(literal:""Sometimes you don't know if reality and dream are part of the same story. Where one ends and other begins, and in what side you are."")}, {'summary': Value(literal:'""Ricordami quando guarderai con gli occhi del passato, quando niente tornerà più come è stato e sarò ormai invisibile per te."" Based on il volo song ricordami...')}, {'summary': Value(literal:""Can you please do a Drabble or OS were ignazio has an accident and now has temporal amnesia and he doesn't remember him dating piero, until the very end and then make up"")}, {'summary': Value(literal:'a situation where Piè ask Igna why he was so close to him during the concert few hours before their discussion ^^')}, {'summary': Value(literal:""could you write an OS where Piero completely zooms out, like in that video where Gian 'wakes' him up, but Ignazio does it by, idk, feeding him cake or something?"")}, {'summary': Value(literal:""hey can you please do a pignazio One shot were its their daughter's bday and they call her up the stage ,in one of their concerts,and sing to her a song ,of your choice"")}, {'summary': Value(literal:""one where Igna et Piero are really close to each other in backstage during a Gianluca's solo"")}, {'summary': Value(literal:'None')}, {'summary': Value(literal:""OS were ignazio can't stop grabbing piero's ass lol"")}, {'summary': Value(literal:'Piero is depressed because of his recent break up with Ignazio and only tequila shots will cheer him up.')}, {'summary': Value(literal:'a one shot were Piero tries to make Ignazio jealous But he fails to do so and igna laughs at him?')}, {'summary': Value(literal:'were Piero looses his glasses and he has to wear contacts for the rest of the day and he feels ugly and insecure without his red glasses but ignazio is there to tell him the opposite __')}, {'summary': Value(literal:'Prompt: can you please do a cheesy Drabble with pignazio at latinamericanmusicawards')}, {'summary': Value(literal:'A game gone wrong. Pretty cliche but why the hell not?')}, {'summary': Value(literal:'__________Il volo______ #Gianazio')}]"	258	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Show me summaries of ______ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""______"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: What stories is Massimo Torricelli featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Massimo Torricelli"" . }
    </SPARQL>

    ###
    

    Question: Show me summaries of ___ stories

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Show me summaries of Il Volo stories

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?summary WHERE { 
  ?story golem:fandom ""Il Volo"" . 
  ?story golem:summary ?summary . 
}
"	"[{'summary': Value(literal:'_______________(Seir_n)___Gianluca___________ *___Ignazio_______Gianluca______Piero________ *_________...__________')}, {'summary': Value(literal:""ad un matrimonio di un'amica in comune Alessandra incontra, dopo tanto tempo, Piero Barone (suo vecchio migliore amico di infanzia).... in compagnia di due suoi amici, Ignazio Boschetto e Gianluca Ginoble. Alla festa lei conosce subito Gianluca. Diventeranno amici? Nascerà fra i due qualcosa?"")}, {'summary': Value(literal:'Frank se siente infeliz desde que Gerard le puso punto final a ese amor prohibido que mantenían a escondidas (desde que eran adolescentes) al enterarse que Frank se iba a casar con Jamia, y aun así se arrepiente de haberlo perdido, porque según él, Gerard era el verdadero motivo para ser feliz. Tanto Anna como Sophia se preocupan por él, y con el paso del tiempo, tanto ellas como sus sobrinas Cherry y Lily, y la única amiga de las gemelas Bandit (hija de Gerard) se dan cuenta de que Frank aún sigue enamorado de Gerard, y las dos amigas harán lo posible para tratar de ayudarlo y harán lo posible para que vuelva a ser feliz. ¿Frank será lo suficiente para recuperar su felicidad?')}, {'summary': Value(literal:'Alright whose bright idea was it to not just to put the modern Eurovision participants in country separated houses on the same block,but put them in the same group chat as personified nations?')}, {'summary': Value(literal:""Ad Agrabah la vita è molto dura. C'è chi riesce a sopravvivere e chi invece per farlo deve rubare. Piero è uno di quelli, un ragazzo povero che non fa altro che sognare di essere felice e ricco. Un giorno si scontra - proprio letteralmente - con il principe Ignazio che si trovava al mercato per puro caso, per distrarsi dalla vita di palazzo... E si ritrova poi ad aiutare quel poveretto. Ma continuerà il giovane principe ad aiutare Piero? Che cosa accadrà? Piero riuscirà a compiere il suo sogno?"")}, {'summary': Value(literal:'Where Ignazio is bored, Piero is homesick and some cheering up is needed :D')}, {'summary': Value(literal:'It had been like this for a while now. They never had enough time, but being on tour, you simply had to take the time you could get and be happy with it..')}, {'summary': Value(literal:'Mafia!AU or *When there is literally no content of Il Volo so you say fuck it and write some yourself*')}, {'summary': Value(literal:""CONTROL Verb (used with object), controlled, controlling. 1. to exercise restraint or direction over; dominate; command. 2. to hold in check; curb: [ to control a horse; to control one's emotions ]"")}, {'summary': Value(literal:'""Truth be told, he wasn’t sure if it came out right, but one quick glance at Michele told him that at least their manager was pleased with him. So.. mission accomplished? Lying was a sin. None of this sat well with him at all.. ""')}, {'summary': Value(literal:'Piero gets sick in the middle of the night. Ignazio is there to help him.')}, {'summary': Value(literal:'A little fantasy on what may happen after mixing cold Italian wine and hot Italian men. I was just trying to write a sketch on Ignazio/OFC but then mr. Ginoble suddenly decided to join... :D (Disclaimer: English is not my native language!)')}, {'summary': Value(literal:'Some sing to be admired, some just to be heard. He sang to forget.')}, {'summary': Value(literal:""Prompt from anon: can you please do a piero/Ignazio Drabble were Ignazio is insanely in love with piero and piero finds out, and then he starts growing feelings for Ignazio and Ignazio thinks he's not in love with him but he pity's him."")}, {'summary': Value(literal:""Ignazio has temporal amnesia, and forgets about everything except his early years at the age of 16. Will he remember his daughter and husband before it's too late? Found out inside... Drabble series."")}, {'summary': Value(literal:'Prompt:  where Piero and Ignazio kiss for the first time... Pignazio Drabble')}, {'summary': Value(literal:'Prompt : Piero and Ignazio are in a relationship. And Piero wants to come out to everyone including their best friend and band mate ,gianluca. And Ignazio just want to be with Piero and have a good time.')}, {'summary': Value(literal:""Prompt: they are drunk and fooling around with each other and Ignazio unexpectedly gave something to Piero Te voglio bene assaje ma tanto tanto bene sai è una catena ormai. che scioglie il sangue dint'e vene sai..."")}, {'summary': Value(literal:""Sometimes you don't know if reality and dream are part of the same story. Where one ends and other begins, and in what side you are."")}, {'summary': Value(literal:'""Ricordami quando guarderai con gli occhi del passato, quando niente tornerà più come è stato e sarò ormai invisibile per te."" Based on il volo song ricordami...')}, {'summary': Value(literal:""Can you please do a Drabble or OS were ignazio has an accident and now has temporal amnesia and he doesn't remember him dating piero, until the very end and then make up"")}, {'summary': Value(literal:'a situation where Piè ask Igna why he was so close to him during the concert few hours before their discussion ^^')}, {'summary': Value(literal:""could you write an OS where Piero completely zooms out, like in that video where Gian 'wakes' him up, but Ignazio does it by, idk, feeding him cake or something?"")}, {'summary': Value(literal:""hey can you please do a pignazio One shot were its their daughter's bday and they call her up the stage ,in one of their concerts,and sing to her a song ,of your choice"")}, {'summary': Value(literal:""one where Igna et Piero are really close to each other in backstage during a Gianluca's solo"")}, {'summary': Value(literal:'None')}, {'summary': Value(literal:""OS were ignazio can't stop grabbing piero's ass lol"")}, {'summary': Value(literal:'Piero is depressed because of his recent break up with Ignazio and only tequila shots will cheer him up.')}, {'summary': Value(literal:'a one shot were Piero tries to make Ignazio jealous But he fails to do so and igna laughs at him?')}, {'summary': Value(literal:'were Piero looses his glasses and he has to wear contacts for the rest of the day and he feels ugly and insecure without his red glasses but ignazio is there to tell him the opposite __')}, {'summary': Value(literal:'Prompt: can you please do a cheesy Drabble with pignazio at latinamericanmusicawards')}, {'summary': Value(literal:'A game gone wrong. Pretty cliche but why the hell not?')}, {'summary': Value(literal:'__________Il volo______ #Gianazio')}]"	1	0	0			
259	259	en	What is the average word count?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (AVG(?words) as ?avg_words) WHERE { ?story golem:numberOfWords ?words . }	[{'avg_words': Value(typed-literal:'8180.185545444649115')}]	259	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the average word length of Nine and Three-Quarters?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""Nine and Three-Quarters"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

    Question: What is the average word length of Clash?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""Clash"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

    Question: What is the average word length of We Could Help?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""We Could Help"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

Question: What is the average word count?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?averageWordCount WHERE {
  ?story golem:title ?title .
  ?story golem:numberOfWords ?wordCount .
  BIND (IF(?wordCount > 0, ?wordCount / 1, 0) AS ?averageWordCount)
}
"	[{'averageWordCount': Value(typed-literal:'18641')}, {'averageWordCount': Value(typed-literal:'1994')}, {'averageWordCount': Value(typed-literal:'18084')}, {'averageWordCount': Value(typed-literal:'200')}, {'averageWordCount': Value(typed-literal:'1161')}, {'averageWordCount': Value(typed-literal:'163')}, {'averageWordCount': Value(typed-literal:'593')}, {'averageWordCount': Value(typed-literal:'417')}, {'averageWordCount': Value(typed-literal:'1654')}, {'averageWordCount': Value(typed-literal:'1079')}, {'averageWordCount': Value(typed-literal:'917')}, {'averageWordCount': Value(typed-literal:'3250')}, {'averageWordCount': Value(typed-literal:'3603')}, {'averageWordCount': Value(typed-literal:'200')}, {'averageWordCount': Value(typed-literal:'13052')}, {'averageWordCount': Value(typed-literal:'1597')}, {'averageWordCount': Value(typed-literal:'4800')}, {'averageWordCount': Value(typed-literal:'1989')}, {'averageWordCount': Value(typed-literal:'58543')}, {'averageWordCount': Value(typed-literal:'2492')}, {'averageWordCount': Value(typed-literal:'23485')}, {'averageWordCount': Value(typed-literal:'505')}, {'averageWordCount': Value(typed-literal:'2912')}, {'averageWordCount': Value(typed-literal:'2000')}, {'averageWordCount': Value(typed-literal:'1511')}, {'averageWordCount': Value(typed-literal:'10332')}, {'averageWordCount': Value(typed-literal:'1400')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'6160')}, {'averageWordCount': Value(typed-literal:'76477')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'13870')}, {'averageWordCount': Value(typed-literal:'14457')}, {'averageWordCount': Value(typed-literal:'11761')}, {'averageWordCount': Value(typed-literal:'2038')}, {'averageWordCount': Value(typed-literal:'1202')}, {'averageWordCount': Value(typed-literal:'382')}, {'averageWordCount': Value(typed-literal:'3129')}, {'averageWordCount': Value(typed-literal:'25335')}, {'averageWordCount': Value(typed-literal:'1657')}, {'averageWordCount': Value(typed-literal:'947')}, {'averageWordCount': Value(typed-literal:'51963')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'2293')}, {'averageWordCount': Value(typed-literal:'2241')}, {'averageWordCount': Value(typed-literal:'364')}, {'averageWordCount': Value(typed-literal:'4555')}, {'averageWordCount': Value(typed-literal:'15105')}, {'averageWordCount': Value(typed-literal:'5388')}, {'averageWordCount': Value(typed-literal:'3163')}, {'averageWordCount': Value(typed-literal:'8125')}, {'averageWordCount': Value(typed-literal:'469')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'2665')}, {'averageWordCount': Value(typed-literal:'1905')}, {'averageWordCount': Value(typed-literal:'4845')}, {'averageWordCount': Value(typed-literal:'230')}, {'averageWordCount': Value(typed-literal:'2184')}, {'averageWordCount': Value(typed-literal:'3956')}, {'averageWordCount': Value(typed-literal:'38830')}, {'averageWordCount': Value(typed-literal:'60548')}, {'averageWordCount': Value(typed-literal:'4959')}, {'averageWordCount': Value(typed-literal:'5146')}, {'averageWordCount': Value(typed-literal:'200')}, {'averageWordCount': Value(typed-literal:'41811')}, {'averageWordCount': Value(typed-literal:'5740')}, {'averageWordCount': Value(typed-literal:'180723')}, {'averageWordCount': Value(typed-literal:'15970')}, {'averageWordCount': Value(typed-literal:'1029')}, {'averageWordCount': Value(typed-literal:'1055')}, {'averageWordCount': Value(typed-literal:'6629')}, {'averageWordCount': Value(typed-literal:'93')}, {'averageWordCount': Value(typed-literal:'1516')}, {'averageWordCount': Value(typed-literal:'6111')}, {'averageWordCount': Value(typed-literal:'701')}, {'averageWordCount': Value(typed-literal:'4')}, {'averageWordCount': Value(typed-literal:'1983')}, {'averageWordCount': Value(typed-literal:'1897')}, {'averageWordCount': Value(typed-literal:'1001')}, {'averageWordCount': Value(typed-literal:'1700')}, {'averageWordCount': Value(typed-literal:'1132')}, {'averageWordCount': Value(typed-literal:'7171')}, {'averageWordCount': Value(typed-literal:'128679')}, {'averageWordCount': Value(typed-literal:'3268')}, {'averageWordCount': Value(typed-literal:'6104')}, {'averageWordCount': Value(typed-literal:'1949')}, {'averageWordCount': Value(typed-literal:'1426')}, {'averageWordCount': Value(typed-literal:'117')}, {'averageWordCount': Value(typed-literal:'100')}, {'averageWordCount': Value(typed-literal:'1663')}, {'averageWordCount': Value(typed-literal:'9289')}, {'averageWordCount': Value(typed-literal:'1478')}, {'averageWordCount': Value(typed-literal:'2011')}, {'averageWordCount': Value(typed-literal:'10424')}, {'averageWordCount': Value(typed-literal:'76589')}, {'averageWordCount': Value(typed-literal:'33838')}, {'averageWordCount': Value(typed-literal:'54389')}, {'averageWordCount': Value(typed-literal:'1619')}, {'averageWordCount': Value(typed-literal:'2943')}, {'averageWordCount': Value(typed-literal:'1260')}, {'averageWordCount': Value(typed-literal:'31470')}, {'averageWordCount': Value(typed-literal:'14920')}, {'averageWordCount': Value(typed-literal:'1154')}, {'averageWordCount': Value(typed-literal:'19345')}, {'averageWordCount': Value(typed-literal:'1467')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'1458')}, {'averageWordCount': Value(typed-literal:'3609')}, {'averageWordCount': Value(typed-literal:'8886')}, {'averageWordCount': Value(typed-literal:'11174')}, {'averageWordCount': Value(typed-literal:'5953')}, {'averageWordCount': Value(typed-literal:'4454')}, {'averageWordCount': Value(typed-literal:'9201')}, {'averageWordCount': Value(typed-literal:'183')}, {'averageWordCount': Value(typed-literal:'76813')}, {'averageWordCount': Value(typed-literal:'9284')}, {'averageWordCount': Value(typed-literal:'3559')}, {'averageWordCount': Value(typed-literal:'2890')}, {'averageWordCount': Value(typed-literal:'5013')}, {'averageWordCount': Value(typed-literal:'101')}, {'averageWordCount': Value(typed-literal:'848')}, {'averageWordCount': Value(typed-literal:'61905')}, {'averageWordCount': Value(typed-literal:'7292')}, {'averageWordCount': Value(typed-literal:'18543')}, {'averageWordCount': Value(typed-literal:'5356')}, {'averageWordCount': Value(typed-literal:'1059')}, {'averageWordCount': Value(typed-literal:'1236')}, {'averageWordCount': Value(typed-literal:'3001')}, {'averageWordCount': Value(typed-literal:'3868')}, {'averageWordCount': Value(typed-literal:'12287')}, {'averageWordCount': Value(typed-literal:'670')}, {'averageWordCount': Value(typed-literal:'2835')}, {'averageWordCount': Value(typed-literal:'27260')}, {'averageWordCount': Value(typed-literal:'29417')}, {'averageWordCount': Value(typed-literal:'1722')}, {'averageWordCount': Value(typed-literal:'137')}, {'averageWordCount': Value(typed-literal:'10498')}, {'averageWordCount': Value(typed-literal:'100')}, {'averageWordCount': Value(typed-literal:'2912')}, {'averageWordCount': Value(typed-literal:'577')}, {'averageWordCount': Value(typed-literal:'1031')}, {'averageWordCount': Value(typed-literal:'568')}, {'averageWordCount': Value(typed-literal:'1324')}, {'averageWordCount': Value(typed-literal:'2108')}, {'averageWordCount': Value(typed-literal:'200')}, {'averageWordCount': Value(typed-literal:'66121')}, {'averageWordCount': Value(typed-literal:'7107')}, {'averageWordCount': Value(typed-literal:'60981')}, {'averageWordCount': Value(typed-literal:'14118')}, {'averageWordCount': Value(typed-literal:'400')}, {'averageWordCount': Value(typed-literal:'318')}, {'averageWordCount': Value(typed-literal:'5628')}, {'averageWordCount': Value(typed-literal:'31352')}, {'averageWordCount': Value(typed-literal:'14')}, {'averageWordCount': Value(typed-literal:'1867')}, {'averageWordCount': Value(typed-literal:'1547')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'410')}, {'averageWordCount': Value(typed-literal:'6105')}, {'averageWordCount': Value(typed-literal:'9392')}, {'averageWordCount': Value(typed-literal:'1209')}, {'averageWordCount': Value(typed-literal:'26697')}, {'averageWordCount': Value(typed-literal:'3593')}, {'averageWordCount': Value(typed-literal:'3848')}, {'averageWordCount': Value(typed-literal:'675')}, {'averageWordCount': Value(typed-literal:'1030')}, {'averageWordCount': Value(typed-literal:'2809')}, {'averageWordCount': Value(typed-literal:'5935')}, {'averageWordCount': Value(typed-literal:'976')}, {'averageWordCount': Value(typed-literal:'39648')}, {'averageWordCount': Value(typed-literal:'2460')}, {'averageWordCount': Value(typed-literal:'1731')}, {'averageWordCount': Value(typed-literal:'2815')}, {'averageWordCount': Value(typed-literal:'29634')}, {'averageWordCount': Value(typed-literal:'6527')}, {'averageWordCount': Value(typed-literal:'4968')}, {'averageWordCount': Value(typed-literal:'944')}, {'averageWordCount': Value(typed-literal:'2109')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'1596')}, {'averageWordCount': Value(typed-literal:'26760')}, {'averageWordCount': Value(typed-literal:'3220')}, {'averageWordCount': Value(typed-literal:'532')}, {'averageWordCount': Value(typed-literal:'14727')}, {'averageWordCount': Value(typed-literal:'641')}, {'averageWordCount': Value(typed-literal:'2849')}, {'averageWordCount': Value(typed-literal:'5692')}, {'averageWordCount': Value(typed-literal:'54009')}, {'averageWordCount': Value(typed-literal:'54009')}, {'averageWordCount': Value(typed-literal:'60041')}, {'averageWordCount': Value(typed-literal:'60041')}, {'averageWordCount': Value(typed-literal:'4840')}, {'averageWordCount': Value(typed-literal:'5341')}, {'averageWordCount': Value(typed-literal:'2675')}, {'averageWordCount': Value(typed-literal:'1345')}, {'averageWordCount': Value(typed-literal:'100')}, {'averageWordCount': Value(typed-literal:'2688')}, {'averageWordCount': Value(typed-literal:'1394')}, {'averageWordCount': Value(typed-literal:'2745')}, {'averageWordCount': Value(typed-literal:'2684')}, {'averageWordCount': Value(typed-literal:'1783')}, {'averageWordCount': Value(typed-literal:'1579')}, {'averageWordCount': Value(typed-literal:'1000')}, {'averageWordCount': Value(typed-literal:'2937')}, {'averageWordCount': Value(typed-literal:'4145')}, {'averageWordCount': Value(typed-literal:'1776')}, {'averageWordCount': Value(typed-literal:'5277')}, {'averageWordCount': Value(typed-literal:'536')}, {'averageWordCount': Value(typed-literal:'4553')}, {'averageWordCount': Value(typed-literal:'6085')}, {'averageWordCount': Value(typed-literal:'28629')}, {'averageWordCount': Value(typed-literal:'4534')}, {'averageWordCount': Value(typed-literal:'2326')}, {'averageWordCount': Value(typed-literal:'245')}, {'averageWordCount': Value(typed-literal:'153295')}, {'averageWordCount': Value(typed-literal:'9236')}, {'averageWordCount': Value(typed-literal:'751')}, {'averageWordCount': Value(typed-literal:'1052')}, {'averageWordCount': Value(typed-literal:'706')}, {'averageWordCount': Value(typed-literal:'84470')}, {'averageWordCount': Value(typed-literal:'1877')}, {'averageWordCount': Value(typed-literal:'1976')}, {'averageWordCount': Value(typed-literal:'5836')}, {'averageWordCount': Value(typed-literal:'1213')}, {'averageWordCount': Value(typed-literal:'3195')}, {'averageWordCount': Value(typed-literal:'623')}, {'averageWordCount': Value(typed-literal:'967')}, {'averageWordCount': Value(typed-literal:'3024')}, {'averageWordCount': Value(typed-literal:'112666')}, {'averageWordCount': Value(typed-literal:'887')}, {'averageWordCount': Value(typed-literal:'2726')}, {'averageWordCount': Value(typed-literal:'6149')}, {'averageWordCount': Value(typed-literal:'1106')}, {'averageWordCount': Value(typed-literal:'1582')}, {'averageWordCount': Value(typed-literal:'984')}, {'averageWordCount': Value(typed-literal:'4590')}, {'averageWordCount': Value(typed-literal:'9087')}, {'averageWordCount': Value(typed-literal:'1514')}, {'averageWordCount': Value(typed-literal:'722')}, {'averageWordCount': Value(typed-literal:'1004')}, {'averageWordCount': Value(typed-literal:'50')}, {'averageWordCount': Value(typed-literal:'1200')}, {'averageWordCount': Value(typed-literal:'8135')}, {'averageWordCount': Value(typed-literal:'100')}, {'averageWordCount': Value(typed-literal:'1617')}, {'averageWordCount': Value(typed-literal:'2172')}, {'averageWordCount': Value(typed-literal:'304')}, {'averageWordCount': Value(typed-literal:'604')}, {'averageWordCount': Value(typed-literal:'5474')}, {'averageWordCount': Value(typed-literal:'13169')}, {'averageWordCount': Value(typed-literal:'8293')}, {'averageWordCount': Value(typed-literal:'4819')}, {'averageWordCount': Value(typed-literal:'4246')}, {'averageWordCount': Value(typed-literal:'3187')}, {'averageWordCount': Value(typed-literal:'41436')}, {'averageWordCount': Value(typed-literal:'3281')}, {'averageWordCount': Value(typed-literal:'463')}, {'averageWordCount': Value(typed-literal:'10677')}, {'averageWordCount': Value(typed-literal:'2575')}, {'averageWordCount': Value(typed-literal:'2541')}, {'averageWordCount': Value(typed-literal:'4656')}, {'averageWordCount': Value(typed-literal:'896')}, {'averageWordCount': Value(typed-literal:'10406')}, {'averageWordCount': Value(typed-literal:'2859')}, {'averageWordCount': Value(typed-literal:'1784')}, {'averageWordCount': Value(typed-literal:'740')}, {'averageWordCount': Value(typed-literal:'8647')}, {'averageWordCount': Value(typed-literal:'718')}, {'averageWordCount': Value(typed-literal:'855')}, {'averageWordCount': Value(typed-literal:'724')}, {'averageWordCount': Value(typed-literal:'8727')}, {'averageWordCount': Value(typed-literal:'8904')}, {'averageWordCount': Value(typed-literal:'180664')}, {'averageWordCount': Value(typed-literal:'10619')}, {'averageWordCount': Value(typed-literal:'995')}, {'averageWordCount': Value(typed-literal:'146')}, {'averageWordCount': Value(typed-literal:'3410')}, {'averageWordCount': Value(typed-literal:'2028')}, {'averageWordCount': Value(typed-literal:'10998')}, {'averageWordCount': Value(typed-literal:'624')}, {'averageWordCount': Value(typed-literal:'16938')}, {'averageWordCount': Value(typed-literal:'160')}, {'averageWordCount': Value(typed-literal:'1979')}, {'averageWordCount': Value(typed-literal:'60')}, {'averageWordCount': Value(typed-literal:'4527')}, {'averageWordCount': Value(typed-literal:'2387')}, {'averageWordCount': Value(typed-literal:'200')}, {'averageWordCount': Value(typed-literal:'7612')}, {'averageWordCount': Value(typed-literal:'5332')}, {'averageWordCount': Value(typed-literal:'16107')}, {'averageWordCount': Value(typed-literal:'2981')}, {'averageWordCount': Value(typed-literal:'200')}, {'averageWordCount': Value(typed-literal:'31819')}, {'averageWordCount': Value(typed-literal:'8234')}, {'averageWordCount': Value(typed-literal:'2620')}, {'averageWordCount': Value(typed-literal:'652')}, {'averageWordCount': Value(typed-literal:'3239')}, {'averageWordCount': Value(typed-literal:'1011')}, {'averageWordCount': Value(typed-literal:'7596')}, {'averageWordCount': Value(typed-literal:'17910')}, {'averageWordCount': Value(typed-literal:'15411')}, {'averageWordCount': Value(typed-literal:'382')}, {'averageWordCount': Value(typed-literal:'4847')}, {'averageWordCount': Value(typed-literal:'883')}, {'averageWordCount': Value(typed-literal:'7200')}, {'averageWordCount': Value(typed-literal:'504')}, {'averageWordCount': Value(typed-literal:'832')}, {'averageWordCount': Value(typed-literal:'164')}, {'averageWordCount': Value(typed-literal:'490')}, {'averageWordCount': Value(typed-literal:'4265')}, {'averageWordCount': Value(typed-literal:'1092')}, {'averageWordCount': Value(typed-literal:'610')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'4')}, {'averageWordCount': Value(typed-literal:'2765')}, {'averageWordCount': Value(typed-literal:'1524')}, {'averageWordCount': Value(typed-literal:'8033')}, {'averageWordCount': Value(typed-literal:'2154')}, {'averageWordCount': Value(typed-literal:'157')}, {'averageWordCount': Value(typed-literal:'4972')}, {'averageWordCount': Value(typed-literal:'5994')}, {'averageWordCount': Value(typed-literal:'1449')}, {'averageWordCount': Value(typed-literal:'330')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'10312')}, {'averageWordCount': Value(typed-literal:'209')}, {'averageWordCount': Value(typed-literal:'485')}, {'averageWordCount': Value(typed-literal:'3535')}, {'averageWordCount': Value(typed-literal:'696')}, {'averageWordCount': Value(typed-literal:'47')}, {'averageWordCount': Value(typed-literal:'7320')}, {'averageWordCount': Value(typed-literal:'120')}, {'averageWordCount': Value(typed-literal:'90')}, {'averageWordCount': Value(typed-literal:'636')}, {'averageWordCount': Value(typed-literal:'7249')}, {'averageWordCount': Value(typed-literal:'1027')}, {'averageWordCount': Value(typed-literal:'1910')}, {'averageWordCount': Value(typed-literal:'2704')}, {'averageWordCount': Value(typed-literal:'16519')}, {'averageWordCount': Value(typed-literal:'33710')}, {'averageWordCount': Value(typed-literal:'5957')}, {'averageWordCount': Value(typed-literal:'27788')}, {'averageWordCount': Value(typed-literal:'20136')}, {'averageWordCount': Value(typed-literal:'94341')}, {'averageWordCount': Value(typed-literal:'2199')}, {'averageWordCount': Value(typed-literal:'9102')}, {'averageWordCount': Value(typed-literal:'2736')}, {'averageWordCount': Value(typed-literal:'3642')}, {'averageWordCount': Value(typed-literal:'1103')}, {'averageWordCount': Value(typed-literal:'43184')}, {'averageWordCount': Value(typed-literal:'11085')}, {'averageWordCount': Value(typed-literal:'50')}, {'averageWordCount': Value(typed-literal:'1101')}, {'averageWordCount': Value(typed-literal:'13158')}, {'averageWordCount': Value(typed-literal:'2136')}, {'averageWordCount': Value(typed-literal:'8097')}, {'averageWordCount': Value(typed-literal:'5804')}, {'averageWordCount': Value(typed-literal:'1122')}, {'averageWordCount': Value(typed-literal:'843')}, {'averageWordCount': Value(typed-literal:'2212')}, {'averageWordCount': Value(typed-literal:'981')}, {'averageWordCount': Value(typed-literal:'20606')}, {'averageWordCount': Value(typed-literal:'1178')}, {'averageWordCount': Value(typed-literal:'9190')}, {'averageWordCount': Value(typed-literal:'1011')}, {'averageWordCount': Value(typed-literal:'351')}, {'averageWordCount': Value(typed-literal:'1074')}, {'averageWordCount': Value(typed-literal:'1117')}, {'averageWordCount': Value(typed-literal:'10908')}, {'averageWordCount': Value(typed-literal:'706')}, {'averageWordCount': Value(typed-literal:'1418')}, {'averageWordCount': Value(typed-literal:'2100')}, {'averageWordCount': Value(typed-literal:'3544')}, {'averageWordCount': Value(typed-literal:'30845')}, {'averageWordCount': Value(typed-literal:'1289')}, {'averageWordCount': Value(typed-literal:'3234')}, {'averageWordCount': Value(typed-literal:'1699')}, {'averageWordCount': Value(typed-literal:'18054')}, {'averageWordCount': Value(typed-literal:'117')}, {'averageWordCount': Value(typed-literal:'9756')}, {'averageWordCount': Value(typed-literal:'1196')}, {'averageWordCount': Value(typed-literal:'18822')}, {'averageWordCount': Value(typed-literal:'5709')}, {'averageWordCount': Value(typed-literal:'477')}, {'averageWordCount': Value(typed-literal:'14930')}, {'averageWordCount': Value(typed-literal:'1817')}, {'averageWordCount': Value(typed-literal:'4030')}, {'averageWordCount': Value(typed-literal:'646')}, {'averageWordCount': Value(typed-literal:'200')}, {'averageWordCount': Value(typed-literal:'11211')}, {'averageWordCount': Value(typed-literal:'976')}, {'averageWordCount': Value(typed-literal:'927')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'28282')}, {'averageWordCount': Value(typed-literal:'6563')}, {'averageWordCount': Value(typed-literal:'470')}, {'averageWordCount': Value(typed-literal:'2445')}, {'averageWordCount': Value(typed-literal:'6191')}, {'averageWordCount': Value(typed-literal:'5613')}, {'averageWordCount': Value(typed-literal:'20245')}, {'averageWordCount': Value(typed-literal:'1234')}, {'averageWordCount': Value(typed-literal:'41449')}, {'averageWordCount': Value(typed-literal:'7485')}, {'averageWordCount': Value(typed-literal:'1063')}, {'averageWordCount': Value(typed-literal:'1543')}, {'averageWordCount': Value(typed-literal:'700')}, {'averageWordCount': Value(typed-literal:'1750')}, {'averageWordCount': Value(typed-literal:'1288')}, {'averageWordCount': Value(typed-literal:'16388')}, {'averageWordCount': Value(typed-literal:'16388')}, {'averageWordCount': Value(typed-literal:'16402')}, {'averageWordCount': Value(typed-literal:'16402')}, {'averageWordCount': Value(typed-literal:'1588')}, {'averageWordCount': Value(typed-literal:'1516')}, {'averageWordCount': Value(typed-literal:'10')}, {'averageWordCount': Value(typed-literal:'1539')}, {'averageWordCount': Value(typed-literal:'1182')}, {'averageWordCount': Value(typed-literal:'3221')}, {'averageWordCount': Value(typed-literal:'1200')}, {'averageWordCount': Value(typed-literal:'10163')}, {'averageWordCount': Value(typed-literal:'936')}, {'averageWordCount': Value(typed-literal:'1112')}, {'averageWordCount': Value(typed-literal:'1302')}, {'averageWordCount': Value(typed-literal:'1959')}, {'averageWordCount': Value(typed-literal:'2155')}, {'averageWordCount': Value(typed-literal:'530')}, {'averageWordCount': Value(typed-literal:'1357')}, {'averageWordCount': Value(typed-literal:'118252')}, {'averageWordCount': Value(typed-literal:'15659')}, {'averageWordCount': Value(typed-literal:'3090')}, {'averageWordCount': Value(typed-literal:'4665')}, {'averageWordCount': Value(typed-literal:'2380')}, {'averageWordCount': Value(typed-literal:'1406')}, {'averageWordCount': Value(typed-literal:'3316')}, {'averageWordCount': Value(typed-literal:'4763')}, {'averageWordCount': Value(typed-literal:'9957')}, {'averageWordCount': Value(typed-literal:'1315')}, {'averageWordCount': Value(typed-literal:'95867')}, {'averageWordCount': Value(typed-literal:'27133')}, {'averageWordCount': Value(typed-literal:'5124')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'1635')}, {'averageWordCount': Value(typed-literal:'2120')}, {'averageWordCount': Value(typed-literal:'1835')}, {'averageWordCount': Value(typed-literal:'289')}, {'averageWordCount': Value(typed-literal:'4631')}, {'averageWordCount': Value(typed-literal:'6508')}, {'averageWordCount': Value(typed-literal:'416')}, {'averageWordCount': Value(typed-literal:'622')}, {'averageWordCount': Value(typed-literal:'2621')}, {'averageWordCount': Value(typed-literal:'5298')}, {'averageWordCount': Value(typed-literal:'2606')}, {'averageWordCount': Value(typed-literal:'958')}, {'averageWordCount': Value(typed-literal:'1424')}, {'averageWordCount': Value(typed-literal:'10182')}, {'averageWordCount': Value(typed-literal:'2163')}, {'averageWordCount': Value(typed-literal:'2188')}, {'averageWordCount': Value(typed-literal:'1519')}, {'averageWordCount': Value(typed-literal:'23157')}, {'averageWordCount': Value(typed-literal:'1997')}, {'averageWordCount': Value(typed-literal:'2104')}, {'averageWordCount': Value(typed-literal:'1931')}, {'averageWordCount': Value(typed-literal:'970')}, {'averageWordCount': Value(typed-literal:'707')}, {'averageWordCount': Value(typed-literal:'1201')}, {'averageWordCount': Value(typed-literal:'3560')}, {'averageWordCount': Value(typed-literal:'348')}, {'averageWordCount': Value(typed-literal:'668')}, {'averageWordCount': Value(typed-literal:'297')}, {'averageWordCount': Value(typed-literal:'34291')}, {'averageWordCount': Value(typed-literal:'3054')}, {'averageWordCount': Value(typed-literal:'100')}, {'averageWordCount': Value(typed-literal:'909')}, {'averageWordCount': Value(typed-literal:'2685')}, {'averageWordCount': Value(typed-literal:'1892')}, {'averageWordCount': Value(typed-literal:'1594')}, {'averageWordCount': Value(typed-literal:'1987')}, {'averageWordCount': Value(typed-literal:'2566')}, {'averageWordCount': Value(typed-literal:'49269')}, {'averageWordCount': Value(typed-literal:'3115')}, {'averageWordCount': Value(typed-literal:'2594')}, {'averageWordCount': Value(typed-literal:'359')}, {'averageWordCount': Value(typed-literal:'4012')}, {'averageWordCount': Value(typed-literal:'4210')}, {'averageWordCount': Value(typed-literal:'2219')}, {'averageWordCount': Value(typed-literal:'481')}, {'averageWordCount': Value(typed-literal:'12042')}, {'averageWordCount': Value(typed-literal:'2407')}, {'averageWordCount': Value(typed-literal:'3167')}, {'averageWordCount': Value(typed-literal:'26260')}, {'averageWordCount': Value(typed-literal:'1640')}, {'averageWordCount': Value(typed-literal:'4499')}, {'averageWordCount': Value(typed-literal:'13048')}, {'averageWordCount': Value(typed-literal:'78893')}, {'averageWordCount': Value(typed-literal:'2345')}, {'averageWordCount': Value(typed-literal:'2360')}, {'averageWordCount': Value(typed-literal:'481')}, {'averageWordCount': Value(typed-literal:'38943')}, {'averageWordCount': Value(typed-literal:'573')}, {'averageWordCount': Value(typed-literal:'2133')}, {'averageWordCount': Value(typed-literal:'1690')}, {'averageWordCount': Value(typed-literal:'2194')}, {'averageWordCount': Value(typed-literal:'872')}, {'averageWordCount': Value(typed-literal:'3827')}, {'averageWordCount': Value(typed-literal:'4373')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'1351')}, {'averageWordCount': Value(typed-literal:'1176')}, {'averageWordCount': Value(typed-literal:'1495')}, {'averageWordCount': Value(typed-literal:'1249')}, {'averageWordCount': Value(typed-literal:'890')}, {'averageWordCount': Value(typed-literal:'1143')}, {'averageWordCount': Value(typed-literal:'2267')}, {'averageWordCount': Value(typed-literal:'30')}, {'averageWordCount': Value(typed-literal:'130')}, {'averageWordCount': Value(typed-literal:'2218')}, {'averageWordCount': Value(typed-literal:'117')}, {'averageWordCount': Value(typed-literal:'1634')}, {'averageWordCount': Value(typed-literal:'1099')}, {'averageWordCount': Value(typed-literal:'1676')}, {'averageWordCount': Value(typed-literal:'14857')}, {'averageWordCount': Value(typed-literal:'16167')}, {'averageWordCount': Value(typed-literal:'158')}, {'averageWordCount': Value(typed-literal:'2182')}, {'averageWordCount': Value(typed-literal:'936')}, {'averageWordCount': Value(typed-literal:'10129')}, {'averageWordCount': Value(typed-literal:'481')}, {'averageWordCount': Value(typed-literal:'117')}, {'averageWordCount': Value(typed-literal:'1624')}, {'averageWordCount': Value(typed-literal:'1660')}, {'averageWordCount': Value(typed-literal:'13459')}, {'averageWordCount': Value(typed-literal:'118')}, {'averageWordCount': Value(typed-literal:'119')}, {'averageWordCount': Value(typed-literal:'103400')}, {'averageWordCount': Value(typed-literal:'2909')}, {'averageWordCount': Value(typed-literal:'805')}, {'averageWordCount': Value(typed-literal:'117')}, {'averageWordCount': Value(typed-literal:'394')}, {'averageWordCount': Value(typed-literal:'117')}, {'averageWordCount': Value(typed-literal:'2067')}, {'averageWordCount': Value(typed-literal:'31')}, {'averageWordCount': Value(typed-literal:'119')}, {'averageWordCount': Value(typed-literal:'117')}, {'averageWordCount': Value(typed-literal:'117')}, {'averageWordCount': Value(typed-literal:'691')}, {'averageWordCount': Value(typed-literal:'708')}, {'averageWordCount': Value(typed-literal:'1182')}, {'averageWordCount': Value(typed-literal:'16753')}, {'averageWordCount': Value(typed-literal:'2298')}, {'averageWordCount': Value(typed-literal:'3299')}, {'averageWordCount': Value(typed-literal:'450')}, {'averageWordCount': Value(typed-literal:'175')}, {'averageWordCount': Value(typed-literal:'1049')}, {'averageWordCount': Value(typed-literal:'1300')}, {'averageWordCount': Value(typed-literal:'1776')}, {'averageWordCount': Value(typed-literal:'98820')}, {'averageWordCount': Value(typed-literal:'98865')}, {'averageWordCount': Value(typed-literal:'144111')}, {'averageWordCount': Value(typed-literal:'1418')}, {'averageWordCount': Value(typed-literal:'887')}, {'averageWordCount': Value(typed-literal:'14673')}, {'averageWordCount': Value(typed-literal:'7811')}, {'averageWordCount': Value(typed-literal:'5610')}, {'averageWordCount': Value(typed-literal:'11335')}, {'averageWordCount': Value(typed-literal:'2156')}, {'averageWordCount': Value(typed-literal:'118')}, {'averageWordCount': Value(typed-literal:'596')}, {'averageWordCount': Value(typed-literal:'695')}, {'averageWordCount': Value(typed-literal:'4600')}, {'averageWordCount': Value(typed-literal:'36313')}, {'averageWordCount': Value(typed-literal:'200')}, {'averageWordCount': Value(typed-literal:'1404')}, {'averageWordCount': Value(typed-literal:'102745')}, {'averageWordCount': Value(typed-literal:'25')}, {'averageWordCount': Value(typed-literal:'669')}, {'averageWordCount': Value(typed-literal:'118')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'580')}, {'averageWordCount': Value(typed-literal:'117')}, {'averageWordCount': Value(typed-literal:'2935')}, {'averageWordCount': Value(typed-literal:'117')}, {'averageWordCount': Value(typed-literal:'21422')}, {'averageWordCount': Value(typed-literal:'117')}, {'averageWordCount': Value(typed-literal:'351')}, {'averageWordCount': Value(typed-literal:'3250')}, {'averageWordCount': Value(typed-literal:'4501')}, {'averageWordCount': Value(typed-literal:'21593')}, {'averageWordCount': Value(typed-literal:'700')}, {'averageWordCount': Value(typed-literal:'2358')}, {'averageWordCount': Value(typed-literal:'17304')}, {'averageWordCount': Value(typed-literal:'479')}, {'averageWordCount': Value(typed-literal:'4087')}, {'averageWordCount': Value(typed-literal:'198')}, {'averageWordCount': Value(typed-literal:'772')}, {'averageWordCount': Value(typed-literal:'333')}, {'averageWordCount': Value(typed-literal:'265')}, {'averageWordCount': Value(typed-literal:'1925')}, {'averageWordCount': Value(typed-literal:'4733')}, {'averageWordCount': Value(typed-literal:'100')}, {'averageWordCount': Value(typed-literal:'18746')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'5201')}, {'averageWordCount': Value(typed-literal:'3896')}, {'averageWordCount': Value(typed-literal:'3565')}, {'averageWordCount': Value(typed-literal:'3458')}, {'averageWordCount': Value(typed-literal:'4')}, {'averageWordCount': Value(typed-literal:'1912')}, {'averageWordCount': Value(typed-literal:'942')}, {'averageWordCount': Value(typed-literal:'675')}, {'averageWordCount': Value(typed-literal:'10358')}, {'averageWordCount': Value(typed-literal:'8024')}, {'averageWordCount': Value(typed-literal:'1098')}, {'averageWordCount': Value(typed-literal:'2561')}, {'averageWordCount': Value(typed-literal:'847')}, {'averageWordCount': Value(typed-literal:'129604')}, {'averageWordCount': Value(typed-literal:'12243')}, {'averageWordCount': Value(typed-literal:'101267')}, {'averageWordCount': Value(typed-literal:'200')}, {'averageWordCount': Value(typed-literal:'5387')}, {'averageWordCount': Value(typed-literal:'3194')}, {'averageWordCount': Value(typed-literal:'836')}, {'averageWordCount': Value(typed-literal:'2739')}, {'averageWordCount': Value(typed-literal:'4660')}, {'averageWordCount': Value(typed-literal:'1329')}, {'averageWordCount': Value(typed-literal:'4073')}, {'averageWordCount': Value(typed-literal:'114331')}, {'averageWordCount': Value(typed-literal:'116')}, {'averageWordCount': Value(typed-literal:'2451')}, {'averageWordCount': Value(typed-literal:'1193')}, {'averageWordCount': Value(typed-literal:'8422')}, {'averageWordCount': Value(typed-literal:'2419')}, {'averageWordCount': Value(typed-literal:'19')}, {'averageWordCount': Value(typed-literal:'0')}, {'averageWordCount': Value(typed-literal:'1332')}, {'averageWordCount': Value(typed-literal:'1854')}, {'averageWordCount': Value(typed-literal:'607')}, {'averageWordCount': Value(typed-literal:'1712')}, {'averageWordCount': Value(typed-literal:'9351')}, {'averageWordCount': Value(typed-literal:'117')}, {'averageWordCount': Value(typed-literal:'8158')}, {'averageWordCount': Value(typed-literal:'86')}, {'averageWordCount': Value(typed-literal:'408')}, {'averageWordCount': Va	0	1	1	Wrong predicate		
261	261	en	How many stories are tagged as fire slugs?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""fire slugs"" . }"	[{'stories': Value(typed-literal:'1')}]	261	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are tagged as Dark-ish?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Dark-ish"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as [[keyword]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""[[keyword]]"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as explicit?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

Question: How many stories are tagged as fire slugs?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(DISTINCT ?story) as ?fire_slugs_stories WHERE { ?story golem:keyword ""fire slugs"" . }
"	[{'fire_slugs_stories': Value(typed-literal:'1')}]	0	1	1	Evaluation method error	Different var name	
262	262	en	How many stories are tagged as Dark-ish?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Dark-ish"" . }"	[{'stories': Value(typed-literal:'94')}]	262	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are tagged as Dark Remus Lupin?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Dark Remus Lupin"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as explicit?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as fire slugs?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""fire slugs"" . }
    </SPARQL>

    ###
    

Question: How many stories are tagged as Dark-ish?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Dark-ish"" . }
"	[{'stories': Value(typed-literal:'94')}]	1	0	0			
263	263	en	How many stories are tagged as Swimmer Harry Potter?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Swimmer Harry Potter"" . }"	[{'stories': Value(typed-literal:'1')}]	263	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are tagged as Spell cast to help populate the wizarding world?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Spell cast to help populate the wizarding world"" . }
    </SPARQL>

    ###
    

    Question: How many chapters does Guardian of Hogwarts have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Guardian of Hogwarts"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as fire slugs?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""fire slugs"" . }
    </SPARQL>

    ###
    

Question: How many stories are tagged as Swimmer Harry Potter?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Swimmer Harry Potter"" . }
"	[{'stories': Value(typed-literal:'1')}]	1	0	0			
264	264	en	How many stories are tagged as Dark Remus Lupin?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Dark Remus Lupin"" . }"	[{'stories': Value(typed-literal:'56')}]	264	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are tagged as Dark-ish?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Dark-ish"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as fire slugs?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""fire slugs"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as Swimmer Harry Potter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Swimmer Harry Potter"" . }
    </SPARQL>

    ###
    

Question: How many stories are tagged as Dark Remus Lupin?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Dark Remus Lupin"" . }
"	[{'stories': Value(typed-literal:'56')}]	1	0	0			
265	265	en	How many stories are tagged as maybe bestiality??	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""maybe bestiality?"" . }"	[{'stories': Value(typed-literal:'2')}]	265	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are tagged as Crying During Sex?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Crying During Sex"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as explicit?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as Dark-ish?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Dark-ish"" . }
    </SPARQL>

    ###
    

Question: How many stories are tagged as maybe bestiality??

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""maybe bestiality"" . }
"	[{'stories': Value(typed-literal:'0')}]	0	1	1	Failed NER		punctuation (missing ? In the story name)
266	266	en	How many stories are tagged as theyre soooo cute in this one omg?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""theyre soooo cute in this one omg"" . }"	[{'stories': Value(typed-literal:'1')}]	266	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are tagged as NaNoWriMo?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""NaNoWriMo"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as [[keyword]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""[[keyword]]"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as explicit?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

Question: How many stories are tagged as theyre soooo cute in this one omg?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { 
    ?story golem:keyword ""theyre soooo cute"" . 
}
"	[{'stories': Value(typed-literal:'0')}]	0	1	1	Failed NER		
267	267	en	How many stories are tagged as criminal minds preferences?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""criminal minds preferences"" . }"	[{'stories': Value(typed-literal:'1')}]	267	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are tagged as Dark-ish?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Dark-ish"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as explicit?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as maybe bestiality??

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""maybe bestiality?"" . }
    </SPARQL>

    ###
    

Question: How many stories are tagged as criminal minds preferences?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""criminal minds preferences"" . }
"	[{'stories': Value(typed-literal:'1')}]	1	0	0			
268	268	en	How many stories are tagged as NaNoWriMo?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""NaNoWriMo"" . }"	[{'stories': Value(typed-literal:'1048')}]	268	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are tagged as [[keyword]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""[[keyword]]"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as Dark-ish?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Dark-ish"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as theyre soooo cute in this one omg?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""theyre soooo cute in this one omg"" . }
    </SPARQL>

    ###
    

Question: How many stories are tagged as NaNoWriMo?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(DISTINCT ?story) as ?stories 
WHERE { 
  ?story golem:keyword ""NaNoWriMo"" . 
} 
"	[{'stories': Value(typed-literal:'1048')}]	1	0	0			
269	269	en	How many stories are tagged as Crying During Sex?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Crying During Sex"" . }"	[{'stories': Value(typed-literal:'2107')}]	269	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are tagged as explicit?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as maybe bestiality??

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""maybe bestiality?"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as [[keyword]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""[[keyword]]"" . }
    </SPARQL>

    ###
    

Question: How many stories are tagged as Crying During Sex?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { 
  ?story golem:keyword ""Crying During Sex"" . 
}
"	[{'stories': Value(typed-literal:'2107')}]	1	0	0			
270	270	en	How many stories are tagged as Spell cast to help populate the wizarding world?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Spell cast to help populate the wizarding world"" . }"	[{'stories': Value(typed-literal:'1')}]	270	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are tagged as Swimmer Harry Potter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Swimmer Harry Potter"" . }
    </SPARQL>

    ###
    

    Question: What stories is All the Gingers featured in?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""All the Gingers"" . }
    </SPARQL>

    ###
    

    Question: How many chapters does Twilight Magic/Black Family have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Twilight Magic/Black Family"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: How many stories are tagged as Spell cast to help populate the wizarding world?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { 
?story golem:keyword ""Spell cast to help populate the wizarding world"" . }
"	[{'stories': Value(typed-literal:'1')}]	1	0	0			
271	271	en	How many authors are represented in the data?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?authors) WHERE { ?story golem:author ?author . }	[{'authors': Value(typed-literal:'1234209')}]	271	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many authors have uploaded a story?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?uploads) WHERE { ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from IdentityV____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""IdentityV____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: How many chapters does [[story]] have?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: How many authors are represented in the data?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT (COUNT(DISTINCT ?author) as ?number_of_authors) WHERE { 
  ?story golem:author ?author . 
} 
"	"EndPointInternalError: The endpoint returned the HTTP status code 500. 

Response:
b'Virtuoso S1TAT Error Query did not complete due to ANYTIME timeout.\r\n'"	0	1	1	Failed execution		
272	272	en	How many stories are there on Archive of Our Own?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:story_id ?id }	[{'stories': Value(typed-literal:'8546450')}]	272	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many authors have uploaded a story?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?uploads) WHERE { ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: How many stories are uploaded per year?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }
    </SPARQL>

    ###
    

    Question: How many __ stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__"" . }
    </SPARQL>

    ###
    

Question: How many stories are there on Archive of Our Own?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT (COUNT(DISTINCT ?story) as ?totalStories) WHERE { 
    ?story golem:fandom ""Archive of Our Own"" .
}
"	[{'totalStories': Value(typed-literal:'58')}]	0	1	1	Wrong predicate	Wrong choice	
274	274	en	What is the average number of comments for stories from The Professionals (TV 2020)?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""The Professionals (TV 2020)"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'1.5')}]	274	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the average number of comments for stories from Glory of the Special Forces (TV)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""Glory of the Special Forces (TV)"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from DS - Fandom?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""DS - Fandom"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from [[fandom]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: What is the average number of comments for stories from The Professionals (TV 2020)?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""The Professionals (TV 2020)"" . ?story golem:numberOfComments ?comments . }
"	[{'avg_number_of_comments': Value(typed-literal:'1.5')}]	1	0	0			
275	275	en	What is the average number of comments for stories from #Original Characters - Freeform?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""#Original Characters - Freeform"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	275	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the average number of comments for stories from [[fandom]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from ____tag?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""____tag"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from _____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: What is the average number of comments for stories from #Original Characters - Freeform?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
    ?story golem:fandom ""#Original Characters - Freeform"" . 
    ?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	1	0	0			
276	276	en	What is the average number of comments for stories from __?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""__"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	276	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the average number of comments for stories from _____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from ____tag?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""____tag"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from __ - Fandom?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""__ - Fandom"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: What is the average number of comments for stories from __?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
    ?story golem:fandom ""__"" . 
    ?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	1	0	0			
277	277	en	What is the average number of comments for stories from ____tag?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""____tag"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	277	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the average number of comments for stories from _____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from __?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""__"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from __ - Fandom?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""__ - Fandom"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: What is the average number of comments for stories from ____tag?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT AVG(?comments) AS ?avg_number_of_comments 
WHERE { 
  ?story golem:fandom ""____tag"" . 
  ?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	1	0	0			
278	278	en	What is the average number of comments for stories from Glory of the Special Forces (TV)?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""Glory of the Special Forces (TV)"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	278	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the average number of comments for stories from The Professionals (TV 2020)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""The Professionals (TV 2020)"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from DS - Fandom?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""DS - Fandom"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from [[fandom]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: What is the average number of comments for stories from Glory of the Special Forces (TV)?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""Glory of the Special Forces (TV)"" . ?story golem:numberOfComments ?comments . }
"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	1	0	0			
279	279	en	What is the average number of comments for stories from DS - Fandom?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""DS - Fandom"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	279	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the average number of comments for stories from [[fandom]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from __ - Fandom?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""__ - Fandom"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from __?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""__"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: What is the average number of comments for stories from DS - Fandom?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
    ?story golem:fandom ""DS - Fandom"" . 
    ?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	1	0	0			
280	280	en	What is the average number of comments for stories from Carlos Rey Emperador (TV)?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""Carlos Rey Emperador (TV)"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'10168.8')}]	280	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the average number of comments for stories from The Professionals (TV 2020)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""The Professionals (TV 2020)"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from [[fandom]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from __?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""__"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: What is the average number of comments for stories from Carlos Rey Emperador (TV)?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
?story golem:fandom ""Carlos Rey Emperador (TV)"" . 
?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'10168.8')}]	1	0	0			
281	281	en	What is the average number of comments for stories from _____?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	281	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the average number of comments for stories from __?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""__"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from ____tag?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""____tag"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from __ - Fandom?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""__ - Fandom"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: What is the average number of comments for stories from _____?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
    ?story golem:fandom ""_____"" . 
    ?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	1	0	0			
282	282	en	What is the average number of comments for stories from IdentityV____?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""IdentityV____"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'1')}]	282	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the average number of comments for stories from __?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""__"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from _____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from ____tag?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""____tag"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: What is the average number of comments for stories from IdentityV____?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
?story golem:fandom ""IdentityV____"" . 
?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'1')}]	1	0	0			
283	283	en	What is the average number of comments for stories from __ - Fandom?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""__ - Fandom"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'0.4')}]	283	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: What is the average number of comments for stories from [[fandom]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from _____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from __?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""__"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: What is the average number of comments for stories from __ - Fandom?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
    ?story golem:fandom ""__ - Fandom"" . 
    ?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'0.4')}]	1	0	0			
317	317	en	How many stories are tagged as explicit?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }"	[{'explicit_stories': Value(typed-literal:'1432006')}]	317	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories are tagged as Dark-ish?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Dark-ish"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as [[keyword]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""[[keyword]]"" . }
    </SPARQL>

    ###
    

    Question: How many stories are tagged as Crying During Sex?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Crying During Sex"" . }
    </SPARQL>

    ###
    

Question: How many stories are tagged as explicit?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""explicit"" . }
"	[{'stories': Value(typed-literal:'0')}]	0	1	1	Wrong predicate	Wrong choice	explicit interpreted as keyword instead of having its own predicate
318	318	en	How much feedback do stories usually get?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos AVG(?comments) AS ?average_number_of_comments WHERE { ?story golem:numberOfKudos ?kudos . ?story golem:numberOfComments ?comments . }	[{'average_number_of_kudos': Value(typed-literal:'152.312722451740173'), 'average_number_of_comments': Value(typed-literal:'25.433749929559123')}]	318	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: How many stories have received no feedback?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?no_feedback_stories WHERE { ?story golem:numberOfComments ?comments . ?story golem:numberOfKudos ?kudos . FILTER(?comments=0 && ?kudos=0) }
    </SPARQL>

    ###
    

    Question: How many GetBackers stories are there?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""GetBackers"" . }
    </SPARQL>

    ###
    

    Question: What is the average number of comments for stories from _____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: How much feedback do stories usually get?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?feedback) AS ?avg_feedback WHERE { 
?story golem:numberOfComments ?comments .
?story golem:numberOfKudos ?kudos .
?feedback (SUM (?comments + ?kudos)) / 2 AS ?total_feedback .
}
"	"QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed. 

Response:
b""Virtuoso 37000 Error SP030: SPARQL compiler, line 10: syntax error at 'SUM' before '('\n\nSPARQL query:\ndefine sql:big-data-const 0\n#output-format:application/sparql-results+json\n\nprefix golem: <https://golemlab.eu/graph/> \nprefix dc: <http://purl.org/dc/terms/> \nprefix gc: <https://ontology.golemlab.eu/> \nSELECT AVG(?feedback) AS ?avg_feedback WHERE { \n?story golem:numberOfComments ?comments .\n?story golem:numberOfKudos ?kudos .\n?feedback (SUM (?comments + ?kudos)) / 2 AS ?total_feedback .\n}\n"""	0	1	1	Failed execution		
320	320	es	Muéstrame historias del fandom ___06_	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""___06_"" . ?story golem:title ?title . }"	[{'title': Value(literal:'___06_')}]	320	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del fandom ___ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""___ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de ________ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""________ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del fandom ___06_

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""___06_"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'___06_')}]	1	0	0			
321	321	es	Muéstrame historias del fandom Led Zeppelin	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Led Zeppelin"" . ?story golem:title ?title . }"	"[{'title': Value(literal:""Since I've been leaving you"")}, {'title': Value(literal:'the Thief')}, {'title': Value(literal:'__________Night Flight')}, {'title': Value(literal:'In Your Time of Dying ____')}, {'title': Value(literal:'Just Right')}, {'title': Value(literal:'Licks')}, {'title': Value(literal:""That's all it ever really was"")}, {'title': Value(literal:'__')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'__')}, {'title': Value(literal:'___')}, {'title': Value(literal:'____')}, {'title': Value(literal:'__')}, {'title': Value(literal:'____')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Jimbert Fables')}, {'title': Value(literal:'Gift')}, {'title': Value(literal:'___')}, {'title': Value(literal:'___')}, {'title': Value(literal:'Money is the anthem of success')}, {'title': Value(literal:'Wide as a Landscape')}, {'title': Value(literal:'___')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'__')}, {'title': Value(literal:'Till the Heaven')}, {'title': Value(literal:'__/________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'______')}, {'title': Value(literal:'_Hang the DJ __DJ_')}, {'title': Value(literal:'_____________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Any Rags')}, {'title': Value(literal:'Title What Title')}, {'title': Value(literal:'Going Backwards')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Good Dream Bad Dream')}, {'title': Value(literal:'____')}, {'title': Value(literal:'__')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'_________ _____ «________ ____»')}, {'title': Value(literal:'______ _ _____')}, {'title': Value(literal:'Five Years Gone')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____________')}, {'title': Value(literal:'Gallows Pole')}, {'title': Value(literal:'THE GANG SOLVES A MYSTERY')}, {'title': Value(literal:'THE GANG CELEBRATES A BIRTHDAY')}, {'title': Value(literal:'L’Albatros')}, {'title': Value(literal:'____')}, {'title': Value(literal:'___')}, {'title': Value(literal:'_')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Dark Paradise')}, {'title': Value(literal:'City of Thieves')}, {'title': Value(literal:'Drumming Song')}, {'title': Value(literal:'____')}, {'title': Value(literal:'_')}, {'title': Value(literal:'_')}, {'title': Value(literal:'Rocks Off')}, {'title': Value(literal:'Tea For One')}, {'title': Value(literal:'______')}, {'title': Value(literal:'____')}, {'title': Value(literal:""L'éclair"")}, {'title': Value(literal:'____')}, {'title': Value(literal:'__')}, {'title': Value(literal:'______')}, {'title': Value(literal:""[Jimbert]Nobody's fault but mine"")}, {'title': Value(literal:'____')}, {'title': Value(literal:'__')}, {'title': Value(literal:'____')}, {'title': Value(literal:'My darling clementine')}, {'title': Value(literal:'__')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'THE GANG PREVENTS AN ASSASSINATION')}, {'title': Value(literal:'Blondie')}, {'title': Value(literal:""Writer's Month Series 2022"")}, {'title': Value(literal:'Texts/Messages I Have That Could Totally Be Fan Fiction')}, {'title': Value(literal:'The GC')}, {'title': Value(literal:'No One Loves Me, and Neither Do I')}, {'title': Value(literal:'Fire with Water')}, {'title': Value(literal:'Whole Lotta Love')}, {'title': Value(literal:'The May Queen')}, {'title': Value(literal:""For What It's Worth"")}, {'title': Value(literal:'More Than A Feeling')}, {'title': Value(literal:'Tumblr Collection 2')}, {'title': Value(literal:'horror edition')}, {'title': Value(literal:'I Wanna Be Your Backdoor Man')}, {'title': Value(literal:""I'm Just Looking For An Angel With a Broken Wing"")}, {'title': Value(literal:'Midnight Confessions')}, {'title': Value(literal:""You're Dropping Clues (Like You've Got Any)"")}, {'title': Value(literal:'For The Longest Time')}, {'title': Value(literal:'Cover Version')}, {'title': Value(literal:'Falls The Shadow')}, {'title': Value(literal:'Teddy Bear')}, {'title': Value(literal:'Puppy Love')}, {'title': Value(literal:'Nimble')}, {'title': Value(literal:'Tender')}, {'title': Value(literal:'Good Times Bad Times')}, {'title': Value(literal:'Revelations')}, {'title': Value(literal:'All Your Fault')}, {'title': Value(literal:'Ten (Plus) Years Gone')}, {'title': Value(literal:'Page/Plant One Shots')}, {'title': Value(literal:'Frankincense and Gold')}, {'title': Value(literal:'In Which Bonzo is Far Too Soft')}, {'title': Value(literal:'Once Upon a Party')}, {'title': Value(literal:'Rain')}, {'title': Value(literal:'Check the Calendar')}, {'title': Value(literal:'Haunted')}, {'title': Value(literal:'Stormtrooper')}, {'title': Value(literal:'Laundromat')}, {'title': Value(literal:'No Rest For the Wicked')}, {'title': Value(literal:'will you sing to me?')}, {'title': Value(literal:'Caught You Smiling At Me')}, {'title': Value(literal:'Light and Shade')}, {'title': Value(literal:'Whipcrack')}, {'title': Value(literal:'Long Black Wavy Hair')}, {'title': Value(literal:'Dazed and Confused')}, {'title': Value(literal:'Peaceful')}, {'title': Value(literal:'Music Is')}, {'title': Value(literal:'The Weight of the World')}, {'title': Value(literal:'The Rain Song')}, {'title': Value(literal:'Kashmir')}, {'title': Value(literal:'No Matter What')}, {'title': Value(literal:'Jimbert Fluff-Fest')}, {'title': Value(literal:'Hold my heart')}, {'title': Value(literal:'Letters')}, {'title': Value(literal:'Lechery & Lace')}, {'title': Value(literal:'An Open Book in an Unfamiliar Tongue')}, {'title': Value(literal:'Cimmerian Shade')}, {'title': Value(literal:'Three of Hearts')}, {'title': Value(literal:'Double Exposure')}, {'title': Value(literal:'Spellbound')}, {'title': Value(literal:'Sail Away, Leave Today')}, {'title': Value(literal:'Honeybee')}, {'title': Value(literal:'One Shot: Down by the Poolside')}, {'title': Value(literal:'Loose and Easy (4-part story, completed)')}, {'title': Value(literal:'Dawn')}, {'title': Value(literal:'One Shot: A New Start')}, {'title': Value(literal:'One Shot: Always Prepared')}, {'title': Value(literal:'One Shot: Encore')}, {'title': Value(literal:'One Shot: After the Lightning')}, {'title': Value(literal:'Friends at the Bar (Multichapter story...unfinished)')}, {'title': Value(literal:'Baby I can work all night...')}, {'title': Value(literal:'A Wild Ride')}, {'title': Value(literal:'La petite morte')}, {'title': Value(literal:'One Shot: Dancing Days')}, {'title': Value(literal:'One Shot: Teasing the Lion')}, {'title': Value(literal:'One Shot: Crown and Consort')}, {'title': Value(literal:'One Shot: Signed and Sealed')}, {'title': Value(literal:'One Shot: the Ceaseless Roar')}, {'title': Value(literal:'One Shot: Forget Me Not')}, {'title': Value(literal:'One Shot: All Better')}, {'title': Value(literal:'One Shot: Lonely Morning Blues')}, {'title': Value(literal:'One Shot: Nurses Do It Better')}, {'title': Value(literal:'One Shot: Unmasked Desire')}, {'title': Value(literal:'One Shot: Steal Away')}, {'title': Value(literal:'One Shot: Tequila Sunrise')}, {'title': Value(literal:'Everything He Wants (3-part story, completed)')}, {'title': Value(literal:'Nothing to Lose (Multichapter story...unfinished)')}, {'title': Value(literal:'One Shot: Good Cop, Bad Cop')}, {'title': Value(literal:'The Nymph of Bron-Yr-Aur')}, {'title': Value(literal:'The Song Remains The Same')}, {'title': Value(literal:'Relax')}, {'title': Value(literal:'One Shot: First Christmas')}, {'title': Value(literal:'One Shot: Medicine Woman')}, {'title': Value(literal:'Good Times, Bad Times')}, {'title': Value(literal:'One Shot: One Night Boyfriend')}, {'title': Value(literal:'Saturday Night Fever')}, {'title': Value(literal:'One Shot: Moonlight Over Essakane')}, {'title': Value(literal:'Home')}, {'title': Value(literal:'What Friends Are For')}, {'title': Value(literal:'Unforgettable')}, {'title': Value(literal:'let me fix your overdrive')}, {'title': Value(literal:'One Shot: A Little TLC')}, {'title': Value(literal:'Eye of the Storm (Multichapter story, ongoing)')}, {'title': Value(literal:'Good Times')}, {'title': Value(literal:'morning scene')}, {'title': Value(literal:'Hallowed')}, {'title': Value(literal:'Shallow')}, {'title': Value(literal:'Tangerine')}, {'title': Value(literal:'Twice')}, {'title': Value(literal:'Room 714')}, {'title': Value(literal:'In Orbit Always')}, {'title': Value(literal:'Pink Orchids')}, {'title': Value(literal:'take 54')}, {'title': Value(literal:'All that Glitters is Gold')}, {'title': Value(literal:'One Shot: Crawling King Snake')}, {'title': Value(literal:""What's In A Name?"")}, {'title': Value(literal:'One Shot: A Lion, Domesticated')}, {'title': Value(literal:'Snapshot With Cigarettes and Morning Light')}, {'title': Value(literal:'Telling my self its not as hard as it seems')}, {'title': Value(literal:'All Grown Up (Multichapter story...unfinished)')}, {'title': Value(literal:'That’s The Way')}, {'title': Value(literal:'One Shot: Duet')}, {'title': Value(literal:'Sunday Bloody Sunday')}, {'title': Value(literal:'Homecoming')}, {'title': Value(literal:'One Shot: Rampage at the Riot House')}, {'title': Value(literal:'Communication Breakdown (or) Say Hai')}, {'title': Value(literal:'Goal')}, {'title': Value(literal:""Can't keep away"")}, {'title': Value(literal:'Cleared Up')}, {'title': Value(literal:'The road we choose is always right (Bron-Yr-Aur Drabbles)')}, {'title': Value(literal:'Push Push')}, {'title': Value(literal:'Biology')}, {'title': Value(literal:'Dust')}, {'title': Value(literal:'One Shot: House Call')}, {'title': Value(literal:""One Shot: Guess Who's Back"")}, {'title': Value(literal:'‘Pack’ and other drabbles')}, {'title': Value(literal:'Sensory Overload: aka X Marks the Spot')}, {'title': Value(literal:'You Shook Me')}, {'title': Value(literal:'Halfway There')}, {'title': Value(literal:'Amaya & Jimmy~')}, {'title': Value(literal:'1971 Hawaii - Pele Olianna & Jimmy')}, {'title': Value(literal:'1973 - Jimmy & Yuridia')}, {'title': Value(literal:'1973 - Safira & Jimmy Snippet~')}, {'title': Value(literal:'1973 - Safi & Jimmy Snippet')}, {'title': Value(literal:'A Quick One - Unfinished')}, {'title': Value(literal:'all those things the best I can')}, {'title': Value(literal:'and in the core of every star')}, {'title': Value(literal:'Babe, I’m Gonna Top You')}, {'title': Value(literal:'Faithful Angel')}, {'title': Value(literal:'Birthday (1969)')}, {'title': Value(literal:'How to write Erotica.')}, {'title': Value(literal:'Condition')}, {'title': Value(literal:'Air')}, {'title': Value(literal:'Me-Time')}, {'title': Value(literal:'Salt, Sweat & Snow~')}, {'title': Value(literal:'School Days')}, {'title': Value(literal:'Body Language')}, {'title': Value(literal:'Like you mean it')}, {'title': Value(literal:'One Shot: Midnight Druid Snack')}, {'title': Value(literal:'Like Family')}, {'title': Value(literal:'One Shot: Cozying Up')}, {'title': Value(literal:'Black Cat')}, {'title': Value(literal:'Did I Let You Know')}, {'title': Value(literal:'Yours')}, {'title': Value(literal:'Sink')}, {'title': Value(literal:""Don't stop ever"")}, {'title': Value(literal:'Only')}, {'title': Value(literal:'Eros and Psyche')}, {'title': Value(literal:'Jimbert Oneshots')}, {'title': Value(literal:'Reminiscence')}, {'title': Value(literal:'Birthday (1970)')}, {'title': Value(literal:'Deceiving Looks (multichapter, ongoing)')}, {'title': Value(literal:'One Shot: Sea of Love')}, {'title': Value(literal:'Drowning In You')}, {'title': Value(literal:""Bron-Yr-Aur 1970 (That's the Way)"")}, {'title': Value(literal:'O span of youth!')}, {'title': Value(literal:'The Great Unnamed -Book 1')}, {'title': Value(literal:'Codependency')}, {'title': Value(literal:'Gimmie Danger')}, {'title': Value(literal:""You Feel Good (Though You Shouldn't)"")}, {'title': Value(literal:'Delicate')}, {'title': Value(literal:'Cold Beer')}, {'title': Value(literal:'Snow Angel - Yuletide Special')}, {'title': Value(literal:'Mistletoe')}, {'title': Value(literal:'Clasp')}, {'title': Value(literal:'One Shot: A Very Tropical Christmas')}, {'title': Value(literal:'Night Flight')}, {'title': Value(literal:'My Love, My Darling')}, {'title': Value(literal:'When the levee breaks')}, {'title': Value(literal:'Daisy')}, {'title': Value(literal:'Glass beads')}, {'title': Value(literal:'Dragon on the back')}, {'title': Value(literal:'Silk and Velvet')}, {'title': Value(literal:'Valentine’s day special')}, {'title': Value(literal:'Used To Like')}, {'title': Value(literal:'Breaking News')}, {'title': Value(literal:'1+1')}, {'title': Value(literal:'Riff')}, {'title': Value(literal:'The Flower')}, {'title': Value(literal:'Idle Work')}, {'title': Value(literal:'I Think I Might be Sinking')}, {'title': Value(literal:'The boy next door')}, {'title': Value(literal:'Heartbreaker')}, {'title': Value(literal:'Moonwalkers')}, {'title': Value(literal:'Between My Sheets')}, {'title': Value(literal:'Open Up, Precious or The Herring in the Back Alley')}, {'title': Value(literal:'Only One')}, {'title': Value(literal:'Gonna Give You My Love')}, {'title': Value(literal:'Jimmy Page Session Man ~*~  A Fan Fiction ~*~')}, {'title': Value(literal:'Warmth and Comfort')}, {'title': Value(literal:'Lines')}, {'title': Value(literal:'Picking It Up')}, {'title': Value(literal:'Io Pan')}, {'title': Value(literal:'Just This Once')}, {'title': Value(literal:'The Elf and the Wizard')}, {'title': Value(literal:'Fall In Love With Me')}, {'title': Value(literal:'I Know The Way (short Jimbert drabbles)')}, {'title': Value(literal:'A Case of You')}, {'title': Value(literal:'Surrender at Discretion')}, {'title': Value(literal:'Dazed & Confused')}, {'title': Value(literal:'Zep Writing Prompt Challenge 03')}, {'title': Value(literal:'Noir')}, {'title': Value(literal:""So They Say It's Your Birthday"")}, {'title': Value(literal:'Gimme Danger, Little Stranger')}, {'title': Value(literal:'Diary')}, {'title': Value(literal:'Strings')}, {'title': Value(literal:'But I Belong to You')}, {'title': Value(literal:'Zep Writing Prompt Challenge 04 | Candles and Cake')}, {'title': Value(literal:'Back Tracking')}, {'title': Value(literal:'Ever Onward')}, {'title': Value(literal:'Surrender - a songfic')}, {'title': Value(literal:'Keep')}, {'title': Value(literal:'Every You and Every Me')}, {'title': Value(literal:'Somebody To Love')}, {'title': Value(literal:'Long Wavy Black Hair')}, {'title': Value(literal:'I Know Him')}, {'title': Value(literal:'Led Zeppelin drabbles')}, {'title': Value(literal:'Place A Spell On Me')}, {'title': Value(literal:'Bel- Pre Declining')}, {'title': Value(literal:'Hot Dogs - short jimbert sex stories')}, {'title': Value(literal:'Rock Me')}, {'title': Value(literal:'take my body home')}, {'title': Value(literal:'The Time Jimmy Messed With Magic')}, {'title': Value(literal:'Custard Pie')}, {'title': Value(literal:'Eraser')}, {'title': Value(literal:'Graphic')}, {'title': Value(literal:'Trip the Darkness')}, {'title': Value(literal:'in which Roger is definitely a disaster bi')}, {'title': Value(literal:'the start of something new')}, {'title': Value(literal:'the art of preparing to buy a christmas tree')}, {'title': Value(literal:'when i loved you')}, {'title': Value(literal:'whose idea was this?')}, {'title': Value(literal:""it's not the same when you're gone"")}, {'title': Value(literal:""altruism's a good look for you"")}, {'title': Value(literal:'miss you tonight')}, {'title': Value(literal:'going to california')}, {'title': Value(literal:""glad you're here with me"")}, {'title': Value(literal:""someone's got to look after you"")}, {'title': Value(literal:'the little things')}, {'title': Value(literal:""i'll be alright"")}, {'title': Value(literal:'Snakeskin')}, {'title': Value(literal:'Zep Writing Prompt Challenge 10 | Back of a Van')}, {'title': Value(literal:'Like a Leaf Is To a Tree')}, {'title': Value(literal:'4 AM')}, {'title': Value(literal:'Could You?')}, {'title': Value(literal:'Lost Boy')}, {'title': Value(literal:'I finally found Serenity')}, {'title': Value(literal:'Black Dog')}, {'title': Value(literal:'On this day')}, {'title': Value(literal:'Thunderthief')}, {'title': Value(literal:'Classic Rock Elves Drabbles')}, {'title': Value(literal:'Latter Days')}, {'title': Value(literal:'Achilles Last Stand')}, {'title': Value(literal:'Zep Writing Prompt Challenge 13 | The Scent of Turpentine')}, {'title': Value(literal:'Lost Boy Volume 3')}, {'title': Value(literal:'Oysters')}, {'title': Value(literal:'Four Symbols')}, {'title': Value(literal:'Houses of the Holy')}, {'title': Value(literal:'400 Follower Celebration')}, {'title': Value(literal:'UnLedded')}, {'title': Value(literal:'Light, shade and dusk')}, {'title': Value(literal:'Latter Days Volume 2')}, {'title': Value(literal:'Take Me For a Little While')}, {'title': Value(literal:'White Summer')}, {'title': Value(literal:'The Soul Remains the Same')}, {'title': Value(literal:'25 Hours A Day')}, {'title': Value(literal:'Presence: A sequel to Gonna Give You My Love')}, {'title': Value(literal:'Calling To You')}, {'title': Value(literal:'The Moroccan Diaries')}, {'title': Value(literal:'Healing Waters')}, {'title': Value(literal:'When Giants Walked the Earth')}, {'title': Value(literal:'Boing!')}, {'title': Value(literal:'The Gang Investigates Ted Cruz: Bonus Content')}, {'title': Value(literal:'Ever Truly - and other drabbles')}, {'title': Value(literal:'August prompts')}, {'title': Value(literal:'Summer of Love 2020 Lockdown Drabbles')}, {'title': Value(literal:'Insert Page Break')}, {'title': Value(literal:'Steal Away')}, {'title': Value(literal:'Presence')}, {'title': Value(literal:'In Plain Sight')}, {'title': Value(literal:'if he only had a heart')}, {'title': Value(literal:'Stone Soup')}, {'title': Value(literal:'For Your Life')}, {'title': Value(literal:'All of my love')}, {'title': Value(literal:'Just a phone call')}, {'title': Value(literal:'Berfday')}, {'title': Value(literal:'Sanguine (Robert Plant NSFW One-Shot)')}, {'title': Value(literal:'Wings of maybe, nest in our soul')}, {'title': Value(literal:'Latter Days 3')}, {'title': Value(literal:'Fundamentally Yours - House Of Riot for Writers Month 2020')}, {'title': Value(literal:'Driven (1972)')}, {'title': Value(literal:'Zeptember a month of Love 2020')}, {'title': Value(literal:'Tiny flowers')}, {'title': Value(literal:'Zeptember 2020')}, {'title': Value(literal:'Tell Me What to Swallow')}, {'title': Value(literal:'Pace')}, {'title': Value(literal:'Walk This World')}, {'title': Value(literal:'Fever')}, {'title': Value(literal:'In The Light')}, {'title': Value(literal:'Renounced')}, {'title': Value(literal:""Lover's Moon"")}, {'title': Value(literal:'Full Moon')}, {'title': Value(literal:'Obvious and Oblivious')}, {'title': Value(literal:'Heart')}, {'title': Value(literal:'The Stage')}, {'title': Value(literal:'Sunkiss')}, {'title': Value(literal:""can't keep doing this"")}, {'title': Value(literal:'Stay')}, {'title': Value(literal:'Touch me like I ask')}, {'title': Value(literal:'Queen of Light')}, {'title': Value(literal:'October Tarot card based fic')}, {'title': Value(literal:'A Peculiar Vacation')}, {'title': Value(literal:'The Creation of Page St James')}, {'title': Value(literal:'Interesting')}, {'title': Value(literal:'Doors')}, {'title': Value(literal:'Look Sharp')}, {'title': Value(literal:'Zeppelin Requests')}, {'title': Value(literal:'The Ending of Another Era')}, {'title': Value(literal:'Gonna Make You Sweat')}, {'title': Value(literal:'Lots of people talk')}, {'title': Value(literal:'The Hunter')}, {'title': Value(literal:'Springtime of Your Loving')}, {'title': Value(literal:'Heart Of Tin')}, {'title': Value(literal:'Sleeping Dogs')}, {'title': Value(literal:'Nearing the Close of the First Era')}, {'title': Value(literal:'The Mage and his Lion')}, {'title': Value(literal:'Moby Dick')}, {'title': Value(literal:'That’s the Way')}, {'title': Value(literal:'Black Mountain Side')}, {'title': Value(literal:'Mr Page')}, {'title': Value(literal:'Live')}, {'title': Value(literal:'High School')}, {'title': Value(literal:'Getting the Girls Together')}, {'title': Value(literal:'The Song Remains The Same: Fantasies Abound')}, {'title': Value(literal:'Spring Symphony No. I & II')}, {'title': Value(literal:'Bring It on Home')}, {'title': Value(literal:'Girl')}, {'title': Value(literal:'Man with a child in his eyes')}, {'title': Value(literal:'Special Interests')}, {'title': Value(literal:'Unknown Journey')}, {'title': Value(literal:'Be My Mirror')}, {'title': Value(literal:'If Only')}, {'title': Value(literal:'In a New York Minute')}, {'title': Value(literal:'""Digging Deep(er)"" or “Holy Shit, Jimbert Is Real?!”- The Meta')}, {'title': Value(literal:'Complimentary Insults')}, {'title': Value(literal:'Take me for a little while')}, {'title': Value(literal:'Dry')}, {'title': Value(literal:'Close')}, {'title': Value(literal:'Masterpiece')}, {'title': Value(literal:'Another Mile')}, {'title': Value(literal:'A Brief History of Mistletoe')}, {'title': Value(literal:'The part nobody sees')}, {'title': Value(literal:'Joyeux Noel')}, {'title': Value(literal:'Who You Love')}, {'title': Value(literal:'Down By the Seaside')}, {'title': Value(literal:'See / Amber')}, {'title': Value(literal:'Happy')}, {'title': Value(literal:'The Eastern Glow')}, {'title': Value(literal:""Since I've Been Loving You - a Led Zeppelin fanfic (x reader)"")}, {'title': Value(literal:'golden slumbers')}, {'title': Value(literal:'A little flame, a special place')}, {'title': Value(literal:'The Brightest Sunflower')}, {'title': Value(literal:'Tarot Major Arcana')}, {'title': Value(literal:'Demons')}, {'title': Value(literal:'Led Zeppelin in Art')}, {'title': Value(literal:'In your hand')}, {'title': Value(literal:'Air Conditioner')}, {'title': Value(literal:'Down to the Sea')}, {'title': Value(literal:'Prompts of love')}, {'title': Value(literal:'Cut My Lip')}, {'title': Value(literal:'What Is and What Should Never Be')}, {'title': Value(literal:'Your Hand in Mine, We Walk the Miles')}, {'title': Value(literal:'Best')}, {'title': Value(literal:'Haunted Dreams at Headley Grange')}, {'title': Value(literal:'The Lonely Hours')}, {'title': Value(literal:'Da Hell Just Happened?')}, {'title': Value(literal:'Sometime with a Star')}, {'title': Value(literal:'What The Hell? Part Deux')}, {'title': Value(literal:'Try a little')}, {'title': Value(literal:'Some Things Do Need Saying')}, {'title': Value(literal:'Polaris')}, {'title': Value(literal:'Dragged up / Still Here - 1973')}, {'title': Value(literal:'Dead End Friends')}, {'title': Value(literal:'Morning Dew')}, {'title': Value(literal:'Inkling')}, {'title': Value(literal:'Moonlight')}, {'title': Value(literal:'Princeps Servientes')}, {'title': Value(literal:'Wonderful One')}, {'title': Value(literal:'The Question')}, {'title': Value(literal:'The Answer')}, {'title': Value(literal:'The Sun, The Moon and The Dawn')}, {'title': Value(literal:'Milk')}, {'title': Value(literal:'That Confounded Bridge(town)')}, {'title': Value(literal:'Apprentices to the Gods and Masters of Music')}, {'title': Value(literal:'Young Boy Blues')}, {'title': Value(literal:'Self Control')}, {'title': Value(literal:'Some night terrors')}, {'title': Value(literal:'Winter')}, {'title': Value(literal:'Song of the Siren')}, {'title': Value(literal:'Rasgado')}, {'title': Value(literal:'Untitled')}, {'title': Value(literal:'Superstitious')}, {'title': Value(literal:'Page St. James Picspam (Part 1)')}, {'title': Value(literal:'The Catcher in The Rye')}, {'title': Value(literal:'Stanzas')}, {'title': Value(literal:'Roberta Plant Picspam (Part 1)')}, {'title': Value(literal:'Wildflowers')}, {'title': Value(literal:'seer')}, {'title': Value(literal:'Predictable')}, {'title': Value(literal:'The Story of the Golden Goose')}, {'title': Value(literal:'Page St. James Picspam (Part 2)')}, {'title': Value(literal:'Stairway to Heaven')}, {'title': Value(literal:'Sweet')}, {'title': Value(literal:'Magnets')}, {'title': Value(literal:'ours is the fire')}, {'title': Value(literal:'an adventure in sensory overload')}, {'title': Value(literal:'Tea For No One')}, {'title': Value(literal:'writers month 2021')}, {'title': Value(literal:'77')}, {'title': Value(literal:'Since I Been Loving You')}, {'title': Value(literal:'Annealed')}, {'title': Value(literal:'Garlic bread.')}, {'title': Value(literal:'What If Terry Reid Joined Led Zeppelin?')}, {'title': Value(literal:'Celebration Day')}, {'title': Value(literal:'That Sore Love Affair of His')}, {'title': Value(literal:'Durum')}, {'title': Value(literal:'wild, or that time of the month')}, {'title': Value(literal:'a bunch of zep shit no one but me asked for')}, {'title': Value(literal:'Achilles last stand')}, {'title': Value(literal:'Zeptember 21')}, {'title': Value(literal:'Roberta Plant Picspam (Part 2)')}, {'title': Value(literal:'What Is, And What Should Never Be')}, {'title': Value(literal:'la tua cantante')}, {'title': Value(literal:'Headley Grange, 1974')}, {'title': Value(literal:'Bron-yr-aur, 1972')}, {'title': Value(literal:'London, May, 1975, 4:30 PM')}, {'title': Value(literal:'Minneapolis, 1973')}, {'title': Value(literal:'New Orleans, 1973')}, {'title': Value(literal:'Morocco, June 29, 1975, 9:06 a.m.')}, {'title': Value(literal:'Baltimore, 1975')}, {'title': Value(literal:'Rock and Roll')}, {'title': Value(literal:'Gimbal')}, {'title': Value(literal:'Good Girl')}, {'title': Value(literal:'Friends')}, {'title': Value(literal:'New York, February, 1975')}, {'title': Value(literal:'Tower House, August, 1974')}, {'title': Value(literal:'Los Angeles, January, 1973')}, {'title': Value(literal:'To Be a Rock & Not To Roll')}, {'title': Value(literal:'Somewhere in America, March, 1975')}, {'title': Value(literal:'Led Zeppelin Fanart/Fan Art/Fan-Art (Volume 1-I)')}, {'title': Value(literal:'The Black Dragonne')}, {'title': Value(literal:'Conjugate')}, {'title': Value(literal:'Castro District, San Francisco, June 1973')}, {'title': Value(literal:'Torremolinos, July, 1975')}, {'title': Value(literal:'gold rush')}, {'title': Value(literal:'born in sin')}, {'title': Value(literal:""When You've Worn Away the Cure"")}, {'title': Value(literal:'Bon Mots')}, {'title': Value(literal:'I Wanna Be Around (You!)')}, {'title': Value(literal:'Two by Two eyes of blue')}, {'title': Value(literal:'Look To The West')}, {'title': Value(literal:'The Sweetest Taboo')}, {'title': Value(literal:'La Vie En Rose')}, {'title': Value(literal:'The Definitive Article')}, {'title': Value(literal:""Everything's Fine Under Heaven"")}, {'title': Value(literal:'The Detour')}, {'title': Value(literal:'Lover Man')}, {'title': Value(literal:'Seeds Sown In Summer: Nascence~...')}, {'title': Value(literal:'taste')}, {'title': Value(literal:'Mero, Dominica, February 1975')}, {'title': Value(literal:'A Long-Expected Afterparty')}, {'title': Value(literal:'Worth A 1000 Words')}, {'title': Value(literal:'Golden Muse')}, {'title': Value(literal:'For All the Gods Departed')}, {'title': Value(literal:'A night on the Starship')}, {'title': Value(literal:'In the Pale Moonlight')}, {'title': Value(literal:'Magick Tricks')}, {'title': Value(literal:'Erogenous Zones')}, {'title': Value(literal:""Won't Get Fooled Again - Part 2"")}, {'title': Value(literal:'River Thames')}, {'title': Value(literal:'Let Me Wander In Your Garden')}, {'title': Value(literal:'Lady of the Lake')}, {'title': Value(literal:'Bountiful')}, {'title': Value(literal:""If I Can't Have You"")}, {'title': Value(literal:'Naughty Girl')}, {'title': Value(literal:'Towhead')}, {'title': Value(literal:'Queens of May')}, {'title': Value(literal:'Potpurri~')}, {'title': Value(literal:'Preface Part I: 1:09 AM, January 1, 1976')}, {'title': Value(literal:'skin to skin - jimmy page x reader')}, {'title': Value(literal:'Beat Him, Cheat Him, Treat Him Bad')}, {'title': Value(literal:'Cottage Cruising')}, {'title': Value(literal:""ghostin'"")}, {'title': Value(literal:'The Divine Mr. M')}, {'title': Value(literal:'Jimmy Sakurai Picspam (The BEST Jimmy Page Tribute, Impersonator, Imitator)')}, {'title': Value(literal:'page’s pages')}, {'title': Value(literal:'Malibu, Autumn 1975')}, {'title': Value(literal:'Jimmys Promise')}, {'title': Value(literal:'presence')}, {'title': Value(literal:'The Boys Get Their Goats')}, {'title': Value(literal:'the feeling of a ghost')}, {'title': Value(literal:'The Boys Hold a Seance')}, {'title': Value(literal:'Playgrounds and Power Tools')}, {'title': Value(literal:'Spring Morning')}, {'title': Value(literal:'Page St. James Picspam (Part 3)')}, {'title': Value(literal:'How Many More Times')}, {'title': Value(literal:'South Snowdonia, Wales, May 1970')}, {'title': Value(literal:'Invocation of My Demon Lover')}, {'title': Value(literal:'Close The Door, Put Out The Light')}, {'title': Value(literal:""Snow Drives Back the Foot That's Slow"")}, {'title': Value(literal:'Reconciliation')}, {'title': Value(literal:'Golden Threads')}, {'title': Value(literal:'Diary of a Catnip Fiend')}, {'title': Value(literal:'Heart In Your Hand')}, {'title': Value(literal:'“Jimmy And I Are Close”: Seven more short episodes set in 1975')}, {'title': Value(literal:'Rock Bands One Shots')}, {'title': Value(literal:'Seasons of Emotion')}, {'title': Value(literal:'Ode')}, {'title': Value(literal:'polaroids.')}, {'title': Value(literal:'The Sun That Lights the Day')}, {'title': Value(literal:'Out On The Tiles')}, {'title': Value(literal:'Robert and Lisa Genuinely Like Each Other')}, {'title': Value(literal:""Entr'acte: To Trust A Dream"")}, {'title': Value(literal:'Over the Hills and Far Away')}, {'title': Value(literal:'I’ll Be Home For Christmas')}, {'title': Value(literal:'Writers month 22')}, {'title': Value(literal:'Norwegian Wood')}, {'title': Value(literal:'Rough Boys')}, {'title': Value(literal:'Santa Claus is back in Town')}, {'title': Value(literal:""I Want To Be With You Night And Day, Nothing Changes On New Year's Day"")}, {'title': Value(literal:'Midnight Moonlight')}, {'title': Value(literal:'Drabbles')}, {'title': Value(literal:""Daddy I Just Can't Wait"")}, {'title': Value(literal:'The Friend That I Meet In My Sleep With No Name')}, {'title': Value(literal:'Waves')}, {'title': Value(literal:'In the Skies')}, {'title': Value(literal:'Flood')}, {'title': Value(literal:'Wild')}, {'title': Value(literal:'You and I')}, {'title': Value(literal:'Dancing Days')}, {'title': Value(literal:'What should never be')}, {'title': Value(literal:'Hidden')}, {'title': Value(literal:'On Jealousy')}, {'title': Value(literal:'Angel')}, {'title': Value(literal:'Souled Out On You')}, {'title': Value(literal:'Threes and Sevens')}, {'title': Value(literal:'Take a Bow')}, {'title': Value(literal:'Cliché (but oh so true)')}, {'title': Value(literal:'A Couple of Hours with St. Valentine')}, {'title': Value(literal:'With You There is no Wrong')}, {'title': Value(literal:""Jimmy's Promise part 2"")}, {'title': Value(literal:'The Taking of James')}, {'title': Value(literal:'Obviously Obvious')}, {'title': Value(literal:'Sleep Driven')}, {'title': Value(literal:'Art')}, {'title': Value(literal:'The Road So Far')}, {'title': Value(literal:'Transformative Before Transformative: Creativity in Tolkien and Led Zeppelin')}, {'title': Value(literal:'Night Without Stars')}, {'title': Value(literal:'Robert Plant’s Manual on Playing the Long Game')}, {'title': Value(literal:'Which Way To Go')}, {'title': Value(literal:'Lagniappe')}, {'title': Value(literal:'The Last Chance (Old Men Do It Better)')}, {'title': Value(literal:'Ten Years Gone')}, {'title': Value(literal:'The stairwell')}, {'title': Value(literal:'Nighttime noises')}, {'title': Value(literal:'Got a light?')}, {'title': Value(literal:'The Phone Call')}, {'title': Value(literal:'Check')}, {'title': Value(literal:'If It Fits It Ships!!')}, {'title': Value(literal:'The Great Continent')}, {'title': Value(literal:'Roger Daltrey’s Guide to Surviving Social Engagements')}, {'title': Value(literal:'The Hair')}, {'title': Value(literal:'Cat Of The Village')}, {'title': Value(literal:'Space Buns, More Like Curly Buns')}, {'title': Value(literal:'Expectations')}, {'title': Value(literal:'Dirty Movies')}, {'title': Value(literal:'Caught')}, {'title': Value(literal:'Lemonz, Percy, Pagey and Pangbourne')}, {'title': Value(literal:'Great Gig in the Sky')}, {'title': Value(literal:""Jimmy Page's Primer on Getti"	321	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del fandom Like Shooting Stars In The Twilight

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Like Shooting Stars In The Twilight"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del fandom [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del fandom Led Zeppelin

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""Led Zeppelin"" . 
  ?story golem:title ?title . 
}
"	"[{'title': Value(literal:""Since I've been leaving you"")}, {'title': Value(literal:'the Thief')}, {'title': Value(literal:'__________Night Flight')}, {'title': Value(literal:'In Your Time of Dying ____')}, {'title': Value(literal:'Just Right')}, {'title': Value(literal:'Licks')}, {'title': Value(literal:""That's all it ever really was"")}, {'title': Value(literal:'__')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'__')}, {'title': Value(literal:'___')}, {'title': Value(literal:'____')}, {'title': Value(literal:'__')}, {'title': Value(literal:'____')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Jimbert Fables')}, {'title': Value(literal:'Gift')}, {'title': Value(literal:'___')}, {'title': Value(literal:'___')}, {'title': Value(literal:'Money is the anthem of success')}, {'title': Value(literal:'Wide as a Landscape')}, {'title': Value(literal:'___')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'__')}, {'title': Value(literal:'Till the Heaven')}, {'title': Value(literal:'__/________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'______')}, {'title': Value(literal:'_Hang the DJ __DJ_')}, {'title': Value(literal:'_____________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Any Rags')}, {'title': Value(literal:'Title What Title')}, {'title': Value(literal:'Going Backwards')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Good Dream Bad Dream')}, {'title': Value(literal:'____')}, {'title': Value(literal:'__')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'_________ _____ «________ ____»')}, {'title': Value(literal:'______ _ _____')}, {'title': Value(literal:'Five Years Gone')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____________')}, {'title': Value(literal:'Gallows Pole')}, {'title': Value(literal:'THE GANG SOLVES A MYSTERY')}, {'title': Value(literal:'THE GANG CELEBRATES A BIRTHDAY')}, {'title': Value(literal:'L’Albatros')}, {'title': Value(literal:'____')}, {'title': Value(literal:'___')}, {'title': Value(literal:'_')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Dark Paradise')}, {'title': Value(literal:'City of Thieves')}, {'title': Value(literal:'Drumming Song')}, {'title': Value(literal:'____')}, {'title': Value(literal:'_')}, {'title': Value(literal:'_')}, {'title': Value(literal:'Rocks Off')}, {'title': Value(literal:'Tea For One')}, {'title': Value(literal:'______')}, {'title': Value(literal:'____')}, {'title': Value(literal:""L'éclair"")}, {'title': Value(literal:'____')}, {'title': Value(literal:'__')}, {'title': Value(literal:'______')}, {'title': Value(literal:""[Jimbert]Nobody's fault but mine"")}, {'title': Value(literal:'____')}, {'title': Value(literal:'__')}, {'title': Value(literal:'____')}, {'title': Value(literal:'My darling clementine')}, {'title': Value(literal:'__')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'THE GANG PREVENTS AN ASSASSINATION')}, {'title': Value(literal:'Blondie')}, {'title': Value(literal:""Writer's Month Series 2022"")}, {'title': Value(literal:'Texts/Messages I Have That Could Totally Be Fan Fiction')}, {'title': Value(literal:'The GC')}, {'title': Value(literal:'No One Loves Me, and Neither Do I')}, {'title': Value(literal:'Fire with Water')}, {'title': Value(literal:'Whole Lotta Love')}, {'title': Value(literal:'The May Queen')}, {'title': Value(literal:""For What It's Worth"")}, {'title': Value(literal:'More Than A Feeling')}, {'title': Value(literal:'Tumblr Collection 2')}, {'title': Value(literal:'horror edition')}, {'title': Value(literal:'I Wanna Be Your Backdoor Man')}, {'title': Value(literal:""I'm Just Looking For An Angel With a Broken Wing"")}, {'title': Value(literal:'Midnight Confessions')}, {'title': Value(literal:""You're Dropping Clues (Like You've Got Any)"")}, {'title': Value(literal:'For The Longest Time')}, {'title': Value(literal:'Cover Version')}, {'title': Value(literal:'Falls The Shadow')}, {'title': Value(literal:'Teddy Bear')}, {'title': Value(literal:'Puppy Love')}, {'title': Value(literal:'Nimble')}, {'title': Value(literal:'Tender')}, {'title': Value(literal:'Good Times Bad Times')}, {'title': Value(literal:'Revelations')}, {'title': Value(literal:'All Your Fault')}, {'title': Value(literal:'Ten (Plus) Years Gone')}, {'title': Value(literal:'Page/Plant One Shots')}, {'title': Value(literal:'Frankincense and Gold')}, {'title': Value(literal:'In Which Bonzo is Far Too Soft')}, {'title': Value(literal:'Once Upon a Party')}, {'title': Value(literal:'Rain')}, {'title': Value(literal:'Check the Calendar')}, {'title': Value(literal:'Haunted')}, {'title': Value(literal:'Stormtrooper')}, {'title': Value(literal:'Laundromat')}, {'title': Value(literal:'No Rest For the Wicked')}, {'title': Value(literal:'will you sing to me?')}, {'title': Value(literal:'Caught You Smiling At Me')}, {'title': Value(literal:'Light and Shade')}, {'title': Value(literal:'Whipcrack')}, {'title': Value(literal:'Long Black Wavy Hair')}, {'title': Value(literal:'Dazed and Confused')}, {'title': Value(literal:'Peaceful')}, {'title': Value(literal:'Music Is')}, {'title': Value(literal:'The Weight of the World')}, {'title': Value(literal:'The Rain Song')}, {'title': Value(literal:'Kashmir')}, {'title': Value(literal:'No Matter What')}, {'title': Value(literal:'Jimbert Fluff-Fest')}, {'title': Value(literal:'Hold my heart')}, {'title': Value(literal:'Letters')}, {'title': Value(literal:'Lechery & Lace')}, {'title': Value(literal:'An Open Book in an Unfamiliar Tongue')}, {'title': Value(literal:'Cimmerian Shade')}, {'title': Value(literal:'Three of Hearts')}, {'title': Value(literal:'Double Exposure')}, {'title': Value(literal:'Spellbound')}, {'title': Value(literal:'Sail Away, Leave Today')}, {'title': Value(literal:'Honeybee')}, {'title': Value(literal:'One Shot: Down by the Poolside')}, {'title': Value(literal:'Loose and Easy (4-part story, completed)')}, {'title': Value(literal:'Dawn')}, {'title': Value(literal:'One Shot: A New Start')}, {'title': Value(literal:'One Shot: Always Prepared')}, {'title': Value(literal:'One Shot: Encore')}, {'title': Value(literal:'One Shot: After the Lightning')}, {'title': Value(literal:'Friends at the Bar (Multichapter story...unfinished)')}, {'title': Value(literal:'Baby I can work all night...')}, {'title': Value(literal:'A Wild Ride')}, {'title': Value(literal:'La petite morte')}, {'title': Value(literal:'One Shot: Dancing Days')}, {'title': Value(literal:'One Shot: Teasing the Lion')}, {'title': Value(literal:'One Shot: Crown and Consort')}, {'title': Value(literal:'One Shot: Signed and Sealed')}, {'title': Value(literal:'One Shot: the Ceaseless Roar')}, {'title': Value(literal:'One Shot: Forget Me Not')}, {'title': Value(literal:'One Shot: All Better')}, {'title': Value(literal:'One Shot: Lonely Morning Blues')}, {'title': Value(literal:'One Shot: Nurses Do It Better')}, {'title': Value(literal:'One Shot: Unmasked Desire')}, {'title': Value(literal:'One Shot: Steal Away')}, {'title': Value(literal:'One Shot: Tequila Sunrise')}, {'title': Value(literal:'Everything He Wants (3-part story, completed)')}, {'title': Value(literal:'Nothing to Lose (Multichapter story...unfinished)')}, {'title': Value(literal:'One Shot: Good Cop, Bad Cop')}, {'title': Value(literal:'The Nymph of Bron-Yr-Aur')}, {'title': Value(literal:'The Song Remains The Same')}, {'title': Value(literal:'Relax')}, {'title': Value(literal:'One Shot: First Christmas')}, {'title': Value(literal:'One Shot: Medicine Woman')}, {'title': Value(literal:'Good Times, Bad Times')}, {'title': Value(literal:'One Shot: One Night Boyfriend')}, {'title': Value(literal:'Saturday Night Fever')}, {'title': Value(literal:'One Shot: Moonlight Over Essakane')}, {'title': Value(literal:'Home')}, {'title': Value(literal:'What Friends Are For')}, {'title': Value(literal:'Unforgettable')}, {'title': Value(literal:'let me fix your overdrive')}, {'title': Value(literal:'One Shot: A Little TLC')}, {'title': Value(literal:'Eye of the Storm (Multichapter story, ongoing)')}, {'title': Value(literal:'Good Times')}, {'title': Value(literal:'morning scene')}, {'title': Value(literal:'Hallowed')}, {'title': Value(literal:'Shallow')}, {'title': Value(literal:'Tangerine')}, {'title': Value(literal:'Twice')}, {'title': Value(literal:'Room 714')}, {'title': Value(literal:'In Orbit Always')}, {'title': Value(literal:'Pink Orchids')}, {'title': Value(literal:'take 54')}, {'title': Value(literal:'All that Glitters is Gold')}, {'title': Value(literal:'One Shot: Crawling King Snake')}, {'title': Value(literal:""What's In A Name?"")}, {'title': Value(literal:'One Shot: A Lion, Domesticated')}, {'title': Value(literal:'Snapshot With Cigarettes and Morning Light')}, {'title': Value(literal:'Telling my self its not as hard as it seems')}, {'title': Value(literal:'All Grown Up (Multichapter story...unfinished)')}, {'title': Value(literal:'That’s The Way')}, {'title': Value(literal:'One Shot: Duet')}, {'title': Value(literal:'Sunday Bloody Sunday')}, {'title': Value(literal:'Homecoming')}, {'title': Value(literal:'One Shot: Rampage at the Riot House')}, {'title': Value(literal:'Communication Breakdown (or) Say Hai')}, {'title': Value(literal:'Goal')}, {'title': Value(literal:""Can't keep away"")}, {'title': Value(literal:'Cleared Up')}, {'title': Value(literal:'The road we choose is always right (Bron-Yr-Aur Drabbles)')}, {'title': Value(literal:'Push Push')}, {'title': Value(literal:'Biology')}, {'title': Value(literal:'Dust')}, {'title': Value(literal:'One Shot: House Call')}, {'title': Value(literal:""One Shot: Guess Who's Back"")}, {'title': Value(literal:'‘Pack’ and other drabbles')}, {'title': Value(literal:'Sensory Overload: aka X Marks the Spot')}, {'title': Value(literal:'You Shook Me')}, {'title': Value(literal:'Halfway There')}, {'title': Value(literal:'Amaya & Jimmy~')}, {'title': Value(literal:'1971 Hawaii - Pele Olianna & Jimmy')}, {'title': Value(literal:'1973 - Jimmy & Yuridia')}, {'title': Value(literal:'1973 - Safira & Jimmy Snippet~')}, {'title': Value(literal:'1973 - Safi & Jimmy Snippet')}, {'title': Value(literal:'A Quick One - Unfinished')}, {'title': Value(literal:'all those things the best I can')}, {'title': Value(literal:'and in the core of every star')}, {'title': Value(literal:'Babe, I’m Gonna Top You')}, {'title': Value(literal:'Faithful Angel')}, {'title': Value(literal:'Birthday (1969)')}, {'title': Value(literal:'How to write Erotica.')}, {'title': Value(literal:'Condition')}, {'title': Value(literal:'Air')}, {'title': Value(literal:'Me-Time')}, {'title': Value(literal:'Salt, Sweat & Snow~')}, {'title': Value(literal:'School Days')}, {'title': Value(literal:'Body Language')}, {'title': Value(literal:'Like you mean it')}, {'title': Value(literal:'One Shot: Midnight Druid Snack')}, {'title': Value(literal:'Like Family')}, {'title': Value(literal:'One Shot: Cozying Up')}, {'title': Value(literal:'Black Cat')}, {'title': Value(literal:'Did I Let You Know')}, {'title': Value(literal:'Yours')}, {'title': Value(literal:'Sink')}, {'title': Value(literal:""Don't stop ever"")}, {'title': Value(literal:'Only')}, {'title': Value(literal:'Eros and Psyche')}, {'title': Value(literal:'Jimbert Oneshots')}, {'title': Value(literal:'Reminiscence')}, {'title': Value(literal:'Birthday (1970)')}, {'title': Value(literal:'Deceiving Looks (multichapter, ongoing)')}, {'title': Value(literal:'One Shot: Sea of Love')}, {'title': Value(literal:'Drowning In You')}, {'title': Value(literal:""Bron-Yr-Aur 1970 (That's the Way)"")}, {'title': Value(literal:'O span of youth!')}, {'title': Value(literal:'The Great Unnamed -Book 1')}, {'title': Value(literal:'Codependency')}, {'title': Value(literal:'Gimmie Danger')}, {'title': Value(literal:""You Feel Good (Though You Shouldn't)"")}, {'title': Value(literal:'Delicate')}, {'title': Value(literal:'Cold Beer')}, {'title': Value(literal:'Snow Angel - Yuletide Special')}, {'title': Value(literal:'Mistletoe')}, {'title': Value(literal:'Clasp')}, {'title': Value(literal:'One Shot: A Very Tropical Christmas')}, {'title': Value(literal:'Night Flight')}, {'title': Value(literal:'My Love, My Darling')}, {'title': Value(literal:'When the levee breaks')}, {'title': Value(literal:'Daisy')}, {'title': Value(literal:'Glass beads')}, {'title': Value(literal:'Dragon on the back')}, {'title': Value(literal:'Silk and Velvet')}, {'title': Value(literal:'Valentine’s day special')}, {'title': Value(literal:'Used To Like')}, {'title': Value(literal:'Breaking News')}, {'title': Value(literal:'1+1')}, {'title': Value(literal:'Riff')}, {'title': Value(literal:'The Flower')}, {'title': Value(literal:'Idle Work')}, {'title': Value(literal:'I Think I Might be Sinking')}, {'title': Value(literal:'The boy next door')}, {'title': Value(literal:'Heartbreaker')}, {'title': Value(literal:'Moonwalkers')}, {'title': Value(literal:'Between My Sheets')}, {'title': Value(literal:'Open Up, Precious or The Herring in the Back Alley')}, {'title': Value(literal:'Only One')}, {'title': Value(literal:'Gonna Give You My Love')}, {'title': Value(literal:'Jimmy Page Session Man ~*~  A Fan Fiction ~*~')}, {'title': Value(literal:'Warmth and Comfort')}, {'title': Value(literal:'Lines')}, {'title': Value(literal:'Picking It Up')}, {'title': Value(literal:'Io Pan')}, {'title': Value(literal:'Just This Once')}, {'title': Value(literal:'The Elf and the Wizard')}, {'title': Value(literal:'Fall In Love With Me')}, {'title': Value(literal:'I Know The Way (short Jimbert drabbles)')}, {'title': Value(literal:'A Case of You')}, {'title': Value(literal:'Surrender at Discretion')}, {'title': Value(literal:'Dazed & Confused')}, {'title': Value(literal:'Zep Writing Prompt Challenge 03')}, {'title': Value(literal:'Noir')}, {'title': Value(literal:""So They Say It's Your Birthday"")}, {'title': Value(literal:'Gimme Danger, Little Stranger')}, {'title': Value(literal:'Diary')}, {'title': Value(literal:'Strings')}, {'title': Value(literal:'But I Belong to You')}, {'title': Value(literal:'Zep Writing Prompt Challenge 04 | Candles and Cake')}, {'title': Value(literal:'Back Tracking')}, {'title': Value(literal:'Ever Onward')}, {'title': Value(literal:'Surrender - a songfic')}, {'title': Value(literal:'Keep')}, {'title': Value(literal:'Every You and Every Me')}, {'title': Value(literal:'Somebody To Love')}, {'title': Value(literal:'Long Wavy Black Hair')}, {'title': Value(literal:'I Know Him')}, {'title': Value(literal:'Led Zeppelin drabbles')}, {'title': Value(literal:'Place A Spell On Me')}, {'title': Value(literal:'Bel- Pre Declining')}, {'title': Value(literal:'Hot Dogs - short jimbert sex stories')}, {'title': Value(literal:'Rock Me')}, {'title': Value(literal:'take my body home')}, {'title': Value(literal:'The Time Jimmy Messed With Magic')}, {'title': Value(literal:'Custard Pie')}, {'title': Value(literal:'Eraser')}, {'title': Value(literal:'Graphic')}, {'title': Value(literal:'Trip the Darkness')}, {'title': Value(literal:'in which Roger is definitely a disaster bi')}, {'title': Value(literal:'the start of something new')}, {'title': Value(literal:'the art of preparing to buy a christmas tree')}, {'title': Value(literal:'when i loved you')}, {'title': Value(literal:'whose idea was this?')}, {'title': Value(literal:""it's not the same when you're gone"")}, {'title': Value(literal:""altruism's a good look for you"")}, {'title': Value(literal:'miss you tonight')}, {'title': Value(literal:'going to california')}, {'title': Value(literal:""glad you're here with me"")}, {'title': Value(literal:""someone's got to look after you"")}, {'title': Value(literal:'the little things')}, {'title': Value(literal:""i'll be alright"")}, {'title': Value(literal:'Snakeskin')}, {'title': Value(literal:'Zep Writing Prompt Challenge 10 | Back of a Van')}, {'title': Value(literal:'Like a Leaf Is To a Tree')}, {'title': Value(literal:'4 AM')}, {'title': Value(literal:'Could You?')}, {'title': Value(literal:'Lost Boy')}, {'title': Value(literal:'I finally found Serenity')}, {'title': Value(literal:'Black Dog')}, {'title': Value(literal:'On this day')}, {'title': Value(literal:'Thunderthief')}, {'title': Value(literal:'Classic Rock Elves Drabbles')}, {'title': Value(literal:'Latter Days')}, {'title': Value(literal:'Achilles Last Stand')}, {'title': Value(literal:'Zep Writing Prompt Challenge 13 | The Scent of Turpentine')}, {'title': Value(literal:'Lost Boy Volume 3')}, {'title': Value(literal:'Oysters')}, {'title': Value(literal:'Four Symbols')}, {'title': Value(literal:'Houses of the Holy')}, {'title': Value(literal:'400 Follower Celebration')}, {'title': Value(literal:'UnLedded')}, {'title': Value(literal:'Light, shade and dusk')}, {'title': Value(literal:'Latter Days Volume 2')}, {'title': Value(literal:'Take Me For a Little While')}, {'title': Value(literal:'White Summer')}, {'title': Value(literal:'The Soul Remains the Same')}, {'title': Value(literal:'25 Hours A Day')}, {'title': Value(literal:'Presence: A sequel to Gonna Give You My Love')}, {'title': Value(literal:'Calling To You')}, {'title': Value(literal:'The Moroccan Diaries')}, {'title': Value(literal:'Healing Waters')}, {'title': Value(literal:'When Giants Walked the Earth')}, {'title': Value(literal:'Boing!')}, {'title': Value(literal:'The Gang Investigates Ted Cruz: Bonus Content')}, {'title': Value(literal:'Ever Truly - and other drabbles')}, {'title': Value(literal:'August prompts')}, {'title': Value(literal:'Summer of Love 2020 Lockdown Drabbles')}, {'title': Value(literal:'Insert Page Break')}, {'title': Value(literal:'Steal Away')}, {'title': Value(literal:'Presence')}, {'title': Value(literal:'In Plain Sight')}, {'title': Value(literal:'if he only had a heart')}, {'title': Value(literal:'Stone Soup')}, {'title': Value(literal:'For Your Life')}, {'title': Value(literal:'All of my love')}, {'title': Value(literal:'Just a phone call')}, {'title': Value(literal:'Berfday')}, {'title': Value(literal:'Sanguine (Robert Plant NSFW One-Shot)')}, {'title': Value(literal:'Wings of maybe, nest in our soul')}, {'title': Value(literal:'Latter Days 3')}, {'title': Value(literal:'Fundamentally Yours - House Of Riot for Writers Month 2020')}, {'title': Value(literal:'Driven (1972)')}, {'title': Value(literal:'Zeptember a month of Love 2020')}, {'title': Value(literal:'Tiny flowers')}, {'title': Value(literal:'Zeptember 2020')}, {'title': Value(literal:'Tell Me What to Swallow')}, {'title': Value(literal:'Pace')}, {'title': Value(literal:'Walk This World')}, {'title': Value(literal:'Fever')}, {'title': Value(literal:'In The Light')}, {'title': Value(literal:'Renounced')}, {'title': Value(literal:""Lover's Moon"")}, {'title': Value(literal:'Full Moon')}, {'title': Value(literal:'Obvious and Oblivious')}, {'title': Value(literal:'Heart')}, {'title': Value(literal:'The Stage')}, {'title': Value(literal:'Sunkiss')}, {'title': Value(literal:""can't keep doing this"")}, {'title': Value(literal:'Stay')}, {'title': Value(literal:'Touch me like I ask')}, {'title': Value(literal:'Queen of Light')}, {'title': Value(literal:'October Tarot card based fic')}, {'title': Value(literal:'A Peculiar Vacation')}, {'title': Value(literal:'The Creation of Page St James')}, {'title': Value(literal:'Interesting')}, {'title': Value(literal:'Doors')}, {'title': Value(literal:'Look Sharp')}, {'title': Value(literal:'Zeppelin Requests')}, {'title': Value(literal:'The Ending of Another Era')}, {'title': Value(literal:'Gonna Make You Sweat')}, {'title': Value(literal:'Lots of people talk')}, {'title': Value(literal:'The Hunter')}, {'title': Value(literal:'Springtime of Your Loving')}, {'title': Value(literal:'Heart Of Tin')}, {'title': Value(literal:'Sleeping Dogs')}, {'title': Value(literal:'Nearing the Close of the First Era')}, {'title': Value(literal:'The Mage and his Lion')}, {'title': Value(literal:'Moby Dick')}, {'title': Value(literal:'That’s the Way')}, {'title': Value(literal:'Black Mountain Side')}, {'title': Value(literal:'Mr Page')}, {'title': Value(literal:'Live')}, {'title': Value(literal:'High School')}, {'title': Value(literal:'Getting the Girls Together')}, {'title': Value(literal:'The Song Remains The Same: Fantasies Abound')}, {'title': Value(literal:'Spring Symphony No. I & II')}, {'title': Value(literal:'Bring It on Home')}, {'title': Value(literal:'Girl')}, {'title': Value(literal:'Man with a child in his eyes')}, {'title': Value(literal:'Special Interests')}, {'title': Value(literal:'Unknown Journey')}, {'title': Value(literal:'Be My Mirror')}, {'title': Value(literal:'If Only')}, {'title': Value(literal:'In a New York Minute')}, {'title': Value(literal:'""Digging Deep(er)"" or “Holy Shit, Jimbert Is Real?!”- The Meta')}, {'title': Value(literal:'Complimentary Insults')}, {'title': Value(literal:'Take me for a little while')}, {'title': Value(literal:'Dry')}, {'title': Value(literal:'Close')}, {'title': Value(literal:'Masterpiece')}, {'title': Value(literal:'Another Mile')}, {'title': Value(literal:'A Brief History of Mistletoe')}, {'title': Value(literal:'The part nobody sees')}, {'title': Value(literal:'Joyeux Noel')}, {'title': Value(literal:'Who You Love')}, {'title': Value(literal:'Down By the Seaside')}, {'title': Value(literal:'See / Amber')}, {'title': Value(literal:'Happy')}, {'title': Value(literal:'The Eastern Glow')}, {'title': Value(literal:""Since I've Been Loving You - a Led Zeppelin fanfic (x reader)"")}, {'title': Value(literal:'golden slumbers')}, {'title': Value(literal:'A little flame, a special place')}, {'title': Value(literal:'The Brightest Sunflower')}, {'title': Value(literal:'Tarot Major Arcana')}, {'title': Value(literal:'Demons')}, {'title': Value(literal:'Led Zeppelin in Art')}, {'title': Value(literal:'In your hand')}, {'title': Value(literal:'Air Conditioner')}, {'title': Value(literal:'Down to the Sea')}, {'title': Value(literal:'Prompts of love')}, {'title': Value(literal:'Cut My Lip')}, {'title': Value(literal:'What Is and What Should Never Be')}, {'title': Value(literal:'Your Hand in Mine, We Walk the Miles')}, {'title': Value(literal:'Best')}, {'title': Value(literal:'Haunted Dreams at Headley Grange')}, {'title': Value(literal:'The Lonely Hours')}, {'title': Value(literal:'Da Hell Just Happened?')}, {'title': Value(literal:'Sometime with a Star')}, {'title': Value(literal:'What The Hell? Part Deux')}, {'title': Value(literal:'Try a little')}, {'title': Value(literal:'Some Things Do Need Saying')}, {'title': Value(literal:'Polaris')}, {'title': Value(literal:'Dragged up / Still Here - 1973')}, {'title': Value(literal:'Dead End Friends')}, {'title': Value(literal:'Morning Dew')}, {'title': Value(literal:'Inkling')}, {'title': Value(literal:'Moonlight')}, {'title': Value(literal:'Princeps Servientes')}, {'title': Value(literal:'Wonderful One')}, {'title': Value(literal:'The Question')}, {'title': Value(literal:'The Answer')}, {'title': Value(literal:'The Sun, The Moon and The Dawn')}, {'title': Value(literal:'Milk')}, {'title': Value(literal:'That Confounded Bridge(town)')}, {'title': Value(literal:'Apprentices to the Gods and Masters of Music')}, {'title': Value(literal:'Young Boy Blues')}, {'title': Value(literal:'Self Control')}, {'title': Value(literal:'Some night terrors')}, {'title': Value(literal:'Winter')}, {'title': Value(literal:'Song of the Siren')}, {'title': Value(literal:'Rasgado')}, {'title': Value(literal:'Untitled')}, {'title': Value(literal:'Superstitious')}, {'title': Value(literal:'Page St. James Picspam (Part 1)')}, {'title': Value(literal:'The Catcher in The Rye')}, {'title': Value(literal:'Stanzas')}, {'title': Value(literal:'Roberta Plant Picspam (Part 1)')}, {'title': Value(literal:'Wildflowers')}, {'title': Value(literal:'seer')}, {'title': Value(literal:'Predictable')}, {'title': Value(literal:'The Story of the Golden Goose')}, {'title': Value(literal:'Page St. James Picspam (Part 2)')}, {'title': Value(literal:'Stairway to Heaven')}, {'title': Value(literal:'Sweet')}, {'title': Value(literal:'Magnets')}, {'title': Value(literal:'ours is the fire')}, {'title': Value(literal:'an adventure in sensory overload')}, {'title': Value(literal:'Tea For No One')}, {'title': Value(literal:'writers month 2021')}, {'title': Value(literal:'77')}, {'title': Value(literal:'Since I Been Loving You')}, {'title': Value(literal:'Annealed')}, {'title': Value(literal:'Garlic bread.')}, {'title': Value(literal:'What If Terry Reid Joined Led Zeppelin?')}, {'title': Value(literal:'Celebration Day')}, {'title': Value(literal:'That Sore Love Affair of His')}, {'title': Value(literal:'Durum')}, {'title': Value(literal:'wild, or that time of the month')}, {'title': Value(literal:'a bunch of zep shit no one but me asked for')}, {'title': Value(literal:'Achilles last stand')}, {'title': Value(literal:'Zeptember 21')}, {'title': Value(literal:'Roberta Plant Picspam (Part 2)')}, {'title': Value(literal:'What Is, And What Should Never Be')}, {'title': Value(literal:'la tua cantante')}, {'title': Value(literal:'Headley Grange, 1974')}, {'title': Value(literal:'Bron-yr-aur, 1972')}, {'title': Value(literal:'London, May, 1975, 4:30 PM')}, {'title': Value(literal:'Minneapolis, 1973')}, {'title': Value(literal:'New Orleans, 1973')}, {'title': Value(literal:'Morocco, June 29, 1975, 9:06 a.m.')}, {'title': Value(literal:'Baltimore, 1975')}, {'title': Value(literal:'Rock and Roll')}, {'title': Value(literal:'Gimbal')}, {'title': Value(literal:'Good Girl')}, {'title': Value(literal:'Friends')}, {'title': Value(literal:'New York, February, 1975')}, {'title': Value(literal:'Tower House, August, 1974')}, {'title': Value(literal:'Los Angeles, January, 1973')}, {'title': Value(literal:'To Be a Rock & Not To Roll')}, {'title': Value(literal:'Somewhere in America, March, 1975')}, {'title': Value(literal:'Led Zeppelin Fanart/Fan Art/Fan-Art (Volume 1-I)')}, {'title': Value(literal:'The Black Dragonne')}, {'title': Value(literal:'Conjugate')}, {'title': Value(literal:'Castro District, San Francisco, June 1973')}, {'title': Value(literal:'Torremolinos, July, 1975')}, {'title': Value(literal:'gold rush')}, {'title': Value(literal:'born in sin')}, {'title': Value(literal:""When You've Worn Away the Cure"")}, {'title': Value(literal:'Bon Mots')}, {'title': Value(literal:'I Wanna Be Around (You!)')}, {'title': Value(literal:'Two by Two eyes of blue')}, {'title': Value(literal:'Look To The West')}, {'title': Value(literal:'The Sweetest Taboo')}, {'title': Value(literal:'La Vie En Rose')}, {'title': Value(literal:'The Definitive Article')}, {'title': Value(literal:""Everything's Fine Under Heaven"")}, {'title': Value(literal:'The Detour')}, {'title': Value(literal:'Lover Man')}, {'title': Value(literal:'Seeds Sown In Summer: Nascence~...')}, {'title': Value(literal:'taste')}, {'title': Value(literal:'Mero, Dominica, February 1975')}, {'title': Value(literal:'A Long-Expected Afterparty')}, {'title': Value(literal:'Worth A 1000 Words')}, {'title': Value(literal:'Golden Muse')}, {'title': Value(literal:'For All the Gods Departed')}, {'title': Value(literal:'A night on the Starship')}, {'title': Value(literal:'In the Pale Moonlight')}, {'title': Value(literal:'Magick Tricks')}, {'title': Value(literal:'Erogenous Zones')}, {'title': Value(literal:""Won't Get Fooled Again - Part 2"")}, {'title': Value(literal:'River Thames')}, {'title': Value(literal:'Let Me Wander In Your Garden')}, {'title': Value(literal:'Lady of the Lake')}, {'title': Value(literal:'Bountiful')}, {'title': Value(literal:""If I Can't Have You"")}, {'title': Value(literal:'Naughty Girl')}, {'title': Value(literal:'Towhead')}, {'title': Value(literal:'Queens of May')}, {'title': Value(literal:'Potpurri~')}, {'title': Value(literal:'Preface Part I: 1:09 AM, January 1, 1976')}, {'title': Value(literal:'skin to skin - jimmy page x reader')}, {'title': Value(literal:'Beat Him, Cheat Him, Treat Him Bad')}, {'title': Value(literal:'Cottage Cruising')}, {'title': Value(literal:""ghostin'"")}, {'title': Value(literal:'The Divine Mr. M')}, {'title': Value(literal:'Jimmy Sakurai Picspam (The BEST Jimmy Page Tribute, Impersonator, Imitator)')}, {'title': Value(literal:'page’s pages')}, {'title': Value(literal:'Malibu, Autumn 1975')}, {'title': Value(literal:'Jimmys Promise')}, {'title': Value(literal:'presence')}, {'title': Value(literal:'The Boys Get Their Goats')}, {'title': Value(literal:'the feeling of a ghost')}, {'title': Value(literal:'The Boys Hold a Seance')}, {'title': Value(literal:'Playgrounds and Power Tools')}, {'title': Value(literal:'Spring Morning')}, {'title': Value(literal:'Page St. James Picspam (Part 3)')}, {'title': Value(literal:'How Many More Times')}, {'title': Value(literal:'South Snowdonia, Wales, May 1970')}, {'title': Value(literal:'Invocation of My Demon Lover')}, {'title': Value(literal:'Close The Door, Put Out The Light')}, {'title': Value(literal:""Snow Drives Back the Foot That's Slow"")}, {'title': Value(literal:'Reconciliation')}, {'title': Value(literal:'Golden Threads')}, {'title': Value(literal:'Diary of a Catnip Fiend')}, {'title': Value(literal:'Heart In Your Hand')}, {'title': Value(literal:'“Jimmy And I Are Close”: Seven more short episodes set in 1975')}, {'title': Value(literal:'Rock Bands One Shots')}, {'title': Value(literal:'Seasons of Emotion')}, {'title': Value(literal:'Ode')}, {'title': Value(literal:'polaroids.')}, {'title': Value(literal:'The Sun That Lights the Day')}, {'title': Value(literal:'Out On The Tiles')}, {'title': Value(literal:'Robert and Lisa Genuinely Like Each Other')}, {'title': Value(literal:""Entr'acte: To Trust A Dream"")}, {'title': Value(literal:'Over the Hills and Far Away')}, {'title': Value(literal:'I’ll Be Home For Christmas')}, {'title': Value(literal:'Writers month 22')}, {'title': Value(literal:'Norwegian Wood')}, {'title': Value(literal:'Rough Boys')}, {'title': Value(literal:'Santa Claus is back in Town')}, {'title': Value(literal:""I Want To Be With You Night And Day, Nothing Changes On New Year's Day"")}, {'title': Value(literal:'Midnight Moonlight')}, {'title': Value(literal:'Drabbles')}, {'title': Value(literal:""Daddy I Just Can't Wait"")}, {'title': Value(literal:'The Friend That I Meet In My Sleep With No Name')}, {'title': Value(literal:'Waves')}, {'title': Value(literal:'In the Skies')}, {'title': Value(literal:'Flood')}, {'title': Value(literal:'Wild')}, {'title': Value(literal:'You and I')}, {'title': Value(literal:'Dancing Days')}, {'title': Value(literal:'What should never be')}, {'title': Value(literal:'Hidden')}, {'title': Value(literal:'On Jealousy')}, {'title': Value(literal:'Angel')}, {'title': Value(literal:'Souled Out On You')}, {'title': Value(literal:'Threes and Sevens')}, {'title': Value(literal:'Take a Bow')}, {'title': Value(literal:'Cliché (but oh so true)')}, {'title': Value(literal:'A Couple of Hours with St. Valentine')}, {'title': Value(literal:'With You There is no Wrong')}, {'title': Value(literal:""Jimmy's Promise part 2"")}, {'title': Value(literal:'The Taking of James')}, {'title': Value(literal:'Obviously Obvious')}, {'title': Value(literal:'Sleep Driven')}, {'title': Value(literal:'Art')}, {'title': Value(literal:'The Road So Far')}, {'title': Value(literal:'Transformative Before Transformative: Creativity in Tolkien and Led Zeppelin')}, {'title': Value(literal:'Night Without Stars')}, {'title': Value(literal:'Robert Plant’s Manual on Playing the Long Game')}, {'title': Value(literal:'Which Way To Go')}, {'title': Value(literal:'Lagniappe')}, {'title': Value(literal:'The Last Chance (Old Men Do It Better)')}, {'title': Value(literal:'Ten Years Gone')}, {'title': Value(literal:'The stairwell')}, {'title': Value(literal:'Nighttime noises')}, {'title': Value(literal:'Got a light?')}, {'title': Value(literal:'The Phone Call')}, {'title': Value(literal:'Check')}, {'title': Value(literal:'If It Fits It Ships!!')}, {'title': Value(literal:'The Great Continent')}, {'title': Value(literal:'Roger Daltrey’s Guide to Surviving Social Engagements')}, {'title': Value(literal:'The Hair')}, {'title': Value(literal:'Cat Of The Village')}, {'title': Value(literal:'Space Buns, More Like Curly Buns')}, {'title': Value(literal:'Expectations')}, {'title': Value(literal:'Dirty Movies')}, {'title': Value(literal:'Caught')}, {'title': Value(literal:'Lemonz, Percy, Pagey and Pangbourne')}, {'title': Value(literal:'Great Gig in the Sky')}, {'title': Value(literal:""Jimmy Page's Primer on Getti"	1	0	0			
322	322	es	Muéstrame historias del fandom Like Shooting Stars In The Twilight	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Like Shooting Stars In The Twilight"" . ?story golem:title ?title . }"	[{'title': Value(literal:'__')}]	322	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del fandom [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo _-fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_-fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de ________ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""________ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del fandom Like Shooting Stars In The Twilight

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""Like Shooting Stars In The Twilight"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'__')}]	1	0	0			
323	323	es	Muéstrame historias del fandom Xuan-Yuan Sword (Video Games)	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Xuan-Yuan Sword (Video Games)"" . ?story golem:title ?title . }"	[{'title': Value(literal:'____')}]	323	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del fandom Hóng Hu_ng Lì - zhttty

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Hóng Hu_ng Lì - zhttty"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del fandom __ __ _____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__ __ _____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del fandom ___ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""___ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del fandom Xuan-Yuan Sword (Video Games)

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""Xuan-Yuan Sword (Video Games)"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'____')}]	1	0	0			
324	324	es	Muéstrame historias del fandom __ __ _____	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__ __ _____"" . ?story golem:title ?title . }"	[{'title': Value(literal:'NE_____')}]	324	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del fandom ___ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""___ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __ ___/___ __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ ___/___ __ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de _______ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""_______ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del fandom __ __ _____

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title WHERE {   
  ?story golem:fandom ""__ __ _____"" .  
  ?story golem:title ?title .  
}
"	[{'title': Value(literal:'NE_____')}]	1	0	0			
325	325	es	Muéstrame historias del fandom _____	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""_____"" . ?story golem:title ?title . }"	[{'title': Value(literal:'only a genius will love a man like you')}]	325	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame los resúmenes de historias de ________ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""________ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del fandom [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del fandom ___06_

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""___06_"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del fandom _____

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""_____"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'only a genius will love a man like you')}]	1	0	0			
326	326	es	Muéstrame historias del fandom Inumaki Toge/Original Character(s) - Fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Inumaki Toge/Original Character(s) - Fandom"" . ?story golem:title ?title . }"	[{'title': Value(literal:'__________________  _')}]	326	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del fandom ___ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""___ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del fandom __ __ _____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__ __ _____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del fandom Inumaki Toge/Original Character(s) - Fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title WHERE { 
?story golem:fandom ""Inumaki Toge/Original Character(s) - Fandom"" . 
?story golem:title ?title . 
}
"	[{'title': Value(literal:'__________________  _')}]	1	0	0			
327	327	es	Muéstrame historias del fandom Go Princess Go	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Go Princess Go"" . ?story golem:title ?title . }"	[{'title': Value(literal:'___________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'______')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'Untouchable')}, {'title': Value(literal:'____ __________')}]	327	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del fandom [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo _-fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_-fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de ________ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""________ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del fandom Go Princess Go

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""Go Princess Go"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'___________')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'______')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'Untouchable')}, {'title': Value(literal:'____ __________')}]	1	0	0			
328	328	es	Muéstrame historias del fandom ___ - Fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""___ - Fandom"" . ?story golem:title ?title . }"	[{'title': Value(literal:'_____alpha___24___')}, {'title': Value(literal:'______alpha_____13_')}]	328	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del fandom __ __ _____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""__ __ _____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __ ___/___ __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ ___/___ __ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de _______ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""_______ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del fandom ___ - Fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""___ - Fandom"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'_____alpha___24___')}, {'title': Value(literal:'______alpha_____13_')}]	1	0	0			
329	329	es	Muéstrame historias del fandom Hóng Hu_ng Lì - zhttty	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Hóng Hu_ng Lì - zhttty"" . ?story golem:title ?title . }"	[{'title': Value(literal:'____')}, {'title': Value(literal:'___x___pwp')}, {'title': Value(literal:'____')}]	329	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del fandom ___ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""___ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de _______ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""_______ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __ ___/___ __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ ___/___ __ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del fandom Hóng Hu_ng Lì - zhttty

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title WHERE { 
  ?story golem:fandom ""Hóng Huáng Lì - zhttty"" . 
  ?story golem:title ?title . 
}
"	[]	0	0	1	Failed NER		
331	331	es	Muéstrame historias del universo 2.5__	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""2.5__"" . ?story golem:title ?title . }"	[{'title': Value(literal:'__')}, {'title': Value(literal:'_______________')}, {'title': Value(literal:'______')}, {'title': Value(literal:'_________')}]	331	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del universo __ - ____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - ____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo __2 OL

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__2 OL"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del universo 2.5__

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title 
WHERE {  
  ?story golem:fandom ""2.5__"" .  
  ?story golem:title ?title .  
}
"	[{'title': Value(literal:'__')}, {'title': Value(literal:'_______________')}, {'title': Value(literal:'______')}, {'title': Value(literal:'_________')}]	1	0	0			
332	332	es	Muéstrame historias del universo porduce 101 japan	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""porduce 101 japan"" . ?story golem:title ?title . }"	[{'title': Value(literal:'____')}]	332	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del universo __2 OL

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__2 OL"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo __ - ____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - ____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de ___

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del universo porduce 101 japan

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title 
WHERE {  
  ?story golem:fandom ""produce 101 japan"" .  
  ?story golem:title ?title . 
}
"	[]	0	0	1	Failed NER		
333	333	es	Muéstrame historias del universo __ - ____	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - ____"" . ?story golem:title ?title . }"	[{'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'_____________')}, {'title': Value(literal:'_mob____')}]	333	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del universo [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del universo __ - ____

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""__ - ____"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'_____________')}, {'title': Value(literal:'_mob____')}]	1	0	0			
334	334	es	Muéstrame historias del universo Chris Evans-Fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""Chris Evans-Fandom"" . ?story golem:title ?title . }"	[{'title': Value(literal:'59_60______')}, {'title': Value(literal:'Ransom Drysdale: Relationship Struggle')}, {'title': Value(literal:'Sick baby')}, {'title': Value(literal:'_Evanstan_MANSERVANTS ____')}, {'title': Value(literal:'Frank Adler: Would you maybe?')}, {'title': Value(literal:'Challenging The Storm')}, {'title': Value(literal:'I Heard A Rumour....')}, {'title': Value(literal:'Club')}, {'title': Value(literal:'In Too Deep')}, {'title': Value(literal:'Meeting the Davis Family')}, {'title': Value(literal:'Alone')}, {'title': Value(literal:'Teacher Conference')}, {'title': Value(literal:'A Weekend With The Avengers')}, {'title': Value(literal:'Love Me Harder')}]	334	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del universo [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo _-fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_-fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del universo Chris Evans-Fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""Chris Evans-Fandom"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'59_60______')}, {'title': Value(literal:'Ransom Drysdale: Relationship Struggle')}, {'title': Value(literal:'Sick baby')}, {'title': Value(literal:'_Evanstan_MANSERVANTS ____')}, {'title': Value(literal:'Frank Adler: Would you maybe?')}, {'title': Value(literal:'Challenging The Storm')}, {'title': Value(literal:'I Heard A Rumour....')}, {'title': Value(literal:'Club')}, {'title': Value(literal:'In Too Deep')}, {'title': Value(literal:'Meeting the Davis Family')}, {'title': Value(literal:'Alone')}, {'title': Value(literal:'Teacher Conference')}, {'title': Value(literal:'A Weekend With The Avengers')}, {'title': Value(literal:'Love Me Harder')}]	1	0	0			
335	335	es	Muéstrame historias del universo __ - Fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - Fandom"" . ?story golem:title ?title . }"	[{'title': Value(literal:'_______________2')}, {'title': Value(literal:'____')}]	335	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del universo _-fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_-fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del universo __ - Fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>   
SELECT DISTINCT ?title 
WHERE {  
?story golem:fandom ""__ - Fandom"" .  
?story golem:title ?title . }
"	[{'title': Value(literal:'_______________2')}, {'title': Value(literal:'____')}]	1	0	0			
336	336	es	Muéstrame historias del universo _-fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_-fandom"" . ?story golem:title ?title . }"	[{'title': Value(literal:'____1')}]	336	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del universo [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de ________ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""________ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del universo _-fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>
prefix dc: <http://purl.org/dc/terms/>
prefix gc: <https://ontology.golemlab.eu/>
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""_-fandom"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'____1')}]	1	0	0			
337	337	es	Muéstrame historias del universo __2 OL	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__2 OL"" . ?story golem:title ?title . }"	[{'title': Value(literal:'_______')}]	337	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del universo __ - ____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - ____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo porduce 101 japan

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""porduce 101 japan"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del universo __2 OL

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title 
WHERE {  
  ?story golem:fandom ""__2 OL"" .  
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'_______')}]	1	0	0			
338	338	es	Muéstrame historias del universo Mole's World (Video Game)	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""Mole's World (Video Game)"" . ?story golem:title ?title . }"	[{'title': Value(literal:'“_______”')}, {'title': Value(literal:'____')}, {'title': Value(literal:'[____]_____')}, {'title': Value(literal:'________________________………')}, {'title': Value(literal:'_____*')}, {'title': Value(literal:'__')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'__R_pwp_____')}, {'title': Value(literal:'___')}, {'title': Value(literal:'seven deadly sins ___')}, {'title': Value(literal:'_R____(R18)')}, {'title': Value(literal:'_R____')}, {'title': Value(literal:'___')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'__R____')}, {'title': Value(literal:'______')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'__')}, {'title': Value(literal:'________')}, {'title': Value(literal:'______________')}, {'title': Value(literal:'_R__Flesh')}, {'title': Value(literal:'_R__Ero Event!!!!')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'__')}, {'title': Value(literal:'_R_____')}, {'title': Value(literal:'_____/________')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'__R______')}, {'title': Value(literal:'_R__MILK')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'_R______')}]	338	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del universo __ - ____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - ____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo 2.5__

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""2.5__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del universo Mole's World (Video Game)

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""Mole's World (Video Game)"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'“_______”')}, {'title': Value(literal:'____')}, {'title': Value(literal:'[____]_____')}, {'title': Value(literal:'________________________………')}, {'title': Value(literal:'_____*')}, {'title': Value(literal:'__')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'__R_pwp_____')}, {'title': Value(literal:'___')}, {'title': Value(literal:'seven deadly sins ___')}, {'title': Value(literal:'_R____(R18)')}, {'title': Value(literal:'_R____')}, {'title': Value(literal:'___')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'__R____')}, {'title': Value(literal:'______')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'__')}, {'title': Value(literal:'________')}, {'title': Value(literal:'______________')}, {'title': Value(literal:'_R__Flesh')}, {'title': Value(literal:'_R__Ero Event!!!!')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'__')}, {'title': Value(literal:'_R_____')}, {'title': Value(literal:'_____/________')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'__R______')}, {'title': Value(literal:'_R__MILK')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'_R______')}]	1	0	0			
339	339	es	Muéstrame historias del universo Persischstunden (2020)	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""Persischstunden (2020)"" . ?story golem:title ?title . }"	[{'title': Value(literal:'_____A Masquerade Party')}, {'title': Value(literal:'He Was but One Hour Mine | _________')}]	339	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del universo 2.5__

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""2.5__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo __ - ____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - ____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del universo Persischstunden (2020)

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""Persischstunden (2020)"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'_____A Masquerade Party')}, {'title': Value(literal:'He Was but One Hour Mine | _________')}]	1	0	0			
340	340	es	Muéstrame historias del universo We Are 1 (Dance Group)	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""We Are 1 (Dance Group)"" . ?story golem:title ?title . }"	[{'title': Value(literal:'The One With The Pink Cap')}]	340	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del universo __ - ____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - ____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo 2.5__

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""2.5__"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame historias del universo We Are 1 (Dance Group)

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?title 
WHERE { 
  ?story golem:fandom ""We Are 1 (Dance Group)"" . 
  ?story golem:title ?title . 
}
"	[{'title': Value(literal:'The One With The Pink Cap')}]	1	0	0			
342	342	es	¿Está completada la historia Powerful & Pure?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Powerful & Pure"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'In-Progress')}]	342	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Está completada la historia [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Encounter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Encounter"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia No Hero?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""No Hero"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: ¿Está completada la historia Powerful & Pure?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?status WHERE { 
?story golem:title ""Powerful & Pure"" . 
?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'In-Progress')}]	1	0	0			
343	343	es	¿Está completada la historia Snape Watches the Puppy Bowl?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Snape Watches the Puppy Bowl"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	343	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Está completada la historia Bae-watch?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Bae-watch"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Se muere algún personaje principal en Everything Tastes Better With a Side of Snape?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Everything Tastes Better With a Side of Snape"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Encounter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Encounter"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: ¿Está completada la historia Snape Watches the Puppy Bowl?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
?story golem:title ""Snape Watches the Puppy Bowl"" . 
?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
344	344	es	¿Está completada la historia A Small Steep Valley?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""A Small Steep Valley"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	344	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Está completada la historia Encounter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Encounter"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia No Hero?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""No Hero"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: ¿Está completada la historia A Small Steep Valley?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
?story golem:title ""A Small Steep Valley"" . 
?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
345	345	es	¿Está completada la historia No Hero?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""No Hero"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}, {'status': Value(literal:'In-Progress')}]	345	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Está completada la historia [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Encounter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Encounter"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Powerful & Pure?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Powerful & Pure"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: ¿Está completada la historia No Hero?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?status WHERE { 
  ?story golem:title ""No Hero"" . 
  ?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}, {'status': Value(literal:'In-Progress')}]	1	0	0			
346	346	es	¿Está completada la historia Family, mental breakdowns and strawberry cake?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Family, mental breakdowns and strawberry cake"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	346	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Está completada la historia [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Encounter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Encounter"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Harry Potter and the Sorcerer's Sweet Ass Ride?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Harry Potter and the Sorcerer's Sweet Ass Ride"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: ¿Está completada la historia Family, mental breakdowns and strawberry cake?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
?story golem:title ""Family, mental breakdowns and strawberry cake"" . 
?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
347	347	es	¿Está completada la historia Harry Potter and the Sorcerer's Sweet Ass Ride?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Harry Potter and the Sorcerer's Sweet Ass Ride"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	347	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: La historia Overheard at Hogwart's tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Overheard at Hogwart's"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Encounter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Encounter"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Powerful & Pure?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Powerful & Pure"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: ¿Está completada la historia Harry Potter and the Sorcerer's Sweet Ass Ride?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
?story golem:title ""Harry Potter and the Sorcerer's Sweet Ass Ride"" . 
?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
348	348	es	¿Está completada la historia Bae-watch?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Bae-watch"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	348	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Está completada la historia Encounter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Encounter"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia No Hero?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""No Hero"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: ¿Está completada la historia Bae-watch?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
?story golem:title ""Bae-watch"" . 
?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
349	349	es	¿Está completada la historia Encounter?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Encounter"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'In-Progress')}, {'status': Value(literal:'Completed')}]	349	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Está completada la historia [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia No Hero?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""No Hero"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Powerful & Pure?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Powerful & Pure"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: ¿Está completada la historia Encounter?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
  ?story golem:title ""Encounter"" . 
  ?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'In-Progress')}, {'status': Value(literal:'Completed')}]	1	0	0			
350	350	es	¿Está completada la historia I will carry you, always?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""I will carry you, always"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	350	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué colecciones pertenece I can't help but love you?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""I can't help but love you"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo __ - ____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - ____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: ¿Está completada la historia I will carry you, always?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
  ?story golem:title ""I will carry you, always"" . 
  ?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
351	351	es	¿Está completada la historia The Four Times Remus Lupin Didn't Have a Crush On A Black And The One Time He Did?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""The Four Times Remus Lupin Didn't Have a Crush On A Black And The One Time He Did"" . ?story golem:publicationStatus ?status . }"	[{'status': Value(literal:'Completed')}]	351	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos recibió How Harry Became Reborn?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""How Harry Became Reborn"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Harry Potter and the Sorcerer's Sweet Ass Ride?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Harry Potter and the Sorcerer's Sweet Ass Ride"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Encounter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Encounter"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: ¿Está completada la historia The Four Times Remus Lupin Didn't Have a Crush On A Black And The One Time He Did?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?status WHERE { 
?story golem:title ""The Four Times Remus Lupin Didn't Have a Crush On A Black And The One Time He Did"" . 
?story golem:publicationStatus ?status . 
}
"	[{'status': Value(literal:'Completed')}]	1	0	0			
353	353	es	¿Cuándo se publicó Non-Existent Meetings?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Non-Existent Meetings"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2017-05-07')}]	353	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuándo se publicó The Things We Do?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""The Things We Do"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó the silhouettes of our memories?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""the silhouettes of our memories"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó The Camp Counselor AU No One Asked For?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""The Camp Counselor AU No One Asked For"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: ¿Cuándo se publicó Non-Existent Meetings?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?date WHERE { 
    ?story golem:title ""Non-Existent Meetings"" . 
    ?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2017-05-07')}]	1	0	0			
354	354	es	¿Cuándo se publicó Still Don't Fit?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Still Don't Fit"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2020-11-09')}]	354	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuándo se publicó Hold Me One More Time?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Hold Me One More Time"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó Under Water?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Under Water"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó The Things We Do?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""The Things We Do"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: ¿Cuándo se publicó Still Don't Fit?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?date WHERE { 
  ?story golem:title ""Still Don't Fit"" . 
  ?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2020-11-09')}]	1	0	0			
355	355	es	¿Cuándo se publicó Sugar and Smoke Rings?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Sugar and Smoke Rings"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2018-06-07')}, {'date': Value(literal:'2020-04-04')}, {'date': Value(literal:'2021-12-11')}, {'date': Value(literal:'2019-10-13')}, {'date': Value(literal:'2020-08-31')}, {'date': Value(literal:'2021-03-27')}, {'date': Value(literal:'2021-04-10')}]	355	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuándo se publicó The Things We Do?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""The Things We Do"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó Tucked Into the Night Sky?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tucked Into the Night Sky"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[[story]]"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: ¿Cuándo se publicó Sugar and Smoke Rings?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?date WHERE { 
?story golem:title ""Sugar and Smoke Rings"" . 
?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2018-06-07')}, {'date': Value(literal:'2020-04-04')}, {'date': Value(literal:'2021-12-11')}, {'date': Value(literal:'2019-10-13')}, {'date': Value(literal:'2020-08-31')}, {'date': Value(literal:'2021-03-27')}, {'date': Value(literal:'2021-04-10')}]	1	0	0			
356	356	es	¿Cuándo se publicó The Camp Counselor AU No One Asked For?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""The Camp Counselor AU No One Asked For"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2018-04-03')}]	356	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuándo se publicó Tucked Into the Night Sky?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tucked Into the Night Sky"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó Under Water?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Under Water"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[[story]]"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: ¿Cuándo se publicó The Camp Counselor AU No One Asked For?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?date WHERE { 
  ?story golem:title ""The Camp Counselor AU No One Asked For"" . 
  ?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2018-04-03')}]	1	0	0			
357	357	es	¿Cuándo se publicó Under Water?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Under Water"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2021-02-21')}, {'date': Value(literal:'2018-02-12')}, {'date': Value(literal:'2016-06-01')}, {'date': Value(literal:'2014-11-24')}, {'date': Value(literal:'2017-01-20')}, {'date': Value(literal:'2016-03-19')}, {'date': Value(literal:'2017-02-19')}, {'date': Value(literal:'2021-12-23')}, {'date': Value(literal:'2015-05-06')}, {'date': Value(literal:'2021-07-21')}, {'date': Value(literal:'2020-03-01')}, {'date': Value(literal:'2020-06-18')}, {'date': Value(literal:'2018-09-16')}, {'date': Value(literal:'2017-04-06')}, {'date': Value(literal:'2021-10-28')}, {'date': Value(literal:'2019-12-26')}, {'date': Value(literal:'2019-08-08')}, {'date': Value(literal:'2018-03-31')}]	357	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuándo se publicó Tucked Into the Night Sky?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tucked Into the Night Sky"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[[story]]"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada In The Dark?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""In The Dark"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: ¿Cuándo se publicó Under Water?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?date WHERE { 
?story golem:title ""Under Water"" . 
?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2021-02-21')}, {'date': Value(literal:'2018-02-12')}, {'date': Value(literal:'2016-06-01')}, {'date': Value(literal:'2014-11-24')}, {'date': Value(literal:'2017-01-20')}, {'date': Value(literal:'2016-03-19')}, {'date': Value(literal:'2017-02-19')}, {'date': Value(literal:'2021-12-23')}, {'date': Value(literal:'2015-05-06')}, {'date': Value(literal:'2021-07-21')}, {'date': Value(literal:'2020-03-01')}, {'date': Value(literal:'2020-06-18')}, {'date': Value(literal:'2018-09-16')}, {'date': Value(literal:'2017-04-06')}, {'date': Value(literal:'2021-10-28')}, {'date': Value(literal:'2019-12-26')}, {'date': Value(literal:'2019-08-08')}, {'date': Value(literal:'2018-03-31')}]	1	0	0			
358	358	es	¿Cuándo se publicó Hold Me One More Time?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Hold Me One More Time"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2018-04-27')}]	358	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuándo se publicó Still Don't Fit?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Still Don't Fit"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó Under Water?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Under Water"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó Sugar and Smoke Rings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Sugar and Smoke Rings"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: ¿Cuándo se publicó Hold Me One More Time?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Hold Me One More Time"" . ?story golem:datePublished ?date . }
"	[{'date': Value(literal:'2018-04-27')}]	1	0	0			
359	359	es	¿Cuándo se publicó Tucked Into the Night Sky?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tucked Into the Night Sky"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2022-09-22')}]	359	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Dónde está publicada In The Dark?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""In The Dark"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó Under Water?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Under Water"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece Moonrise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Moonrise"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: ¿Cuándo se publicó Tucked Into the Night Sky?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
SELECT DISTINCT ?date WHERE { 
  ?story golem:title ""Tucked Into the Night Sky"" . 
  ?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2022-09-22')}]	1	0	0			
360	360	es	¿Cuándo se publicó the silhouettes of our memories?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""the silhouettes of our memories"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2022-01-14')}]	360	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuándo se publicó The Things We Do?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""The Things We Do"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó Tucked Into the Night Sky?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tucked Into the Night Sky"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[[story]]"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: ¿Cuándo se publicó the silhouettes of our memories?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?date WHERE { 
  ?story golem:title ""the silhouettes of our memories"" . 
  ?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2022-01-14')}]	1	0	0			
361	361	es	¿Cuándo se publicó The Things We Do?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""The Things We Do"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2018-07-14')}, {'date': Value(literal:'2018-06-02')}, {'date': Value(literal:'2018-10-04')}, {'date': Value(literal:'2009-11-10')}, {'date': Value(literal:'2018-02-23')}, {'date': Value(literal:'2021-08-22')}, {'date': Value(literal:'2010-02-25')}, {'date': Value(literal:'2021-08-12')}, {'date': Value(literal:'2020-01-02')}, {'date': Value(literal:'2021-12-07')}, {'date': Value(literal:'2007-08-07')}, {'date': Value(literal:'2017-08-21')}, {'date': Value(literal:'2012-12-04')}, {'date': Value(literal:'2019-06-28')}, {'date': Value(literal:'2019-07-02')}, {'date': Value(literal:'2013-11-17')}, {'date': Value(literal:'2016-02-01')}, {'date': Value(literal:'2016-01-28')}, {'date': Value(literal:'2016-08-12')}, {'date': Value(literal:'2013-09-12')}, {'date': Value(literal:'2018-09-05')}, {'date': Value(literal:'2019-07-15')}, {'date': Value(literal:'2021-10-23')}, {'date': Value(literal:'2014-02-12')}, {'date': Value(literal:'2008-01-05')}, {'date': Value(literal:'2017-06-03')}, {'date': Value(literal:'2010-03-04')}, {'date': Value(literal:'2019-07-08')}, {'date': Value(literal:'2018-03-24')}, {'date': Value(literal:'2017-08-27')}, {'date': Value(literal:'2016-09-01')}, {'date': Value(literal:'2020-02-26')}, {'date': Value(literal:'2010-01-28')}, {'date': Value(literal:'2013-05-26')}, {'date': Value(literal:'2013-04-16')}, {'date': Value(literal:'2019-05-02')}, {'date': Value(literal:'2021-05-24')}, {'date': Value(literal:'2009-11-29')}, {'date': Value(literal:'2016-01-26')}, {'date': Value(literal:'2017-08-06')}, {'date': Value(literal:'2014-12-20')}, {'date': Value(literal:'2015-06-26')}, {'date': Value(literal:'2019-06-14')}, {'date': Value(literal:'2011-10-30')}, {'date': Value(literal:'2021-08-05')}, {'date': Value(literal:'2019-12-27')}, {'date': Value(literal:'2018-05-08')}, {'date': Value(literal:'2019-07-25')}, {'date': Value(literal:'2022-03-07')}, {'date': Value(literal:'2018-04-20')}, {'date': Value(literal:'2021-10-19')}, {'date': Value(literal:'2015-08-10')}, {'date': Value(literal:'2021-03-15')}, {'date': Value(literal:'2022-02-16')}, {'date': Value(literal:'2008-08-07')}, {'date': Value(literal:'2022-01-31')}, {'date': Value(literal:'2022-07-24')}, {'date': Value(literal:'2015-09-07')}, {'date': Value(literal:'2019-05-09')}, {'date': Value(literal:'2018-02-18')}]	361	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuándo se publicó [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[[story]]"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó the silhouettes of our memories?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""the silhouettes of our memories"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada nights we belong to?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""nights we belong to"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: ¿Cuándo se publicó The Things We Do?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?date WHERE { 
  ?story golem:title ""The Things We Do"" . 
  ?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2018-07-14')}, {'date': Value(literal:'2018-06-02')}, {'date': Value(literal:'2018-10-04')}, {'date': Value(literal:'2009-11-10')}, {'date': Value(literal:'2018-02-23')}, {'date': Value(literal:'2021-08-22')}, {'date': Value(literal:'2010-02-25')}, {'date': Value(literal:'2021-08-12')}, {'date': Value(literal:'2020-01-02')}, {'date': Value(literal:'2021-12-07')}, {'date': Value(literal:'2007-08-07')}, {'date': Value(literal:'2017-08-21')}, {'date': Value(literal:'2012-12-04')}, {'date': Value(literal:'2019-06-28')}, {'date': Value(literal:'2019-07-02')}, {'date': Value(literal:'2013-11-17')}, {'date': Value(literal:'2016-02-01')}, {'date': Value(literal:'2016-01-28')}, {'date': Value(literal:'2016-08-12')}, {'date': Value(literal:'2013-09-12')}, {'date': Value(literal:'2018-09-05')}, {'date': Value(literal:'2019-07-15')}, {'date': Value(literal:'2021-10-23')}, {'date': Value(literal:'2014-02-12')}, {'date': Value(literal:'2008-01-05')}, {'date': Value(literal:'2017-06-03')}, {'date': Value(literal:'2010-03-04')}, {'date': Value(literal:'2019-07-08')}, {'date': Value(literal:'2018-03-24')}, {'date': Value(literal:'2017-08-27')}, {'date': Value(literal:'2016-09-01')}, {'date': Value(literal:'2020-02-26')}, {'date': Value(literal:'2010-01-28')}, {'date': Value(literal:'2013-05-26')}, {'date': Value(literal:'2013-04-16')}, {'date': Value(literal:'2019-05-02')}, {'date': Value(literal:'2021-05-24')}, {'date': Value(literal:'2009-11-29')}, {'date': Value(literal:'2016-01-26')}, {'date': Value(literal:'2017-08-06')}, {'date': Value(literal:'2014-12-20')}, {'date': Value(literal:'2015-06-26')}, {'date': Value(literal:'2019-06-14')}, {'date': Value(literal:'2011-10-30')}, {'date': Value(literal:'2021-08-05')}, {'date': Value(literal:'2019-12-27')}, {'date': Value(literal:'2018-05-08')}, {'date': Value(literal:'2019-07-25')}, {'date': Value(literal:'2022-03-07')}, {'date': Value(literal:'2018-04-20')}, {'date': Value(literal:'2021-10-19')}, {'date': Value(literal:'2015-08-10')}, {'date': Value(literal:'2021-03-15')}, {'date': Value(literal:'2022-02-16')}, {'date': Value(literal:'2008-08-07')}, {'date': Value(literal:'2022-01-31')}, {'date': Value(literal:'2022-07-24')}, {'date': Value(literal:'2015-09-07')}, {'date': Value(literal:'2019-05-09')}, {'date': Value(literal:'2018-02-18')}]	1	0	0			
362	362	es	¿Cuándo se publicó [Art] A Stroll Through 1920s Diagon Alley?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[Art] A Stroll Through 1920s Diagon Alley"" . ?story golem:datePublished ?date . }"	[{'date': Value(literal:'2020-10-08')}]	362	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Dónde está publicada Vertigo?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Vertigo"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Harriet Potter and the Philosopher's Stone?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Harriet Potter and the Philosopher's Stone"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó the silhouettes of our memories?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""the silhouettes of our memories"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: ¿Cuándo se publicó [Art] A Stroll Through 1920s Diagon Alley?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?date WHERE { 
?story golem:title ""[Art] A Stroll Through 1920s Diagon Alley"" . 
?story golem:datePublished ?date . 
}
"	[{'date': Value(literal:'2020-10-08')}]	1	0	0			
363	363	es	¿Cuál es la historia más reciente?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:datePublished ?date . ?story golem:title ?title . } ORDER BY DESC(?date) LIMIT 1	[{'title': Value(literal:'______________________ ____ ______ ______________ __')}]	363	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué historias se publicaron en el 2015?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:datePublished ?date . ?story golem:title ?title . FILTER(YEAR(xsd:datetime(?date))=2015) . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[[story]]"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es This Has Changed Everything?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""This Has Changed Everything"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: ¿Cuál es la historia más reciente?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?story (MAX(?date) AS ?latestDate) WHERE { 
  ?story golem:datePublished ?date . 
} GROUP BY ?story ORDER BY DESC(?date) LIMIT 1
"	"QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed. 

Response:
b'Virtuoso 37000 Error SP031: SPARQL compiler: Variable ?date is used in the result set outside aggregate and not mentioned in GROUP BY clause\n\nSPARQL query:\ndefine sql:big-data-const 0\n#output-format:application/sparql-results+json\n\nprefix golem: <https://golemlab.eu/graph/> \nprefix dc: <http://purl.org/dc/terms/> \nprefix gc: <https://ontology.golemlab.eu/> \nSELECT DISTINCT ?story (MAX(?date) AS ?latestDate) WHERE { \n  ?story golem:datePublished ?date . \n} GROUP BY ?story ORDER BY DESC(?date) LIMIT 1\n'"	0	1	1	Failed execution		
364	364	es	¿Qué historias se publicaron en el 2015?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:datePublished ?date . ?story golem:title ?title . FILTER(YEAR(xsd:datetime(?date))=2015) . }		364	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias se publican al año?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }
    </SPARQL>

    ###
    

    Question: ¿Cuál es la historia más reciente?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:datePublished ?date . ?story golem:title ?title . } ORDER BY DESC(?date) LIMIT 1
    </SPARQL>

    ###
    

    Question: ¿Cuántos autores han publicado alguna historia?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?uploads) WHERE { ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Qué historias se publicaron en el 2015?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>
SELECT DISTINCT ?title WHERE {
  ?story golem:datePublished ""2015""^^xsd:gYear .
  ?story golem:title ?title .
}
"	[]	0	0	1	Annotation error		
366	366	es	¿Qué palabras clave tiene Fan Girl?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Fan Girl"" . ?story golem:keyword ?keyword . }"	[{'keywords': Value(literal:'Explicit Language, Explicit Sexual Content, Meeting Your Idols, Older Man/Younger Woman, Oral Sex, Smut')}]	366	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del fandom [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del fandom ___ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""___ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Summer Lovin'?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Summer Lovin'"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: ¿Qué palabras clave tiene Fan Girl?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE { 
?story golem:title ""Fan Girl"" . 
?story golem:keyword ?keyword . 
}
"	[{'keywords': Value(literal:'Explicit Language, Explicit Sexual Content, Meeting Your Idols, Older Man/Younger Woman, Oral Sex, Smut')}]	1	0	0			
367	367	es	¿Qué palabras clave tiene Checkmate?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Checkmate"" . ?story golem:keyword ?keyword . }"		367	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como [[keyword]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""[[keyword]]"" . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Take it in Stride?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Take it in Stride"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Contentment Crowns a Home?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Contentment Crowns a Home"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: ¿Qué palabras clave tiene Checkmate?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE { 
  ?story golem:title ""Checkmate"" . 
  ?story golem:keyword ?keyword . 
}
"	"[{'keywords': Value(literal:'""Suck my toes"", \'when will i stop\', (Decidedly Unhygienic) Explicit Sexual Content, (Very Slight - blink and you might miss it) Fluff, (according to Jason at least), (as best as i could), (for Tim and only him), (so many feelings), +Mark, +cameos by 127 and SMRookies, 1980s, 2012-era, 2020 says screw cringe culture write spongebob fics, 4x10, A Therapist Probably Wouldn\'t Hurt, A burn so slow we are throwing this fic in a crockpot and calling it a day, A tiny bit of angst not much, ACOTAR - Freeform, AND David Cain, AND IT’S LESS THAN 3K WORDS, AU, AU where MC doesn\'t exist and instead its just Solomon, Abduction, Abusive Clay | Dream (Video Blogging RPF), Abusive Relationships, Accidental Baby Acquisition, Action, Action & Romance, Actor Erwin Smith, Actor Levi Ackerman, Addiction, Additional Warnings In Author\'s Note, Adopted Sibling Relationship, Adora is still with the Horde, Adrien Agreste | Chat Noir & Chloé Bourgeois Friendship, Adrien Agreste | Chat Noir Bashing, Adrien actually grows a spine, Adult Content, Adultery, Affection, Aftercare, Aftermath of Torture, Again, Age Difference, Aged Up, Aged-Up Character(s), Aged-Up Kim Taehyung | V, Akainu is awful as usual, Akuma Attack, Albus vs Severus, Albus\' Will, Alcohol, Aldmeri Dominion, Alex Rider has PTSD, Alfred has Hemophilia, All Human, All Platonic - Freeform, All of creation on its knees is a beautiful thing, Alpha Damiano David, Alpha Ethan Torchio, Alpha Kylo Ren, Alpha Park Jimin (BTS), Alpha Victoria DiAngelis, Alpha/Alpha, Alpha/Beta/Omega Dynamics, Alpha/Omega, Alphard Black - Freeform, Also related to the vampire essence from season 9, Alternate 7th Year, Alternate Ending, Alternate Reality, Alternate Universe, Alternate Universe - Assassins & Hitmen, Alternate Universe - BDSM, Alternate Universe - Boy Band, Alternate Universe - Canon, Alternate Universe - Canon Divergence, Alternate Universe - Chess, Alternate Universe - Code Geass Fusion, Alternate Universe - College/University, Alternate Universe - Criminals, Alternate Universe - Daemons, Alternate Universe - Dark, Alternate Universe - Demons, Alternate Universe - Different First Meeting, Alternate Universe - Dystopia, Alternate Universe - Everyone Lives/Nobody Dies, Alternate Universe - Fantasy, Alternate Universe - Future, Alternate Universe - Gang World, Alternate Universe - Gangsters, Alternate Universe - Harry Potter Setting, Alternate Universe - High School, Alternate Universe - Hogwarts, Alternate Universe - Magic, Alternate Universe - Mob, Alternate Universe - Modern Setting, Alternate Universe - Modern with Magic, Alternate Universe - Modern: Still Have Powers, Alternate Universe - No Androids (Detroit: Become Human), Alternate Universe - No Bending (Avatar TV), Alternate Universe - No Geass (Code Geass), Alternate Universe - No Miraculous, Alternate Universe - No Powers, Alternate Universe - No Quirks (My Hero Academia), Alternate Universe - Non-Famous, Alternate Universe - Not K-Pop Idols, Alternate Universe - Not Related, Alternate Universe - Prison, Alternate Universe - Reverse Falls, Alternate Universe - Roommates/Housemates, Alternate Universe - Royalty, Alternate Universe - Serial Killers, Alternate Universe - Soulmates, Alternate Universe - Spies & Secret Agents, Alternate Universe - Time Travel, Alternate Universe - Vampire, Alternate Universe - Yakuza, Alternative Universe - Kingdom, Alya Césaire Bashing, Ambiguous/Open Ending, Ambitious But Rubbish, Amnesia, Amora does bad things to Steve, An actual bloodbath, Anal, Anal Fingering, Anal Play, Anal Plug, Anal Sex, And by spit kink I mean Rouxls spits on Jevil once, And it’s sweet, Androids Are Orphans/Foster Kids, Anger, Angry Clint Barton, Angry Jack, Angry Tony Stark, Angst, Angst and Feels, Angst and Humor, Angst and Hurt/Comfort, Angst and Romance, Angst with a Happy Ending, Angst with a Pinch of Fluff, Animal Act, Anon - Freeform, Antagonistic Chuck Shurley, Anti Lila, Anti-Bullying Week 2020, Anxiety, Anxiety Disorder, Apollo getting the snot beat out of him, April Showers 2015, Archons (Genshin Impact), Arguing, Arranged Marriage, Art, As light on the plot as it is on the pants, Asami is World Chess Champion, Ass Play, Assassin Technoblade (Video Blogging RPF), Assassination Attempt(s), Assumptions, Atlas CEO Rhys, Attempted Rape/Non-Con, Attempted Sexual Assault, Attraction, Auron bottom, Auror Harry Potter, Avengers: Age of Ultron (Movie) Spoilers, Avengers: Endgame (Movie), Avengers: Endgame (Movie) Compliant, Avengers: Endgame (Movie) Spoilers, Avengers: Endgame Fix-It, Avengers: Infinity War Fix-It, Avengers: Infinity War Part 1 (Movie) Spoilers, Awesome Kagami, Awkward Alistair (Dragon Age), Awkward Kageyama Tobio, BAMF Dick Grayson, BAMF John Watson, BAMF Natasha, BAMF OFC, BBC, BDSM, BDSM Scene, BDSM Vibes, BFFs of chaos tbh, Ba Sing Se, Background Bench Trio, Bad Relationship, BadatRecon!Kylo, Bakubro - Love the sound of it, Bakugou being incredible at chess, Bamf Adrien, Bamf Chloe, Banter, Barclay read the room, Based on a Dream, Bassist Kirishima, Bat Family, Battle of Wits, Beautiful Golden Fools | Cersei/Jaime Lannister-centric, Because I can, Because Tom takes what he wants, Bedrock bros AND emerald duo go brrrr, Behavioral Analysis Unit (Criminal Minds), Beheading, Being A Teenager Is Hard When You Are Also A Robot, Benevolent Stalking, Best Friends, Beta Thomas Raggi, Betrayal, Betting, Bickering, Billy Hargrove Being an Asshole, Billy Hargrove Has Daddy Issues, Biotic Shepard (Mass Effect), Bipolar Disorder, Bisexual Damiano David, Bisexual Lily Evans, Bisexual Narcissa Black Malfoy, Bisexual Regulus Black, Bishop Max, Bit of crude, Biting, Bizarre Love Triangle, Black Butler - Freeform, Black Eagles Students Like Everyone Is, Blackwatch Era, Blank Period, Blended family, Blindfolds, Blood, Blood - blood and more blood, Blood Debts, Blood Drinking, Blood Kink, Blood Magic, Blood Play, Blood and Gore, Blood and Injury, Blood and Violence, Bloodplay, Blow Jobs, Board Ending, Body Dysmorphic Disorder, Body Horror, Body Image, Bondage, Bonding, Bones is not amused, Bonten Arc Spoilers (Tokyo Revengers), Book 1: Harry Potter and the Philosopher\'s Stone, Book 2: Harry Potter and the Chamber of Secrets, Book 3: Harry Potter and the Prisoner of Azkaban, Book 4: Harry Potter and the Goblet of Fire, Book 6: Harry Potter and the Half-Blood Prince, Book 7: Harry Potter and the Deathly Hallows, Boring, Boss/Employee Relationship, Bottom Castiel/Top Dean Winchester, Bottom Claude von Riegan, Bottom Erik, Bottom Harry Potter, Bottom Hubert von Vestra, Bottom Kim Taehyung | V, Bottom Severus Snape, Bottom Xiao | Alatus (Genshin Impact), Bottom!Nogitsune, Boys Kissing, Brainwashing, Break Up, Breathplay, Breeding, Breeding Kink, Bring on the mighty chess match!, Broken Families, Brotherhood, Brothers, Bruises, Budding Love, Bullying, Burns, Business, Business AU, But Dimitri Really Cares, But I\'m failing english at my school so..., But eventual happy ending, But only a little, But really they both do the same thing, But the cake is a lie, But todoroki is, Butt Plugs, Caitlyn knows this, Campaign: Balance (The Adventure Zone), Canon, Canon Compliant, Canon Divergence, Canon Divergence - Avengers (2012), Canon Divergence - Avengers: Age of Ultron (Movie), Canon Divergence - Fire Emblem: Three Houses Black Eagles Route, Canon Divergence - Post-Captain America: The Winter Soldier, Canon Divergence - Thor: The Dark World, Canon Era, Canon Lesbian Relationship, Canon Related, Canon Rewrite, Canon Temporary Character Death, Canon deaths, Canon-Typical Violence, Canonical Character Death, Cap 108, Captain America: Civil War (Movie) Spoilers, Captain Ilsa Herbert of the good ship Strellacott, Captain of the football team Dean Winchester, Captive!Alfred, Case 1-4: Turnabout Goodbyes, Cassata POV, Castiel Loves Dean Winchester, Castiel\'s deal with the empty, Castiel-centric (Supernatural), Cathy Carter - Freeform, Catra is still with the Horde, Challenge Response, Chaos, Chaptered, Character Death, Character Development, Character Study, Character Turned Into a Ghost, Character building, Cheating, CheckMate - Freeform, Checkmateshipping, Cheerleaders, Cheesy, Chess, Chess Game, Chess Metaphors, Chess puns, Chessverse AU, Child, Child Neglect, Childhood, Childhood Friends, Childhood Memories, Childhood Trauma, Children, Chinese Language, Chloé Bourgeois Being Chloé Bourgeois, Choi Soobin-Centric, Choking, Christina Lauren inspired, Chuck Shurley Doesn\'t Ship Castiel/Dean Winchester, Civil War (Marvel), Civil War Fix-It, Claude Doesn\'t, Claude Mentions Drinking, Claude and Dimitri Have Had Enough of Edelgard\'s Shit, Claude von Riegan is Called Khalid, Claude von Riegan is a Little Shit, Clay | Dream-centric (Video Blogging RPF), Cliffhangers, Clint is Peter\'s dad, Clint is an awkward potato esp. when it comes to steve, Cluemaster - Freeform, Cock Rings, Coda, Coffee, Coffee Shop, College AU, Come as Lube, Comedy, Comfort No Hurt, Coming on Face, Comment Fic, Commoner Dean, Community: 1drabble, Community: fma_fic_contest, Community: lawandorder100, Community: mcsheplets, Community: tf_speedwriting, Competition, Complete, Complicated Relationships, Confession, Confessions, Conflict, Confrontation, Consensual Blood Drinking, Consensual Sex, Consensual Underage Sex, Consequences, Conversations, Cop and Robber Fantasy, Cora lives!, Couch Cuddles, Couch Sex, Court of Owls, Cowgirl Position, Crack, Crack Vaguely Treated Seriously, Crazy Train Dominoes, Creampie, Crimes & Criminals, Criminal Masterminds, Criminal Underworld, Cross-Posted on FanFiction.Net, Crossdressing, Crossover, Crossover Pairings, Crossovers & Fandom Fusions, Crowley is angry, Crushes, Cuddle Pile at the end, Cuddling & Snuggling, Cuddly donkey toys and other tokens of affection, Cum Eating, Cum Swallowing, Cunnilingus, Cute, Cute silliness, Daddy Issues, Daddy Kink, Daemons, Damian Wayne is a good brother, Dammit Jim, Dancing, Danger Kink, Dangerous Hakuba Saguru, Dangerous Situations, Dark, Dark Dipper Pines, Dark Fantasy, Dark Ji_ng Chéng | Ji_ng W_nyín, Dark Magic, Dark Romance, Dark kinn, DarkCrankiplier in the end?, DarkSwanQueen - Freeform, Darkest Timeline, Darlin\' has done a learn, Darlin\' learns to let other people help them, Date Night, Day Four, Dead Dove: Do Not Eat, Dead Hilda Goneril, Death, Death Eater Regulus Black, Death Star, Death Threats, Deception, Decisions, Deepthroating, Demisexual!Clint, Demon Dean, Demon Dean Winchester, Demons, Demons Are Assholes, Denial, Depression, Derdriu Falls, Derek Takes Care Of Stiles, Derek Uses His Words, Derek is the King of Stiles\' Board, Desk, Desk Sex, Destiel - Freeform, Detective Work, Developing Friendships, Developing Relationship, Dialogue Heavy, Diavolo preforming every single romantic cliche you can imagine, Dick Grayson Needs a Hug, Dick Grayson as Slade Wilson\'s Apprentice, Dick Grayson is Renegade, Dick Grayson is Robin, Dick Grayson-centric, Dick hates Slade but also doesn’t, Did I mention this is fluff?, Digital Art, Dirty Jokes, Dirty Talk, Discrimination, Divorce, Do yourself a favor and check out James D\'Arcy in the wrestling onesie hubba hubba, Doctor Na Jaemin, Does not follow the exact plot of the show, Doggy Style, Dom Charles, Dom Kim Seokjin | Jin, Dom Sakusa Kiyoomi, Dom Solas (Dragon Age), Dom!Roy, Dom/sub, Dom/sub Play, Dom/sub Undertones, Domestic Avengers, Domestic Fluff, Dominance, Dominant Keeler, Dominant Roy Mustang, Dominant!Light, Don\'t Read This, Don\'t copy to another site, Don\'t mess with his friends, Dorks in Love, Double Penetration, Double Penetration in Two Holes, Drabble, Drabble Collection, Dragon Age Reverse Big Bang 2015, Dragon Chess, Dragon!Kagami, Drama, Drama & Romance, Dream is so very bad at parenting, Dream sucks, Dreams, Drinking Games, Drinking to Cope, Drug Use, Drugs, Druids, Drunk Antics, Dry Humping, Dry Sex, Dub-con for Steve at first, Dubious Consent, Duelling, Durincest, Earthborn (Mass Effect), Easing Worries, Echecs, Edelgard Understands Feels Only Slightly Better Than Hubert, Electricity, Elementary School, Elves, Embarrassed Kageyama Tobio, Embarrassment, Emotional Baggage, Emotional Hurt, Emotional Hurt/Comfort, Emotional Manipulation, Emotional Porn, Emotional Roller Coaster, Emotional Sex, Emotional violence, Emotional/Psychological Abuse, Emotionally Hurt Castiel (Supernatural), Endgame Bakugou Katsuki/Kirishima Eijirou, Endor, Enemies, Enemies to Accomplices, Enemies to Friends to Lovers, Enemies to Lovers, Enemy Lovers, Enemy to Caretaker, Engagement, Enough to beat everyone in Class 1 A, Enthusiastic Consent, Episode 5x15: The Long Goodbye Job, Episode Related, Episode Tag, Episode: s01e19: Fear of Victory, Episode: s01e28 Dreams in Darkness, Episode: s01e41 Joker\'s Wild, Episode: s02e16 Harley\'s Holiday, Episode: s02e17 Lock-Up, Episode: s04e07 Memoriam, Erik Has Feelings, Erotic Electrostimulation, Established Jounouchi Katsuya | Joey Wheeler/Kaiba Seto, Established Relationship, Even Mohn has feelings, Eventual Fluff, Eventual Foursome, Eventual Happy Ending, Eventual Relationships, Eventual Romance, Eventual Smut, Eventual Threesome, Everyone Mostly Wins, Everyone Needs A Hug, Evil Plans, Ewoks, Except for Midoriya, Execution, Exes, Exes to Lovers, Exhibitionism, Explicit Language, Explicit Sexual Content, Extended Metaphors, Extremely Dubious Consent, Extremis Pepper Potts, Eye Trauma, FAHC, Face Slapping, Face-Fucking, Face-Sitting, Fake AH Crew, Fake/Pretend Relationship, Falling In Love, Family, Family Dynamics, Family Fluff, Family Game Night, Family Issues, Fandot Creativity, Fanfic Spotlight, Fantasizing, Fantasy, Fashion obsession (mine), Fatal feels, Fate, Fate & Destiny, Father-Daughter Relationship, Fear/Comfort, Feelings Realization, Feltching, Female My Unit | Byleth, Fencing, Ferdinand Has A Crush, Ferdinand Is A Lush, Feyre and Nesta are from Scythia, FicArt!, Ficlet, Fighting, Filming, Final disc war, Fingerfucking, Fingering, Fire Emblem: Three Houses Black Eagles Route, Fire Emblem: Three Houses Black Eagles Route Spoilers, First Arc of a Scythe fic?, First Crush, First Impressions, First Kiss, First Meetings, First Time, First Time Blow Jobs, First Wizarding War with Voldemort (Harry Potter), Firsts, Fix-It, Fix-It of Sorts, Flashbacks, Flirting, Flirty Miya Atsumu, Floor Sex, Fluff, Fluff and Angst, Fluff and Humor, Fluff and Smut, Fluff? ish., Fondling, Footsie, Forbidden Love, Forced Prostitution, Forced Relationship, Foreplay, Friends to Enemies, Friends to Lovers, Friendship, Friendship and Loyalty - Freeform, Friendship/Love, From the author formerly known as Delphicoracle-Cat, FrostIron - Freeform, Frottage, Fuck Cannon, Funny, Future Fic, Futurefic, GaaLee, Gaara is a little gremlin brat, Gaara is competitive, Gags, Gambling, Game of chess, Gamenight, Games, Gang Rape, Gang Violence, Gang typical violence, Gangs, Gangsters, Gaslighting, Gay Male Character, Gay Panic, Gay Sex, Geass, Gen or Pre-Slash, Gender Neutral Character, Gender Neutral MC - Freeform, Gender-Neutral My Unit | Byleth, Gender-Neutral Pronouns, Genderfluid Character, Genderfluid Hinata Shouyou, Genderfluid Loki (Marvel), General clumsiness, General smuttiness, Getting Back Together, Getting Together, Getting to Know Each Other, Ghosts, Gift Fic, Girls Kissing, Good Friend Mouri Ran, Good Friend Sera Masumi, Good Parent Phil Watson (Video Blogging RPF), Gore, Gotta get these fates fanfics out of my system, Governor Vera, Grace Field House (The Promised Neverland), Graphic Description of Corpses, Greek Mythology - Freeform, Grief/Mourning, Guessing game, Guitarist Kaminari, Guns, Guro, Guys it’s the most successful fluff I’ve ever written omg, Haki, Hakuba Saguru Appreciation, Hakuba Saguru Needs a Hug, Half-Sibling Incest, Halloween, Hallucinations, Han Jisung | Han has a tongue piercing, Han Jisung | Han is Whipped, Han Jisung | Han is a Little Shit, Hand Job, Hand Jobs, Happy Ending, Harley Keener Needs a Hug, Harley Keener as Iron Lad, Harry Osborn Needs a Hug, Harry Osborn as Venom, Hate Sex, Hattori Heiji Needs a Hug, He already was, He deserves a break, He\'s just really bad at it guys, Headaches and hangovers, Healthy Relationships, Heartbreak, Heavy Angst, Heavy BDSM, Hermes and Kore friendship, Hermes defends the Underworld, Hermione Granger Time Travel, Hermione is a Black, Heroic Adrien Agreste, Het and Slash, High Fantasy AU, High School, High School AU, High School Drama, Hinata Shouyou is a Dork, Hinata and Kageyama are roommates, Hinata if you squint, Hiroshi is a dick like always, Historical Inaccuracy, Hogsmeade, Hogwarts Eighth Year, Holy Grail, Homophobia (sorry), Homophobic Language, Hopeful Ending, Horcruxes, Horror, Hospital, Hospitalization, Hostage Situations, House Elves, House of Repose, How Do I Tag, Hubert Doesn\'t Understand Feels, Hubert Falls In Love, Hubert has nightmares, Hugs, Humiliation, Humor, Humorous Ending, Hurt, Hurt Castiel (Supernatural), Hurt Dean Winchester, Hurt Harley Keener, Hurt Harry Osborn, Hurt Jay Halstead, Hurt No Comfort, Hurt Peter Parker, Hurt Spencer Reid, Hurt TommyInnit (Video Blogging RPF), Hurt Tony Stark, Hurt/Comfort, Hyunjae is a tease, I AM NOT ME, I Can\'t Believe I Wrote This, I DID A THING AND ITS FLUFF, I Don\'t Even Know, I Love You, I Tried, I Will Go Down With This Ship, I Wrote This Instead of Sleeping, I also took a lot of liberty with the vampire lore, I didn\'t write angst for once, I don\'t know how to tag this is as good as it gets, I had no idea what i was doing when i wrote this, I hope this is original, I hurt myself with this, I just want Ian Gallagher to be okay, I just wanted to write something sad and depressing I guess, I lied no comfort, I love Lucretia with all my heart, I love Walker, I never do, I really want to go to the pub now, I swear it turns out okay, I wrote this and intended it to be a oneshot, I wrote this instead of homework, I\'m Bad At Summaries, I\'m British so\'s my spelling, I\'m Going to Hell, I\'m Sorry, I\'m a baby at chess, I\'ve rated this M but it\'s like a soft M, IKE CAMEO!!, IMPORTANT: READ THE NOTE FOR SOME BACKGROUND INFO, IT\'S SO FLUFFFFAY I\'M GONNA DIE, Ian\'s internal thoughts, Ideas inspired from Ikemen Revolution/Ikemen Kakumei, Identity, Identity Issues, Identity Reveal, Idiots in Love, Idols, Iida is not good at Jenga, Immortality, Impact Play, Implied Amon/MC, Implied Executions, Implied Feysand, Implied Marianne von Edmund/Hilda Valentine Goneril - Freeform, Implied Mpreg, Implied Relationships, Implied Sexual Content, Implied/Referenced Alcohol Abuse/Alcoholism, Implied/Referenced Character Death, Implied/Referenced Cheating, Implied/Referenced Child Abuse, Implied/Referenced Homophobia, Implied/Referenced Rape/Non-con, Implied/Referenced Self-Harm, Implied/Referenced Sex, Implied/Referenced Torture, Imprisonment, Improper use of a chessboard, Inaccuracies, Inazuma (Genshin Impact), Incest, Infidelity, Infiltration, Infinity Gems, Injured Hubert von Vestra, Injury Recovery, Innuendo, Inspired by Chihayafuru, Inspired by Chrom and F!Robin\'s supports, Inspired by Music, Inspired by the S2 promo, Intelligent! Midoriya, Internal Monologue, Interrogation, Introspection, It can’t be good for my health, It is now, It\'s a better world where Bruce is better as being a father, Ivar (Vikings) is a Little Shit, I’M ACTUALLY REALLY PROUD OF MYSELF, I’m sorry, James Potter - Freeform, James and Lily, Jarvis POV, Jarvis is learning to fight, Jason Todd is Red Hood, Jay Halstead Whump, Jealous, Jealous Bucky Barnes, Jealous Hubert von Vestra, Jealousy, Jedi, Jenga, Jeon Jungkook is Bad at Feelings, Jeon Jungkook is Whipped, Jesse is a genius, Jevil is a smug bastard, Jim the ever present scout, Jimin\'s dad is not a nice guy, Jinmin are cousins, Jinx has a vendetta, Jinx is a Little Shit (League of Legends), Jinx likes to point it out, Johnlock - Freeform, Josephine\'s Side Quest, Jotunn Loki (Marvel), Just Lots of Sex in General, Just a hint of angst because it\'s Solas and I can\'t help myself, Justice Siblings, KageHina - Freeform, Kageyama Tobio Angst, Kageyama Tobio is Bad at Feelings, Kageyama also being a CUTE lil shit, Kageyama being a lil shit, KaibaCorp, Kaitou Kid Heist (Meitantei Conan/Magic Kaito), Karamatsu\'s painfulness, Katherine Potter and Serverus Snape, Katherine Potter and Tom Riddle (TimeTravel), Keith is high key jealous, Keyboardist Sero, Khaenri\'ah Royalty Kaeya (Genshin Impact), Kickin ass and writing names, Kid Fic, Kid Spencer Reid, Kidnapping, Kidnapping warning, Kim Taehyung | V & Park Jimin are Best Friends, Kim Taehyung | V is a Little Shit, Kind of a character study, Kinda, Kink, Kira burns down the world, Kiss interrupted, Kissing, Kissing in the Rain, Knifeplay, Knight, Knight Juyeon, Knight Sangyeon, Knights - Freeform, Knives, Korrasami - Freeform, Kudou Shinichi | Edogawa Conan Needs a Hug, Kuroba Kaito | Kaitou Kid Needs a Hug, Kuroshitsuji - Freeform, Kuroshitsuji II | Black Butler II, Kwami Swap, LGBTQ Character, LGBTQ Female Character, Lady Loki, Ladybug (episode), Language, Laser Tag, Law Enforcement Pursuing the Winchesters (Supernatural), Law is just Done, Lee Minho | Lee Know -centric, Lee Minho | Lee Know is done, Lee is unnecessarily good at Shogi, Legends Arceus Post Game Spoilers, Lemon, Lena Luthor Doesn\'t Know Kara Danvers is Supergirl, Lesbian Sex, Lesbians, Letters, Lies, Lifeguard Billy Hargrove, Lifeguards, Light Angst, Light BDSM, Light Dom/sub, Light Spoilers for the end of the game, Light has a serious god complex and no one is helping that, Light is a wrecking ball of win, Light-Hearted, Lila Rossi Bashing, Lila Rossi\'s Lies Are Exposed, Lily Evans - Freeform, Lily Evans Potter - Freeform, Lily Potter - Freeform, Lily and Remus, Lima Syndrome, Liyue (Genshin Impact), Liyue Harbor (Genshin Impact), Liyue Lantern Rite (Genshin Impact), Loki Does What Loki Wants (Marvel), Loki Doubles, Loki Lives (Marvel), Loki being Loki, Loki has a heart (he just doesn\'t want to admit it), Loki is a Good Bro (Marvel), Loki is a feminist, Loki’s Children - freeform, Loosely considers some S09 spoilers, Lords & Ladies, Lorenz\'s Dad Is Kind of an Ass, Loss of Control, Loss of Parent(s), Loss of Virginity, Love, Love Confessions, Love Triangles, Love and fate, Love confession but not really, Love/Hate, Lovers To Enemies, Loves to rile up Bakugou, Lux watches the whole thing while secretly planning their demise, Luzu top, L’s origins/backstory, M for language, MC is sick of Luci\'s dodging the topic, MSBY Black Jackals - Freeform, Madness, Madness in there, Mafia AU, Mages, Magic, Magic User Koizumi Akako, Magical Realism, Magical Seth Rollins, Magical World, Major character death - Freeform, Making Love, Male Slash, Male-Female Friendship, Manga Spoilers, Manipulation, Manipulative Claude von Riegan, Manipulative Hux, Manipulative Midoriya Izuku, Mansion Fic, Marauders Era (Harry Potter), Marinette Lectures Adrien, Marinette Stops Taking The High Road, Mark of Cain, Marking, Marriage, Married Sex, Mary is alive John is dead, Mass Effect 3: Omega, Mastership, Masturbation, Masturbation in Shower, Matchmaking, Mates, Mating Cycles/In Heat, Maybe - Freeform, Maybe A Smidge of Stockholm Syndrome Maybe?, Me trying to be fancy, Meddlesome Siblings, Medieval AU, Medieval Fantasy AU, Meet-Cute, Meitantei Conan\'s Black Organization and Magic Kaito\'s Organization Are the Same, Memories, Memory Loss, Mental Chess Rematch during Sex, Mental Health Issues, Mental Illness, Mention of Death, Mentioned ATEEZ Ensemble, Mentioned Bruce Wayne, Mentioned Stray Kids Ensemble, Mentioned TWICE Ensemble, Mentioned Teen Titans (DCU), Mentioned Teucer (Genshin Impact), Mentioned Those Who Slither In The Dark (Fire Emblem), Mentions of Infanticide, Mentions of Mercy Killing, Mentions of Sheith, Mentions of Sororicide/Fratricide, Mentions of drugs and violence, Meta, Metaphorical, Metaphorical chess match, Midoriya Hisashi\'s Bad Parenting, Midoriya Izuku Does Not Have One for All Quirk, Midoriya Izuku Needs A Hug, Midoriya Izuku is a Little Shit, Midoriya Izuku\'s villain origin story, Midoriya has god-level intelligence, Mikannie Canon, Mild Blood, Mild Gore, Mild Kink, Mild Language, Mild Painplay, Mild Sexual Content, Mildly Dubious Consent, Military Ranks, Min Yoongi | Suga Is Whipped, Mina is a troll, Mind Games, Minor Adora/Catra (She-Ra), Minor Character Death, Minor Linhardt von Hevring/Lysithea von Ordelia, Minor Maxine ""Max"" Mayfield/Lucas Sinclair, Minor Tsukishima Kei/Yamaguchi Tadashi, Minor Violence, Minor Wong Kun Hang | Hendery/Xiao De Jun | Xiao Jun, Minor though for both implications, Mirrors, Missing Scene, Missing Scene Fic, Misunderstandings, Miya Atsumu Being an Idiot, Miya Atsumu is a Little Shit, Mob Boss Jeon Jungkook, Mob Boss Min Yoongi | Suga, Mobsters, Mockingjay, Modern AU, Modern Era, Modern Westeros, Money, Monoshizukanohi, Morally Ambiguous Character, More tags to be added, Mortal and immortal world domination, Mpreg, Multiple Orgasms, Murder, Murder Mystery, Mutual Pining, My First Smut, Mycroft is a tease, Mystery, Mystrade Monday Prompts, NCT Dream - Freeform, NSFW, Nader May or May Not Be Claude\'s Dad, Name-Calling, Natasha Doesn\'t Die, Natasha deserves better, Natasha\'s gots a plan, Neck Kissing, Needles, Never challenge Kira to chess when godhood is on the line, New Family, Nightmares, No Beta, No Jily, No Plot/Plotless, No Privacy, No Refractory Period, No Romance, No Sex, No Smut, No Stiles, No beta we die like Rex Lapis, No beta we die like dream, No beta we die like lilith, No beta we die like my hope for DLC, No pawns were harmed in the writing of this fic, Nogitsune, Nogitsune Fuckery, Nogitsune Headspace/POV, Non-Accidental Brother Acquisition, Non-Consensual Blood Drinking, Non-Consensual Drug Use, Non-Consensual Touching, Non-Explicit Sex, Non-Graphic Violence, Non-Linear Narrative, Non-Traditional Alpha/Beta/Omega Dynamics, Non-con-but-not-of-the-normal-variety, Not A Fix-It, Not Avengers: Endgame (Movie) Compliant, Not Beta Read, Not Canon Compliant, Not Canon Compliant - Harry Potter and the Deathly Hallows, Not Happy, Not Suitable/Safe For Work, Not Sure You Decide, Not for the faint of heart, Not great relationships, OC, OCs - Freeform, OOC, OT6, Oaths & Vows, Object Penetration, Oblivious Bakugou Katsuki, Obsession, Oh and I kinda randomly shipped Irene and Yeri, Oh and also Scythe Curie being a little bit dead but let\'s ignore that, Oh my - this seems so dark!, Oikawa Tooru & Kageyama Tobio are Related, Oikawa being a dreamy boyfriend, Older Man/Younger Woman, Older Woman/Younger Man, Omega Armitage Hux, Omega Kim Taehyung | V, One Chicago (Chicago Franchise), One Shot, One-Sided Attraction, One-Sided Bakugou Katsuki/Midoriya Izuku, One-Sided Edelgard von Hresvelg/Hubert von Vestra, One-Sided Ferdinand von Aegir/Hubert von Vestra, Oneshot, Only Hurt At First No Comfort, Open to Interpretation, Or good parenting in a weird way, Oral Fixation, Oral Sex, Orgasm Delay, Orgasm Delay/Denial, Orgasm Denial, Orgasme sans contact, Original Character(s), Originally Posted on FanFiction.Net, Originally Posted on Tumblr, Other Additional Tags to Be Added, Other Character - Freeform, Other characters mentioned - Freeform, Others - Freeform, Out of Character, Outdoor Sex, OutlanderBingo2020, Outsider Influence, Over the Edge, Overthinking, Overwatch Era, POV Beth Boland, POV Clay | Dream (Video Blogging RPF), POV Derek, POV First Person, POV Fyodor, POV Loki (Marvel), POV Multiple, POV Outsider, POV Second Person, POV Third Person, PWP, Pack Bonding, Pack Dynamics, Pack Feels, Pain, Painful Sex, Pandora Gem (Magic Kaito), Pandora Gem Mythology, Panic Attacks, Park Jimin (BTS) is Whipped, Park Jimin (BTS)-centric, Park date, Parties, Partner Betrayal, Party, Passion, Past Abuse, Past Character Death, Past Child Abuse, Past Kageyama Tobio/Oikawa Tooru, Past Loki/Sigurd, Past Loki/Tony Stark - Freeform, Past Mind Control, Past Pepper Potts/Tony Stark, Past Relationship(s), Past Sexual Abuse, Past Suicide Attempt, Past Torture, Payback, Pederasty, Peggy is giving him lessons, Penis In Vagina Sex, Pet Names, Peter Parker Needs a Hug, Peter Parker travels back in time, Petrovsky\'s chess-set, Phantom Thief Hyunjae, Phil sees a child and must adopt, Phoenix Wright Kink Meme, Pining, Pining Bucky Barnes, Pining Castiel (Supernatural), Pirates, Plans, Platonic Relationships, Playing Games, Playing on god mode, Please Don\'t Kill Me, Plot What Plot/Porn Without Plot, Political, Political Revolution, Polyamory, Poor Catra (She-Ra), Poor Tony Stark, Porn, Porn With Plot, Porn with Feelings, Porsche deserves the world, Portal 2 - Freeform, Possessive Behavior, Possessive Slade Wilson, Possessive Tom Riddle, Possible smut, Possibly Pre-Slash, Post Current Canon, Post Devil Ending, Post Episode 69, Post Mpreg, Post Star Trek: Into Darkness, Post-Avengers, Post-Avengers (2012), Post-Avengers: Endgame (Movie), Post-Avengers: Infinity War Part 1 (Movie), Post-Canon, Post-Canon Fix-It, Post-Captain America: Civil War (Movie), Post-Crimson Flower | Black Eagles Route (Fire Emblem: Three Houses), Post-Episode: s15e17 Unity, Post-Graduation, Post-Ladybug, Post-Nogitsune Stiles Stilinski, Post-Season/Series 05 Finale, Post-Serum Steve Rogers, Post-Time Skip, Post-Traumatic Stress Disorder - PTSD, Post: s05e22 The Gift, Potions, Potter Siblings, Power Bottom Kim Taehyung | V, Power Dynamic, Power Dynamics, Power Play, Praise Kink, Pranks and Practical Jokes, Pre-Fall of Overwatch, Pre-Game Oma Kokichi, Pre-Game Saihara Shuichi, Pre-Games, Pre-Relationship, Pre-Slash, Pre-Timeskip | Academy Phase (Fire Emblem: Three Houses), Pre-White House (West Wing), Pre-localisation, Precognition, Pregnancy, Prequel, Presumed Dead, Pretend Steve Rogers/Sam Wilson, Prince Castiel, Prince Park Jimin (BTS), Prince!Adrien, Princess Alliance hasn’t formed yet, Princess!Marinette, Prison, Prison Sex, Prisoner Joan, Prisoner of War, Pro Volleyball Player Miya Atsumu, Pro Volleyball Player Sakusa Kiyoomi, Probable angst, Profanity, Prompt Fic, Prompt Fill, Prompt: Chess AU, Pronoun Indifferent Loki, Prostitution, Protective Bucky Barnes, Protective Frigga (Marvel), Protective Hakuba Saguru, Protective Hattori Heiji, Protective Hux, Protective Jason Todd, Protective Kim Namjoon | Rap Monster, Protective Koizumi Akako, Protective Loki (Marvel), Protective Mycroft, Protective Nakamori Aoko, Protective Odin (Marvel), Protective Peter Parker, Protective Siblings, Protective Slade Wilson, Protective Technoblade (Video Blogging RPF), Protective Tony Stark, Protective Tsuburaya Asami, Psychological Drama, Psychological Horror, Psychological Torture, Psychological Trauma, Puns & Word Play, Pyxis - Freeform, Queens, Questionable ethics, Quests, Quirkless Midoriya Izuku, R/NC-17 - Red Cortina, RDR2, Ra\'s is creepy, Racist Language, Random & Short, Random oneshot about Hermes, Rape, Rape/Non-con Elements, Rare Pairing, Rare Pairings, Razón para funarme: este fic, Reader as minor social anxiety, Reader has self esteem issues, Reader is also a little shit, Reader is has awesome skills but gets tunnel vision, Reader is part of the garrison, Reader replaces Akari/Rei, Reader-Insert, Really? Right in front of my chess board, Rebirth, Recovery, Recreational Drug Use, Red Room, References to Canon, References to Dean/Other(s), References to Norse Religion & Lore, Regency, Regret, Regrets, Regulus Black - Freeform, Regulus Black Lives, Relationship Problems, Religion, Reluctant Big Brother Jason Todd, Remarriage, Remembered Emotional Trauma, Remix, Remus Lupin & Lily Evans Potter Friendship, Remus and Hermione, Reporter Karen Page, Repressed Memories, Reprogramming, Rescue Missions, Restraints, Rev! BillDip, Revenge, Revised Version, Revolution, Rey Needs A Hug, Rey Palpatine, Riddles, Rimming, Risk Aware Consensual Kink, Rival Sex, Rivalry, Robots, Romance, Romans vs Greeks, Romantic Comedy, Romantic Fluff, Romantic Soulmates, Ron Weasley is a Good Friend, Rope Bondage, Rough Kissing, Rough Oral Sex, Rough Sex, Roughness, Rouxls is an angry bastard, Rouxls is kinda a bitch, Royalty, Running Away, Rutting, Ryuk has interesting abilities, SEBASTIAN - Freeform, SHIELD Agent Bucky Barnes, SNK-type violence, SO, Sad, Sad Ending, Sad Kim Taehyung | V, Sad Spencer Reid, Sad The Director | Lucretia, Sad TommyInnit (Video Blogging RPF), Sadist Hubert von Vestra, Sadistic!Kuvira, Sado-Masochism, Safe Klance Week 2018, Safe Sane and Consensual, Safewords, Saihara Shuichi is mentioned, Sakusa Kiyoomi is tired, Sakusa Kiyoomi-centric, Sam Whump, Samhain, Sass, Sassy Narcissa, Satan struggling with his own "	0	1	1	Annotation error		
368	368	es	¿Qué palabras clave tiene Contentment Crowns a Home?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Contentment Crowns a Home"" . ?story golem:keyword ?keyword . }"	[{'keywords': Value(literal:'Baking, Bubble Bath, Dancing, Fluff, Forced Proximity, HP Fluff Fest 2021, Harry Potter Epilogue What Epilogue | EWE, Magical Theorist Harry Potter, Malfoy Manor (Harry Potter), Quidditch, Sentient Magical Houses (Harry Potter), Smitten Draco Malfoy')}]	368	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué palabras clave tiene Take it in Stride?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Take it in Stride"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Summer Lovin'?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Summer Lovin'"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: ¿Qué palabras clave tiene Contentment Crowns a Home?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE { 
?story golem:title ""Contentment Crowns a Home"" . 
?story golem:keyword ?keyword . 
}
"	[{'keywords': Value(literal:'Baking, Bubble Bath, Dancing, Fluff, Forced Proximity, HP Fluff Fest 2021, Harry Potter Epilogue What Epilogue | EWE, Magical Theorist Harry Potter, Malfoy Manor (Harry Potter), Quidditch, Sentient Magical Houses (Harry Potter), Smitten Draco Malfoy')}]	1	0	0			
369	369	es	¿Qué palabras clave tiene You already have the bloody prince?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""You already have the bloody prince"" . ?story golem:keyword ?keyword . }"	[{'keywords': Value(literal:'Banter, Dancing, Established Relationship, Fluff, Suits, Teasing')}]	369	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos recibió My Sweet Vampire?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""My Sweet Vampire"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cual es el Mean Segmental Token Type Ratio de ""I vant to suck your blood!""?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?msttr  WHERE { ?story golem:title ""I vant to suck your blood!"" . ?story golem:MSTTR ?msttr . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: ¿Qué palabras clave tiene You already have the bloody prince?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?keyword WHERE { 
?story golem:title ""You already have the bloody prince"" . 
?story golem:keyword ?keyword . 
}
"	[{'keyword': Value(literal:'Dancing')}, {'keyword': Value(literal:'Established Relationship')}, {'keyword': Value(literal:'Fluff')}, {'keyword': Value(literal:'Teasing')}, {'keyword': Value(literal:'Banter')}, {'keyword': Value(literal:'Suits')}]	0	1	1	Evaluation method error	Non-grouped	
370	370	es	¿Qué palabras clave tiene Never Have I Ever...?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Never Have I Ever..."" . ?story golem:keyword ?keyword . }"	"[{'keywords': Value(literal:""(mentioned) - Freeform, .Top Dinah Lance, 2017 gpf banquet, A bit of angst i guess, Aftercare, Alcohol, Alien Biology, Alien/Human Relationships, Aliens Make Them Do It, Alternate Universe, Alternate Universe - Modern Setting, Although Colin has his moments where he realises it's all a bit weird, Although their age is not specified tbh, Anal Fingering, Anal Sex, Angst, Angst and Feels, Ass to Mouth, Aurors, Aw he's so adorable, Barry and Lup's sex life, Begging, Birthday Sex, Bisexual Male Character, Biting, Blackmadhi Day, Blow Jobs, Bondage, Bottom Bruce Wayne, Bottom Cas, Brotherly Love, Brothers, But mostly fluff, Can be read as original or fanwork, Canon Compliant, Canon-Typical Violence, Character's Name Spelled as Viktor, Cock Rings, Cock Warming, Collars, Come Swallowing, Community: bill_ficathon, Confessions, Crack, Crossover, Cunnilingus, Derek sucks dick, Destiel - Freeform, Dialogue Heavy, Diana/Barry isn't a tag??, Do not repost, Dom Diana (Wonder Woman), Dom/sub, Double Penetration, Drink, Drinking, Drinking Games, Drunk Sex, Drunken Confessions, Drunken deductions, During Canon, Episode: e060-066 The Stolen Century Parts 1-7, Established Relationship, Established Relationship - Wolfstar, Eventual Smut, Except it's 8k, Explicit Sexual Content, Face-Fucking, Fangirl Japanese, Feelings, First Kiss, First Time, First Time Blow Jobs, Fluff, Fluff and Smut, Fluffy Smut, Friends to Lovers, Frottage, Gambling, Gangbang, Gonna fix that some day promise, Hand Jobs, Happy Ending, How Do I Tag, Humor, I know I'm embarrassed too, Ignores Civil War, It doesn't matter they're all doing it, James F Potter is the biggest Wolfstar shipper, Kissing, Klavier and Nahyuta are kind of sluts, Light Dom/sub, Loss of Virginity, Love, Mage Hawke - Freeform, Male Slash, Mildly Dubious Consent, My First Fanwork, NSFW, Nerd Castiel, Never Have I Ever, Never Have I Ever..., One Shot, Or is it more groupsex?, Oral Sex, Past Sexual Abuse, Peter is over 21, Please Don't Kill Me, Plot What Plot/Porn Without Plot, Porn With Plot, Porn with Feelings, Possessive Behavior, Post-Sirius Black in Azkaban, Praise Kink, Punk Dean, Reader-Insert, Referenced Semi-Public Sex, Rimming, Second base action, Self-Doubt, Sex, Sex with Sirius Black, Shameless Smut, Shenanigans, Sheriarty - Freeform, Sirius Black Lives, Slavery, Slow Build, Smut, Smutty i guess, Snark, Spanking, Spitroasting, Sub Barry Allen, Switch Barry Allen, Team Bonding, That also isn't a tag??, They're all sort of in it together I guess, Threesome - F/M/M, Threesome - M/M/M, Top Clark Kent, Top Dean, Top Hal Jordan (Green Lantern), Top J'onn J'onzz, Topping from the Bottom, Twins, Underage Drinking, Underage Sex, Vaginal Fingering, Vaginal Sex, Virgin!Sherlock, Voyeurism, Yurio's unfortunate adolescent crush on yuuri, all consensual, all the snark, apparently Peter is a slut, because I can't write succinctly, because I said so, but also during episode 12, cause why not, do not copy to another site, drinking game, drunk!lock, everyone has a giant gay crush on yuuri but theyre subtle, everyone has so many questions, fenhawke - Freeform, game with alcohol, i will also add more things later on, i will write a chapter for every one of the things i put in there never you worry, older sirius, phichit and yuuri are Ride or Die Bros, phichit consistently does The Most, phichit is a bad bitch who will cut you if you mess with his best friend, post episode 12, rip that one italian guy, shocking confessions, slight angst, slight mention of angst, thank you hootie, the pack watches, this is so dumb, to celebrate Ianto's birthday (it's not his birthday in the story), viktor is so freaking in love, will we ever find out what happened that night in the alleyway behind sears"")}]"	370	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué palabras clave tiene Kiss Me (Under the Light of a Thousand Stars)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Kiss Me (Under the Light of a Thousand Stars)"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Take it in Stride?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Take it in Stride"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Summer Lovin'?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Summer Lovin'"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: ¿Qué palabras clave tiene Never Have I Ever...?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE { 
?story golem:title ""Never Have I Ever..."" . 
?story golem:keyword ?keyword . 
}
"	"[{'keywords': Value(literal:""(mentioned) - Freeform, .Top Dinah Lance, 2017 gpf banquet, A bit of angst i guess, Aftercare, Alcohol, Alien Biology, Alien/Human Relationships, Aliens Make Them Do It, Alternate Universe, Alternate Universe - Modern Setting, Although Colin has his moments where he realises it's all a bit weird, Although their age is not specified tbh, Anal Fingering, Anal Sex, Angst, Angst and Feels, Ass to Mouth, Aurors, Aw he's so adorable, Barry and Lup's sex life, Begging, Birthday Sex, Bisexual Male Character, Biting, Blackmadhi Day, Blow Jobs, Bondage, Bottom Bruce Wayne, Bottom Cas, Brotherly Love, Brothers, But mostly fluff, Can be read as original or fanwork, Canon Compliant, Canon-Typical Violence, Character's Name Spelled as Viktor, Cock Rings, Cock Warming, Collars, Come Swallowing, Community: bill_ficathon, Confessions, Crack, Crossover, Cunnilingus, Derek sucks dick, Destiel - Freeform, Dialogue Heavy, Diana/Barry isn't a tag??, Do not repost, Dom Diana (Wonder Woman), Dom/sub, Double Penetration, Drink, Drinking, Drinking Games, Drunk Sex, Drunken Confessions, Drunken deductions, During Canon, Episode: e060-066 The Stolen Century Parts 1-7, Established Relationship, Established Relationship - Wolfstar, Eventual Smut, Except it's 8k, Explicit Sexual Content, Face-Fucking, Fangirl Japanese, Feelings, First Kiss, First Time, First Time Blow Jobs, Fluff, Fluff and Smut, Fluffy Smut, Friends to Lovers, Frottage, Gambling, Gangbang, Gonna fix that some day promise, Hand Jobs, Happy Ending, How Do I Tag, Humor, I know I'm embarrassed too, Ignores Civil War, It doesn't matter they're all doing it, James F Potter is the biggest Wolfstar shipper, Kissing, Klavier and Nahyuta are kind of sluts, Light Dom/sub, Loss of Virginity, Love, Mage Hawke - Freeform, Male Slash, Mildly Dubious Consent, My First Fanwork, NSFW, Nerd Castiel, Never Have I Ever, Never Have I Ever..., One Shot, Or is it more groupsex?, Oral Sex, Past Sexual Abuse, Peter is over 21, Please Don't Kill Me, Plot What Plot/Porn Without Plot, Porn With Plot, Porn with Feelings, Possessive Behavior, Post-Sirius Black in Azkaban, Praise Kink, Punk Dean, Reader-Insert, Referenced Semi-Public Sex, Rimming, Second base action, Self-Doubt, Sex, Sex with Sirius Black, Shameless Smut, Shenanigans, Sheriarty - Freeform, Sirius Black Lives, Slavery, Slow Build, Smut, Smutty i guess, Snark, Spanking, Spitroasting, Sub Barry Allen, Switch Barry Allen, Team Bonding, That also isn't a tag??, They're all sort of in it together I guess, Threesome - F/M/M, Threesome - M/M/M, Top Clark Kent, Top Dean, Top Hal Jordan (Green Lantern), Top J'onn J'onzz, Topping from the Bottom, Twins, Underage Drinking, Underage Sex, Vaginal Fingering, Vaginal Sex, Virgin!Sherlock, Voyeurism, Yurio's unfortunate adolescent crush on yuuri, all consensual, all the snark, apparently Peter is a slut, because I can't write succinctly, because I said so, but also during episode 12, cause why not, do not copy to another site, drinking game, drunk!lock, everyone has a giant gay crush on yuuri but theyre subtle, everyone has so many questions, fenhawke - Freeform, game with alcohol, i will also add more things later on, i will write a chapter for every one of the things i put in there never you worry, older sirius, phichit and yuuri are Ride or Die Bros, phichit consistently does The Most, phichit is a bad bitch who will cut you if you mess with his best friend, post episode 12, rip that one italian guy, shocking confessions, slight angst, slight mention of angst, thank you hootie, the pack watches, this is so dumb, to celebrate Ianto's birthday (it's not his birthday in the story), viktor is so freaking in love, will we ever find out what happened that night in the alleyway behind sears"")}]"	1	0	0			
371	371	es	¿Qué palabras clave tiene Best Man?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Best Man"" . ?story golem:keyword ?keyword . }"	"[{'keywords': Value(literal:'3.17, Adultery, Age Difference, Aged-Up Character(s), Alcohol Abuse/Alcoholism, Alternate Universe, Alternate Universe - Canon Divergence, Alternate Universe - Modern Setting, Anal, Anal Sex, Angst, Angst and Feels, Angst with a Happy Ending, Arranged Marriage, Auror Harry Potter, Backrubs, Banter, Based on a Tumblr Post, Bathroom Sex, Best Friends, Best Man, Bisexual Kyle Broflovski, Bittersweet Ending, Bottom Stan Marsh, Break Up, Brokenhearted Sherlock, Brotherly Affection, Brotherly Love, Canon Compliant, Canon Divergence - Post-Harry Potter and the Deathly Hallows, Canon Divergence - Post-Harry Potter and the Order of the Phoenix, Canon Relationships, Character Study, Charles ""Charlie"" Spring (Heartstopper) is a Good Boyfriend, Cheating, Clintasha - Freeform, Coming Out, Complete, Confession, Cross-Generation Relationship, Dancing, Depression, Developing Relationship, Disguised Sherlock, Dissociation, Divorced Harry Potter & Ginny Weasley, Don’t copy to another site, Drabble, Drinking to Cope, Drunk Sex, Duet, Emotional Manipulation, Engaged Couple, Enjoy my angsty trash, Episode: s03e02 The Sign of Three, Established Relationship, Evans Family Headcanons, Excessive Drinking, Explicit Language, Explicit Sexual Content, Families of Choice, Family, Family Feels, Father-Son Relationship, Feel-good, Ficlet, Finding Acceptance, First Time, Flashbacks, Fluff, Fluff and Angst, Forced Marriage, Forgive Me, Forgiveness, Friends to Lovers, Friendship, Friendship Troubles, Friendship/Love, Funny, Future Fic, Gay Male Character, Gay Rights, Gay Sex, Ginny Weasley Bashing, Going Home, Grief/Mourning, Grover (Percy Jackson) is a Good Friend, Grover centred, Grover feels under appreciated, Grover is the best man, Gwen\'s alive because I say so, HP Cross Gen Fest 2020, Happy Ending, He\'s disguised as Sherlock Holmes, Hinata is sad, Homophobia, Homosocial Continuum, Honeymoon, How can I make this more sad?, Humor, Hurt No Comfort, Hurt/Comfort, I love to make Hinata suffer, I wanted to cry so I wrote something sad, I\'m Bad At Tagging, Incest, Infidelity, Inspired by Tumblr, Internalized Emotions, Jealousy, Kageyama is engaged, Kidnapping, KuroKen - Freeform, Kyle\'s a lawyer, Lack of Communication, Lee Minho (Lee Know) as cameo, Light Angst, Loneliness, Loopy!Blaine, Love, Love Confessions, Makeup, Male Friendship, Marriage, Mentioned Lee Jihoon | Woozi, Mentioned Xu Ming Hao | The8, Mild Angst, Minor Albus Severus Potter/Original Male Character(s), Misunderstandings, NUFF SAID, Nicholas ""Nick"" Nelson Speaks French, No I really don\'t but oh well, Non-endgame Klaine, OT3, Oh, One Shot, Onesided Ernesto/Imelda, Orgasm Delay/Denial, POV First Person, POV Harry Potter, Past Relationship(s), Percabeth wedding, Percy Jackson is a Good Bro, Percy Jackson is a Good Friend, Percy Jackson is understanding, Polyamory, Possible Spoilers for Series 3 Episode 2, Post canon, Post-Canon, Post-Hogwarts, Post-Reichenbach, Post-Top Gun (1986), Post-Wedding, Pre-Top Gun: Maverick (2020), Pregnant Mindy, Queer Themes, Recovery, References to Depression, References to Drug Use, Rimming, Romance, Ron Weasley Bashing, Sad, Salty Harry Potter, Scorpius Malfoy & Albus Severus Potter Friendship, Self-Harm, Sex, Shenanigans, Sibling Incest, Sick Mindy, Slice of Life, Slow Dancing, Smitten Nicholas ""Nick"" Nelson, Surprise Ending, TDWritersLoveandFriendshipWeek21, Tags Are Hard, Tao Xu is a Good Friend, Teary-eyed groom, Ten Years Later, Threesome, Threesome - M/M/M, Time Skips, Title is rubbish please ignore, Top Kyle Broflovski, Toxic Masculinity, Triple Drabble, True Love, Typing that tag just broke my heart, Unexpected Confession, Unrequited Love, Unresolved Emotional Tension, Unresolved Sexual Tension, Warstan, Wedding, Wedding Fluff, Wedding Night, Wedding Planning, Wedding Planning kinda, Weddings, With a side of angst, Wordcount: 100-500, Work In Progress, Yachi is a good friend, Yoon Jae is Trying His Best, Yoon Jae is a Good Bro, Yuletide Treat, a few other characters show up (eg Sam Cam Mike Zoey and Duncan) but they\'re not main characters, all is resolved, and Nico and will make out in the corner, basically all the fluff, coming to terms, confession au, feminine stan marsh, gay bars, grover feels left out, i love liam gallagher, in which ilhoon sees himself in love w hyunsik and its cute af, insecure Grover, just a little, kenhina - Freeform, make this happen please, reaction fic, reconnecting, seokmin still loves soonyoung, seoksoon angst, soft angst, sorry kuroo my son, stan\'s a makeup artist, super best friends are forever, there’s slight sexual content but i don’t think it’s enough to make it mature, this is my 1st work')}]"	371	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué palabras clave tiene Contentment Crowns a Home?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Contentment Crowns a Home"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Take it in Stride?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Take it in Stride"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Fan Girl?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Fan Girl"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: ¿Qué palabras clave tiene Best Man?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE { 
?story golem:title ""Best Man"" . 
?story golem:keyword ?keyword . 
}
"	"[{'keywords': Value(literal:'3.17, Adultery, Age Difference, Aged-Up Character(s), Alcohol Abuse/Alcoholism, Alternate Universe, Alternate Universe - Canon Divergence, Alternate Universe - Modern Setting, Anal, Anal Sex, Angst, Angst and Feels, Angst with a Happy Ending, Arranged Marriage, Auror Harry Potter, Backrubs, Banter, Based on a Tumblr Post, Bathroom Sex, Best Friends, Best Man, Bisexual Kyle Broflovski, Bittersweet Ending, Bottom Stan Marsh, Break Up, Brokenhearted Sherlock, Brotherly Affection, Brotherly Love, Canon Compliant, Canon Divergence - Post-Harry Potter and the Deathly Hallows, Canon Divergence - Post-Harry Potter and the Order of the Phoenix, Canon Relationships, Character Study, Charles ""Charlie"" Spring (Heartstopper) is a Good Boyfriend, Cheating, Clintasha - Freeform, Coming Out, Complete, Confession, Cross-Generation Relationship, Dancing, Depression, Developing Relationship, Disguised Sherlock, Dissociation, Divorced Harry Potter & Ginny Weasley, Don’t copy to another site, Drabble, Drinking to Cope, Drunk Sex, Duet, Emotional Manipulation, Engaged Couple, Enjoy my angsty trash, Episode: s03e02 The Sign of Three, Established Relationship, Evans Family Headcanons, Excessive Drinking, Explicit Language, Explicit Sexual Content, Families of Choice, Family, Family Feels, Father-Son Relationship, Feel-good, Ficlet, Finding Acceptance, First Time, Flashbacks, Fluff, Fluff and Angst, Forced Marriage, Forgive Me, Forgiveness, Friends to Lovers, Friendship, Friendship Troubles, Friendship/Love, Funny, Future Fic, Gay Male Character, Gay Rights, Gay Sex, Ginny Weasley Bashing, Going Home, Grief/Mourning, Grover (Percy Jackson) is a Good Friend, Grover centred, Grover feels under appreciated, Grover is the best man, Gwen\'s alive because I say so, HP Cross Gen Fest 2020, Happy Ending, He\'s disguised as Sherlock Holmes, Hinata is sad, Homophobia, Homosocial Continuum, Honeymoon, How can I make this more sad?, Humor, Hurt No Comfort, Hurt/Comfort, I love to make Hinata suffer, I wanted to cry so I wrote something sad, I\'m Bad At Tagging, Incest, Infidelity, Inspired by Tumblr, Internalized Emotions, Jealousy, Kageyama is engaged, Kidnapping, KuroKen - Freeform, Kyle\'s a lawyer, Lack of Communication, Lee Minho (Lee Know) as cameo, Light Angst, Loneliness, Loopy!Blaine, Love, Love Confessions, Makeup, Male Friendship, Marriage, Mentioned Lee Jihoon | Woozi, Mentioned Xu Ming Hao | The8, Mild Angst, Minor Albus Severus Potter/Original Male Character(s), Misunderstandings, NUFF SAID, Nicholas ""Nick"" Nelson Speaks French, No I really don\'t but oh well, Non-endgame Klaine, OT3, Oh, One Shot, Onesided Ernesto/Imelda, Orgasm Delay/Denial, POV First Person, POV Harry Potter, Past Relationship(s), Percabeth wedding, Percy Jackson is a Good Bro, Percy Jackson is a Good Friend, Percy Jackson is understanding, Polyamory, Possible Spoilers for Series 3 Episode 2, Post canon, Post-Canon, Post-Hogwarts, Post-Reichenbach, Post-Top Gun (1986), Post-Wedding, Pre-Top Gun: Maverick (2020), Pregnant Mindy, Queer Themes, Recovery, References to Depression, References to Drug Use, Rimming, Romance, Ron Weasley Bashing, Sad, Salty Harry Potter, Scorpius Malfoy & Albus Severus Potter Friendship, Self-Harm, Sex, Shenanigans, Sibling Incest, Sick Mindy, Slice of Life, Slow Dancing, Smitten Nicholas ""Nick"" Nelson, Surprise Ending, TDWritersLoveandFriendshipWeek21, Tags Are Hard, Tao Xu is a Good Friend, Teary-eyed groom, Ten Years Later, Threesome, Threesome - M/M/M, Time Skips, Title is rubbish please ignore, Top Kyle Broflovski, Toxic Masculinity, Triple Drabble, True Love, Typing that tag just broke my heart, Unexpected Confession, Unrequited Love, Unresolved Emotional Tension, Unresolved Sexual Tension, Warstan, Wedding, Wedding Fluff, Wedding Night, Wedding Planning, Wedding Planning kinda, Weddings, With a side of angst, Wordcount: 100-500, Work In Progress, Yachi is a good friend, Yoon Jae is Trying His Best, Yoon Jae is a Good Bro, Yuletide Treat, a few other characters show up (eg Sam Cam Mike Zoey and Duncan) but they\'re not main characters, all is resolved, and Nico and will make out in the corner, basically all the fluff, coming to terms, confession au, feminine stan marsh, gay bars, grover feels left out, i love liam gallagher, in which ilhoon sees himself in love w hyunsik and its cute af, insecure Grover, just a little, kenhina - Freeform, make this happen please, reaction fic, reconnecting, seokmin still loves soonyoung, seoksoon angst, soft angst, sorry kuroo my son, stan\'s a makeup artist, super best friends are forever, there’s slight sexual content but i don’t think it’s enough to make it mature, this is my 1st work')}]"	1	0	0			
372	372	es	¿Qué palabras clave tiene I'll Be The One Who Saved Her?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""I'll Be The One Who Saved Her"" . ?story golem:keyword ?keyword . }"	[{'keywords': Value(literal:'Alternate Universe - obviously, Hermione Belongs In Ravenclaw, Light Angst, Not Bashing The Boys, Wars Leave Their Marks')}]	372	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿La historia They'll Never Break Me incluye la palabra clave Chaser Ginny Weasley?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""They'll Never Break Me"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""Chaser Ginny Weasley"") . }
    </SPARQL>

    ###
    

    Question: ¿Se muere algún personaje principal en Let Me Tell You A Story?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Let Me Tell You A Story"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Kiss Me (Under the Light of a Thousand Stars)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Kiss Me (Under the Light of a Thousand Stars)"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: ¿Qué palabras clave tiene I'll Be The One Who Saved Her?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE { 
?story golem:title ""I'll Be The One Who Saved Her"" . 
?story golem:keyword ?keyword . 
}
"	[{'keywords': Value(literal:'Alternate Universe - obviously, Hermione Belongs In Ravenclaw, Light Angst, Not Bashing The Boys, Wars Leave Their Marks')}]	1	0	0			
373	373	es	¿Qué palabras clave tiene Take it in Stride?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Take it in Stride"" . ?story golem:keyword ?keyword . }"	"[{'keywords': Value(literal:""Awesome Angelina, Book 1: Harry Potter and the Philosopher's Stone, Hurt/Comfort, One Shot"")}]"	373	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué palabras clave tiene Contentment Crowns a Home?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Contentment Crowns a Home"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Summer Lovin'?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Summer Lovin'"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: ¿Qué palabras clave tiene Take it in Stride?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE { 
  ?story golem:title ""Take it in Stride"" . 
  ?story golem:keyword ?keyword . 
}
"	"[{'keywords': Value(literal:""Awesome Angelina, Book 1: Harry Potter and the Philosopher's Stone, Hurt/Comfort, One Shot"")}]"	1	0	0			
374	374	es	¿Qué palabras clave tiene Kiss Me (Under the Light of a Thousand Stars)?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Kiss Me (Under the Light of a Thousand Stars)"" . ?story golem:keyword ?keyword . }"	[{'keywords': Value(literal:'A tiny bit of angst but not too much I promise, Explicit Language, Explicit Sexual Content, Falling In Love, Finding Oneself, First Time, Getting Together, Happy Ending, Hurt/Comfort, Loss of Virginity, Memory Loss, Mildly Dubious Consent, OCD, Obsessive-Compulsive Disorder, PTSD, Pensieve, Pensieves, Post-Traumatic Stress Disorder - PTSD, Romance, Switching, Traducción autorizada, Un poco de angst pero no demasiado, healing/recovering, healing/recovery')}]	374	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cómo de larga es 1000 Kisses: #68 That Time on the Balcony, During a Ministry Party?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""1000 Kisses: #68 That Time on the Balcony, During a Ministry Party"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece I can't help but love you?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""I can't help but love you"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Summer Lovin'?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Summer Lovin'"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: ¿Qué palabras clave tiene Kiss Me (Under the Light of a Thousand Stars)?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE { 
  ?story golem:title ""Kiss Me (Under the Light of a Thousand Stars)"" . 
  ?story golem:keyword ?keyword . 
}
"	[{'keywords': Value(literal:'A tiny bit of angst but not too much I promise, Explicit Language, Explicit Sexual Content, Falling In Love, Finding Oneself, First Time, Getting Together, Happy Ending, Hurt/Comfort, Loss of Virginity, Memory Loss, Mildly Dubious Consent, OCD, Obsessive-Compulsive Disorder, PTSD, Pensieve, Pensieves, Post-Traumatic Stress Disorder - PTSD, Romance, Switching, Traducción autorizada, Un poco de angst pero no demasiado, healing/recovering, healing/recovery')}]	1	0	0			
375	375	es	¿Qué palabras clave tiene Summer Lovin'?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Summer Lovin'"" . ?story golem:keyword ?keyword . }"	"[{'keywords': Value(literal:'""long"" distance relationship, (Blink and you miss it), (Ish) - Freeform, (i should chill with the drowning stuff lmao), 2016-2017 NHL Season, 21st Birthday, 50s, 69 (Sex Position), ASL, AU, Abusive Ex, Accidental Kissing, Acting, Actors, Actually Winter, Aftercare, Age Difference, Akatsuki Gift Exchange 2018, Alex is a Camp Counselor, Alpha Castiel (Supernatural), Alpha Castiel/Omega Dean Winchester, Alpha/Beta/Omega Dynamics, Also a disaster bi-sexual, Alternate Scene, Alternate Universe, Alternate Universe - 1960s, Alternate Universe - Beach, Alternate Universe - Canon Divergence, Alternate Universe - Childhood Friends, Alternate Universe - College/University, Alternate Universe - Country Club, Alternate Universe - Everyone Lives/Nobody Dies, Alternate Universe - Fantasy, Alternate Universe - Gender Changes, Alternate Universe - High School, Alternate Universe - Human, Alternate Universe - Lifeguards, Alternate Universe - Modern Setting, Alternate Universe - Muggle, Alternate Universe - No Kwamis, Alternate Universe - No Powers, Alternate Universe - No Quirks (My Hero Academia), Alternate Universe - Summer Camp, Alternate Universe - Teenagers, Alternate Universe - Vampire, Always a different sex, Anal Fingering, Anal Sex, And they\'re at the beach and in a Dani/Sandy situation, Angst, Angst and Pining, Angst with a Happy Ending, Animals, Anxiety, Anxiety Attacks, Aoyama Breaks the Fourth Wall, Aromantic, Artist Grantaire, Attempt at Humor, Attempted Seduction, Attraction, Author is not also named Jean Liu and desperately in love with a Davy Jackson, Awkward Conversations, Awkward Crush, Awkward Flirting, Awkward Germany (Hetalia), Awkward James Potter, Awkwardness, Background Les Amis de l\'ABC, Background PolDul, Background Relationships, Bad Touch, Bad Touch Bakugou, Banter, Barebacking, Barely Legal, Based on an rp I did, Based on the Grease song Summer Nights, Basically, Beach House, Beach Sex, Beach Volleyball, Beaches, Begging, Best Friends, Betaed, Bi Dean, Bi Draco Malfoy, Bi Jimmy, Bi Theo Nott, Bible Thumper Ben, Bifur is a good bro, Bilingual Lance (Voltron), Billy Hargrove Lives, Billy Hargrove/ Henderson! reader, Birthday Party, Bisexual Characters, Bisexual Lance (Voltron), Bisexual Steve, Blow Job, Blow Jobs, Body Worship, Bottom Dean Winchester, Bottom Hwang Hyunjin, Bottom Min Yoongi | Suga, Bottom Robin Buckley, Boys In Love, Boys Kissing, Bromance, Brothers Germany & Prussia (Hetalia), Brothers North Italy & South Italy (Hetalia), Bruce Wayne is a Good Dad, Bucky is a vampire, Cabin Fic, Cabins, Calm Before The Storm, Camp Camp - Freeform, Camp Claremont, Camp Counselor AU, Camp Rock AU, Camping, Canon Compliant, Canon Divergance, Canon Queer Character, Canon Related, Car Sex, Carnival, Castiel and Dean Winchester Need to Use Their Words, Casually adds random kpop idols, Cat Will, Celebratory Sex, Childhood Sexual Abuse, Chrissy Cunningham Lives, Chrissy and Heather are besties, Christine tops, Clint is a Lowly Human, Comedy, Comeplay, Comfort, Coming Out, Community: dogdaysofsummer, Community: rarepair_shorts, Complete, Confession Time!, Consensual Underage Sex, Cosette And Enjolras Are Siblings, Crack, Crime Fighting, Crime fighting team, Cross-Posted on FanFiction.Net, Crush at First Sight, Crushes, Cuban Lance (Voltron), Cuddling, Cunnilingus, Cussing, Cute, Cute Couples, Cute Grantaire, Cute Midoriya Izuku, Cute Uraraka Ochako, Daddy Kink, Dan\'s an adorable bean, Dancer Ryan, Dark, David x Reader, Day At The Beach, Dead Dove: Do Not Eat, Deaf Clint Barton, Dean Winchester is Sam Winchester\'s Legal Guardian, Destiel - Freeform, Detroit Red Wings, Dialogue Heavy, Dildos, Dirty Talk, Doctor Rose Tico, Dog Chewbacca, Dog Kirsch, Dom Jeon Jungkook, Dom/sub, Domestic, Domestic Bliss, Domestic Fluff, Don\'t copy to another site, Don\'t copy to other sites, Double Date, Drabble, Drabble Collection, Drabbles, Drinking, Drinking Games, Drug Dealing, Drunk David, Drunken Shenanigans, Eddie Munson Loves Steve Harrington, Eddie Munson is a Little Shit, Ellen is the Director of a summer camp, Emails, Emotional Hurt/Comfort, Emotions, Enemies to Friends to Lovers, Enemies to Lovers, Enjolras is an Idiot, Enjolras/Grantaire-centric, Enthusiastic Consent, Epistolary, Established Midoriya Izuku/Uraraka Ochako, Established Relationship, Evan Hansen is only mentioned, Eventual Relationships, Eventual Romance, Eventual Smut, Everybody Lives, Everyone Is Gay, Everything is Beautiful and Nothing Hurts, Explicit Language, Explicit Sexual Content, Fake/Pretend Relationship, Falling In Love, Families of Choice, Family, Family Feels, Family Fluff, Family store, Fan Casting, Female Bilbo, Female Bilbo Baggins/Female Thorin Oakenshield, Female Jean Liu, Female Kíli, Female Thorin Oakenshield, Femslash, Fic Exchange, Fireworks, First Crush, First Kiss, First Meeting, First Meetings, First Time, First Time Blow Jobs, Flashbacks, Flirting, Flowers, Fluff, Fluff and Angst, Fluff and Crack, Fluff and Humor, Fluff and Hurt/Comfort, Fluff and Smut, Fluff without Plot, Fluffy, Fluffyfest, Football | Soccer, Freshers Week, Friends With Benefits, Friends to Lovers, Friendship, Fruity four and the kids, Futanari, Future Fic, GSA, Gay, Gay Eddie Munson, Gay Porn Hard, Geeks, Gender or Sex Swap, Gender-neutral Reader, Genderfluid Awsten Knight, Genderfluid Barry Allen, Genderfluid Character, Genderfluid Nori, Get together fic, Getting Together, Getting to Know Each Other, Grantaire Has A Cat, Grantaire Has Issues, Grantaire is an idiot, Grease - Freeform, Grease AU, Grease References, Grease-inspired, Greaser AU, Hal Is A Moron, Hallelujah, Hand Job, Happy Ending, Harry Potter Epilogue What Epilogue | EWE, Has to add tags suddenly forgets what the fic is about, Hawaii, Healthy Relationships, Heather Holloway Lives, Henry is also a camp counselor, High School, High School AU, High School Teacher AU, Hijinks & Shenanigans, Hockey, Holiday, Holidays, Homophobia, Hot Weather, Human Castiel, Humor, Hunk & Lance (Voltron) Friendship, Hurt/Comfort, I Don\'t Even Know, I Will Go Down With This Ship, I Wrote This For Fun, I Wrote This Instead of Sleeping, I don\'t know what to tag it as, I honestly can\'t believe I\'m writing this either, I literally managed to give every character in Class 1-A a line, I mean Teddy and Billy and Tommy are fixing a car in a Grease-esque manner, I need help, I wish my counselors looked like that, I\'M FEELING FLUFFY, IDENTITY SHENANIGANS, IT\'S A LOT OF FLUFF OKAY, Ice Cream, Ichabbie Summer, Idiots in Love, Idk enjoy this, Implied Sexual Assault, Implied/Referenced Sex, Inaccurate, Incest, Innacurate depiction of cinema, Insecurity, Inspired by Grease, Introspection, It\'s also really long oops, It\'s hot, It\'s implied that he has a lisp but his dialogue is written normally, Jaebum is whipped, Jake moves in with his cousin across the street from Rich after his parents leave, Jared and Connor are awkward and gay, Jealousy, Jean Has a Potty Mouth, Johnlock - Freeform, Jung Wooyoung is Whipped, Kaminari is Thirsty, Karaoke, Keith (Voltron) is Bad at Feelings, Keith and Shiro are Adoptive Siblings, Kid Fic, Kidfic, Kinda, Kink Meme, Kissing, Lance & Pidge | Katie Holt Friendship, Lance (Voltron) is a Mess, Lawyer Ben Solo, Les Amis de l\'ABC - Freeform, Les Amis de l\'ABC Shenanigans, Licking, Lifeguard!Marco, Light Angst, Light-Hearted, Lipstick Kisses, Loss of Virginity, Love, Love Confessions, Love Triangles, Love at First Sight, Lucy being lucy, Luke is a shit, Lydia loves Grease, Lydia loves Stiles, M/M/M, Making Love, Making Out, Marauders\' Era, Marcus is Tomas\' Impulse Control, Marriage Proposal, Marriage Proposal (Technically), Married Life, Married Rey & Rose, Masturbation, Mechanic!Harry, Meet-Cute, Mentioned Character Death, Mentions of Dwarf Culture, MerMay, Mermaid Jongin, Merman!Simon, Mild Inneundo, Mild Smut, Minor Character Death, Missionary Position, Misunderstandings, Model UN, Modern AU, More characters and relationships to come, Morning Sex, Mpreg, Multiple Orgasms, Musicals, Mutual Pining, Mycroft has Low Self Esteem, NHL RPF, NOT BETA READ!, Naked Cuddling, Nancy Wheeler Loves Robin Buckley, Natasha is a Succubus, Nerd!Jean, Nerdy John, Nightmares, No beta we die like ed-, No real NinoxAdrien, Non-Penetrative Sex, Non-Traditional Alpha/Beta/Omega Dynamics, Nonbinary Awsten Knight, Nori is a Little Shit, Not Beta Read, Not Klaine Friendly, Nudity, Nwalin Week, Oblivious, Old Married Couple, Olicity Summer Sizzle, Omega Dean Winchester, Omorashi, On a hunt, One Night Stands, One Shot, One Shot Collection, One-Shot/Two-Shot/Or a Few-Shot, Open Marriage, Open Relationships, Or not, Oral Sex, Orchestra Pit, Original Character(s), Other Additional Tags to Be Added, Outside Sex, PLOT (Probably Lots Of Tiddies), POV Alternating, POV Carmilla, POV Outsider, PWP, Pack Feels, Panic Attacks, Pansexual Rose and Rey, Park Seonghwa is Whipped, Part 2 coming soon ;), Partying, Past Child Abuse, Past Harry Potter/Ginny Weasley, Past Matsuoka Rin/Yamazaki Sousuke, Pastel Jackson Wang, Pedophilia, Pegging, Percy is a Dork, Period-Typical Homophobia, Phil needs to be appreciated, Pining, Piper is a fangirl, Piss, Plot What Plot/Porn Without Plot, Polyamory, Pool, Pool Party, Poolgirl Byleth AU, Popsicles, Post baseball game, Post-Canon, Post-Hogwarts, Post-Series, Pre-Apocalypse, Pre-Canon, Prequel, Professor Remus Lupin, Prompt Fill, Prompt: Heat, Prussia Won\'t Say She\'s In Love, Public Blow Jobs, Puppy Love, Rare Ships!!! On Ice, Rated T because Sylvain cannot stop being horny on main for more than 2 seconds, Rating May Change, Reader Insert, Reader is adopted by the moomins, Reader is depressed, Reader is human, Reader-Insert, Reconciliation, Recreational Drug Use, Relationship Advice, Requests/Prompts Open, Rest of the Black Eagles are Mentioned, Revised fic, Rich goes by Richard and doesn\'t have a Squip, Richard is a HUGE dork, Rimming, Rivalry, Rivals to Lovers, Road Trips, Robin Buckley Loves Nancy Wheeler, Robin Buckley is Not Amused, Robin Buckley is a Little Shit, Romance, Romantic Fluff, Ronanace, Ronance, Rule 63, SO MUCH FLUFF, Sabriel - Freeform, Same-Sex Marriage, Schmoop, School Year, Seaside, Season of Kink 2020, Season/Series 03, Secret Relationship, Self-Esteem Issues, Semi-Public Sex, Sequel, Sex, Sex Toys, Sex on the Beach, Sexual Abuse, Sexual Tension, Shameless Smut, Shenanigans, Sherlock has a cunning plan, Short & Sweet, Short One Shot, Short Reader, Shower Sex, Sibling Incest, Siblings, Sirius Black Fest, Sirius Black Fest 2019, Sirius is a romantic goofball, Skinny Dipping, Sleepovers, Sleepy Cuddles, Slice of Life, Slow Build, Slow Burn, Small Town Typical (?) Homophobia, Smut, Sneaking Out, SnowBarry ff, So in a way it\'s a Grease AU, So much cuddling yall, Sober sex tho, Socially Awkward Keith (Voltron), Soft Jackson Wang, Soft kazumaji for self indulgence, Some Plot, Some light smut, Someone gets hit by a car, Sorry Not Sorry, Sorry literally forgot condoms exist, Spanking, Spiraling, Spit As Lube, Spoiler: The Treat is art, Spoilers, Spoilers for The Stolen Century, Stalia breakup, Steve Harrington Loves Eddie Munson, Stiles loves Lydia, Story in Pictures, Strap-Ons, Sub Min Yoongi | Suga, Sugar Daddy, Summer, Summer Camp, Summer Camp AU, Summer Fluff, Summer Love, Summer Reperatory Theater, Summer Romance, Summer Vacation, Supernatural Elements, Sweet, TJLC | The Johnlock Conspiracy, Tags May Change, Teacher AU, Teasing, Teen Crush, Teen John, Teen Romance, Teen Sherlock, Teenage Sam Winchester, Teenagers, Teenlock, Texting, The Beach AU We All Needed, The Fruity Four, There\'s a little extra treat at the end, They\'re both so adorable, Things get funny and cute and emotional and steamy, Third Wheels, This Was Just Supposed to Be Hot and Smutty but I Love Love, Threesome, Threesome - F/F/F, Threesome - F/M/M, Tickling, Tiny Enjolras, Tobi Deidara and Hidan are friends and stupid, Tobi has a surprise, Tobi\'s mask is...confusing in this fic. a medical mask probably, Tooth-Rotting Fluff, Top Castiel (Supernatural), Top Castiel/Bottom Dean Winchester, Top Jeon Jungkook, Top Nancy Wheeler, Top Yang Jeongin | I.N, Totally Not Projecting At All, Totally excited for this, Trans Patty Walters, Tree Houses, True Love, Tumblr Prompt, Twincest, Tyrannus Basilton ""Baz"" Pitch Is Gay for Simon Snow, Underage Drinking, Underage Sam, Underage Sex, Underage Smoking, University, Unsafe Sex, Uraraka and Kirishima are Wingmen, Vaginal Fingering, Vaginal Sex, Vibrators, Virgin Sherlock, Virgin Yang Jeongin | I.N, Walks On The Beach, Water Guns, Weddings, Wetting, Whirlwind Romance, Winterhawk Week, Y/n henderson, Yang Jeongin | I.N Has Sexuality Realizations, Young Love, Young Sirius Black, a little Jealous!Lilith, abusive ex is an oc, actual sex too, adopting max in the future!, ah the old days, alcohol tw, all characters are legal age, also, also smut probably, alternative universe, amusement park in the summer time, and kind of sad, and setting them up, and some others implied hehe, and teaches horseback riding, au where Billy doesn\'t get possessed right away so there\'s time for a summer romance, awkward Connor and Jared, bad boy!Rin, bc - Freeform, be warned, beach date, beach party, bi chad, blowjob, brief mentions of homophobia and transphobia, bruce is a dad, but actually she is, but no-one actually sings, camp counselors, canonverse, cis-swapped Bifur, cockslut!loki, college student sehun, completely for fun, completely self-indulgent, cool kids, cuteness, dark shota - really really noncon, david cries a lot, david might seem ooc sometimes?, david protection squad 2k17, david x reader gets married!, don\'t ask me-ask Wet Hot American Summer for that one..., dont look at me im trash, double-date, drunk, drunkAU!Barry, enjoltaire - Freeform, epic crush, ethan freeman-based erik, european trip, extremely juvenile behavior, fantastic foursome - Freeform, fear boner lol, feral suga, fluu, formatting is so shitty I\'m sorry, fuck it everyone is bi, fun in the sun, fun times in the pool locker room, gabriel thinks he\'s straight, gay cas, gay ryan, gonna be a long one, good god what have I done?, good vibes only, goody goody!Ai, grantaire\'s hoodie, gwen is mvp, hard decisions, healthy competition, here\'s another one, hinted at eventual Steve/reader, history teacher reader, holmescest, hopefully in copious and indecent amounts, horrible past, how they got together, i really like this fic, i wrote a lot of this when i was supposed to be sleeping, ichabbie - Freeform, im not good with tags, in as much as i can do slow build, in case you\'re missing summertime like i am, in this house we love Theo Putnam and will protect him at all costs, injured grantaire, innocent david, instafic, irresponsible counselors, is there a kink for having sex outside?, it\'s cute, it\'s kinda late, jake is precious, jk everyone will get it, kind of, kirikami - Freeform, kurtbastian, language warning, lifeguard Rey, like a cotton candy cloud, like soooo much fluff, like suuuuper gay, literally so fluffy I can\'t even, little ficlets, loki is briefly involved with someone else, loki is way to pale to be spending all summer at the pool, lol what is canon, long story, lots of exposition, lots-of-kissing, magic fingers too, makeout scenes??, master kink, max is your best friend, might do sin, mirror situation, mlm, mostly dean tho, motorcycles and fast cars, mute character, mutual pining (kind of), mystrade, night swimming, no beta we die like Shelby Colson, no serious plots- easy going, not canon, not entirely sure if I have tagged everything bc i\'m not amazing at tagging, not much angst tho, nothing like the film!, oh god the title is even worse, okay i know i already wrote a fake dating fic but whatever, over seas trips, overheated!mycroft, percabeth, poor bby im so sorry, preston and his romeo x juliet plays smh, prior relationships mentioned but nothing specific, prompt, queer community, rated for language, rating wil probably change, really hot, relationships, religion teacher gabriel, reminescent, rental houses, roadtrip au, season three, seonghwa-gets-caught-by-campers, seriously very underage - kiri is 6, set malfunction, sex and love, she has to overcome her own fears, short enjolras, short people are the best, short-oneshot-fluff-before-i-post-the-full-fic, sibling relationships, siiiiiiiiiiiiiiiiiiiiiiiiiighs, slight crossover (the new normal), so adorable, so much UST, soft, soft enjolras, soft grantaire, some gay shit, some smut, someone almost DROWNS, spoilers for the end of matt fraction\'s run, steddie, steve being a mom, steve eddie and robin form a band?!?!, steve is my angst baby, summer alts, summer antics, summer fun, summer lovin, summer lovin. had me a blaaaast! summer lovin. dick in my aaaaaass!, summer time, supportive families, taiora - Freeform, tall grantaire, teachers and students betting on them getting together, the beginning of a smut scene, the fluffiest of proposals, the group goes to the beach, the hell is fluu?, the kraken is there, the vagueist grease au ever, the whole \'whoops we need to share a room but you\'re my crush\' troupe bc love, there might be sex in a storage shed, there was no second war, there\'s some sex I guess?, they are truly soft and neat, they did the job right the first time around, they fight, they gay, they get into some shenanagins, they\'re idiots, this is so shameful and i\'m not even sorry, this is the latest i\'ve ever been for an exchange I am SO SORRY, this might be my worst fic writing-wise but it brings me joy, trans!byleth, unadvisable kitchen conduct, unrequited Steve/ Reader, very bad, very gently implied sexual content, water fights, we smol and fluff, well there is now, what really happened, what the fuck i was typing in \'licking\' and found out that \'eye licking\' is a tag on here, whoever gets the title ily, why are they so cute, wlw, wolfstar, woohwa-are-camp-counsellors, yall are weird., yes im aware its july but i started writing this for mermay, zenmasters')}]"	375	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué palabras clave tiene Fan Girl?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Fan Girl"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Take it in Stride?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Take it in Stride"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Kiss Me (Under the Light of a Thousand Stars)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Kiss Me (Under the Light of a Thousand Stars)"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: ¿Qué palabras clave tiene Summer Lovin'?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) WHERE { 
  ?story golem:title ""Summer Lovin'"" . 
  ?story golem:keyword ?keyword . 
}
"	"[{'keywords': Value(literal:'""long"" distance relationship, (Blink and you miss it), (Ish) - Freeform, (i should chill with the drowning stuff lmao), 2016-2017 NHL Season, 21st Birthday, 50s, 69 (Sex Position), ASL, AU, Abusive Ex, Accidental Kissing, Acting, Actors, Actually Winter, Aftercare, Age Difference, Akatsuki Gift Exchange 2018, Alex is a Camp Counselor, Alpha Castiel (Supernatural), Alpha Castiel/Omega Dean Winchester, Alpha/Beta/Omega Dynamics, Also a disaster bi-sexual, Alternate Scene, Alternate Universe, Alternate Universe - 1960s, Alternate Universe - Beach, Alternate Universe - Canon Divergence, Alternate Universe - Childhood Friends, Alternate Universe - College/University, Alternate Universe - Country Club, Alternate Universe - Everyone Lives/Nobody Dies, Alternate Universe - Fantasy, Alternate Universe - Gender Changes, Alternate Universe - High School, Alternate Universe - Human, Alternate Universe - Lifeguards, Alternate Universe - Modern Setting, Alternate Universe - Muggle, Alternate Universe - No Kwamis, Alternate Universe - No Powers, Alternate Universe - No Quirks (My Hero Academia), Alternate Universe - Summer Camp, Alternate Universe - Teenagers, Alternate Universe - Vampire, Always a different sex, Anal Fingering, Anal Sex, And they\'re at the beach and in a Dani/Sandy situation, Angst, Angst and Pining, Angst with a Happy Ending, Animals, Anxiety, Anxiety Attacks, Aoyama Breaks the Fourth Wall, Aromantic, Artist Grantaire, Attempt at Humor, Attempted Seduction, Attraction, Author is not also named Jean Liu and desperately in love with a Davy Jackson, Awkward Conversations, Awkward Crush, Awkward Flirting, Awkward Germany (Hetalia), Awkward James Potter, Awkwardness, Background Les Amis de l\'ABC, Background PolDul, Background Relationships, Bad Touch, Bad Touch Bakugou, Banter, Barebacking, Barely Legal, Based on an rp I did, Based on the Grease song Summer Nights, Basically, Beach House, Beach Sex, Beach Volleyball, Beaches, Begging, Best Friends, Betaed, Bi Dean, Bi Draco Malfoy, Bi Jimmy, Bi Theo Nott, Bible Thumper Ben, Bifur is a good bro, Bilingual Lance (Voltron), Billy Hargrove Lives, Billy Hargrove/ Henderson! reader, Birthday Party, Bisexual Characters, Bisexual Lance (Voltron), Bisexual Steve, Blow Job, Blow Jobs, Body Worship, Bottom Dean Winchester, Bottom Hwang Hyunjin, Bottom Min Yoongi | Suga, Bottom Robin Buckley, Boys In Love, Boys Kissing, Bromance, Brothers Germany & Prussia (Hetalia), Brothers North Italy & South Italy (Hetalia), Bruce Wayne is a Good Dad, Bucky is a vampire, Cabin Fic, Cabins, Calm Before The Storm, Camp Camp - Freeform, Camp Claremont, Camp Counselor AU, Camp Rock AU, Camping, Canon Compliant, Canon Divergance, Canon Queer Character, Canon Related, Car Sex, Carnival, Castiel and Dean Winchester Need to Use Their Words, Casually adds random kpop idols, Cat Will, Celebratory Sex, Childhood Sexual Abuse, Chrissy Cunningham Lives, Chrissy and Heather are besties, Christine tops, Clint is a Lowly Human, Comedy, Comeplay, Comfort, Coming Out, Community: dogdaysofsummer, Community: rarepair_shorts, Complete, Confession Time!, Consensual Underage Sex, Cosette And Enjolras Are Siblings, Crack, Crime Fighting, Crime fighting team, Cross-Posted on FanFiction.Net, Crush at First Sight, Crushes, Cuban Lance (Voltron), Cuddling, Cunnilingus, Cussing, Cute, Cute Couples, Cute Grantaire, Cute Midoriya Izuku, Cute Uraraka Ochako, Daddy Kink, Dan\'s an adorable bean, Dancer Ryan, Dark, David x Reader, Day At The Beach, Dead Dove: Do Not Eat, Deaf Clint Barton, Dean Winchester is Sam Winchester\'s Legal Guardian, Destiel - Freeform, Detroit Red Wings, Dialogue Heavy, Dildos, Dirty Talk, Doctor Rose Tico, Dog Chewbacca, Dog Kirsch, Dom Jeon Jungkook, Dom/sub, Domestic, Domestic Bliss, Domestic Fluff, Don\'t copy to another site, Don\'t copy to other sites, Double Date, Drabble, Drabble Collection, Drabbles, Drinking, Drinking Games, Drug Dealing, Drunk David, Drunken Shenanigans, Eddie Munson Loves Steve Harrington, Eddie Munson is a Little Shit, Ellen is the Director of a summer camp, Emails, Emotional Hurt/Comfort, Emotions, Enemies to Friends to Lovers, Enemies to Lovers, Enjolras is an Idiot, Enjolras/Grantaire-centric, Enthusiastic Consent, Epistolary, Established Midoriya Izuku/Uraraka Ochako, Established Relationship, Evan Hansen is only mentioned, Eventual Relationships, Eventual Romance, Eventual Smut, Everybody Lives, Everyone Is Gay, Everything is Beautiful and Nothing Hurts, Explicit Language, Explicit Sexual Content, Fake/Pretend Relationship, Falling In Love, Families of Choice, Family, Family Feels, Family Fluff, Family store, Fan Casting, Female Bilbo, Female Bilbo Baggins/Female Thorin Oakenshield, Female Jean Liu, Female Kíli, Female Thorin Oakenshield, Femslash, Fic Exchange, Fireworks, First Crush, First Kiss, First Meeting, First Meetings, First Time, First Time Blow Jobs, Flashbacks, Flirting, Flowers, Fluff, Fluff and Angst, Fluff and Crack, Fluff and Humor, Fluff and Hurt/Comfort, Fluff and Smut, Fluff without Plot, Fluffy, Fluffyfest, Football | Soccer, Freshers Week, Friends With Benefits, Friends to Lovers, Friendship, Fruity four and the kids, Futanari, Future Fic, GSA, Gay, Gay Eddie Munson, Gay Porn Hard, Geeks, Gender or Sex Swap, Gender-neutral Reader, Genderfluid Awsten Knight, Genderfluid Barry Allen, Genderfluid Character, Genderfluid Nori, Get together fic, Getting Together, Getting to Know Each Other, Grantaire Has A Cat, Grantaire Has Issues, Grantaire is an idiot, Grease - Freeform, Grease AU, Grease References, Grease-inspired, Greaser AU, Hal Is A Moron, Hallelujah, Hand Job, Happy Ending, Harry Potter Epilogue What Epilogue | EWE, Has to add tags suddenly forgets what the fic is about, Hawaii, Healthy Relationships, Heather Holloway Lives, Henry is also a camp counselor, High School, High School AU, High School Teacher AU, Hijinks & Shenanigans, Hockey, Holiday, Holidays, Homophobia, Hot Weather, Human Castiel, Humor, Hunk & Lance (Voltron) Friendship, Hurt/Comfort, I Don\'t Even Know, I Will Go Down With This Ship, I Wrote This For Fun, I Wrote This Instead of Sleeping, I don\'t know what to tag it as, I honestly can\'t believe I\'m writing this either, I literally managed to give every character in Class 1-A a line, I mean Teddy and Billy and Tommy are fixing a car in a Grease-esque manner, I need help, I wish my counselors looked like that, I\'M FEELING FLUFFY, IDENTITY SHENANIGANS, IT\'S A LOT OF FLUFF OKAY, Ice Cream, Ichabbie Summer, Idiots in Love, Idk enjoy this, Implied Sexual Assault, Implied/Referenced Sex, Inaccurate, Incest, Innacurate depiction of cinema, Insecurity, Inspired by Grease, Introspection, It\'s also really long oops, It\'s hot, It\'s implied that he has a lisp but his dialogue is written normally, Jaebum is whipped, Jake moves in with his cousin across the street from Rich after his parents leave, Jared and Connor are awkward and gay, Jealousy, Jean Has a Potty Mouth, Johnlock - Freeform, Jung Wooyoung is Whipped, Kaminari is Thirsty, Karaoke, Keith (Voltron) is Bad at Feelings, Keith and Shiro are Adoptive Siblings, Kid Fic, Kidfic, Kinda, Kink Meme, Kissing, Lance & Pidge | Katie Holt Friendship, Lance (Voltron) is a Mess, Lawyer Ben Solo, Les Amis de l\'ABC - Freeform, Les Amis de l\'ABC Shenanigans, Licking, Lifeguard!Marco, Light Angst, Light-Hearted, Lipstick Kisses, Loss of Virginity, Love, Love Confessions, Love Triangles, Love at First Sight, Lucy being lucy, Luke is a shit, Lydia loves Grease, Lydia loves Stiles, M/M/M, Making Love, Making Out, Marauders\' Era, Marcus is Tomas\' Impulse Control, Marriage Proposal, Marriage Proposal (Technically), Married Life, Married Rey & Rose, Masturbation, Mechanic!Harry, Meet-Cute, Mentioned Character Death, Mentions of Dwarf Culture, MerMay, Mermaid Jongin, Merman!Simon, Mild Inneundo, Mild Smut, Minor Character Death, Missionary Position, Misunderstandings, Model UN, Modern AU, More characters and relationships to come, Morning Sex, Mpreg, Multiple Orgasms, Musicals, Mutual Pining, Mycroft has Low Self Esteem, NHL RPF, NOT BETA READ!, Naked Cuddling, Nancy Wheeler Loves Robin Buckley, Natasha is a Succubus, Nerd!Jean, Nerdy John, Nightmares, No beta we die like ed-, No real NinoxAdrien, Non-Penetrative Sex, Non-Traditional Alpha/Beta/Omega Dynamics, Nonbinary Awsten Knight, Nori is a Little Shit, Not Beta Read, Not Klaine Friendly, Nudity, Nwalin Week, Oblivious, Old Married Couple, Olicity Summer Sizzle, Omega Dean Winchester, Omorashi, On a hunt, One Night Stands, One Shot, One Shot Collection, One-Shot/Two-Shot/Or a Few-Shot, Open Marriage, Open Relationships, Or not, Oral Sex, Orchestra Pit, Original Character(s), Other Additional Tags to Be Added, Outside Sex, PLOT (Probably Lots Of Tiddies), POV Alternating, POV Carmilla, POV Outsider, PWP, Pack Feels, Panic Attacks, Pansexual Rose and Rey, Park Seonghwa is Whipped, Part 2 coming soon ;), Partying, Past Child Abuse, Past Harry Potter/Ginny Weasley, Past Matsuoka Rin/Yamazaki Sousuke, Pastel Jackson Wang, Pedophilia, Pegging, Percy is a Dork, Period-Typical Homophobia, Phil needs to be appreciated, Pining, Piper is a fangirl, Piss, Plot What Plot/Porn Without Plot, Polyamory, Pool, Pool Party, Poolgirl Byleth AU, Popsicles, Post baseball game, Post-Canon, Post-Hogwarts, Post-Series, Pre-Apocalypse, Pre-Canon, Prequel, Professor Remus Lupin, Prompt Fill, Prompt: Heat, Prussia Won\'t Say She\'s In Love, Public Blow Jobs, Puppy Love, Rare Ships!!! On Ice, Rated T because Sylvain cannot stop being horny on main for more than 2 seconds, Rating May Change, Reader Insert, Reader is adopted by the moomins, Reader is depressed, Reader is human, Reader-Insert, Reconciliation, Recreational Drug Use, Relationship Advice, Requests/Prompts Open, Rest of the Black Eagles are Mentioned, Revised fic, Rich goes by Richard and doesn\'t have a Squip, Richard is a HUGE dork, Rimming, Rivalry, Rivals to Lovers, Road Trips, Robin Buckley Loves Nancy Wheeler, Robin Buckley is Not Amused, Robin Buckley is a Little Shit, Romance, Romantic Fluff, Ronanace, Ronance, Rule 63, SO MUCH FLUFF, Sabriel - Freeform, Same-Sex Marriage, Schmoop, School Year, Seaside, Season of Kink 2020, Season/Series 03, Secret Relationship, Self-Esteem Issues, Semi-Public Sex, Sequel, Sex, Sex Toys, Sex on the Beach, Sexual Abuse, Sexual Tension, Shameless Smut, Shenanigans, Sherlock has a cunning plan, Short & Sweet, Short One Shot, Short Reader, Shower Sex, Sibling Incest, Siblings, Sirius Black Fest, Sirius Black Fest 2019, Sirius is a romantic goofball, Skinny Dipping, Sleepovers, Sleepy Cuddles, Slice of Life, Slow Build, Slow Burn, Small Town Typical (?) Homophobia, Smut, Sneaking Out, SnowBarry ff, So in a way it\'s a Grease AU, So much cuddling yall, Sober sex tho, Socially Awkward Keith (Voltron), Soft Jackson Wang, Soft kazumaji for self indulgence, Some Plot, Some light smut, Someone gets hit by a car, Sorry Not Sorry, Sorry literally forgot condoms exist, Spanking, Spiraling, Spit As Lube, Spoiler: The Treat is art, Spoilers, Spoilers for The Stolen Century, Stalia breakup, Steve Harrington Loves Eddie Munson, Stiles loves Lydia, Story in Pictures, Strap-Ons, Sub Min Yoongi | Suga, Sugar Daddy, Summer, Summer Camp, Summer Camp AU, Summer Fluff, Summer Love, Summer Reperatory Theater, Summer Romance, Summer Vacation, Supernatural Elements, Sweet, TJLC | The Johnlock Conspiracy, Tags May Change, Teacher AU, Teasing, Teen Crush, Teen John, Teen Romance, Teen Sherlock, Teenage Sam Winchester, Teenagers, Teenlock, Texting, The Beach AU We All Needed, The Fruity Four, There\'s a little extra treat at the end, They\'re both so adorable, Things get funny and cute and emotional and steamy, Third Wheels, This Was Just Supposed to Be Hot and Smutty but I Love Love, Threesome, Threesome - F/F/F, Threesome - F/M/M, Tickling, Tiny Enjolras, Tobi Deidara and Hidan are friends and stupid, Tobi has a surprise, Tobi\'s mask is...confusing in this fic. a medical mask probably, Tooth-Rotting Fluff, Top Castiel (Supernatural), Top Castiel/Bottom Dean Winchester, Top Jeon Jungkook, Top Nancy Wheeler, Top Yang Jeongin | I.N, Totally Not Projecting At All, Totally excited for this, Trans Patty Walters, Tree Houses, True Love, Tumblr Prompt, Twincest, Tyrannus Basilton ""Baz"" Pitch Is Gay for Simon Snow, Underage Drinking, Underage Sam, Underage Sex, Underage Smoking, University, Unsafe Sex, Uraraka and Kirishima are Wingmen, Vaginal Fingering, Vaginal Sex, Vibrators, Virgin Sherlock, Virgin Yang Jeongin | I.N, Walks On The Beach, Water Guns, Weddings, Wetting, Whirlwind Romance, Winterhawk Week, Y/n henderson, Yang Jeongin | I.N Has Sexuality Realizations, Young Love, Young Sirius Black, a little Jealous!Lilith, abusive ex is an oc, actual sex too, adopting max in the future!, ah the old days, alcohol tw, all characters are legal age, also, also smut probably, alternative universe, amusement park in the summer time, and kind of sad, and setting them up, and some others implied hehe, and teaches horseback riding, au where Billy doesn\'t get possessed right away so there\'s time for a summer romance, awkward Connor and Jared, bad boy!Rin, bc - Freeform, be warned, beach date, beach party, bi chad, blowjob, brief mentions of homophobia and transphobia, bruce is a dad, but actually she is, but no-one actually sings, camp counselors, canonverse, cis-swapped Bifur, cockslut!loki, college student sehun, completely for fun, completely self-indulgent, cool kids, cuteness, dark shota - really really noncon, david cries a lot, david might seem ooc sometimes?, david protection squad 2k17, david x reader gets married!, don\'t ask me-ask Wet Hot American Summer for that one..., dont look at me im trash, double-date, drunk, drunkAU!Barry, enjoltaire - Freeform, epic crush, ethan freeman-based erik, european trip, extremely juvenile behavior, fantastic foursome - Freeform, fear boner lol, feral suga, fluu, formatting is so shitty I\'m sorry, fuck it everyone is bi, fun in the sun, fun times in the pool locker room, gabriel thinks he\'s straight, gay cas, gay ryan, gonna be a long one, good god what have I done?, good vibes only, goody goody!Ai, grantaire\'s hoodie, gwen is mvp, hard decisions, healthy competition, here\'s another one, hinted at eventual Steve/reader, history teacher reader, holmescest, hopefully in copious and indecent amounts, horrible past, how they got together, i really like this fic, i wrote a lot of this when i was supposed to be sleeping, ichabbie - Freeform, im not good with tags, in as much as i can do slow build, in case you\'re missing summertime like i am, in this house we love Theo Putnam and will protect him at all costs, injured grantaire, innocent david, instafic, irresponsible counselors, is there a kink for having sex outside?, it\'s cute, it\'s kinda late, jake is precious, jk everyone will get it, kind of, kirikami - Freeform, kurtbastian, language warning, lifeguard Rey, like a cotton candy cloud, like soooo much fluff, like suuuuper gay, literally so fluffy I can\'t even, little ficlets, loki is briefly involved with someone else, loki is way to pale to be spending all summer at the pool, lol what is canon, long story, lots of exposition, lots-of-kissing, magic fingers too, makeout scenes??, master kink, max is your best friend, might do sin, mirror situation, mlm, mostly dean tho, motorcycles and fast cars, mute character, mutual pining (kind of), mystrade, night swimming, no beta we die like Shelby Colson, no serious plots- easy going, not canon, not entirely sure if I have tagged everything bc i\'m not amazing at tagging, not much angst tho, nothing like the film!, oh god the title is even worse, okay i know i already wrote a fake dating fic but whatever, over seas trips, overheated!mycroft, percabeth, poor bby im so sorry, preston and his romeo x juliet plays smh, prior relationships mentioned but nothing specific, prompt, queer community, rated for language, rating wil probably change, really hot, relationships, religion teacher gabriel, reminescent, rental houses, roadtrip au, season three, seonghwa-gets-caught-by-campers, seriously very underage - kiri is 6, set malfunction, sex and love, she has to overcome her own fears, short enjolras, short people are the best, short-oneshot-fluff-before-i-post-the-full-fic, sibling relationships, siiiiiiiiiiiiiiiiiiiiiiiiiighs, slight crossover (the new normal), so adorable, so much UST, soft, soft enjolras, soft grantaire, some gay shit, some smut, someone almost DROWNS, spoilers for the end of matt fraction\'s run, steddie, steve being a mom, steve eddie and robin form a band?!?!, steve is my angst baby, summer alts, summer antics, summer fun, summer lovin, summer lovin. had me a blaaaast! summer lovin. dick in my aaaaaass!, summer time, supportive families, taiora - Freeform, tall grantaire, teachers and students betting on them getting together, the beginning of a smut scene, the fluffiest of proposals, the group goes to the beach, the hell is fluu?, the kraken is there, the vagueist grease au ever, the whole \'whoops we need to share a room but you\'re my crush\' troupe bc love, there might be sex in a storage shed, there was no second war, there\'s some sex I guess?, they are truly soft and neat, they did the job right the first time around, they fight, they gay, they get into some shenanagins, they\'re idiots, this is so shameful and i\'m not even sorry, this is the latest i\'ve ever been for an exchange I am SO SORRY, this might be my worst fic writing-wise but it brings me joy, trans!byleth, unadvisable kitchen conduct, unrequited Steve/ Reader, very bad, very gently implied sexual content, water fights, we smol and fluff, well there is now, what really happened, what the fuck i was typing in \'licking\' and found out that \'eye licking\' is a tag on here, whoever gets the title ily, why are they so cute, wlw, wolfstar, woohwa-are-camp-counsellors, yall are weird., yes im aware its july but i started writing this for mermay, zenmasters')}]"	1	0	0			
388	388	es	¿Cuántos capítulos tiene A Hat For Alice?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""A Hat For Alice"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}]	388	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué personajes aparecen en A Hat For Alice?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""A Hat For Alice"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene Harriet Potter & the Stray Cat?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Harriet Potter & the Stray Cat"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: ¿Cuántos capítulos tiene A Hat For Alice?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""A Hat For Alice"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'1')}]	1	0	0			
389	389	es	¿Cuántos capítulos tiene Lonely?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Lonely"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'28')}, {'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'3')}, {'chapters': Value(typed-literal:'27')}, {'chapters': Value(typed-literal:'2')}, {'chapters': Value(typed-literal:'5')}, {'chapters': Value(typed-literal:'7')}, {'chapters': Value(typed-literal:'4')}, {'chapters': Value(typed-literal:'52')}, {'chapters': Value(typed-literal:'10')}, {'chapters': Value(typed-literal:'8')}, {'chapters': Value(typed-literal:'11')}, {'chapters': Value(typed-literal:'16')}, {'chapters': Value(typed-literal:'32')}, {'chapters': Value(typed-literal:'6')}, {'chapters': Value(typed-literal:'9')}, {'chapters': Value(typed-literal:'48')}, {'chapters': Value(typed-literal:'25')}]	389	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos capítulos tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene Hug?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Hug"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: ¿Cuántos capítulos tiene Lonely?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""Lonely"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'28')}, {'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'3')}, {'chapters': Value(typed-literal:'27')}, {'chapters': Value(typed-literal:'2')}, {'chapters': Value(typed-literal:'5')}, {'chapters': Value(typed-literal:'7')}, {'chapters': Value(typed-literal:'4')}, {'chapters': Value(typed-literal:'52')}, {'chapters': Value(typed-literal:'10')}, {'chapters': Value(typed-literal:'8')}, {'chapters': Value(typed-literal:'11')}, {'chapters': Value(typed-literal:'16')}, {'chapters': Value(typed-literal:'32')}, {'chapters': Value(typed-literal:'6')}, {'chapters': Value(typed-literal:'9')}, {'chapters': Value(typed-literal:'48')}, {'chapters': Value(typed-literal:'25')}]	1	0	0			
390	390	es	¿Cuántos capítulos tiene a light shared?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""a light shared"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}]	390	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos capítulos tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene Lonely?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Lonely"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: ¿Cuántos capítulos tiene a light shared?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""a light shared"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'1')}]	1	0	0			
391	391	es	¿Cuántos capítulos tiene The Creature You Know?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'24')}, {'chapters': Value(typed-literal:'11')}]	391	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos capítulos tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene Hug?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Hug"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: ¿Cuántos capítulos tiene The Creature You Know?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""The Creature You Know"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'24')}, {'chapters': Value(typed-literal:'11')}]	1	0	0			
392	392	es	¿Cuántos capítulos tiene this title is a wip of which i hate, like this fic and my life?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""this title is a wip of which i hate, like this fic and my life"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'6')}]	392	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿La historia Calling All Pranksters incluye la palabra clave but it’s not graphic nor is it shown?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""Calling All Pranksters"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""but it’s not graphic nor is it shown"") . }
    </SPARQL>

    ###
    

    Question: La historia Sad Sometimes tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Sad Sometimes"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia The Amorata tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""The Amorata"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: ¿Cuántos capítulos tiene this title is a wip of which i hate, like this fic and my life?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?numberOfChapters WHERE { 
?story golem:title ""this title is a wip of which i hate, like this fic and my life"" . 
?story golem:numberOfChapters ?numberOfChapters . 
}
"	"EndPointNotFound: It was not possible to connect to the given endpoint: check it is correct. 

Response:
b'<!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML//EN"">\n<html>\n  <head>\n    <title>Error HTTP/1.1 404 File not found</title>\n  </head>\n  <body>\n    <h3>Error HTTP/1.1 404 File not found</h3><pre>\nThe requested URL was not found    URI  = \'/sparql\'\n  </pre></body></html>\n'"	0	1	1	Failed execution		
393	393	es	¿Cuántos capítulos tiene Family is what you make it?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Family is what you make it"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'4')}, {'chapters': Value(typed-literal:'7')}]	393	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué colecciones pertenece I can't help but love you?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""I can't help but love you"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como this could be gen or pre-het????

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""this could be gen or pre-het???"" . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió learnt what love means together?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""learnt what love means together"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Cuántos capítulos tiene Family is what you make it?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT COUNT(?chapter) AS ?numberOfChapters WHERE { 
    ?story golem:title ""Family is what you make it"" . 
    ?story golem:hasChapter ?chapter . 
}
"	[{'numberOfChapters': Value(typed-literal:'0')}]	0	1	1	Wrong predicate	Hallucinated	
394	394	es	¿Cuántos capítulos tiene Hug?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Hug"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'2')}, {'chapters': Value(typed-literal:'5')}]	394	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos capítulos tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene Lonely?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Lonely"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: ¿Cuántos capítulos tiene Hug?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""Hug"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'2')}, {'chapters': Value(typed-literal:'5')}]	1	0	0			
395	395	es	¿Cuántos capítulos tiene Unbreakable Vows?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Unbreakable Vows"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'2')}]	395	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos capítulos tiene a light shared?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""a light shared"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene Hug?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Hug"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: ¿Cuántos capítulos tiene Unbreakable Vows?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Unbreakable Vows"" . ?story golem:numberOfChapters ?chapters . }
"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'2')}]	1	0	0			
396	396	es	¿Cuántos capítulos tiene Harriet Potter & the Stray Cat?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Harriet Potter & the Stray Cat"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'1')}]	396	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos capítulos tiene A Hat For Alice?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""A Hat For Alice"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Harriet Potter and the Philosopher's Stone?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Harriet Potter and the Philosopher's Stone"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: ¿Cuántos capítulos tiene Harriet Potter & the Stray Cat?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?chapters WHERE {  
?story golem:title ""Harriet Potter & the Stray Cat"" . 
?story golem:numberOfChapters ?chapters . }
"	[{'chapters': Value(typed-literal:'1')}]	1	0	0			
397	397	es	¿Cuántos capítulos tiene Train to Nowhere-Fanart?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Train to Nowhere-Fanart"" . ?story golem:numberOfChapters ?chapters . }"	[{'chapters': Value(typed-literal:'2')}]	397	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos capítulos tiene Lonely?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Lonely"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene Harriet Potter & the Stray Cat?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Harriet Potter & the Stray Cat"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: ¿Cuántos capítulos tiene Train to Nowhere-Fanart?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters WHERE { 
?story golem:title ""Train to Nowhere-Fanart"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'2')}]	1	0	0			
399	399	es	¿Qué calificación de contenido tiene Blank Canvas?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Blank Canvas"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Mature')}, {'rating': Value(literal:'General Audiences')}, {'rating': Value(literal:'Teen And Up Audiences')}, {'rating': Value(literal:'Not Rated')}, {'rating': Value(literal:'Explicit')}]	399	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué calificación de contenido tiene Disappointment?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Disappointment"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿Qué calificación de contenido tiene Library Indulgence?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Library Indulgence"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿Qué calificación de contenido tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: ¿Qué calificación de contenido tiene Blank Canvas?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
?story golem:title ""Blank Canvas"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Mature')}, {'rating': Value(literal:'General Audiences')}, {'rating': Value(literal:'Teen And Up Audiences')}, {'rating': Value(literal:'Not Rated')}, {'rating': Value(literal:'Explicit')}]	1	0	0			
400	400	es	¿Qué calificación de contenido tiene After Work Tales?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""After Work Tales"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Not Rated')}]	400	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué calificación de contenido tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: La historia [[story]] tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: ¿Qué calificación de contenido tiene After Work Tales?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
SELECT DISTINCT ?rating WHERE { 
  ?story golem:title ""After Work Tales"" . 
  ?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Not Rated')}]	1	0	0			
401	401	es	¿Qué calificación de contenido tiene the weight of inheritance?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""the weight of inheritance"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Mature')}]	401	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué calificación de contenido tiene Library Indulgence?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Library Indulgence"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿Qué calificación de contenido tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""[[story]]"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: ¿Qué calificación de contenido tiene the weight of inheritance?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""the weight of inheritance"" . ?story golem:rating ?rating . }
"	[{'rating': Value(literal:'Mature')}]	1	0	0			
402	402	es	¿Qué calificación de contenido tiene Library Indulgence?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Library Indulgence"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Mature')}]	402	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué calificación de contenido tiene the weight of inheritance?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""the weight of inheritance"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿Qué calificación de contenido tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿Qué calificación de contenido tiene Disappointment?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Disappointment"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: ¿Qué calificación de contenido tiene Library Indulgence?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
?story golem:title ""Library Indulgence"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Mature')}]	1	0	0			
403	403	es	¿Qué calificación de contenido tiene Holiday Travelers?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Holiday Travelers"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Mature')}]	403	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué calificación de contenido tiene A Death Eater's Happy Hour?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""A Death Eater's Happy Hour"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿Qué calificación de contenido tiene After Work Tales?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""After Work Tales"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿Qué calificación de contenido tiene Disappointment?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Disappointment"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: ¿Qué calificación de contenido tiene Holiday Travelers?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
?story golem:title ""Holiday Travelers"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Mature')}]	1	0	0			
404	404	es	¿Qué calificación de contenido tiene These Things Take Forever?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""These Things Take Forever"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Mature')}, {'rating': Value(literal:'Explicit')}, {'rating': Value(literal:'General Audiences')}]	404	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué calificación de contenido tiene After Work Tales?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""After Work Tales"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es Inadvertent Curses?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Inadvertent Curses"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: ¿Qué calificación de contenido tiene These Things Take Forever?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
?story golem:title ""These Things Take Forever"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Mature')}, {'rating': Value(literal:'Explicit')}, {'rating': Value(literal:'General Audiences')}]	1	0	0			
405	405	es	¿Qué calificación de contenido tiene A Death Eater's Happy Hour?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""A Death Eater's Happy Hour"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Explicit')}]	405	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: La historia Fantastic Treats tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Fantastic Treats"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: ¿Qué calificación de contenido tiene Holiday Travelers?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Holiday Travelers"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: La historia Sunday, Monday or Always tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Sunday, Monday or Always"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: ¿Qué calificación de contenido tiene A Death Eater's Happy Hour?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
  ?story golem:title ""A Death Eater's Happy Hour"" . 
  ?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Explicit')}]	1	0	0			
406	406	es	¿Qué calificación de contenido tiene 25 Days of Kinkmas 2020?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""25 Days of Kinkmas 2020"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Explicit')}]	406	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos reciben las historias de NCT____ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""NCT____"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de Zero no Kiseki hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Zero no Kiseki"" . }
    </SPARQL>

    ###
    

    Question: La historia Sunday, Monday or Always tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Sunday, Monday or Always"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: ¿Qué calificación de contenido tiene 25 Days of Kinkmas 2020?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?rating WHERE { 
?story golem:title ""25 Days of Kinkmas 2020"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Explicit')}]	1	0	0			
407	407	es	¿Qué calificación de contenido tiene Disappointment?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Disappointment"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Explicit')}, {'rating': Value(literal:'Teen And Up Audiences')}, {'rating': Value(literal:'General Audiences')}, {'rating': Value(literal:'Mature')}, {'rating': Value(literal:'Not Rated')}]	407	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué calificación de contenido tiene Hope Returns?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Hope Returns"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿Qué calificación de contenido tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: La historia Sad Sometimes tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Sad Sometimes"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: ¿Qué calificación de contenido tiene Disappointment?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
?story golem:title ""Disappointment"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Explicit')}, {'rating': Value(literal:'Teen And Up Audiences')}, {'rating': Value(literal:'General Audiences')}, {'rating': Value(literal:'Mature')}, {'rating': Value(literal:'Not Rated')}]	1	0	0			
408	408	es	¿Qué calificación de contenido tiene Hope Returns?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Hope Returns"" . ?story golem:rating ?rating . }"	[{'rating': Value(literal:'Teen And Up Audiences')}, {'rating': Value(literal:'General Audiences')}, {'rating': Value(literal:'Mature')}]	408	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué calificación de contenido tiene Disappointment?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""Disappointment"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿Qué calificación de contenido tiene After Work Tales?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""After Work Tales"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿Qué calificación de contenido tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""[[story]]"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

Question: ¿Qué calificación de contenido tiene Hope Returns?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?rating WHERE { 
?story golem:title ""Hope Returns"" . 
?story golem:rating ?rating . 
}
"	[{'rating': Value(literal:'Teen And Up Audiences')}, {'rating': Value(literal:'General Audiences')}, {'rating': Value(literal:'Mature')}]	1	0	0			
410	410	es	¿Cómo de larga es If We Are Shadows?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""If We Are Shadows"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1563')}]	410	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cómo de larga es Inadvertent Curses?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Inadvertent Curses"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó the silhouettes of our memories?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""the silhouettes of our memories"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: ¿Cómo de larga es If We Are Shadows?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?chapters ?words WHERE {  
?story golem:title ""If We Are Shadows"" .  
?story golem:numberOfChapters ?chapters .  
?story golem:numberOfWords ?words .  
}
"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1563')}]	1	0	0			
411	411	es	¿Cómo de larga es This Has Changed Everything?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""This Has Changed Everything"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'9742')}]	411	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuál es la historia más reciente?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:datePublished ?date . ?story golem:title ?title . } ORDER BY DESC(?date) LIMIT 1
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Encounter?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Encounter"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: ¿Cómo de larga es This Has Changed Everything?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?length WHERE { 
  ?story golem:title ""This Has Changed Everything"" . 
  ?story golem:numberOfWords ?length . 
}
"	[{'length': Value(typed-literal:'9742')}]	0	1	1	Incomplete query	Underfull	
412	412	es	¿Cómo de larga es Trust Me.?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Trust Me."" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1662')}, {'chapters': Value(typed-literal:'25'), 'words': Value(typed-literal:'38363')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'4641')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1561')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1870')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2019')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3812')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'13317')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'387')}]	412	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cómo de larga es Two Can Keep a Secret?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Two Can Keep a Secret"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es TIED TO HIM?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""TIED TO HIM"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es Inadvertent Curses?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Inadvertent Curses"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: ¿Cómo de larga es Trust Me.?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters ?words WHERE { 
?story golem:title ""Trust Me."" . 
?story golem:numberOfChapters ?chapters . 
?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1662')}, {'chapters': Value(typed-literal:'25'), 'words': Value(typed-literal:'38363')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'4641')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1561')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1870')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2019')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3812')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'13317')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'387')}]	1	0	0			
413	413	es	¿Cómo de larga es 1000 Kisses: #68 That Time on the Balcony, During a Ministry Party?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""1000 Kisses: #68 That Time on the Balcony, During a Ministry Party"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'5967')}]	413	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué palabras clave tiene Kiss Me (Under the Light of a Thousand Stars)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Kiss Me (Under the Light of a Thousand Stars)"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió My Sweet Vampire?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""My Sweet Vampire"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió A Cauldron Full of Hot, Strong Love?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""A Cauldron Full of Hot, Strong Love"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cómo de larga es 1000 Kisses: #68 That Time on the Balcony, During a Ministry Party?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?numberOfWords WHERE { 
?story golem:title ""1000 Kisses: #68 That Time on the Balcony, During a Ministry Party"" . 
?story golem:numberOfWords ?numberOfWords . 
}
"	[{'numberOfWords': Value(typed-literal:'5967')}]	0	1	1	Incomplete query	Underfull	
414	414	es	¿Cómo de larga es Stress Relief (no GIFs)?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Stress Relief (no GIFs)"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'57500')}, {'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'83018')}, {'chapters': Value(typed-literal:'15'), 'words': Value(typed-literal:'57500')}, {'chapters': Value(typed-literal:'15'), 'words': Value(typed-literal:'83018')}]	414	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cómo de larga es Inadvertent Curses?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Inadvertent Curses"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿Qué calificación de contenido tiene These Things Take Forever?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?rating WHERE {  ?story golem:title ""These Things Take Forever"" . ?story golem:rating ?rating . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: ¿Cómo de larga es Stress Relief (no GIFs)?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?chapters ?words WHERE { 
?story golem:title ""Stress Relief (no GIFs)"" . 
?story golem:numberOfChapters ?chapters . 
?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'57500')}, {'chapters': Value(typed-literal:'8'), 'words': Value(typed-literal:'83018')}, {'chapters': Value(typed-literal:'15'), 'words': Value(typed-literal:'57500')}, {'chapters': Value(typed-literal:'15'), 'words': Value(typed-literal:'83018')}]	1	0	0			
415	415	es	¿Cómo de larga es The Christmas Stocking?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""The Christmas Stocking"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'101')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2386')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'460')}]	415	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuál es la longitud de palabra promedio de A Very Potter Christmas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""A Very Potter Christmas"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿Cuál es la longitud de palabra promedio de Spice It Up?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""Spice It Up"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

Question: ¿Cómo de larga es The Christmas Stocking?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?chapters WHERE { 
?story golem:title ""The Christmas Stocking"" . 
?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'1')}]	0	1	1	Incomplete query	Underfull	could also be eval failure non-grouped
416	416	es	¿Cómo de larga es Two Can Keep a Secret?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Two Can Keep a Secret"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3172')}, {'chapters': Value(typed-literal:'21'), 'words': Value(typed-literal:'35298')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'685')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2327')}, {'chapters': Value(typed-literal:'13'), 'words': Value(typed-literal:'6472')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'125')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1633')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'902')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2906')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1553')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1364')}, {'chapters': Value(typed-literal:'13'), 'words': Value(typed-literal:'36383')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'4334')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1796')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'17218')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2116')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2598')}, {'chapters': Value(typed-literal:'5'), 'words': Value(typed-literal:'6767')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'7744')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'754')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'8872')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1799')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'3946')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'7285')}]	416	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cómo de larga es TIED TO HIM?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""TIED TO HIM"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es Trust Me.?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Trust Me."" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es If We Are Shadows?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""If We Are Shadows"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: ¿Cómo de larga es Two Can Keep a Secret?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?chapters ?words WHERE { 
?story golem:title ""Two Can Keep a Secret"" . 
?story golem:numberOfChapters ?chapters . 
?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3172')}, {'chapters': Value(typed-literal:'21'), 'words': Value(typed-literal:'35298')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'685')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2327')}, {'chapters': Value(typed-literal:'13'), 'words': Value(typed-literal:'6472')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'125')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1633')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'902')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2906')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1553')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1364')}, {'chapters': Value(typed-literal:'13'), 'words': Value(typed-literal:'36383')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'4334')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1796')}, {'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'17218')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2116')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2598')}, {'chapters': Value(typed-literal:'5'), 'words': Value(typed-literal:'6767')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'7744')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'754')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'8872')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'1799')}, {'chapters': Value(typed-literal:'4'), 'words': Value(typed-literal:'3946')}, {'chapters': Value(typed-literal:'3'), 'words': Value(typed-literal:'7285')}]	1	0	0			
417	417	es	¿Cómo de larga es TIED TO HIM?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""TIED TO HIM"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'25'), 'words': Value(typed-literal:'22715')}]	417	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cómo de larga es Two Can Keep a Secret?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Two Can Keep a Secret"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es Trust Me.?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Trust Me."" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Content to Stay Forever Locked in His Embrace?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Content to Stay Forever Locked in His Embrace"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: ¿Cómo de larga es TIED TO HIM?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters ?words WHERE { 
?story golem:title ""TIED TO HIM"" . 
?story golem:numberOfChapters ?chapters . 
?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'25'), 'words': Value(typed-literal:'22715')}]	1	0	0			
418	418	es	¿Cómo de larga es Inadvertent Curses?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Inadvertent Curses"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'13759')}]	418	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuál es la longitud de palabra promedio de Flying?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""Flying"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es If We Are Shadows?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""If We Are Shadows"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: ¿Cómo de larga es Inadvertent Curses?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?chapters ?words WHERE { 
?story golem:title ""Inadvertent Curses"" . 
?story golem:numberOfChapters ?chapters . 
?story golem:numberOfWords ?words . 
}
"	[{'chapters': Value(typed-literal:'2'), 'words': Value(typed-literal:'13759')}]	1	0	0			
419	419	es	¿Cómo de larga es The Speeches?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""The Speeches"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }"	[{'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2155')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'2309')}, {'chapters': Value(typed-literal:'1'), 'words': Value(typed-literal:'3797')}]	419	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cómo de larga es [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

    Question: ¿Cuál es la longitud de palabra promedio de [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""[[story]]"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

    Question: ¿Cuál es la longitud de palabra promedio de Interior Exposition?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""Interior Exposition"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

Question: ¿Cómo de larga es The Speeches?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?chapters WHERE { 
    ?story golem:title ""The Speeches"" . 
    ?story golem:numberOfChapters ?chapters . 
}
"	[{'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'1')}, {'chapters': Value(typed-literal:'1')}]	0	1	1	Incomplete query	Underfull	could also be eval failure non-grouped
421	421	es	La historia Old Solemnly Swear Chapters tiene algún aviso de contenido?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Old Solemnly Swear Chapters"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings')}]	421	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: La historia The Amorata tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""The Amorata"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene Unbreakable Vows?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Unbreakable Vows"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: La historia Overheard at Hogwart's tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Overheard at Hogwart's"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: La historia Old Solemnly Swear Chapters tiene algún aviso de contenido?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""Old Solemnly Swear Chapters"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings')}]	1	0	0			
422	422	es	La historia The Amorata tiene algún aviso de contenido?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""The Amorata"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'Underage')}]	422	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: La historia Fantastic Treats tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Fantastic Treats"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia [[story]] tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia Old Solemnly Swear Chapters tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Old Solemnly Swear Chapters"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: La historia The Amorata tiene algún aviso de contenido?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  
  ?story golem:title ""The Amorata"" .  
  ?story golem:contentWarning ?warning .  
}
"	[{'warnings': Value(literal:'Underage')}]	1	0	0			
423	423	es	La historia One Plus One Equals Three tiene algún aviso de contenido?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""One Plus One Equals Three"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings, No Archive Warnings Apply, Underage')}]	423	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: La historia The Amorata tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""The Amorata"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia Fantastic Treats tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Fantastic Treats"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia [[story]] tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: La historia One Plus One Equals Three tiene algún aviso de contenido?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""One Plus One Equals Three"" . ?story golem:contentWarning ?warning . }
"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings, No Archive Warnings Apply, Underage')}]	1	0	0			
424	424	es	La historia Overheard at Hogwart's tiene algún aviso de contenido?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Overheard at Hogwart's"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings')}]	424	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿La historia The Anger of Hogwarts Castle incluye la palabra clave Benevolent God?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""The Anger of Hogwarts Castle"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""Benevolent God"") . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia Harry Potter and the Sorcerer's Sweet Ass Ride?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""Harry Potter and the Sorcerer's Sweet Ass Ride"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: La historia Bird of Prey tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Bird of Prey"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: La historia Overheard at Hogwart's tiene algún aviso de contenido?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
  ?story golem:title ""Overheard at Hogwart's"" . 
  ?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings')}]	1	0	0			
425	425	es	La historia Bird of Prey tiene algún aviso de contenido?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Bird of Prey"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings, Graphic Depictions Of Violence, Major Character Death, No Archive Warnings Apply, Rape/Non-Con')}]	425	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: La historia The Amorata tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""The Amorata"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia Fantastic Treats tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Fantastic Treats"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia Overheard at Hogwart's tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Overheard at Hogwart's"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: La historia Bird of Prey tiene algún aviso de contenido?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
  ?story golem:title ""Bird of Prey"" . 
  ?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings, Graphic Depictions Of Violence, Major Character Death, No Archive Warnings Apply, Rape/Non-Con')}]	1	0	0			
426	426	es	La historia The Wall tiene algún aviso de contenido?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""The Wall"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings, Graphic Depictions Of Violence, Major Character Death, No Archive Warnings Apply, Rape/Non-Con, Underage')}]	426	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: La historia [[story]] tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia The Amorata tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""The Amorata"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia Trying Not to Cry tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Trying Not to Cry"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: La historia The Wall tiene algún aviso de contenido?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""The Wall"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings, Graphic Depictions Of Violence, Major Character Death, No Archive Warnings Apply, Rape/Non-Con, Underage')}]	1	0	0			
427	427	es	La historia Sad Sometimes tiene algún aviso de contenido?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Sad Sometimes"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	427	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: La historia Trying Not to Cry tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Trying Not to Cry"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia [[story]] tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia The Amorata tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""The Amorata"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: La historia Sad Sometimes tiene algún aviso de contenido?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""Sad Sometimes"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	1	0	0			
428	428	es	La historia Sunday, Monday or Always tiene algún aviso de contenido?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Sunday, Monday or Always"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	428	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: La historia Sad Sometimes tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Sad Sometimes"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia [[story]] tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia One Plus One Equals Three tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""One Plus One Equals Three"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: La historia Sunday, Monday or Always tiene algún aviso de contenido?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE { 
?story golem:title ""Sunday, Monday or Always"" . 
?story golem:contentWarning ?warning . 
}
"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	1	0	0			
429	429	es	La historia Trying Not to Cry tiene algún aviso de contenido?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Trying Not to Cry"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings, No Archive Warnings Apply')}]	429	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: La historia Sad Sometimes tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Sad Sometimes"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia [[story]] tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia The Amorata tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""The Amorata"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: La historia Trying Not to Cry tiene algún aviso de contenido?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  
?story golem:title ""Trying Not to Cry"" . 
?story golem:contentWarning ?warning . }
"	[{'warnings': Value(literal:'Creator Chose Not To Use Archive Warnings, No Archive Warnings Apply')}]	1	0	0			
430	430	es	La historia Fantastic Treats tiene algún aviso de contenido?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Fantastic Treats"" . ?story golem:contentWarning ?warning . }"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	430	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: La historia The Amorata tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""The Amorata"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia Bird of Prey tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Bird of Prey"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

    Question: La historia [[story]] tiene algún aviso de contenido?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . }
    </SPARQL>

    ###
    

Question: La historia Fantastic Treats tiene algún aviso de contenido?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT (GROUP_CONCAT(DISTINCT ?warning; separator="", "") AS ?warnings) WHERE {  ?story golem:title ""Fantastic Treats"" . ?story golem:contentWarning ?warning . }
"	[{'warnings': Value(literal:'No Archive Warnings Apply')}]	1	0	0			
432	432	es	¿Quién es el autor de Triptych - Ron?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Triptych - Ron"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000001008')}]	432	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién escribió Ron's body?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Ron's body"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de {david tennant oneshots}?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""{david tennant oneshots}"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Obsidian and the Wizarding World?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Obsidian and the Wizarding World"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién es el autor de Triptych - Ron?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""Triptych - Ron"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000001008')}]	1	0	0			
433	433	es	¿Quién es el autor de My AU Notes?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""My AU Notes"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000260424')}]	433	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién es el autor de Triptych - Ron?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Triptych - Ron"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de {david tennant oneshots}?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""{david tennant oneshots}"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de Peace?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Peace"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién es el autor de My AU Notes?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""My AU Notes"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000260424')}]	1	0	0			
434	434	es	¿Quién es el autor de {david tennant oneshots}?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""{david tennant oneshots}"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000188520')}]	434	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién es el autor de Triptych - Ron?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Triptych - Ron"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Obsidian and the Wizarding World?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Obsidian and the Wizarding World"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de My AU Notes?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""My AU Notes"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién es el autor de {david tennant oneshots}?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""{david tennant oneshots}"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000188520')}]	1	0	0			
435	435	es	¿Quién es el autor de doctor can you help me ‘cause something just don’t feel right??	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""doctor can you help me ‘cause something just don’t feel right?"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000033627')}]	435	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Se muere algún personaje principal en Today on Hogsmeade Radio, with your favourite host Luna Lovegood!?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Today on Hogsmeade Radio, with your favourite host Luna Lovegood!"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece We look like we feel?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""We look like we feel"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿Cuál es el MSTTR de you're actually really soft like this?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?msttr  WHERE { ?story golem:title ""you're actually really soft like this"" . ?story golem:MSTTR ?msttr . }
    </SPARQL>

    ###
    

Question: ¿Quién es el autor de doctor can you help me ‘cause something just don’t feel right??

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""doctor can you help me 'cause something just don’t feel right?"" . 
?story dc:creator ?author . 
}
"	[]	0	0	1	Wrong predicate	Non-GOLEM	
436	436	es	¿Quién es el autor de ghosting you?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""ghosting you"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000146161')}, {'author': Value(literal:'A000257024')}]	436	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como Character Turned Into a Ghost?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Character Turned Into a Ghost"" . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿De qué trata Haunted [podfic]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Haunted [podfic]"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: ¿Quién es el autor de ghosting you?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""ghosting you"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000146161')}, {'author': Value(literal:'A000257024')}]	1	0	0			
437	437	es	¿Quién es el autor de Peace?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Peace"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000010235')}, {'author': Value(literal:'A000328837')}, {'author': Value(literal:'A000162190')}, {'author': Value(literal:'A000314682')}, {'author': Value(literal:'A000177702')}, {'author': Value(literal:'A000310672')}, {'author': Value(literal:'A000001939')}, {'author': Value(literal:'A000184058')}, {'author': Value(literal:'A000004936')}, {'author': Value(literal:'A001052437')}, {'author': Value(literal:'A000056938')}, {'author': Value(literal:'A000106358')}, {'author': Value(literal:'A000464112')}, {'author': Value(literal:'A000233973')}, {'author': Value(literal:'A000339630')}, {'author': Value(literal:'A000528565')}, {'author': Value(literal:'A000122126')}, {'author': Value(literal:'A000312803')}, {'author': Value(literal:'A000000000')}, {'author': Value(literal:'A000046749')}, {'author': Value(literal:'A000552224')}, {'author': Value(literal:'A000072984')}, {'author': Value(literal:'A000008080')}, {'author': Value(literal:'A000005287')}, {'author': Value(literal:'A000000634')}, {'author': Value(literal:'A000114656')}, {'author': Value(literal:'A000234202')}, {'author': Value(literal:'A000000360')}, {'author': Value(literal:'A000062129')}, {'author': Value(literal:'A000249311')}, {'author': Value(literal:'A000212998')}, {'author': Value(literal:'A000079988')}, {'author': Value(literal:'A000000995')}, {'author': Value(literal:'A000436731')}, {'author': Value(literal:'A000079653')}, {'author': Value(literal:'A000014241')}, {'author': Value(literal:'A001155141')}, {'author': Value(literal:'A001124700')}, {'author': Value(literal:'A000226063')}, {'author': Value(literal:'A000057452')}, {'author': Value(literal:'A000369963')}, {'author': Value(literal:'A000358999')}, {'author': Value(literal:'A000257882')}, {'author': Value(literal:'A000266994')}, {'author': Value(literal:'A000040415')}, {'author': Value(literal:'A000049209')}, {'author': Value(literal:'A000045119')}, {'author': Value(literal:'A000067790')}, {'author': Value(literal:'A000002476')}, {'author': Value(literal:'A000175673')}, {'author': Value(literal:'A000282793')}, {'author': Value(literal:'A000025759')}, {'author': Value(literal:'A000003316')}, {'author': Value(literal:'A000000050')}, {'author': Value(literal:'A000045988')}, {'author': Value(literal:'A000438279')}, {'author': Value(literal:'A000049680')}, {'author': Value(literal:'A000004749')}, {'author': Value(literal:'A000444796')}, {'author': Value(literal:'A000014706')}, {'author': Value(literal:'A000004984')}, {'author': Value(literal:'A000040476')}, {'author': Value(literal:'A000041040')}, {'author': Value(literal:'A000217142')}, {'author': Value(literal:'A000447741')}, {'author': Value(literal:'A000264618')}, {'author': Value(literal:'A000013753')}, {'author': Value(literal:'A000069126')}, {'author': Value(literal:'A000076335')}, {'author': Value(literal:'A000101810')}, {'author': Value(literal:'A000473784')}, {'author': Value(literal:'A000000407')}, {'author': Value(literal:'A000226695')}, {'author': Value(literal:'A000634800')}, {'author': Value(literal:'A000214185')}, {'author': Value(literal:'A000090163')}, {'author': Value(literal:'A000025260')}, {'author': Value(literal:'A000004685')}, {'author': Value(literal:'A000003551')}, {'author': Value(literal:'A000506241')}, {'author': Value(literal:'A000000342')}, {'author': Value(literal:'A000001575')}, {'author': Value(literal:'A000097668')}, {'author': Value(literal:'A000004106')}, {'author': Value(literal:'A000002041')}, {'author': Value(literal:'A000042979')}, {'author': Value(literal:'A000000147')}, {'author': Value(literal:'A000054816')}, {'author': Value(literal:'A000029241')}, {'author': Value(literal:'A000003465')}, {'author': Value(literal:'A000211185')}, {'author': Value(literal:'A000007424')}, {'author': Value(literal:'A000216896')}, {'author': Value(literal:'A000303870')}, {'author': Value(literal:'A000009217')}, {'author': Value(literal:'A000037312')}, {'author': Value(literal:'A000588481')}, {'author': Value(literal:'A001104747')}, {'author': Value(literal:'A001104768')}, {'author': Value(literal:'A001106749')}, {'author': Value(literal:'A000214050')}, {'author': Value(literal:'A001195878')}, {'author': Value(literal:'A000227175')}, {'author': Value(literal:'A000011112')}, {'author': Value(literal:'A000045771')}, {'author': Value(literal:'A000000023')}, {'author': Value(literal:'A000000223')}, {'author': Value(literal:'A000165064')}, {'author': Value(literal:'A000000530')}, {'author': Value(literal:'A000251322')}, {'author': Value(literal:'A000019945')}, {'author': Value(literal:'A000005680')}, {'author': Value(literal:'A000001848')}, {'author': Value(literal:'A000032029')}, {'author': Value(literal:'A000477420')}, {'author': Value(literal:'A000017998')}, {'author': Value(literal:'A000003090')}, {'author': Value(literal:'A000022492')}, {'author': Value(literal:'A000615497')}, {'author': Value(literal:'A000232108')}, {'author': Value(literal:'A000002416')}, {'author': Value(literal:'A000032725')}, {'author': Value(literal:'A000371927')}, {'author': Value(literal:'A000215039')}, {'author': Value(literal:'A000156298')}, {'author': Value(literal:'A000028160')}, {'author': Value(literal:'A000621472')}, {'author': Value(literal:'A000000207')}, {'author': Value(literal:'A000000416')}, {'author': Value(literal:'A000003296')}, {'author': Value(literal:'A000003485')}, {'author': Value(literal:'A000005635')}, {'author': Value(literal:'A000646693')}, {'author': Value(literal:'A000693659')}, {'author': Value(literal:'A000245878')}, {'author': Value(literal:'A000000499')}, {'author': Value(literal:'A001121627')}, {'author': Value(literal:'A000004804')}, {'author': Value(literal:'A000639386')}, {'author': Value(literal:'A000005623')}, {'author': Value(literal:'A000000049')}, {'author': Value(literal:'A000023226')}, {'author': Value(literal:'A000074389')}, {'author': Value(literal:'A000102955')}, {'author': Value(literal:'A000033505')}, {'author': Value(literal:'A000063882')}, {'author': Value(literal:'A000452236')}, {'author': Value(literal:'A000240056')}, {'author': Value(literal:'A000014495')}, {'author': Value(literal:'A000091798')}, {'author': Value(literal:'A000066539')}, {'author': Value(literal:'A000035309')}, {'author': Value(literal:'A000000266')}, {'author': Value(literal:'A000275276')}, {'author': Value(literal:'A000032291')}, {'author': Value(literal:'A000230095')}, {'author': Value(literal:'A000049224')}, {'author': Value(literal:'A000000106')}, {'author': Value(literal:'A000675580')}, {'author': Value(literal:'A000009076')}, {'author': Value(literal:'A000003255')}, {'author': Value(literal:'A000081797')}, {'author': Value(literal:'A000028994')}, {'author': Value(literal:'A000003155')}, {'author': Value(literal:'A000052396')}, {'author': Value(literal:'A000002664')}, {'author': Value(literal:'A000052882')}, {'author': Value(literal:'A000686446')}, {'author': Value(literal:'A000067785')}, {'author': Value(literal:'A000241938')}, {'author': Value(literal:'A000069155')}, {'author': Value(literal:'A000095231')}, {'author': Value(literal:'A000007189')}, {'author': Value(literal:'A000011998')}, {'author': Value(literal:'A000000700')}, {'author': Value(literal:'A000002803')}, {'author': Value(literal:'A000032674')}, {'author': Value(literal:'A000464208')}, {'author': Value(literal:'A000000265')}, {'author': Value(literal:'A000499688')}, {'author': Value(literal:'A000240923')}, {'author': Value(literal:'A000001268')}, {'author': Value(literal:'A000030801')}, {'author': Value(literal:'A000717301')}, {'author': Value(literal:'A000003227')}, {'author': Value(literal:'A000000457')}, {'author': Value(literal:'A000002688')}, {'author': Value(literal:'A000066745')}, {'author': Value(literal:'A000761101')}, {'author': Value(literal:'A000042790')}, {'author': Value(literal:'A000002397')}, {'author': Value(literal:'A000793294')}, {'author': Value(literal:'A000667768')}, {'author': Value(literal:'A000000923')}, {'author': Value(literal:'A000000210')}, {'author': Value(literal:'A000052479')}, {'author': Value(literal:'A000737362')}, {'author': Value(literal:'A000025142')}, {'author': Value(literal:'A000174677')}, {'author': Value(literal:'A000314185')}, {'author': Value(literal:'A000218137')}, {'author': Value(literal:'A000039598')}, {'author': Value(literal:'A000078488')}, {'author': Value(literal:'A000082429')}, {'author': Value(literal:'A000004916')}, {'author': Value(literal:'A000285291')}, {'author': Value(literal:'A000054768')}, {'author': Value(literal:'A000009485')}, {'author': Value(literal:'A000000184')}, {'author': Value(literal:'A000069742')}, {'author': Value(literal:'A000078734')}, {'author': Value(literal:'A000913115')}, {'author': Value(literal:'A000265491')}, {'author': Value(literal:'A000471541')}, {'author': Value(literal:'A000074058')}, {'author': Value(literal:'A000395831')}, {'author': Value(literal:'A000061931')}, {'author': Value(literal:'A000915408')}, {'author': Value(literal:'A000019660')}, {'author': Value(literal:'A000237441')}, {'author': Value(literal:'A000921750')}, {'author': Value(literal:'A000006711')}, {'author': Value(literal:'A000901448')}, {'author': Value(literal:'A000944493')}, {'author': Value(literal:'A000329102')}, {'author': Value(literal:'A001113893')}, {'author': Value(literal:'A000770173')}, {'author': Value(literal:'A000048298')}, {'author': Value(literal:'A000900851')}, {'author': Value(literal:'A000002629')}, {'author': Value(literal:'A000033534')}, {'author': Value(literal:'A000038799')}, {'author': Value(literal:'A000017066')}, {'author': Value(literal:'A000977318')}, {'author': Value(literal:'A000000690')}, {'author': Value(literal:'A000042094')}, {'author': Value(literal:'A000040775')}, {'author': Value(literal:'A000002447')}, {'author': Value(literal:'A000002391')}, {'author': Value(literal:'A000007194')}, {'author': Value(literal:'A000092471')}, {'author': Value(literal:'A000008953')}, {'author': Value(literal:'A000814647')}, {'author': Value(literal:'A000232347')}, {'author': Value(literal:'A000006788')}, {'author': Value(literal:'A000744474')}, {'author': Value(literal:'A000016624')}, {'author': Value(literal:'A001053724')}, {'author': Value(literal:'A000230241')}, {'author': Value(literal:'A000006916')}, {'author': Value(literal:'A000030727')}, {'author': Value(literal:'A001158986')}, {'author': Value(literal:'A001112008')}, {'author': Value(literal:'A000005949')}, {'author': Value(literal:'A000012769')}, {'author': Value(literal:'A000210977')}, {'author': Value(literal:'A000013578')}, {'author': Value(literal:'A000210374')}, {'author': Value(literal:'A000881326')}, {'author': Value(literal:'A000051968')}, {'author': Value(literal:'A000382237')}, {'author': Value(literal:'A000009393')}, {'author': Value(literal:'A000090474')}, {'author': Value(literal:'A000162617')}, {'author': Value(literal:'A000487243')}, {'author': Value(literal:'A000406586')}, {'author': Value(literal:'A000016437')}, {'author': Value(literal:'A000015257')}, {'author': Value(literal:'A000027869')}, {'author': Value(literal:'A000954842')}, {'author': Value(literal:'A000257793')}, {'author': Value(literal:'A000472654')}, {'author': Value(literal:'A000009562')}, {'author': Value(literal:'A000075848')}, {'author': Value(literal:'A000000034')}, {'author': Value(literal:'A000029078')}, {'author': Value(literal:'A000000011')}, {'author': Value(literal:'A000054063')}, {'author': Value(literal:'A000020030')}, {'author': Value(literal:'A000035851')}, {'author': Value(literal:'A000000443')}, {'author': Value(literal:'A000090025')}, {'author': Value(literal:'A000469430')}, {'author': Value(literal:'A000011242')}, {'author': Value(literal:'A000053674')}, {'author': Value(literal:'A000001839')}, {'author': Value(literal:'A000082852')}, {'author': Value(literal:'A000063766')}, {'author': Value(literal:'A000050367')}, {'author': Value(literal:'A000029887')}, {'author': Value(literal:'A000000001')}, {'author': Value(literal:'A000009391')}, {'author': Value(literal:'A000093128')}, {'author': Value(literal:'A000888026')}, {'author': Value(literal:'A000802405')}, {'author': Value(literal:'A000124596')}, {'author': Value(literal:'A000438570')}, {'author': Value(literal:'A000000044')}, {'author': Value(literal:'A000006972')}, {'author': Value(literal:'A000000158')}, {'author': Value(literal:'A000276299')}, {'author': Value(literal:'A000913693')}, {'author': Value(literal:'A000008122')}, {'author': Value(literal:'A000002726')}, {'author': Value(literal:'A000087115')}, {'author': Value(literal:'A000060087')}, {'author': Value(literal:'A000417153')}, {'author': Value(literal:'A000000187')}, {'author': Value(literal:'A000096609')}, {'author': Value(literal:'A000049542')}, {'author': Value(literal:'A000019825')}, {'author': Value(literal:'A000001294')}, {'author': Value(literal:'A000414001')}, {'author': Value(literal:'A000023084')}, {'author': Value(literal:'A000038775')}, {'author': Value(literal:'A000000051')}, {'author': Value(literal:'A000018175')}, {'author': Value(literal:'A000066228')}, {'author': Value(literal:'A000011263')}, {'author': Value(literal:'A000003743')}, {'author': Value(literal:'A000006031')}, {'author': Value(literal:'A000002589')}, {'author': Value(literal:'A000058619')}, {'author': Value(literal:'A000328119')}, {'author': Value(literal:'A000077261')}, {'author': Value(literal:'A000091663')}, {'author': Value(literal:'A000968458')}, {'author': Value(literal:'A001204079')}, {'author': Value(literal:'A001239545')}, {'author': Value(literal:'A000054200')}, {'author': Value(literal:'A000820729')}, {'author': Value(literal:'A000907004')}, {'author': Value(literal:'A000000918')}, {'author': Value(literal:'A000003639')}, {'author': Value(literal:'A000004780')}, {'author': Value(literal:'A000017227')}, {'author': Value(literal:'A000020386')}, {'author': Value(literal:'A000497531')}, {'author': Value(literal:'A000023915')}, {'author': Value(literal:'A000087983')}, {'author': Value(literal:'A000013144')}, {'author': Value(literal:'A000000901')}, {'author': Value(literal:'A000081623')}, {'author': Value(literal:'A000069102')}, {'author': Value(literal:'A000858637')}, {'author': Value(literal:'A000070972')}, {'author': Value(literal:'A000011450')}, {'author': Value(literal:'A000006363')}, {'author': Value(literal:'A000012501')}, {'author': Value(literal:'A000001114')}, {'author': Value(literal:'A000018557')}, {'author': Value(literal:'A000102573')}, {'author': Value(literal:'A000026236')}, {'author': Value(literal:'A000101891')}, {'author': Value(literal:'A000995417')}, {'author': Value(literal:'A000215988')}, {'author': Value(literal:'A000029843')}, {'author': Value(literal:'A000014288')}, {'author': Value(literal:'A000978930')}, {'author': Value(literal:'A000787724')}, {'author': Value(literal:'A000640828')}, {'author': Value(literal:'A000974348')}, {'author': Value(literal:'A000099497')}, {'author': Value(literal:'A000012633')}, {'author': Value(literal:'A001002346')}, {'author': Value(literal:'A000357660')}, {'author': Value(literal:'A000918117')}, {'author': Value(literal:'A000176426')}, {'author': Value(literal:'A000496509')}, {'author': Value(literal:'A000038586')}, {'author': Value(literal:'A000115721')}, {'author': Value(literal:'A000873186')}, {'author': Value(literal:'A000008216')}, {'author': Value(literal:'A000029371')}, {'author': Value(literal:'A000718037')}, {'author': Value(literal:'A000012523')}, {'author': Value(literal:'A000005277')}, {'author': Value(literal:'A000000286')}, {'author': Value(literal:'A000339622')}, {'author': Value(literal:'A000000840')}, {'author': Value(literal:'A000007878')}, {'author': Value(literal:'A000073109')}, {'author': Value(literal:'A000009050')}, {'author': Value(literal:'A000012540')}, {'author': Value(literal:'A000716494')}, {'author': Value(literal:'A001059745')}, {'author': Value(literal:'A000089030')}, {'author': Value(literal:'A001007080')}, {'author': Value(literal:'A000007798')}, {'author': Value(literal:'A000003919')}, {'author': Value(literal:'A000510550')}, {'author': Value(literal:'A000147389')}, {'author': Value(literal:'A000008077')}, {'author': Value(literal:'A000113686')}, {'author': Value(literal:'A000015839')}, {'author': Value(literal:'A000590028')}, {'author': Value(literal:'A000622032')}, {'author': Value(literal:'A001022467')}, {'author': Value(literal:'A000051650')}, {'author': Value(literal:'A000002302')}, {'author': Value(literal:'A000084018')}, {'author': Value(literal:'A000001116')}, {'author': Value(literal:'A000597656')}, {'author': Value(literal:'A000039823')}, {'author': Value(literal:'A000010586')}, {'author': Value(literal:'A000111067')}, {'author': Value(literal:'A000044883')}, {'author': Value(literal:'A000031418')}, {'author': Value(literal:'A000074636')}, {'author': Value(literal:'A000179909')}, {'author': Value(literal:'A000001447')}, {'author': Value(literal:'A000002798')}, {'author': Value(literal:'A000000651')}, {'author': Value(literal:'A000804909')}, {'author': Value(literal:'A000109992')}, {'author': Value(literal:'A000008417')}, {'author': Value(literal:'A000009316')}, {'author': Value(literal:'A000819876')}, {'author': Value(literal:'A000002616')}, {'author': Value(literal:'A001126927')}, {'author': Value(literal:'A001239150')}, {'author': Value(literal:'A000369612')}, {'author': Value(literal:'A000015078')}, {'author': Value(literal:'A000004899')}, {'author': Value(literal:'A001014822')}, {'author': Value(literal:'A001040211')}, {'author': Value(literal:'A000026506')}, {'author': Value(literal:'A000002488')}, {'author': Value(literal:'A000041637')}, {'author': Value(literal:'A000025083')}, {'author': Value(literal:'A000450777')}, {'author': Value(literal:'A000012645')}, {'author': Value(literal:'A000005461')}, {'author': Value(literal:'A000076420')}, {'author': Value(literal:'A000289676')}, {'author': Value(literal:'A000197465')}, {'author': Value(literal:'A000046907')}, {'author': Value(literal:'A000005290')}, {'author': Value(literal:'A000105463')}, {'author': Value(literal:'A000040318')}, {'author': Value(literal:'A000000302')}, {'author': Value(literal:'A000029000')}, {'author': Value(literal:'A000625363')}, {'author': Value(literal:'A000063885')}, {'author': Value(literal:'A001118200')}, {'author': Value(literal:'A001080612')}, {'author': Value(literal:'A000045621')}, {'author': Value(literal:'A001184017')}, {'author': Value(literal:'A001183895')}, {'author': Value(literal:'A000220950')}, {'author': Value(literal:'A000022321')}, {'author': Value(literal:'A000038116')}, {'author': Value(literal:'A000485955')}, {'author': Value(literal:'A000110241')}, {'author': Value(literal:'A000376009')}, {'author': Value(literal:'A000105334')}, {'author': Value(literal:'A000033073')}, {'author': Value(literal:'A000008303')}, {'author': Value(literal:'A000012548')}, {'author': Value(literal:'A000017327')}, {'author': Value(literal:'A000000236')}]	437	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién es el autor de My AU Notes?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""My AU Notes"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Obsidian and the Wizarding World?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Obsidian and the Wizarding World"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de {david tennant oneshots}?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""{david tennant oneshots}"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién es el autor de Peace?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Peace"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000010235')}, {'author': Value(literal:'A000328837')}, {'author': Value(literal:'A000162190')}, {'author': Value(literal:'A000314682')}, {'author': Value(literal:'A000177702')}, {'author': Value(literal:'A000310672')}, {'author': Value(literal:'A000001939')}, {'author': Value(literal:'A000184058')}, {'author': Value(literal:'A000004936')}, {'author': Value(literal:'A001052437')}, {'author': Value(literal:'A000056938')}, {'author': Value(literal:'A000106358')}, {'author': Value(literal:'A000464112')}, {'author': Value(literal:'A000233973')}, {'author': Value(literal:'A000339630')}, {'author': Value(literal:'A000528565')}, {'author': Value(literal:'A000122126')}, {'author': Value(literal:'A000312803')}, {'author': Value(literal:'A000000000')}, {'author': Value(literal:'A000046749')}, {'author': Value(literal:'A000552224')}, {'author': Value(literal:'A000072984')}, {'author': Value(literal:'A000008080')}, {'author': Value(literal:'A000005287')}, {'author': Value(literal:'A000000634')}, {'author': Value(literal:'A000114656')}, {'author': Value(literal:'A000234202')}, {'author': Value(literal:'A000000360')}, {'author': Value(literal:'A000062129')}, {'author': Value(literal:'A000249311')}, {'author': Value(literal:'A000212998')}, {'author': Value(literal:'A000079988')}, {'author': Value(literal:'A000000995')}, {'author': Value(literal:'A000436731')}, {'author': Value(literal:'A000079653')}, {'author': Value(literal:'A000014241')}, {'author': Value(literal:'A001155141')}, {'author': Value(literal:'A001124700')}, {'author': Value(literal:'A000226063')}, {'author': Value(literal:'A000057452')}, {'author': Value(literal:'A000369963')}, {'author': Value(literal:'A000358999')}, {'author': Value(literal:'A000257882')}, {'author': Value(literal:'A000266994')}, {'author': Value(literal:'A000040415')}, {'author': Value(literal:'A000049209')}, {'author': Value(literal:'A000045119')}, {'author': Value(literal:'A000067790')}, {'author': Value(literal:'A000002476')}, {'author': Value(literal:'A000175673')}, {'author': Value(literal:'A000282793')}, {'author': Value(literal:'A000025759')}, {'author': Value(literal:'A000003316')}, {'author': Value(literal:'A000000050')}, {'author': Value(literal:'A000045988')}, {'author': Value(literal:'A000438279')}, {'author': Value(literal:'A000049680')}, {'author': Value(literal:'A000004749')}, {'author': Value(literal:'A000444796')}, {'author': Value(literal:'A000014706')}, {'author': Value(literal:'A000004984')}, {'author': Value(literal:'A000040476')}, {'author': Value(literal:'A000041040')}, {'author': Value(literal:'A000217142')}, {'author': Value(literal:'A000447741')}, {'author': Value(literal:'A000264618')}, {'author': Value(literal:'A000013753')}, {'author': Value(literal:'A000069126')}, {'author': Value(literal:'A000076335')}, {'author': Value(literal:'A000101810')}, {'author': Value(literal:'A000473784')}, {'author': Value(literal:'A000000407')}, {'author': Value(literal:'A000226695')}, {'author': Value(literal:'A000634800')}, {'author': Value(literal:'A000214185')}, {'author': Value(literal:'A000090163')}, {'author': Value(literal:'A000025260')}, {'author': Value(literal:'A000004685')}, {'author': Value(literal:'A000003551')}, {'author': Value(literal:'A000506241')}, {'author': Value(literal:'A000000342')}, {'author': Value(literal:'A000001575')}, {'author': Value(literal:'A000097668')}, {'author': Value(literal:'A000004106')}, {'author': Value(literal:'A000002041')}, {'author': Value(literal:'A000042979')}, {'author': Value(literal:'A000000147')}, {'author': Value(literal:'A000054816')}, {'author': Value(literal:'A000029241')}, {'author': Value(literal:'A000003465')}, {'author': Value(literal:'A000211185')}, {'author': Value(literal:'A000007424')}, {'author': Value(literal:'A000216896')}, {'author': Value(literal:'A000303870')}, {'author': Value(literal:'A000009217')}, {'author': Value(literal:'A000037312')}, {'author': Value(literal:'A000588481')}, {'author': Value(literal:'A001104747')}, {'author': Value(literal:'A001104768')}, {'author': Value(literal:'A001106749')}, {'author': Value(literal:'A000214050')}, {'author': Value(literal:'A001195878')}, {'author': Value(literal:'A000227175')}, {'author': Value(literal:'A000011112')}, {'author': Value(literal:'A000045771')}, {'author': Value(literal:'A000000023')}, {'author': Value(literal:'A000000223')}, {'author': Value(literal:'A000165064')}, {'author': Value(literal:'A000000530')}, {'author': Value(literal:'A000251322')}, {'author': Value(literal:'A000019945')}, {'author': Value(literal:'A000005680')}, {'author': Value(literal:'A000001848')}, {'author': Value(literal:'A000032029')}, {'author': Value(literal:'A000477420')}, {'author': Value(literal:'A000017998')}, {'author': Value(literal:'A000003090')}, {'author': Value(literal:'A000022492')}, {'author': Value(literal:'A000615497')}, {'author': Value(literal:'A000232108')}, {'author': Value(literal:'A000002416')}, {'author': Value(literal:'A000032725')}, {'author': Value(literal:'A000371927')}, {'author': Value(literal:'A000215039')}, {'author': Value(literal:'A000156298')}, {'author': Value(literal:'A000028160')}, {'author': Value(literal:'A000621472')}, {'author': Value(literal:'A000000207')}, {'author': Value(literal:'A000000416')}, {'author': Value(literal:'A000003296')}, {'author': Value(literal:'A000003485')}, {'author': Value(literal:'A000005635')}, {'author': Value(literal:'A000646693')}, {'author': Value(literal:'A000693659')}, {'author': Value(literal:'A000245878')}, {'author': Value(literal:'A000000499')}, {'author': Value(literal:'A001121627')}, {'author': Value(literal:'A000004804')}, {'author': Value(literal:'A000639386')}, {'author': Value(literal:'A000005623')}, {'author': Value(literal:'A000000049')}, {'author': Value(literal:'A000023226')}, {'author': Value(literal:'A000074389')}, {'author': Value(literal:'A000102955')}, {'author': Value(literal:'A000033505')}, {'author': Value(literal:'A000063882')}, {'author': Value(literal:'A000452236')}, {'author': Value(literal:'A000240056')}, {'author': Value(literal:'A000014495')}, {'author': Value(literal:'A000091798')}, {'author': Value(literal:'A000066539')}, {'author': Value(literal:'A000035309')}, {'author': Value(literal:'A000000266')}, {'author': Value(literal:'A000275276')}, {'author': Value(literal:'A000032291')}, {'author': Value(literal:'A000230095')}, {'author': Value(literal:'A000049224')}, {'author': Value(literal:'A000000106')}, {'author': Value(literal:'A000675580')}, {'author': Value(literal:'A000009076')}, {'author': Value(literal:'A000003255')}, {'author': Value(literal:'A000081797')}, {'author': Value(literal:'A000028994')}, {'author': Value(literal:'A000003155')}, {'author': Value(literal:'A000052396')}, {'author': Value(literal:'A000002664')}, {'author': Value(literal:'A000052882')}, {'author': Value(literal:'A000686446')}, {'author': Value(literal:'A000067785')}, {'author': Value(literal:'A000241938')}, {'author': Value(literal:'A000069155')}, {'author': Value(literal:'A000095231')}, {'author': Value(literal:'A000007189')}, {'author': Value(literal:'A000011998')}, {'author': Value(literal:'A000000700')}, {'author': Value(literal:'A000002803')}, {'author': Value(literal:'A000032674')}, {'author': Value(literal:'A000464208')}, {'author': Value(literal:'A000000265')}, {'author': Value(literal:'A000499688')}, {'author': Value(literal:'A000240923')}, {'author': Value(literal:'A000001268')}, {'author': Value(literal:'A000030801')}, {'author': Value(literal:'A000717301')}, {'author': Value(literal:'A000003227')}, {'author': Value(literal:'A000000457')}, {'author': Value(literal:'A000002688')}, {'author': Value(literal:'A000066745')}, {'author': Value(literal:'A000761101')}, {'author': Value(literal:'A000042790')}, {'author': Value(literal:'A000002397')}, {'author': Value(literal:'A000793294')}, {'author': Value(literal:'A000667768')}, {'author': Value(literal:'A000000923')}, {'author': Value(literal:'A000000210')}, {'author': Value(literal:'A000052479')}, {'author': Value(literal:'A000737362')}, {'author': Value(literal:'A000025142')}, {'author': Value(literal:'A000174677')}, {'author': Value(literal:'A000314185')}, {'author': Value(literal:'A000218137')}, {'author': Value(literal:'A000039598')}, {'author': Value(literal:'A000078488')}, {'author': Value(literal:'A000082429')}, {'author': Value(literal:'A000004916')}, {'author': Value(literal:'A000285291')}, {'author': Value(literal:'A000054768')}, {'author': Value(literal:'A000009485')}, {'author': Value(literal:'A000000184')}, {'author': Value(literal:'A000069742')}, {'author': Value(literal:'A000078734')}, {'author': Value(literal:'A000913115')}, {'author': Value(literal:'A000265491')}, {'author': Value(literal:'A000471541')}, {'author': Value(literal:'A000074058')}, {'author': Value(literal:'A000395831')}, {'author': Value(literal:'A000061931')}, {'author': Value(literal:'A000915408')}, {'author': Value(literal:'A000019660')}, {'author': Value(literal:'A000237441')}, {'author': Value(literal:'A000921750')}, {'author': Value(literal:'A000006711')}, {'author': Value(literal:'A000901448')}, {'author': Value(literal:'A000944493')}, {'author': Value(literal:'A000329102')}, {'author': Value(literal:'A001113893')}, {'author': Value(literal:'A000770173')}, {'author': Value(literal:'A000048298')}, {'author': Value(literal:'A000900851')}, {'author': Value(literal:'A000002629')}, {'author': Value(literal:'A000033534')}, {'author': Value(literal:'A000038799')}, {'author': Value(literal:'A000017066')}, {'author': Value(literal:'A000977318')}, {'author': Value(literal:'A000000690')}, {'author': Value(literal:'A000042094')}, {'author': Value(literal:'A000040775')}, {'author': Value(literal:'A000002447')}, {'author': Value(literal:'A000002391')}, {'author': Value(literal:'A000007194')}, {'author': Value(literal:'A000092471')}, {'author': Value(literal:'A000008953')}, {'author': Value(literal:'A000814647')}, {'author': Value(literal:'A000232347')}, {'author': Value(literal:'A000006788')}, {'author': Value(literal:'A000744474')}, {'author': Value(literal:'A000016624')}, {'author': Value(literal:'A001053724')}, {'author': Value(literal:'A000230241')}, {'author': Value(literal:'A000006916')}, {'author': Value(literal:'A000030727')}, {'author': Value(literal:'A001158986')}, {'author': Value(literal:'A001112008')}, {'author': Value(literal:'A000005949')}, {'author': Value(literal:'A000012769')}, {'author': Value(literal:'A000210977')}, {'author': Value(literal:'A000013578')}, {'author': Value(literal:'A000210374')}, {'author': Value(literal:'A000881326')}, {'author': Value(literal:'A000051968')}, {'author': Value(literal:'A000382237')}, {'author': Value(literal:'A000009393')}, {'author': Value(literal:'A000090474')}, {'author': Value(literal:'A000162617')}, {'author': Value(literal:'A000487243')}, {'author': Value(literal:'A000406586')}, {'author': Value(literal:'A000016437')}, {'author': Value(literal:'A000015257')}, {'author': Value(literal:'A000027869')}, {'author': Value(literal:'A000954842')}, {'author': Value(literal:'A000257793')}, {'author': Value(literal:'A000472654')}, {'author': Value(literal:'A000009562')}, {'author': Value(literal:'A000075848')}, {'author': Value(literal:'A000000034')}, {'author': Value(literal:'A000029078')}, {'author': Value(literal:'A000000011')}, {'author': Value(literal:'A000054063')}, {'author': Value(literal:'A000020030')}, {'author': Value(literal:'A000035851')}, {'author': Value(literal:'A000000443')}, {'author': Value(literal:'A000090025')}, {'author': Value(literal:'A000469430')}, {'author': Value(literal:'A000011242')}, {'author': Value(literal:'A000053674')}, {'author': Value(literal:'A000001839')}, {'author': Value(literal:'A000082852')}, {'author': Value(literal:'A000063766')}, {'author': Value(literal:'A000050367')}, {'author': Value(literal:'A000029887')}, {'author': Value(literal:'A000000001')}, {'author': Value(literal:'A000009391')}, {'author': Value(literal:'A000093128')}, {'author': Value(literal:'A000888026')}, {'author': Value(literal:'A000802405')}, {'author': Value(literal:'A000124596')}, {'author': Value(literal:'A000438570')}, {'author': Value(literal:'A000000044')}, {'author': Value(literal:'A000006972')}, {'author': Value(literal:'A000000158')}, {'author': Value(literal:'A000276299')}, {'author': Value(literal:'A000913693')}, {'author': Value(literal:'A000008122')}, {'author': Value(literal:'A000002726')}, {'author': Value(literal:'A000087115')}, {'author': Value(literal:'A000060087')}, {'author': Value(literal:'A000417153')}, {'author': Value(literal:'A000000187')}, {'author': Value(literal:'A000096609')}, {'author': Value(literal:'A000049542')}, {'author': Value(literal:'A000019825')}, {'author': Value(literal:'A000001294')}, {'author': Value(literal:'A000414001')}, {'author': Value(literal:'A000023084')}, {'author': Value(literal:'A000038775')}, {'author': Value(literal:'A000000051')}, {'author': Value(literal:'A000018175')}, {'author': Value(literal:'A000066228')}, {'author': Value(literal:'A000011263')}, {'author': Value(literal:'A000003743')}, {'author': Value(literal:'A000006031')}, {'author': Value(literal:'A000002589')}, {'author': Value(literal:'A000058619')}, {'author': Value(literal:'A000328119')}, {'author': Value(literal:'A000077261')}, {'author': Value(literal:'A000091663')}, {'author': Value(literal:'A000968458')}, {'author': Value(literal:'A001204079')}, {'author': Value(literal:'A001239545')}, {'author': Value(literal:'A000054200')}, {'author': Value(literal:'A000820729')}, {'author': Value(literal:'A000907004')}, {'author': Value(literal:'A000000918')}, {'author': Value(literal:'A000003639')}, {'author': Value(literal:'A000004780')}, {'author': Value(literal:'A000017227')}, {'author': Value(literal:'A000020386')}, {'author': Value(literal:'A000497531')}, {'author': Value(literal:'A000023915')}, {'author': Value(literal:'A000087983')}, {'author': Value(literal:'A000013144')}, {'author': Value(literal:'A000000901')}, {'author': Value(literal:'A000081623')}, {'author': Value(literal:'A000069102')}, {'author': Value(literal:'A000858637')}, {'author': Value(literal:'A000070972')}, {'author': Value(literal:'A000011450')}, {'author': Value(literal:'A000006363')}, {'author': Value(literal:'A000012501')}, {'author': Value(literal:'A000001114')}, {'author': Value(literal:'A000018557')}, {'author': Value(literal:'A000102573')}, {'author': Value(literal:'A000026236')}, {'author': Value(literal:'A000101891')}, {'author': Value(literal:'A000995417')}, {'author': Value(literal:'A000215988')}, {'author': Value(literal:'A000029843')}, {'author': Value(literal:'A000014288')}, {'author': Value(literal:'A000978930')}, {'author': Value(literal:'A000787724')}, {'author': Value(literal:'A000640828')}, {'author': Value(literal:'A000974348')}, {'author': Value(literal:'A000099497')}, {'author': Value(literal:'A000012633')}, {'author': Value(literal:'A001002346')}, {'author': Value(literal:'A000357660')}, {'author': Value(literal:'A000918117')}, {'author': Value(literal:'A000176426')}, {'author': Value(literal:'A000496509')}, {'author': Value(literal:'A000038586')}, {'author': Value(literal:'A000115721')}, {'author': Value(literal:'A000873186')}, {'author': Value(literal:'A000008216')}, {'author': Value(literal:'A000029371')}, {'author': Value(literal:'A000718037')}, {'author': Value(literal:'A000012523')}, {'author': Value(literal:'A000005277')}, {'author': Value(literal:'A000000286')}, {'author': Value(literal:'A000339622')}, {'author': Value(literal:'A000000840')}, {'author': Value(literal:'A000007878')}, {'author': Value(literal:'A000073109')}, {'author': Value(literal:'A000009050')}, {'author': Value(literal:'A000012540')}, {'author': Value(literal:'A000716494')}, {'author': Value(literal:'A001059745')}, {'author': Value(literal:'A000089030')}, {'author': Value(literal:'A001007080')}, {'author': Value(literal:'A000007798')}, {'author': Value(literal:'A000003919')}, {'author': Value(literal:'A000510550')}, {'author': Value(literal:'A000147389')}, {'author': Value(literal:'A000008077')}, {'author': Value(literal:'A000113686')}, {'author': Value(literal:'A000015839')}, {'author': Value(literal:'A000590028')}, {'author': Value(literal:'A000622032')}, {'author': Value(literal:'A001022467')}, {'author': Value(literal:'A000051650')}, {'author': Value(literal:'A000002302')}, {'author': Value(literal:'A000084018')}, {'author': Value(literal:'A000001116')}, {'author': Value(literal:'A000597656')}, {'author': Value(literal:'A000039823')}, {'author': Value(literal:'A000010586')}, {'author': Value(literal:'A000111067')}, {'author': Value(literal:'A000044883')}, {'author': Value(literal:'A000031418')}, {'author': Value(literal:'A000074636')}, {'author': Value(literal:'A000179909')}, {'author': Value(literal:'A000001447')}, {'author': Value(literal:'A000002798')}, {'author': Value(literal:'A000000651')}, {'author': Value(literal:'A000804909')}, {'author': Value(literal:'A000109992')}, {'author': Value(literal:'A000008417')}, {'author': Value(literal:'A000009316')}, {'author': Value(literal:'A000819876')}, {'author': Value(literal:'A000002616')}, {'author': Value(literal:'A001126927')}, {'author': Value(literal:'A001239150')}, {'author': Value(literal:'A000369612')}, {'author': Value(literal:'A000015078')}, {'author': Value(literal:'A000004899')}, {'author': Value(literal:'A001014822')}, {'author': Value(literal:'A001040211')}, {'author': Value(literal:'A000026506')}, {'author': Value(literal:'A000002488')}, {'author': Value(literal:'A000041637')}, {'author': Value(literal:'A000025083')}, {'author': Value(literal:'A000450777')}, {'author': Value(literal:'A000012645')}, {'author': Value(literal:'A000005461')}, {'author': Value(literal:'A000076420')}, {'author': Value(literal:'A000289676')}, {'author': Value(literal:'A000197465')}, {'author': Value(literal:'A000046907')}, {'author': Value(literal:'A000005290')}, {'author': Value(literal:'A000105463')}, {'author': Value(literal:'A000040318')}, {'author': Value(literal:'A000000302')}, {'author': Value(literal:'A000029000')}, {'author': Value(literal:'A000625363')}, {'author': Value(literal:'A000063885')}, {'author': Value(literal:'A001118200')}, {'author': Value(literal:'A001080612')}, {'author': Value(literal:'A000045621')}, {'author': Value(literal:'A001184017')}, {'author': Value(literal:'A001183895')}, {'author': Value(literal:'A000220950')}, {'author': Value(literal:'A000022321')}, {'author': Value(literal:'A000038116')}, {'author': Value(literal:'A000485955')}, {'author': Value(literal:'A000110241')}, {'author': Value(literal:'A000376009')}, {'author': Value(literal:'A000105334')}, {'author': Value(literal:'A000033073')}, {'author': Value(literal:'A000008303')}, {'author': Value(literal:'A000012548')}, {'author': Value(literal:'A000017327')}, {'author': Value(literal:'A000000236')}]	1	0	0			
438	438	es	¿Quién es el autor de Scraped Palms?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Scraped Palms"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000039300')}]	438	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién es el autor de Feathers, Paper Football, and Spiked Punch?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Feathers, Paper Football, and Spiked Punch"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de Triptych - Ron?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Triptych - Ron"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Obsidian and the Wizarding World?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Obsidian and the Wizarding World"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién es el autor de Scraped Palms?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Scraped Palms"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000039300')}]	1	0	0			
439	439	es	¿Quién es el autor de Hearts of painted Black Part 2: The Forgotten Echo?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Hearts of painted Black Part 2: The Forgotten Echo"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000054006')}]	439	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién escribió Obsidian and the Wizarding World?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Obsidian and the Wizarding World"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de Peace?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Peace"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió [podfic] Things We Wish For by Avioleta?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[podfic] Things We Wish For by Avioleta"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién es el autor de Hearts of painted Black Part 2: The Forgotten Echo?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Hearts of painted Black Part 2: The Forgotten Echo"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000054006')}]	1	0	0			
440	440	es	¿Quién es el autor de You're Alive[so alive...]?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""You're Alive[so alive...]"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000264390')}]	440	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién es el autor de [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Until you came along?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Until you came along"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de ghosting you?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""ghosting you"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién es el autor de You're Alive[so alive...]?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""You're Alive[so alive...]"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000264390')}]	1	0	0			
441	441	es	¿Quién es el autor de Feathers, Paper Football, and Spiked Punch?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Feathers, Paper Football, and Spiked Punch"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000291092')}]	441	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién es el autor de Scraped Palms?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Scraped Palms"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Obsidian and the Wizarding World?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Obsidian and the Wizarding World"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de Triptych - Ron?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Triptych - Ron"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién es el autor de Feathers, Paper Football, and Spiked Punch?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""Feathers, Paper Football, and Spiked Punch"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000291092')}]	1	0	0			
443	443	es	¿A qué colecciones pertenece __ _________ ___ ____?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""__ _________ ___ ____"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	443	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué colecciones pertenece Untameable?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Untameable"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece Silver Sin?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Silver Sin"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""[[story]]"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: ¿A qué colecciones pertenece __ _________ ___ ____?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""__ _________ ___ ____"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'None')}]	1	0	0			
444	444	es	¿A qué colecciones pertenece Untameable?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Untameable"" . ?story golem:collections ?collections . }"	"[{'collections': Value(literal:""Alternative Universes of Fandoms I enjoy., Ashes' Library, Collection of treasures that I've cried river if it ever got delete :)), Fics so good I want to throw my chair out the window, Identity Crisis, Long Fics to Binge, Mo Dao Zu Shi, Reincarnation and Transmigration, Storycatchers' cultivation stories, System, The Witch's Woods, alternate Universe Harry Potter, ______ _______, __ONLY THE BEST__"")}, {'collections': Value(literal:'Best AUs')}, {'collections': Value(literal:'None')}, {'collections': Value(literal:'Humans Are Space Orcs')}, {'collections': Value(literal:'Wrecursive Fanworks')}, {'collections': Value(literal:'Top 20 Ereri Fics of All Time')}]"	444	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué colecciones pertenece __ _________ ___ ____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""__ _________ ___ ____"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece Planes, Trains, and Automobiles?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Planes, Trains, and Automobiles"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""[[story]]"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: ¿A qué colecciones pertenece Untameable?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
  ?story golem:title ""Untameable"" . 
  ?story golem:collections ?collections . 
}
"	"[{'collections': Value(literal:""Alternative Universes of Fandoms I enjoy., Ashes' Library, Collection of treasures that I've cried river if it ever got delete :)), Fics so good I want to throw my chair out the window, Identity Crisis, Long Fics to Binge, Mo Dao Zu Shi, Reincarnation and Transmigration, Storycatchers' cultivation stories, System, The Witch's Woods, alternate Universe Harry Potter, ______ _______, __ONLY THE BEST__"")}, {'collections': Value(literal:'Best AUs')}, {'collections': Value(literal:'None')}, {'collections': Value(literal:'Humans Are Space Orcs')}, {'collections': Value(literal:'Wrecursive Fanworks')}, {'collections': Value(literal:'Top 20 Ereri Fics of All Time')}]"	1	0	0			
445	445	es	¿A qué colecciones pertenece Planes, Trains, and Automobiles?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Planes, Trains, and Automobiles"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}, {'collections': Value(literal:'852 Prospect Archive')}]	445	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué colecciones pertenece Untameable?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Untameable"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece Building Bridges (and Snowmen)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Building Bridges (and Snowmen)"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece __ _________ ___ ____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""__ _________ ___ ____"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: ¿A qué colecciones pertenece Planes, Trains, and Automobiles?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""Planes, Trains, and Automobiles"" . 
?story golem:collections ?collections . }
"	[{'collections': Value(literal:'None')}, {'collections': Value(literal:'852 Prospect Archive')}]	1	0	0			
446	446	es	¿A qué colecciones pertenece Their Little Girl?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Their Little Girl"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	446	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué colecciones pertenece Untameable?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Untameable"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""[[story]]"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿Qué palabras clave tiene Fan Girl?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT  (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords ) WHERE {  ?story golem:title ""Fan Girl"" . ?story golem:keyword ?keyword . }
    </SPARQL>

    ###
    

Question: ¿A qué colecciones pertenece Their Little Girl?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""Their Little Girl"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'None')}]	1	0	0			
447	447	es	¿A qué colecciones pertenece We look like we feel?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""We look like we feel"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	447	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué colecciones pertenece I can't help but love you?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""I can't help but love you"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió learnt what love means together?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""learnt what love means together"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Cuál es el MSTTR de you're actually really soft like this?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?msttr  WHERE { ?story golem:title ""you're actually really soft like this"" . ?story golem:MSTTR ?msttr . }
    </SPARQL>

    ###
    

Question: ¿A qué colecciones pertenece We look like we feel?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""We look like we feel"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'None')}]	1	0	0			
448	448	es	¿A qué colecciones pertenece Silver Sin?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Silver Sin"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	448	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué colecciones pertenece __ _________ ___ ____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""__ _________ ___ ____"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece Untameable?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Untameable"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece Building Bridges (and Snowmen)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Building Bridges (and Snowmen)"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: ¿A qué colecciones pertenece Silver Sin?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""Silver Sin"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'None')}]	1	0	0			
449	449	es	¿A qué colecciones pertenece Tom Riddle, Ghost?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Tom Riddle, Ghost"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	449	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué personajes aparecen en The Strange Workings of The Riddle House?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""The Strange Workings of The Riddle House"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como Character Turned Into a Ghost?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Character Turned Into a Ghost"" . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece Puzzle Pieces?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Puzzle Pieces"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: ¿A qué colecciones pertenece Tom Riddle, Ghost?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""Tom Riddle, Ghost"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'None')}]	1	0	0			
450	450	es	¿A qué colecciones pertenece Building Bridges (and Snowmen)?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Building Bridges (and Snowmen)"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	450	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué colecciones pertenece Planes, Trains, and Automobiles?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Planes, Trains, and Automobiles"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece Untameable?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Untameable"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿De qué trata The Snow Prince?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""The Snow Prince"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: ¿A qué colecciones pertenece Building Bridges (and Snowmen)?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""Building Bridges (and Snowmen)"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'None')}]	1	0	0			
451	451	es	¿A qué colecciones pertenece Sleeping Beauty - Dark!Severus Snape x Reader?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Sleeping Beauty - Dark!Severus Snape x Reader"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	451	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Dónde está publicada In The Dark?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""In The Dark"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece Lucid Dreaming?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Lucid Dreaming"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene Harriet Potter & the Stray Cat?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Harriet Potter & the Stray Cat"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

Question: ¿A qué colecciones pertenece Sleeping Beauty - Dark!Severus Snape x Reader?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collection WHERE { 
  ?story golem:title ""Sleeping Beauty - Dark!Severus Snape x Reader"" . 
  ?story golem:collections ?collection . 
}
"	[{'collection': Value(literal:'None')}]	0	1	1	Evaluation method error	Different var name	
452	452	es	¿A qué colecciones pertenece I can't help but love you?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""I can't help but love you"" . ?story golem:collections ?collections . }"	[{'collections': Value(literal:'None')}]	452	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién escribió learnt what love means together?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""learnt what love means together"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia I will carry you, always?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""I will carry you, always"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece We look like we feel?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""We look like we feel"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: ¿A qué colecciones pertenece I can't help but love you?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?collections WHERE { 
?story golem:title ""I can't help but love you"" . 
?story golem:collections ?collections . 
}
"	[{'collections': Value(literal:'None')}]	1	0	0			
454	454	es	¿Qué personajes aparecen en Bring Me to Life?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Bring Me to Life"" . ?story golem:characters ?characters . }"	"[{'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Original Characters')}, {'characters': Value(literal:'Eric Northman')}, {'characters': Value(literal:'Bill Compton')}, {'characters': Value(literal:'Sookie Stackhouse')}, {'characters': Value(literal:'Pam Swynford De Beaufort')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Minerva McGonagall')}, {'characters': Value(literal:'Original Male Character(s)')}, {'characters': Value(literal:'Tom Riddle')}, {'characters': Value(literal:'Kingsley Shacklebolt')}, {'characters': Value(literal:'Moaning Myrtle')}, {'characters': Value(literal:'Crowley (Good Omens)')}, {'characters': Value(literal:'Original Characters')}, {'characters': Value(literal:'Anathema Device')}, {'characters': Value(literal:'Aziraphale (Good Omens)')}, {'characters': Value(literal:'Beelzebub (Good Omens)')}, {'characters': Value(literal:'Brian (Good Omens)')}, {'characters': Value(literal:'Madame Tracy (Good Omens)')}, {'characters': Value(literal:'Newton Pulsifer')}, {'characters': Value(literal:'Pepper (Good Omens)')}, {'characters': Value(literal:'Sergeant Shadwell (Good Omens)')}, {'characters': Value(literal:'Wensleydale (Good Omens)')}, {'characters': Value(literal:'Hastur (Good Omens)')}, {'characters': Value(literal:'Ligur (Good Omens)')}, {'characters': Value(literal:'Dagon (Good Omens)')}, {'characters': Value(literal:'Adam (Good Omens)')}, {'characters': Value(literal:'Warlock (Good Omens)')}, {'characters': Value(literal:'Original Female Character(s)')}, {'characters': Value(literal:'Karl Heisenberg')}, {'characters': Value(literal:'Bill Weasley')}, {'characters': Value(literal:'Ginny Weasley')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Molly Weasley')}, {'characters': Value(literal:'Aksel Ackerman')}, {'characters': Value(literal:'Samantha Walker')}, {'characters': Value(literal:'Victoria Moore | Katarina Ackerman')}, {'characters': Value(literal:'Original Characters')}, {'characters': Value(literal:'Emma Swan')}, {'characters': Value(literal:'Captain Hook | Killian Jones')}, {'characters': Value(literal:'Jaime Lannister')}, {'characters': Value(literal:'Jon Snow')}, {'characters': Value(literal:'Tyrion Lannister')}, {'characters': Value(literal:'Sansa Stark')}, {'characters': Value(literal:'Daenerys Targaryen')}, {'characters': Value(literal:'Brienne of Tarth')}, {'characters': Value(literal:'Bronn (ASoIaF)')}, {'characters': Value(literal:'Podrick Payne')}, {'characters': Value(literal:'Tormund Giantsbane')}, {'characters': Value(literal:'Kim Jungwoo (NCT)')}, {'characters': Value(literal:'Mark Lee (NCT)')}, {'characters': Value(literal:'Wong Yuk Hei | Lucas')}, {'characters': Value(literal:'Kim Dongyoung | Doyoung')}, {'characters': Value(literal:'Lee Taeyong')}, {'characters': Value(literal:'Moon Taeil')}, {'characters': Value(literal:'Ji_ng Chéng | Ji_ng W_nyín')}, {'characters': Value(literal:'Lán Huàn | Lán X_chén')}, {'characters': Value(literal:'Lán Zhàn | Lán Wàngj_')}, {'characters': Value(literal:'Wèi Y_ng | Wèi Wúxiàn')}, {'characters': Value(literal:'Mèng Yáo | J_n Gu_ngyáo')}, {'characters': Value(literal:'W_n Níng | W_n Qiónglín')}, {'characters': Value(literal:'Niè Huáis_ng')}, {'characters': Value(literal:'Niè Míngjué')}, {'characters': Value(literal:'J_n Z_xu_n')}, {'characters': Value(literal:'Ji_ng Yànlí')}, {'characters': Value(literal:'W_n Qíng')}, {'characters': Value(literal:'Xi_o X_ngchén')}, {'characters': Value(literal:'Xu_ Yáng | Xu_ Chéngm_i')}, {'characters': Value(literal:'Mèng Yáo | J_n Gu_ngyáo')}, {'characters': Value(literal:'Sòng Lán | Sòng Z_ch_n')}, {'characters': Value(literal:'Diego Brando')}, {'characters': Value(literal:'Dio Brando')}, {'characters': Value(literal:'Giorno Giovanna')}, {'characters': Value(literal:'Jonathan Joestar')}, {'characters': Value(literal:""Ba'al (SG-1)"")}, {'characters': Value(literal:""Ba'al's Host"")}, {'characters': Value(literal:'Jonathan | H2ODelirious')}, {'characters': Value(literal:'Evan Fong')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Severus Snape')}, {'characters': Value(literal:'Aerith Gainsborough')}, {'characters': Value(literal:'Angeal Hewley')}, {'characters': Value(literal:'Cloud Strife')}, {'characters': Value(literal:'Genesis Rhapsodos')}, {'characters': Value(literal:'Tifa Lockhart')}, {'characters': Value(literal:'Zack Fair')}, {'characters': Value(literal:'Sephiroth')}, {'characters': Value(literal:'Barret Wallace')}, {'characters': Value(literal:'Vincent Valentine')}, {'characters': Value(literal:'Yuffie Kisaragi')}, {'characters': Value(literal:'Cid Highwind')}, {'characters': Value(literal:'Denzel')}, {'characters': Value(literal:'Red XIII')}, {'characters': Value(literal:'Olivia Benson')}, {'characters': Value(literal:'Elliot Stabler')}, {'characters': Value(literal:'John Munch')}, {'characters': Value(literal:'Donald Cragen')}, {'characters': Value(literal:'Alexandra Cabot (L&O: SVU)')}, {'characters': Value(literal:'Casey Novak')}, {'characters': Value(literal:'Finn Tutuola')}, {'characters': Value(literal:'John Watson')}, {'characters': Value(literal:'Sherlock Holmes')}, {'characters': Value(literal:'Connor (Detroit: Become Human)')}, {'characters': Value(literal:'CyberLife Tower Connor | RK800-60')}, {'characters': Value(literal:'Upgraded Connor | RK900')}, {'characters': Value(literal:'Abby Griffin')}, {'characters': Value(literal:'Clarke Griffin')}, {'characters': Value(literal:'Marcus Kane')}, {'characters': Value(literal:'Kakyoin Noriaki')}, {'characters': Value(literal:'Kujo Jotaro')}, {'characters': Value(literal:'Mentions of DIO')}, {'characters': Value(literal:'Slight appearance of Joseph Joestar')}, {'characters': Value(literal:'Clark Kent')}, {'characters': Value(literal:'Jonathan Kent')}, {'characters': Value(literal:'Lana Lang')}, {'characters': Value(literal:'Lois Lane')}, {'characters': Value(literal:'Martha Kent')}, {'characters': Value(literal:'Jor-El')}, {'characters': Value(literal:'Chloe Sullivan')}, {'characters': Value(literal:'Milton Fine')}, {'characters': Value(literal:'Obi-Wan Kenobi')}, {'characters': Value(literal:'Padmé Amidala')}, {'characters': Value(literal:'(mentioned)')}, {'characters': Value(literal:'Konnan (Professional Wrestling)')}, {'characters': Value(literal:'Ricochet | Prince Puma')}, {'characters': Value(literal:'Vampiro (Professional Wrestling)')}, {'characters': Value(literal:'Wolverine')}, {'characters': Value(literal:'Jade Leopard')}, {'characters': Value(literal:'Silver Cheetah')}, {'characters': Value(literal:'Castiel')}, {'characters': Value(literal:'Dean Winchester')}, {'characters': Value(literal:'Gabriel (Supernatural)')}, {'characters': Value(literal:'Jack Kline')}, {'characters': Value(literal:'Sam Winchester')}, {'characters': Value(literal:'Balthazar (Supernatural)')}, {'characters': Value(literal:'Eileen Leahy')}, {'characters': Value(literal:'Amara (Supernatural)')}, {'characters': Value(literal:'Castiel')}, {'characters': Value(literal:'Dean Winchester')}, {'characters': Value(literal:'Gabriel (Supernatural)')}, {'characters': Value(literal:'Sam Winchester')}, {'characters': Value(literal:'Bruce Banner')}, {'characters': Value(literal:'Clint Barton')}, {'characters': Value(literal:'James ""Bucky"" Barnes')}, {'characters': Value(literal:'James ""Rhodey"" Rhodes')}, {'characters': Value(literal:'Natasha Romanov (Marvel)')}, {'characters': Value(literal:'Steve Rogers')}, {'characters': Value(literal:'Thor (Marvel)')}, {'characters': Value(literal:'Tony Stark')}, {'characters': Value(literal:'Original Characters')}, {'characters': Value(literal:'Original Female Character(s)')}, {'characters': Value(literal:'James Patrick March')}, {'characters': Value(literal:'Tristan Duffy')}, {'characters': Value(literal:'Will Drake')}, {'characters': Value(literal:'Jimmy Darling')}, {'characters': Value(literal:'Dandy Mott')}, {'characters': Value(literal:'Elsa Mars')}, {'characters': Value(literal:'Gloria Mott')}, {'characters': Value(literal:'Countess Elizabeth Johnson')}, {'characters': Value(literal:'Liz Taylor (American Horror Story)')}, {'characters': Value(literal:'Donovan (American Horror Story)')}, {'characters': Value(literal:'Iris (American Horror Story)')}, {'characters': Value(literal:'Finn Wittrock')}, {'characters': Value(literal:'Sirius Black')}, {'characters': Value(literal:'Fabian Prewett')}, {'characters': Value(literal:'Josie Saltzman')}, {'characters': Value(literal:'Original Female Character(s)')}, {'characters': Value(literal:'Rebekah Mikaelson')}, {'characters': Value(literal:'Hope Mikaelson')}, {'characters': Value(literal:'Lizzie Saltzman')}, {'characters': Value(literal:'Caroline Forbes')}, {'characters': Value(literal:'Clark Kent')}, {'characters': Value(literal:'Lois Lane')}, {'characters': Value(literal:'Perry White')}, {'characters': Value(literal:'James ""Jimmy"" Olsen')}, {'characters': Value(literal:'Aomine Daiki')}, {'characters': Value(literal:'Kise Ryouta')}, {'characters': Value(literal:'Kuroko Tetsuya')}, {'characters': Value(literal:'Kagami Taiga')}, {'characters': Value(literal:'Momoi Satsuki')}, {'characters': Value(literal:'Kara Danvers')}, {'characters': Value(literal:'Mon-El (Supergirl TV 2015)')}, {'characters': Value(literal:'Winn Schott Jr.')}, {'characters': Value(literal:'Leslie Willis')}, {'characters': Value(literal:'Lar Gand (Supergirl TV 2015)')}, {'characters': Value(literal:""Hank Henshaw | J'onn J'onzz"")}, {'characters': Value(literal:'Eve Tessmacher')}, {'characters': Value(literal:'Rhea Gand')}, {'characters': Value(literal:'Klaus Hargreeves')}, {'characters': Value(literal:'Diego Hargreeves')}, {'characters': Value(literal:'Number Five | The Boy (Umbrella Academy)')}, {'characters': Value(literal:'Allison Hargreeves')}, {'characters': Value(literal:'Ben Hargreeves')}, {'characters': Value(literal:'Luther Hargreeves')}, {'characters': Value(literal:'Vanya Hargreeves')}, {'characters': Value(literal:'Original Female Character')}, {'characters': Value(literal:'Original Male Character')}, {'characters': Value(literal:'AJ McLean')}, {'characters': Value(literal:'Brian Littrell')}, {'characters': Value(literal:'Howie Dorough')}, {'characters': Value(literal:'Kevin Richardson')}, {'characters': Value(literal:'Nick Carter')}, {'characters': Value(literal:'Lauren Carter')}, {'characters': Value(literal:'Kozume Kenma')}, {'characters': Value(literal:'Kuroo Tetsurou')}, {'characters': Value(literal:'Daishou Suguru')}, {'characters': Value(literal:'Erwin Smith')}, {'characters': Value(literal:'Hange Zoë')}, {'characters': Value(literal:'Levi (Shingeki no Kyojin)')}, {'characters': Value(literal:'Mike Zacharias')}, {'characters': Value(literal:'Moblit Berner')}, {'characters': Value(literal:'Oluo Bozado')}, {'characters': Value(literal:'Petra Ral')}, {'characters': Value(literal:'Nanaba (Shingeki no Kyojin)')}, {'characters': Value(literal:'Zeke (Shingeki no Kyojin)')}, {'characters': Value(literal:'Darius Zackly')}, {'characters': Value(literal:'Dot Pixis')}, {'characters': Value(literal:'104th Training Corps')}, {'characters': Value(literal:'Gunther Schultz')}, {'characters': Value(literal:'Survey Corps (Shingeki no Kyojin)')}, {'characters': Value(literal:'Gelgar (Shingeki no Kyojin)')}]"	454	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué personajes aparecen en [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en Magician?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Magician"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en A Glimpse of Paradise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""A Glimpse of Paradise"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿Qué personajes aparecen en Bring Me to Life?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?characters WHERE { 
    ?story golem:title ""Bring Me to Life"" . 
    ?story golem:characters ?characters . 
}
"	"[{'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Original Characters')}, {'characters': Value(literal:'Eric Northman')}, {'characters': Value(literal:'Bill Compton')}, {'characters': Value(literal:'Sookie Stackhouse')}, {'characters': Value(literal:'Pam Swynford De Beaufort')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Minerva McGonagall')}, {'characters': Value(literal:'Original Male Character(s)')}, {'characters': Value(literal:'Tom Riddle')}, {'characters': Value(literal:'Kingsley Shacklebolt')}, {'characters': Value(literal:'Moaning Myrtle')}, {'characters': Value(literal:'Crowley (Good Omens)')}, {'characters': Value(literal:'Original Characters')}, {'characters': Value(literal:'Anathema Device')}, {'characters': Value(literal:'Aziraphale (Good Omens)')}, {'characters': Value(literal:'Beelzebub (Good Omens)')}, {'characters': Value(literal:'Brian (Good Omens)')}, {'characters': Value(literal:'Madame Tracy (Good Omens)')}, {'characters': Value(literal:'Newton Pulsifer')}, {'characters': Value(literal:'Pepper (Good Omens)')}, {'characters': Value(literal:'Sergeant Shadwell (Good Omens)')}, {'characters': Value(literal:'Wensleydale (Good Omens)')}, {'characters': Value(literal:'Hastur (Good Omens)')}, {'characters': Value(literal:'Ligur (Good Omens)')}, {'characters': Value(literal:'Dagon (Good Omens)')}, {'characters': Value(literal:'Adam (Good Omens)')}, {'characters': Value(literal:'Warlock (Good Omens)')}, {'characters': Value(literal:'Original Female Character(s)')}, {'characters': Value(literal:'Karl Heisenberg')}, {'characters': Value(literal:'Bill Weasley')}, {'characters': Value(literal:'Ginny Weasley')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Molly Weasley')}, {'characters': Value(literal:'Aksel Ackerman')}, {'characters': Value(literal:'Samantha Walker')}, {'characters': Value(literal:'Victoria Moore | Katarina Ackerman')}, {'characters': Value(literal:'Original Characters')}, {'characters': Value(literal:'Emma Swan')}, {'characters': Value(literal:'Captain Hook | Killian Jones')}, {'characters': Value(literal:'Jaime Lannister')}, {'characters': Value(literal:'Jon Snow')}, {'characters': Value(literal:'Tyrion Lannister')}, {'characters': Value(literal:'Sansa Stark')}, {'characters': Value(literal:'Daenerys Targaryen')}, {'characters': Value(literal:'Brienne of Tarth')}, {'characters': Value(literal:'Bronn (ASoIaF)')}, {'characters': Value(literal:'Podrick Payne')}, {'characters': Value(literal:'Tormund Giantsbane')}, {'characters': Value(literal:'Kim Jungwoo (NCT)')}, {'characters': Value(literal:'Mark Lee (NCT)')}, {'characters': Value(literal:'Wong Yuk Hei | Lucas')}, {'characters': Value(literal:'Kim Dongyoung | Doyoung')}, {'characters': Value(literal:'Lee Taeyong')}, {'characters': Value(literal:'Moon Taeil')}, {'characters': Value(literal:'Ji_ng Chéng | Ji_ng W_nyín')}, {'characters': Value(literal:'Lán Huàn | Lán X_chén')}, {'characters': Value(literal:'Lán Zhàn | Lán Wàngj_')}, {'characters': Value(literal:'Wèi Y_ng | Wèi Wúxiàn')}, {'characters': Value(literal:'Mèng Yáo | J_n Gu_ngyáo')}, {'characters': Value(literal:'W_n Níng | W_n Qiónglín')}, {'characters': Value(literal:'Niè Huáis_ng')}, {'characters': Value(literal:'Niè Míngjué')}, {'characters': Value(literal:'J_n Z_xu_n')}, {'characters': Value(literal:'Ji_ng Yànlí')}, {'characters': Value(literal:'W_n Qíng')}, {'characters': Value(literal:'Xi_o X_ngchén')}, {'characters': Value(literal:'Xu_ Yáng | Xu_ Chéngm_i')}, {'characters': Value(literal:'Mèng Yáo | J_n Gu_ngyáo')}, {'characters': Value(literal:'Sòng Lán | Sòng Z_ch_n')}, {'characters': Value(literal:'Diego Brando')}, {'characters': Value(literal:'Dio Brando')}, {'characters': Value(literal:'Giorno Giovanna')}, {'characters': Value(literal:'Jonathan Joestar')}, {'characters': Value(literal:""Ba'al (SG-1)"")}, {'characters': Value(literal:""Ba'al's Host"")}, {'characters': Value(literal:'Jonathan | H2ODelirious')}, {'characters': Value(literal:'Evan Fong')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Severus Snape')}, {'characters': Value(literal:'Aerith Gainsborough')}, {'characters': Value(literal:'Angeal Hewley')}, {'characters': Value(literal:'Cloud Strife')}, {'characters': Value(literal:'Genesis Rhapsodos')}, {'characters': Value(literal:'Tifa Lockhart')}, {'characters': Value(literal:'Zack Fair')}, {'characters': Value(literal:'Sephiroth')}, {'characters': Value(literal:'Barret Wallace')}, {'characters': Value(literal:'Vincent Valentine')}, {'characters': Value(literal:'Yuffie Kisaragi')}, {'characters': Value(literal:'Cid Highwind')}, {'characters': Value(literal:'Denzel')}, {'characters': Value(literal:'Red XIII')}, {'characters': Value(literal:'Olivia Benson')}, {'characters': Value(literal:'Elliot Stabler')}, {'characters': Value(literal:'John Munch')}, {'characters': Value(literal:'Donald Cragen')}, {'characters': Value(literal:'Alexandra Cabot (L&O: SVU)')}, {'characters': Value(literal:'Casey Novak')}, {'characters': Value(literal:'Finn Tutuola')}, {'characters': Value(literal:'John Watson')}, {'characters': Value(literal:'Sherlock Holmes')}, {'characters': Value(literal:'Connor (Detroit: Become Human)')}, {'characters': Value(literal:'CyberLife Tower Connor | RK800-60')}, {'characters': Value(literal:'Upgraded Connor | RK900')}, {'characters': Value(literal:'Abby Griffin')}, {'characters': Value(literal:'Clarke Griffin')}, {'characters': Value(literal:'Marcus Kane')}, {'characters': Value(literal:'Kakyoin Noriaki')}, {'characters': Value(literal:'Kujo Jotaro')}, {'characters': Value(literal:'Mentions of DIO')}, {'characters': Value(literal:'Slight appearance of Joseph Joestar')}, {'characters': Value(literal:'Clark Kent')}, {'characters': Value(literal:'Jonathan Kent')}, {'characters': Value(literal:'Lana Lang')}, {'characters': Value(literal:'Lois Lane')}, {'characters': Value(literal:'Martha Kent')}, {'characters': Value(literal:'Jor-El')}, {'characters': Value(literal:'Chloe Sullivan')}, {'characters': Value(literal:'Milton Fine')}, {'characters': Value(literal:'Obi-Wan Kenobi')}, {'characters': Value(literal:'Padmé Amidala')}, {'characters': Value(literal:'(mentioned)')}, {'characters': Value(literal:'Konnan (Professional Wrestling)')}, {'characters': Value(literal:'Ricochet | Prince Puma')}, {'characters': Value(literal:'Vampiro (Professional Wrestling)')}, {'characters': Value(literal:'Wolverine')}, {'characters': Value(literal:'Jade Leopard')}, {'characters': Value(literal:'Silver Cheetah')}, {'characters': Value(literal:'Castiel')}, {'characters': Value(literal:'Dean Winchester')}, {'characters': Value(literal:'Gabriel (Supernatural)')}, {'characters': Value(literal:'Jack Kline')}, {'characters': Value(literal:'Sam Winchester')}, {'characters': Value(literal:'Balthazar (Supernatural)')}, {'characters': Value(literal:'Eileen Leahy')}, {'characters': Value(literal:'Amara (Supernatural)')}, {'characters': Value(literal:'Castiel')}, {'characters': Value(literal:'Dean Winchester')}, {'characters': Value(literal:'Gabriel (Supernatural)')}, {'characters': Value(literal:'Sam Winchester')}, {'characters': Value(literal:'Bruce Banner')}, {'characters': Value(literal:'Clint Barton')}, {'characters': Value(literal:'James ""Bucky"" Barnes')}, {'characters': Value(literal:'James ""Rhodey"" Rhodes')}, {'characters': Value(literal:'Natasha Romanov (Marvel)')}, {'characters': Value(literal:'Steve Rogers')}, {'characters': Value(literal:'Thor (Marvel)')}, {'characters': Value(literal:'Tony Stark')}, {'characters': Value(literal:'Original Characters')}, {'characters': Value(literal:'Original Female Character(s)')}, {'characters': Value(literal:'James Patrick March')}, {'characters': Value(literal:'Tristan Duffy')}, {'characters': Value(literal:'Will Drake')}, {'characters': Value(literal:'Jimmy Darling')}, {'characters': Value(literal:'Dandy Mott')}, {'characters': Value(literal:'Elsa Mars')}, {'characters': Value(literal:'Gloria Mott')}, {'characters': Value(literal:'Countess Elizabeth Johnson')}, {'characters': Value(literal:'Liz Taylor (American Horror Story)')}, {'characters': Value(literal:'Donovan (American Horror Story)')}, {'characters': Value(literal:'Iris (American Horror Story)')}, {'characters': Value(literal:'Finn Wittrock')}, {'characters': Value(literal:'Sirius Black')}, {'characters': Value(literal:'Fabian Prewett')}, {'characters': Value(literal:'Josie Saltzman')}, {'characters': Value(literal:'Original Female Character(s)')}, {'characters': Value(literal:'Rebekah Mikaelson')}, {'characters': Value(literal:'Hope Mikaelson')}, {'characters': Value(literal:'Lizzie Saltzman')}, {'characters': Value(literal:'Caroline Forbes')}, {'characters': Value(literal:'Clark Kent')}, {'characters': Value(literal:'Lois Lane')}, {'characters': Value(literal:'Perry White')}, {'characters': Value(literal:'James ""Jimmy"" Olsen')}, {'characters': Value(literal:'Aomine Daiki')}, {'characters': Value(literal:'Kise Ryouta')}, {'characters': Value(literal:'Kuroko Tetsuya')}, {'characters': Value(literal:'Kagami Taiga')}, {'characters': Value(literal:'Momoi Satsuki')}, {'characters': Value(literal:'Kara Danvers')}, {'characters': Value(literal:'Mon-El (Supergirl TV 2015)')}, {'characters': Value(literal:'Winn Schott Jr.')}, {'characters': Value(literal:'Leslie Willis')}, {'characters': Value(literal:'Lar Gand (Supergirl TV 2015)')}, {'characters': Value(literal:""Hank Henshaw | J'onn J'onzz"")}, {'characters': Value(literal:'Eve Tessmacher')}, {'characters': Value(literal:'Rhea Gand')}, {'characters': Value(literal:'Klaus Hargreeves')}, {'characters': Value(literal:'Diego Hargreeves')}, {'characters': Value(literal:'Number Five | The Boy (Umbrella Academy)')}, {'characters': Value(literal:'Allison Hargreeves')}, {'characters': Value(literal:'Ben Hargreeves')}, {'characters': Value(literal:'Luther Hargreeves')}, {'characters': Value(literal:'Vanya Hargreeves')}, {'characters': Value(literal:'Original Female Character')}, {'characters': Value(literal:'Original Male Character')}, {'characters': Value(literal:'AJ McLean')}, {'characters': Value(literal:'Brian Littrell')}, {'characters': Value(literal:'Howie Dorough')}, {'characters': Value(literal:'Kevin Richardson')}, {'characters': Value(literal:'Nick Carter')}, {'characters': Value(literal:'Lauren Carter')}, {'characters': Value(literal:'Kozume Kenma')}, {'characters': Value(literal:'Kuroo Tetsurou')}, {'characters': Value(literal:'Daishou Suguru')}, {'characters': Value(literal:'Erwin Smith')}, {'characters': Value(literal:'Hange Zoë')}, {'characters': Value(literal:'Levi (Shingeki no Kyojin)')}, {'characters': Value(literal:'Mike Zacharias')}, {'characters': Value(literal:'Moblit Berner')}, {'characters': Value(literal:'Oluo Bozado')}, {'characters': Value(literal:'Petra Ral')}, {'characters': Value(literal:'Nanaba (Shingeki no Kyojin)')}, {'characters': Value(literal:'Zeke (Shingeki no Kyojin)')}, {'characters': Value(literal:'Darius Zackly')}, {'characters': Value(literal:'Dot Pixis')}, {'characters': Value(literal:'104th Training Corps')}, {'characters': Value(literal:'Gunther Schultz')}, {'characters': Value(literal:'Survey Corps (Shingeki no Kyojin)')}, {'characters': Value(literal:'Gelgar (Shingeki no Kyojin)')}]"	1	0	0			
455	455	es	¿Qué personajes aparecen en A Hat For Alice?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""A Hat For Alice"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Luna Lovegood')}]	455	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos capítulos tiene A Hat For Alice?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""A Hat For Alice"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en And The Saints?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""And The Saints"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en A Glimpse of Paradise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""A Glimpse of Paradise"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿Qué personajes aparecen en A Hat For Alice?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?characters WHERE { 
  ?story golem:title ""A Hat For Alice"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Luna Lovegood')}]	1	0	0			
456	456	es	¿Qué personajes aparecen en Echoes in the Glass?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Echoes in the Glass"" . ?story golem:characters ?characters . }"	"[{'characters': Value(literal:'Albus Dumbledore')}, {'characters': Value(literal:'Draco Malfoy')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Ron Weasley')}, {'characters': Value(literal:'Tom Riddle | Voldemort')}, {'characters': Value(literal:'Hedwig (Harry Potter)')}, {'characters': Value(literal:""Draco Malfoy's Owl"")}, {'characters': Value(literal:'Augustus Rookwood')}, {'characters': Value(literal:'Pius Thicknesse')}]"	456	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué personajes aparecen en The Strange Workings of The Riddle House?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""The Strange Workings of The Riddle House"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en And The Saints?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""And The Saints"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en A Glimpse of Paradise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""A Glimpse of Paradise"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿Qué personajes aparecen en Echoes in the Glass?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?characters WHERE { 
  ?story golem:title ""Echoes in the Glass"" . 
  ?story golem:characters ?characters . 
}
"	"[{'characters': Value(literal:'Albus Dumbledore')}, {'characters': Value(literal:'Draco Malfoy')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Ron Weasley')}, {'characters': Value(literal:'Tom Riddle | Voldemort')}, {'characters': Value(literal:'Hedwig (Harry Potter)')}, {'characters': Value(literal:""Draco Malfoy's Owl"")}, {'characters': Value(literal:'Augustus Rookwood')}, {'characters': Value(literal:'Pius Thicknesse')}]"	1	0	0			
457	457	es	¿Qué personajes aparecen en And The Saints?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""And The Saints"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'James Potter')}, {'characters': Value(literal:'Lily Evans Potter')}, {'characters': Value(literal:'Peter Pettigrew')}, {'characters': Value(literal:'Remus Lupin')}, {'characters': Value(literal:'Severus Snape')}, {'characters': Value(literal:'Sirius Black')}]	457	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué personajes aparecen en A Glimpse of Paradise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""A Glimpse of Paradise"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en The Strange Workings of The Riddle House?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""The Strange Workings of The Riddle House"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en A Hat For Alice?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""A Hat For Alice"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿Qué personajes aparecen en And The Saints?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?characters WHERE { 
  ?story golem:title ""And The Saints"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'James Potter')}, {'characters': Value(literal:'Lily Evans Potter')}, {'characters': Value(literal:'Peter Pettigrew')}, {'characters': Value(literal:'Remus Lupin')}, {'characters': Value(literal:'Severus Snape')}, {'characters': Value(literal:'Sirius Black')}]	1	0	0			
458	458	es	¿Qué personajes aparecen en The Strange Workings of The Riddle House?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""The Strange Workings of The Riddle House"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Ginny Weasley')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Tom Riddle')}]	458	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué personajes aparecen en Magician?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Magician"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece Tom Riddle, Ghost?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Tom Riddle, Ghost"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en Puffskein Hunt?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Puffskein Hunt"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿Qué personajes aparecen en The Strange Workings of The Riddle House?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?characters WHERE { 
  ?story golem:title ""The Strange Workings of The Riddle House"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Ginny Weasley')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Tom Riddle')}]	1	0	0			
459	459	es	¿Qué personajes aparecen en Magician?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Magician"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Harry Dresden')}, {'characters': Value(literal:'Johnny Marcone')}, {'characters': Value(literal:'Rashid the Gatekeeper')}, {'characters': Value(literal:'James Potter')}, {'characters': Value(literal:'Lily Evans Potter')}, {'characters': Value(literal:'Petunia Evans Dursley')}, {'characters': Value(literal:'Vernon Dursley')}, {'characters': Value(literal:'Marge Dursley')}, {'characters': Value(literal:'Original Female Character(s)')}, {'characters': Value(literal:'Lucifer Morningstar (Lucifer TV)')}, {'characters': Value(literal:'Chloe Decker')}, {'characters': Value(literal:'Trixie Decker')}, {'characters': Value(literal:'Taako (The Adventure Zone)')}, {'characters': Value(literal:'Kravitz (The Adventure Zone)')}]	459	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué personajes aparecen en The Strange Workings of The Riddle House?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""The Strange Workings of The Riddle House"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en Naruto of The Wizarding World?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Naruto of The Wizarding World"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿Qué personajes aparecen en Magician?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?characters WHERE { 
  ?story golem:title ""Magician"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Harry Dresden')}, {'characters': Value(literal:'Johnny Marcone')}, {'characters': Value(literal:'Rashid the Gatekeeper')}, {'characters': Value(literal:'James Potter')}, {'characters': Value(literal:'Lily Evans Potter')}, {'characters': Value(literal:'Petunia Evans Dursley')}, {'characters': Value(literal:'Vernon Dursley')}, {'characters': Value(literal:'Marge Dursley')}, {'characters': Value(literal:'Original Female Character(s)')}, {'characters': Value(literal:'Lucifer Morningstar (Lucifer TV)')}, {'characters': Value(literal:'Chloe Decker')}, {'characters': Value(literal:'Trixie Decker')}, {'characters': Value(literal:'Taako (The Adventure Zone)')}, {'characters': Value(literal:'Kravitz (The Adventure Zone)')}]	1	0	0			
460	460	es	¿Qué personajes aparecen en If You Could Be Anywhere?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""If You Could Be Anywhere"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Adrian Pucey')}, {'characters': Value(literal:'Albus Dumbledore')}, {'characters': Value(literal:'Blaise Zabini')}, {'characters': Value(literal:'Cassius Warrington')}, {'characters': Value(literal:'Draco Malfoy')}, {'characters': Value(literal:'Fred Weasley')}, {'characters': Value(literal:'George Weasley')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Neville Longbottom')}, {'characters': Value(literal:'Pansy Parkinson')}, {'characters': Value(literal:'Peter Pettigrew')}, {'characters': Value(literal:'Remus Lupin')}, {'characters': Value(literal:'Ron Weasley')}, {'characters': Value(literal:'Severus Snape')}, {'characters': Value(literal:'Sirius Black')}, {'characters': Value(literal:'Theodore Nott')}, {'characters': Value(literal:'Tom Riddle | Voldemort')}, {'characters': Value(literal:'Daphne Greengrass')}, {'characters': Value(literal:'Tracey Davis (Harry Potter)')}, {'characters': Value(literal:'Craig Roberts')}, {'characters': Value(literal:'Magdalene Roberts')}, {'characters': Value(literal:'Poppy Pomfrey')}, {'characters': Value(literal:'Reader')}, {'characters': Value(literal:'Severus Snape')}, {'characters': Value(literal:'Filius Flitwick')}, {'characters': Value(literal:'Pomona Sprout')}]	460	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué personajes aparecen en [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Se muere algún personaje principal en In The Distance?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""In The Distance"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en A Glimpse of Paradise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""A Glimpse of Paradise"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿Qué personajes aparecen en If You Could Be Anywhere?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?characters WHERE { 
  ?story golem:title ""If You Could Be Anywhere"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Adrian Pucey')}, {'characters': Value(literal:'Albus Dumbledore')}, {'characters': Value(literal:'Blaise Zabini')}, {'characters': Value(literal:'Cassius Warrington')}, {'characters': Value(literal:'Draco Malfoy')}, {'characters': Value(literal:'Fred Weasley')}, {'characters': Value(literal:'George Weasley')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Neville Longbottom')}, {'characters': Value(literal:'Pansy Parkinson')}, {'characters': Value(literal:'Peter Pettigrew')}, {'characters': Value(literal:'Remus Lupin')}, {'characters': Value(literal:'Ron Weasley')}, {'characters': Value(literal:'Severus Snape')}, {'characters': Value(literal:'Sirius Black')}, {'characters': Value(literal:'Theodore Nott')}, {'characters': Value(literal:'Tom Riddle | Voldemort')}, {'characters': Value(literal:'Daphne Greengrass')}, {'characters': Value(literal:'Tracey Davis (Harry Potter)')}, {'characters': Value(literal:'Craig Roberts')}, {'characters': Value(literal:'Magdalene Roberts')}, {'characters': Value(literal:'Poppy Pomfrey')}, {'characters': Value(literal:'Reader')}, {'characters': Value(literal:'Severus Snape')}, {'characters': Value(literal:'Filius Flitwick')}, {'characters': Value(literal:'Pomona Sprout')}]	1	0	0			
461	461	es	¿Qué personajes aparecen en A Glimpse of Paradise?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""A Glimpse of Paradise"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}]	461	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué personajes aparecen en And The Saints?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""And The Saints"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en The Strange Workings of The Riddle House?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""The Strange Workings of The Riddle House"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿Qué personajes aparecen en A Glimpse of Paradise?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?characters WHERE { 
  ?story golem:title ""A Glimpse of Paradise"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}]	1	0	0			
462	462	es	¿Qué personajes aparecen en Puffskein Hunt?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Puffskein Hunt"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Luna Lovegood')}]	462	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué personajes aparecen en The Strange Workings of The Riddle House?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""The Strange Workings of The Riddle House"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en And The Saints?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""And The Saints"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿Qué personajes aparecen en Puffskein Hunt?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?characters WHERE { 
  ?story golem:title ""Puffskein Hunt"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Luna Lovegood')}]	1	0	0			
463	463	es	¿Qué personajes aparecen en Naruto of The Wizarding World?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Naruto of The Wizarding World"" . ?story golem:characters ?characters . }"	[{'characters': Value(literal:'Albus Dumbledore')}, {'characters': Value(literal:'Draco Malfoy')}, {'characters': Value(literal:'Ginny Weasley')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Minerva McGonagall')}, {'characters': Value(literal:'Ron Weasley')}, {'characters': Value(literal:'Sirius Black')}, {'characters': Value(literal:'Tom Riddle | Voldemort')}, {'characters': Value(literal:'Tsunade (Naruto)')}, {'characters': Value(literal:'Uzumaki Naruto')}, {'characters': Value(literal:'Kyuubi | Nine-tails | Kurama')}, {'characters': Value(literal:'Uzumaki Kushina')}, {'characters': Value(literal:'Delphi (Harry Potter)')}, {'characters': Value(literal:'Elizabeth Cooper')}]	463	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué personajes aparecen en Magician?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Magician"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del fandom Inumaki Toge/Original Character(s) - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Inumaki Toge/Original Character(s) - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: ¿Qué personajes aparecen en Naruto of The Wizarding World?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?characters WHERE { 
  ?story golem:title ""Naruto of The Wizarding World"" . 
  ?story golem:characters ?characters . 
}
"	[{'characters': Value(literal:'Albus Dumbledore')}, {'characters': Value(literal:'Draco Malfoy')}, {'characters': Value(literal:'Ginny Weasley')}, {'characters': Value(literal:'Harry Potter')}, {'characters': Value(literal:'Hermione Granger')}, {'characters': Value(literal:'Minerva McGonagall')}, {'characters': Value(literal:'Ron Weasley')}, {'characters': Value(literal:'Sirius Black')}, {'characters': Value(literal:'Tom Riddle | Voldemort')}, {'characters': Value(literal:'Tsunade (Naruto)')}, {'characters': Value(literal:'Uzumaki Naruto')}, {'characters': Value(literal:'Kyuubi | Nine-tails | Kurama')}, {'characters': Value(literal:'Uzumaki Kushina')}, {'characters': Value(literal:'Delphi (Harry Potter)')}, {'characters': Value(literal:'Elizabeth Cooper')}]	1	0	0			
465	465	es	¿A qué serie pertenece Save the last dance for me?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Save the last dance for me"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}, {'series': Value(literal:'Blood and Chocolate - YoI 2018 Valentine [2]')}, {'series': Value(literal:'Save the last dance for me [1]')}, {'series': Value(literal:'A life different than my own [4]')}, {'series': Value(literal:'30 Day OTP Challenge [19]')}]	465	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuándo se publicó Hold Me One More Time?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Hold Me One More Time"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece Moonrise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Moonrise"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece Lucid Dreaming?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Lucid Dreaming"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: ¿A qué serie pertenece Save the last dance for me?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?series WHERE { 
?story golem:title ""Save the last dance for me"" . 
?story golem:series ?series . 
}
"	[{'series': Value(literal:'None')}, {'series': Value(literal:'Blood and Chocolate - YoI 2018 Valentine [2]')}, {'series': Value(literal:'Save the last dance for me [1]')}, {'series': Value(literal:'A life different than my own [4]')}, {'series': Value(literal:'30 Day OTP Challenge [19]')}]	1	0	0			
466	466	es	¿A qué serie pertenece Puzzle Pieces?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Puzzle Pieces"" . ?story golem:series ?series . }"	"[{'series': Value(literal:'What Went Unseen [1]')}, {'series': Value(literal:'None')}, {'series': Value(literal:'Harry Potter Short Stories : 2021 [55]')}, {'series': Value(literal:'Puzzle Peices [1]')}, {'series': Value(literal:'All The Ways Mandy Finds Out [11]')}, {'series': Value(literal:'Kismet [7]')}, {'series': Value(literal:'Alliance? I think you mean Family. [1]')}, {'series': Value(literal:'A/B/O Janus/Thomas/Roman/Emile/Remy [7]')}, {'series': Value(literal:'Playing Games [1]')}, {'series': Value(literal:'Puzzle Pieces [1]')}, {'series': Value(literal:""can't let you go, your hand prints on my soul [4]"")}, {'series': Value(literal:'Tumblr Prompts [3]')}, {'series': Value(literal:'Fun and Games [2]')}, {'series': Value(literal:'Puzzle Pieces [12]')}, {'series': Value(literal:'SoRiku Week 2018 [2]')}, {'series': Value(literal:'120 Drabble Challenge [15]')}, {'series': Value(literal:'Behind Closed Doors [1]')}, {'series': Value(literal:'Modern Magic [12]')}, {'series': Value(literal:'The Game is Set [2]')}, {'series': Value(literal:'My Name is Blue [11]')}, {'series': Value(literal:'Batter redemption AU [2]')}, {'series': Value(literal:'i am gonna make a name for this someday [1]')}, {'series': Value(literal:'Redemption AU [9]')}, {'series': Value(literal:'Writers Month 2019 Prompts [29]')}, {'series': Value(literal:'Community Drabbles [10]')}, {'series': Value(literal:'Whumptober 2021 [6]')}, {'series': Value(literal:'just keep stumbling forward (baby im waiting for you) [17]')}, {'series': Value(literal:'Jon/Gerry/Martin get what they deserve (nice things) [2]')}, {'series': Value(literal:'Hell Recovery Verse [9]')}, {'series': Value(literal:'Fragments [2]')}, {'series': Value(literal:'Femslash February 2021 [4]')}, {'series': Value(literal:'butterflies and warning signs [2]')}, {'series': Value(literal:'Merlin fics [2]')}, {'series': Value(literal:'The Many Caregivers of Malcolm Bright [4]')}, {'series': Value(literal:'Female Kylo Ren [2]')}, {'series': Value(literal:'100 Prompts with different Series [1]')}, {'series': Value(literal:'Cow!Cas [2]')}, {'series': Value(literal:'Sterek Ficlets [9]')}, {'series': Value(literal:'A Long Hard Road [2]')}, {'series': Value(literal:'Mafia in the Evening SKZ [2]')}, {'series': Value(literal:'Little Skz Adventures! [80]')}, {'series': Value(literal:'no pants petition [5]')}, {'series': Value(literal:'Catching The Rainbow [3]')}, {'series': Value(literal:'December Prompts [30]')}, {'series': Value(literal:'All Fall Together [2]')}, {'series': Value(literal:'Love Is Everything To Me [4]')}, {'series': Value(literal:'This Spideyfam Has Two Dads [6]')}, {'series': Value(literal:'Black Raven Beginnings [1]')}, {'series': Value(literal:'No Big Deal [4]')}, {'series': Value(literal:'2021 - A Year of Prompts [363]')}, {'series': Value(literal:'HitsuKarin Week 2022 [2]')}, {'series': Value(literal:""Miami 'Verse [2]"")}, {'series': Value(literal:'Origins [9]')}, {'series': Value(literal:'Truths & Lies [1]')}, {'series': Value(literal:'A Beautiful, Unconventional Love [1]')}, {'series': Value(literal:'Chair Lift Fanfiction [3]')}, {'series': Value(literal:'the x-files romcom cinematic universe [3]')}, {'series': Value(literal:'all together now [2]')}, {'series': Value(literal:'Harringrove Tumblr Stories [86]')}, {'series': Value(literal:'The Sunday Paper [1]')}]"	466	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Qué personajes aparecen en The Strange Workings of The Riddle House?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""The Strange Workings of The Riddle House"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece Tom Riddle, Ghost?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Tom Riddle, Ghost"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: ¿A qué serie pertenece Puzzle Pieces?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?series WHERE { 
    ?story golem:title ""Puzzle Pieces"" . 
    ?story golem:series ?series . 
}
"	"[{'series': Value(literal:'What Went Unseen [1]')}, {'series': Value(literal:'None')}, {'series': Value(literal:'Harry Potter Short Stories : 2021 [55]')}, {'series': Value(literal:'Puzzle Peices [1]')}, {'series': Value(literal:'All The Ways Mandy Finds Out [11]')}, {'series': Value(literal:'Kismet [7]')}, {'series': Value(literal:'Alliance? I think you mean Family. [1]')}, {'series': Value(literal:'A/B/O Janus/Thomas/Roman/Emile/Remy [7]')}, {'series': Value(literal:'Playing Games [1]')}, {'series': Value(literal:'Puzzle Pieces [1]')}, {'series': Value(literal:""can't let you go, your hand prints on my soul [4]"")}, {'series': Value(literal:'Tumblr Prompts [3]')}, {'series': Value(literal:'Fun and Games [2]')}, {'series': Value(literal:'Puzzle Pieces [12]')}, {'series': Value(literal:'SoRiku Week 2018 [2]')}, {'series': Value(literal:'120 Drabble Challenge [15]')}, {'series': Value(literal:'Behind Closed Doors [1]')}, {'series': Value(literal:'Modern Magic [12]')}, {'series': Value(literal:'The Game is Set [2]')}, {'series': Value(literal:'My Name is Blue [11]')}, {'series': Value(literal:'Batter redemption AU [2]')}, {'series': Value(literal:'i am gonna make a name for this someday [1]')}, {'series': Value(literal:'Redemption AU [9]')}, {'series': Value(literal:'Writers Month 2019 Prompts [29]')}, {'series': Value(literal:'Community Drabbles [10]')}, {'series': Value(literal:'Whumptober 2021 [6]')}, {'series': Value(literal:'just keep stumbling forward (baby im waiting for you) [17]')}, {'series': Value(literal:'Jon/Gerry/Martin get what they deserve (nice things) [2]')}, {'series': Value(literal:'Hell Recovery Verse [9]')}, {'series': Value(literal:'Fragments [2]')}, {'series': Value(literal:'Femslash February 2021 [4]')}, {'series': Value(literal:'butterflies and warning signs [2]')}, {'series': Value(literal:'Merlin fics [2]')}, {'series': Value(literal:'The Many Caregivers of Malcolm Bright [4]')}, {'series': Value(literal:'Female Kylo Ren [2]')}, {'series': Value(literal:'100 Prompts with different Series [1]')}, {'series': Value(literal:'Cow!Cas [2]')}, {'series': Value(literal:'Sterek Ficlets [9]')}, {'series': Value(literal:'A Long Hard Road [2]')}, {'series': Value(literal:'Mafia in the Evening SKZ [2]')}, {'series': Value(literal:'Little Skz Adventures! [80]')}, {'series': Value(literal:'no pants petition [5]')}, {'series': Value(literal:'Catching The Rainbow [3]')}, {'series': Value(literal:'December Prompts [30]')}, {'series': Value(literal:'All Fall Together [2]')}, {'series': Value(literal:'Love Is Everything To Me [4]')}, {'series': Value(literal:'This Spideyfam Has Two Dads [6]')}, {'series': Value(literal:'Black Raven Beginnings [1]')}, {'series': Value(literal:'No Big Deal [4]')}, {'series': Value(literal:'2021 - A Year of Prompts [363]')}, {'series': Value(literal:'HitsuKarin Week 2022 [2]')}, {'series': Value(literal:""Miami 'Verse [2]"")}, {'series': Value(literal:'Origins [9]')}, {'series': Value(literal:'Truths & Lies [1]')}, {'series': Value(literal:'A Beautiful, Unconventional Love [1]')}, {'series': Value(literal:'Chair Lift Fanfiction [3]')}, {'series': Value(literal:'the x-files romcom cinematic universe [3]')}, {'series': Value(literal:'all together now [2]')}, {'series': Value(literal:'Harringrove Tumblr Stories [86]')}, {'series': Value(literal:'The Sunday Paper [1]')}]"	1	0	0			
467	467	es	¿A qué serie pertenece World Gone Mad?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""World Gone Mad"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}, {'series': Value(literal:'Everything from tumblr prompts to Coda’s to lil drabbles [2]')}]	467	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué serie pertenece Life As We Know It?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Life As We Know It"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece Moonrise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Moonrise"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: ¿A qué serie pertenece World Gone Mad?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series WHERE { 
?story golem:title ""World Gone Mad"" . 
?story golem:series ?series . 
}
"	[{'series': Value(literal:'None')}, {'series': Value(literal:'Everything from tumblr prompts to Coda’s to lil drabbles [2]')}]	1	0	0			
468	468	es	¿A qué serie pertenece Lucid Dreaming?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Lucid Dreaming"" . ?story golem:series ?series . }"	"[{'series': Value(literal:'Nocturnal Wanderings [2]')}, {'series': Value(literal:'None')}, {'series': Value(literal:'oldies & discontinued [2]')}, {'series': Value(literal:""inkst0rm's OC Stories [2]"")}, {'series': Value(literal:""Ink Your Name 'verse [2]"")}, {'series': Value(literal:'Violaceous Fury [15]')}, {'series': Value(literal:'Altered States [1]')}, {'series': Value(literal:'Sleeping [6]')}, {'series': Value(literal:'The Soul Bond Series [1]')}]"	468	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué serie pertenece World Gone Mad?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""World Gone Mad"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece Moonrise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Moonrise"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece Sleeping Beauty - Dark!Severus Snape x Reader?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Sleeping Beauty - Dark!Severus Snape x Reader"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: ¿A qué serie pertenece Lucid Dreaming?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series WHERE { 
?story golem:title ""Lucid Dreaming"" . 
?story golem:series ?series . 
}
"	"[{'series': Value(literal:'Nocturnal Wanderings [2]')}, {'series': Value(literal:'None')}, {'series': Value(literal:'oldies & discontinued [2]')}, {'series': Value(literal:""inkst0rm's OC Stories [2]"")}, {'series': Value(literal:""Ink Your Name 'verse [2]"")}, {'series': Value(literal:'Violaceous Fury [15]')}, {'series': Value(literal:'Altered States [1]')}, {'series': Value(literal:'Sleeping [6]')}, {'series': Value(literal:'The Soul Bond Series [1]')}]"	1	0	0			
469	469	es	¿A qué serie pertenece Werewolves of the World, Unite!?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Werewolves of the World, Unite!"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}]	469	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué serie pertenece The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece World Gone Mad?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""World Gone Mad"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece Moonrise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Moonrise"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: ¿A qué serie pertenece Werewolves of the World, Unite!?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series WHERE { 
?story golem:title ""Werewolves of the World, Unite!"" . 
?story golem:series ?series . 
}
"	[{'series': Value(literal:'None')}]	1	0	0			
470	470	es	¿A qué serie pertenece Strumpet?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Strumpet"" . ?story golem:series ?series . }"	[{'series': Value(literal:'Nefarious [2]')}]	470	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué serie pertenece [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿Cuál es el MSTTR de charmed?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?msttr  WHERE { ?story golem:title ""charmed"" . ?story golem:MSTTR ?msttr . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: ¿A qué serie pertenece Strumpet?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series WHERE { 
?story golem:title ""Strumpet"" . 
?story golem:series ?series . 
}
"	[{'series': Value(literal:'Nefarious [2]')}]	1	0	0			
471	471	es	¿A qué serie pertenece The Creature You Know?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}]	471	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos capítulos tiene The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece Werewolves of the World, Unite!?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Werewolves of the World, Unite!"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece Life As We Know It?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Life As We Know It"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: ¿A qué serie pertenece The Creature You Know?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?series WHERE { 
  ?story golem:title ""The Creature You Know"" . 
  ?story golem:series ?series . 
}
"	[{'series': Value(literal:'None')}]	1	0	0			
472	472	es	¿A qué serie pertenece Life As We Know It?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Life As We Know It"" . ?story golem:series ?series . }"	[{'series': Value(literal:'None')}, {'series': Value(literal:'Death Is Not The End [2]')}, {'series': Value(literal:'Life as We Know It / Keep on Keeping on [1]')}, {'series': Value(literal:'Arcane Alternate Endings [2]')}, {'series': Value(literal:'New Beginnings series [2]')}, {'series': Value(literal:'Kakasaku Week 2016 [5]')}, {'series': Value(literal:'Psychos In Love [10]')}, {'series': Value(literal:'Urban Decay [2]')}, {'series': Value(literal:'Life [1]')}, {'series': Value(literal:'Life As We Know It [1]')}, {'series': Value(literal:'Friends Forever [3]')}]	472	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué serie pertenece [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece World Gone Mad?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""World Gone Mad"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: ¿A qué serie pertenece Life As We Know It?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?series WHERE { 
?story golem:title ""Life As We Know It"" . 
?story golem:series ?series . 
}
"	[{'series': Value(literal:'None')}, {'series': Value(literal:'Death Is Not The End [2]')}, {'series': Value(literal:'Life as We Know It / Keep on Keeping on [1]')}, {'series': Value(literal:'Arcane Alternate Endings [2]')}, {'series': Value(literal:'New Beginnings series [2]')}, {'series': Value(literal:'Kakasaku Week 2016 [5]')}, {'series': Value(literal:'Psychos In Love [10]')}, {'series': Value(literal:'Urban Decay [2]')}, {'series': Value(literal:'Life [1]')}, {'series': Value(literal:'Life As We Know It [1]')}, {'series': Value(literal:'Friends Forever [3]')}]	1	0	0			
473	473	es	¿A qué serie pertenece Moonrise?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Moonrise"" . ?story golem:series ?series . }"	"[{'series': Value(literal:'Moonrise [1]')}, {'series': Value(literal:'None')}, {'series': Value(literal:'Izuku and company... [1]')}, {'series': Value(literal:'Prompts and Challenges [8]')}, {'series': Value(literal:'Voyager Drabbles [4]')}, {'series': Value(literal:'Nothing Emboldens Sin So Much As Mercy [4]')}, {'series': Value(literal:'(Archived) When The Sun Loved The Moon [1]')}, {'series': Value(literal:'a little death [5]')}, {'series': Value(literal:'The Legend of the Cursed Vaults [1]')}, {'series': Value(literal:""The Moon's Attachment [2]"")}, {'series': Value(literal:'Archaic [2]')}, {'series': Value(literal:'Adjoining: a Sentinel Carrierverse Series [1]')}, {'series': Value(literal:'At the Heart of It All [2]')}, {'series': Value(literal:'The Phoenix and the Dragon [7]')}, {'series': Value(literal:'Natsume Yuujinchou Week 2016 [6]')}, {'series': Value(literal:'Donuts in My Bra and Other Stories [11]')}, {'series': Value(literal:'Moonrise [3]')}, {'series': Value(literal:'Mikazuki ___ [1]')}, {'series': Value(literal:'Drenched in Moonlight [2]')}, {'series': Value(literal:'Wisdom of the Evening Star [8]')}, {'series': Value(literal:'Sex and Feelings [1]')}]"	473	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuándo se publicó Tucked Into the Night Sky?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tucked Into the Night Sky"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece World Gone Mad?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""World Gone Mad"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece Werewolves of the World, Unite!?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Werewolves of the World, Unite!"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: ¿A qué serie pertenece Moonrise?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series WHERE { 
?story golem:title ""Moonrise"" . 
?story golem:series ?series . 
}
"	"[{'series': Value(literal:'Moonrise [1]')}, {'series': Value(literal:'None')}, {'series': Value(literal:'Izuku and company... [1]')}, {'series': Value(literal:'Prompts and Challenges [8]')}, {'series': Value(literal:'Voyager Drabbles [4]')}, {'series': Value(literal:'Nothing Emboldens Sin So Much As Mercy [4]')}, {'series': Value(literal:'(Archived) When The Sun Loved The Moon [1]')}, {'series': Value(literal:'a little death [5]')}, {'series': Value(literal:'The Legend of the Cursed Vaults [1]')}, {'series': Value(literal:""The Moon's Attachment [2]"")}, {'series': Value(literal:'Archaic [2]')}, {'series': Value(literal:'Adjoining: a Sentinel Carrierverse Series [1]')}, {'series': Value(literal:'At the Heart of It All [2]')}, {'series': Value(literal:'The Phoenix and the Dragon [7]')}, {'series': Value(literal:'Natsume Yuujinchou Week 2016 [6]')}, {'series': Value(literal:'Donuts in My Bra and Other Stories [11]')}, {'series': Value(literal:'Moonrise [3]')}, {'series': Value(literal:'Mikazuki ___ [1]')}, {'series': Value(literal:'Drenched in Moonlight [2]')}, {'series': Value(literal:'Wisdom of the Evening Star [8]')}, {'series': Value(literal:'Sex and Feelings [1]')}]"	1	0	0			
474	474	es	¿A qué serie pertenece Slytherins Don't Do Valentine's Day?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Slytherins Don't Do Valentine's Day"" . ?story golem:series ?series . }"	[{'series': Value(literal:'The Night Rounds of Snape & McGonagall [3]')}]	474	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué serie pertenece Moonrise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Moonrise"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿La historia They'll Never Break Me incluye la palabra clave Chaser Ginny Weasley?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""They'll Never Break Me"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""Chaser Ginny Weasley"") . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en And The Saints?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""And The Saints"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿A qué serie pertenece Slytherins Don't Do Valentine's Day?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
SELECT DISTINCT ?series WHERE { 
  ?story golem:title ""Slytherins Don't Do Valentine's Day"" . 
  ?story golem:series ?series . 
}
"	[{'series': Value(literal:'The Night Rounds of Snape & McGonagall [3]')}]	1	0	0			
475	475	es	Muéstrame todas las historias con más de un capítulo	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:title ?title . ?story golem:numberOfChapters ?chapters . FILTER(?chapters > 1) }		475	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos capítulos tiene [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos capítulos tiene The Creature You Know?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""The Creature You Know"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

Question: Muéstrame todas las historias con más de un capítulo

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?story WHERE { 
  ?story golem:numberOfChapters ?chapters . 
  FILTER (?chapters > 1)
}
"	[{'story': Value(uri:'https://golemlab.eu/graph/28716786')}, {'story': Value(uri:'https://golemlab.eu/graph/28736067')}, {'story': Value(uri:'https://golemlab.eu/graph/28740072')}, {'story': Value(uri:'https://golemlab.eu/graph/28757979')}, {'story': Value(uri:'https://golemlab.eu/graph/28758684')}, {'story': Value(uri:'https://golemlab.eu/graph/28764234')}, {'story': Value(uri:'https://golemlab.eu/graph/28777617')}, {'story': Value(uri:'https://golemlab.eu/graph/28782303')}, {'story': Value(uri:'https://golemlab.eu/graph/28783053')}, {'story': Value(uri:'https://golemlab.eu/graph/28787166')}, {'story': Value(uri:'https://golemlab.eu/graph/28790646')}, {'story': Value(uri:'https://golemlab.eu/graph/28793721')}, {'story': Value(uri:'https://golemlab.eu/graph/28802139')}, {'story': Value(uri:'https://golemlab.eu/graph/28812510')}, {'story': Value(uri:'https://golemlab.eu/graph/28826841')}, {'story': Value(uri:'https://golemlab.eu/graph/28827996')}, {'story': Value(uri:'https://golemlab.eu/graph/28830345')}, {'story': Value(uri:'https://golemlab.eu/graph/28833111')}, {'story': Value(uri:'https://golemlab.eu/graph/28834788')}, {'story': Value(uri:'https://golemlab.eu/graph/28837122')}, {'story': Value(uri:'https://golemlab.eu/graph/28840947')}, {'story': Value(uri:'https://golemlab.eu/graph/28848873')}, {'story': Value(uri:'https://golemlab.eu/graph/28854909')}, {'story': Value(uri:'https://golemlab.eu/graph/28861092')}, {'story': Value(uri:'https://golemlab.eu/graph/28869417')}, {'story': Value(uri:'https://golemlab.eu/graph/28871640')}, {'story': Value(uri:'https://golemlab.eu/graph/2888468')}, {'story': Value(uri:'https://golemlab.eu/graph/28895625')}, {'story': Value(uri:'https://golemlab.eu/graph/28903380')}, {'story': Value(uri:'https://golemlab.eu/graph/28910655')}, {'story': Value(uri:'https://golemlab.eu/graph/28913376')}, {'story': Value(uri:'https://golemlab.eu/graph/28916880')}, {'story': Value(uri:'https://golemlab.eu/graph/28924149')}, {'story': Value(uri:'https://golemlab.eu/graph/28935648')}, {'story': Value(uri:'https://golemlab.eu/graph/28937739')}, {'story': Value(uri:'https://golemlab.eu/graph/28961790')}, {'story': Value(uri:'https://golemlab.eu/graph/28965414')}, {'story': Value(uri:'https://golemlab.eu/graph/28965882')}, {'story': Value(uri:'https://golemlab.eu/graph/28966494')}, {'story': Value(uri:'https://golemlab.eu/graph/28973481')}, {'story': Value(uri:'https://golemlab.eu/graph/28977186')}, {'story': Value(uri:'https://golemlab.eu/graph/28980069')}, {'story': Value(uri:'https://golemlab.eu/graph/28983381')}, {'story': Value(uri:'https://golemlab.eu/graph/28985037')}, {'story': Value(uri:'https://golemlab.eu/graph/28985385')}, {'story': Value(uri:'https://golemlab.eu/graph/29010378')}, {'story': Value(uri:'https://golemlab.eu/graph/29015277')}, {'story': Value(uri:'https://golemlab.eu/graph/29018478')}, {'story': Value(uri:'https://golemlab.eu/graph/29022723')}, {'story': Value(uri:'https://golemlab.eu/graph/29028033')}, {'story': Value(uri:'https://golemlab.eu/graph/29028213')}, {'story': Value(uri:'https://golemlab.eu/graph/29034816')}, {'story': Value(uri:'https://golemlab.eu/graph/29038932')}, {'story': Value(uri:'https://golemlab.eu/graph/29053368')}, {'story': Value(uri:'https://golemlab.eu/graph/29067216')}, {'story': Value(uri:'https://golemlab.eu/graph/2907182')}, {'story': Value(uri:'https://golemlab.eu/graph/29085138')}, {'story': Value(uri:'https://golemlab.eu/graph/29094981')}, {'story': Value(uri:'https://golemlab.eu/graph/29104473')}, {'story': Value(uri:'https://golemlab.eu/graph/29107125')}, {'story': Value(uri:'https://golemlab.eu/graph/29109741')}, {'story': Value(uri:'https://golemlab.eu/graph/29126295')}, {'story': Value(uri:'https://golemlab.eu/graph/29143119')}, {'story': Value(uri:'https://golemlab.eu/graph/29148225')}, {'story': Value(uri:'https://golemlab.eu/graph/29158200')}, {'story': Value(uri:'https://golemlab.eu/graph/29175687')}, {'story': Value(uri:'https://golemlab.eu/graph/29178471')}, {'story': Value(uri:'https://golemlab.eu/graph/29183955')}, {'story': Value(uri:'https://golemlab.eu/graph/29185464')}, {'story': Value(uri:'https://golemlab.eu/graph/29202681')}, {'story': Value(uri:'https://golemlab.eu/graph/29238810')}, {'story': Value(uri:'https://golemlab.eu/graph/29256195')}, {'story': Value(uri:'https://golemlab.eu/graph/29288016')}, {'story': Value(uri:'https://golemlab.eu/graph/29292417')}, {'story': Value(uri:'https://golemlab.eu/graph/29294115')}, {'story': Value(uri:'https://golemlab.eu/graph/29296215')}, {'story': Value(uri:'https://golemlab.eu/graph/29315091')}, {'story': Value(uri:'https://golemlab.eu/graph/29317170')}, {'story': Value(uri:'https://golemlab.eu/graph/29317875')}, {'story': Value(uri:'https://golemlab.eu/graph/29319393')}, {'story': Value(uri:'https://golemlab.eu/graph/29322567')}, {'story': Value(uri:'https://golemlab.eu/graph/29325663')}, {'story': Value(uri:'https://golemlab.eu/graph/29332518')}, {'story': Value(uri:'https://golemlab.eu/graph/29335626')}, {'story': Value(uri:'https://golemlab.eu/graph/29338668')}, {'story': Value(uri:'https://golemlab.eu/graph/29354037')}, {'story': Value(uri:'https://golemlab.eu/graph/29356665')}, {'story': Value(uri:'https://golemlab.eu/graph/29374035')}, {'story': Value(uri:'https://golemlab.eu/graph/29381187')}, {'story': Value(uri:'https://golemlab.eu/graph/29390175')}, {'story': Value(uri:'https://golemlab.eu/graph/29393733')}, {'story': Value(uri:'https://golemlab.eu/graph/29398884')}, {'story': Value(uri:'https://golemlab.eu/graph/29412252')}, {'story': Value(uri:'https://golemlab.eu/graph/29412807')}, {'story': Value(uri:'https://golemlab.eu/graph/29414877')}, {'story': Value(uri:'https://golemlab.eu/graph/29427996')}, {'story': Value(uri:'https://golemlab.eu/graph/29435250')}, {'story': Value(uri:'https://golemlab.eu/graph/29438172')}, {'story': Value(uri:'https://golemlab.eu/graph/29446041')}, {'story': Value(uri:'https://golemlab.eu/graph/29453331')}, {'story': Value(uri:'https://golemlab.eu/graph/29454939')}, {'story': Value(uri:'https://golemlab.eu/graph/29463504')}, {'story': Value(uri:'https://golemlab.eu/graph/29475612')}, {'story': Value(uri:'https://golemlab.eu/graph/29476785')}, {'story': Value(uri:'https://golemlab.eu/graph/29481423')}, {'story': Value(uri:'https://golemlab.eu/graph/29497266')}, {'story': Value(uri:'https://golemlab.eu/graph/29497326')}, {'story': Value(uri:'https://golemlab.eu/graph/29497557')}, {'story': Value(uri:'https://golemlab.eu/graph/29512083')}, {'story': Value(uri:'https://golemlab.eu/graph/29558199')}, {'story': Value(uri:'https://golemlab.eu/graph/29563290')}, {'story': Value(uri:'https://golemlab.eu/graph/29563644')}, {'story': Value(uri:'https://golemlab.eu/graph/29564181')}, {'story': Value(uri:'https://golemlab.eu/graph/29572575')}, {'story': Value(uri:'https://golemlab.eu/graph/29578716')}, {'story': Value(uri:'https://golemlab.eu/graph/29590653')}, {'story': Value(uri:'https://golemlab.eu/graph/29590659')}, {'story': Value(uri:'https://golemlab.eu/graph/29591628')}, {'story': Value(uri:'https://golemlab.eu/graph/29595597')}, {'story': Value(uri:'https://golemlab.eu/graph/29603976')}, {'story': Value(uri:'https://golemlab.eu/graph/29608488')}, {'story': Value(uri:'https://golemlab.eu/graph/29608809')}, {'story': Value(uri:'https://golemlab.eu/graph/29614644')}, {'story': Value(uri:'https://golemlab.eu/graph/29618511')}, {'story': Value(uri:'https://golemlab.eu/graph/29619099')}, {'story': Value(uri:'https://golemlab.eu/graph/29620971')}, {'story': Value(uri:'https://golemlab.eu/graph/29621727')}, {'story': Value(uri:'https://golemlab.eu/graph/29646615')}, {'story': Value(uri:'https://golemlab.eu/graph/29652525')}, {'story': Value(uri:'https://golemlab.eu/graph/29652630')}, {'story': Value(uri:'https://golemlab.eu/graph/29670906')}, {'story': Value(uri:'https://golemlab.eu/graph/29730609')}, {'story': Value(uri:'https://golemlab.eu/graph/29745042')}, {'story': Value(uri:'https://golemlab.eu/graph/29746968')}, {'story': Value(uri:'https://golemlab.eu/graph/29755761')}, {'story': Value(uri:'https://golemlab.eu/graph/29771139')}, {'story': Value(uri:'https://golemlab.eu/graph/29774334')}, {'story': Value(uri:'https://golemlab.eu/graph/29786109')}, {'story': Value(uri:'https://golemlab.eu/graph/29793915')}, {'story': Value(uri:'https://golemlab.eu/graph/29799909')}, {'story': Value(uri:'https://golemlab.eu/graph/3262439')}, {'story': Value(uri:'https://golemlab.eu/graph/32643745')}, {'story': Value(uri:'https://golemlab.eu/graph/32708542')}, {'story': Value(uri:'https://golemlab.eu/graph/3270962')}, {'story': Value(uri:'https://golemlab.eu/graph/32709964')}, {'story': Value(uri:'https://golemlab.eu/graph/32735410')}, {'story': Value(uri:'https://golemlab.eu/graph/32841823')}, {'story': Value(uri:'https://golemlab.eu/graph/32864941')}, {'story': Value(uri:'https://golemlab.eu/graph/32983921')}, {'story': Value(uri:'https://golemlab.eu/graph/32991847')}, {'story': Value(uri:'https://golemlab.eu/graph/33013366')}, {'story': Value(uri:'https://golemlab.eu/graph/33014758')}, {'story': Value(uri:'https://golemlab.eu/graph/3303485')}, {'story': Value(uri:'https://golemlab.eu/graph/3305177')}, {'story': Value(uri:'https://golemlab.eu/graph/3305558')}, {'story': Value(uri:'https://golemlab.eu/graph/33082468')}, {'story': Value(uri:'https://golemlab.eu/graph/33104080')}, {'story': Value(uri:'https://golemlab.eu/graph/33173890')}, {'story': Value(uri:'https://golemlab.eu/graph/33223441')}, {'story': Value(uri:'https://golemlab.eu/graph/33231475')}, {'story': Value(uri:'https://golemlab.eu/graph/33267973')}, {'story': Value(uri:'https://golemlab.eu/graph/33296224')}, {'story': Value(uri:'https://golemlab.eu/graph/33373339')}, {'story': Value(uri:'https://golemlab.eu/graph/33392554')}, {'story': Value(uri:'https://golemlab.eu/graph/33578878')}, {'story': Value(uri:'https://golemlab.eu/graph/33587608')}, {'story': Value(uri:'https://golemlab.eu/graph/3362102')}, {'story': Value(uri:'https://golemlab.eu/graph/33652909')}, {'story': Value(uri:'https://golemlab.eu/graph/33728647')}, {'story': Value(uri:'https://golemlab.eu/graph/33759463')}, {'story': Value(uri:'https://golemlab.eu/graph/33790081')}, {'story': Value(uri:'https://golemlab.eu/graph/338153')}, {'story': Value(uri:'https://golemlab.eu/graph/33825685')}, {'story': Value(uri:'https://golemlab.eu/graph/33874996')}, {'story': Value(uri:'https://golemlab.eu/graph/33964654')}, {'story': Value(uri:'https://golemlab.eu/graph/33992320')}, {'story': Value(uri:'https://golemlab.eu/graph/34013278')}, {'story': Value(uri:'https://golemlab.eu/graph/34086793')}, {'story': Value(uri:'https://golemlab.eu/graph/34115056')}, {'story': Value(uri:'https://golemlab.eu/graph/34128406')}, {'story': Value(uri:'https://golemlab.eu/graph/341291')}, {'story': Value(uri:'https://golemlab.eu/graph/34136992')}, {'story': Value(uri:'https://golemlab.eu/graph/34165486')}, {'story': Value(uri:'https://golemlab.eu/graph/341789')}, {'story': Value(uri:'https://golemlab.eu/graph/34193032')}, {'story': Value(uri:'https://golemlab.eu/graph/34213732')}, {'story': Value(uri:'https://golemlab.eu/graph/342243')}, {'story': Value(uri:'https://golemlab.eu/graph/34267396')}, {'story': Value(uri:'https://golemlab.eu/graph/34302184')}, {'story': Value(uri:'https://golemlab.eu/graph/34348966')}, {'story': Value(uri:'https://golemlab.eu/graph/34431877')}, {'story': Value(uri:'https://golemlab.eu/graph/34440967')}, {'story': Value(uri:'https://golemlab.eu/graph/34466551')}, {'story': Value(uri:'https://golemlab.eu/graph/34558204')}, {'story': Value(uri:'https://golemlab.eu/graph/34589662')}, {'story': Value(uri:'https://golemlab.eu/graph/3460034')}, {'story': Value(uri:'https://golemlab.eu/graph/34621873')}, {'story': Value(uri:'https://golemlab.eu/graph/34681714')}, {'story': Value(uri:'https://golemlab.eu/graph/34744186')}, {'story': Value(uri:'https://golemlab.eu/graph/34745044')}, {'story': Value(uri:'https://golemlab.eu/graph/34750645')}, {'story': Value(uri:'https://golemlab.eu/graph/34796650')}, {'story': Value(uri:'https://golemlab.eu/graph/34820476')}, {'story': Value(uri:'https://golemlab.eu/graph/34836289')}, {'story': Value(uri:'https://golemlab.eu/graph/34862122')}, {'story': Value(uri:'https://golemlab.eu/graph/3489395')}, {'story': Value(uri:'https://golemlab.eu/graph/3503957')}, {'story': Value(uri:'https://golemlab.eu/graph/3508493')}, {'story': Value(uri:'https://golemlab.eu/graph/3511937')}, {'story': Value(uri:'https://golemlab.eu/graph/3535046')}, {'story': Value(uri:'https://golemlab.eu/graph/35518528')}, {'story': Value(uri:'https://golemlab.eu/graph/3557798')}, {'story': Value(uri:'https://golemlab.eu/graph/3564602')}, {'story': Value(uri:'https://golemlab.eu/graph/3566228')}, {'story': Value(uri:'https://golemlab.eu/graph/35705566')}, {'story': Value(uri:'https://golemlab.eu/graph/3576006')}, {'story': Value(uri:'https://golemlab.eu/graph/3581778')}, {'story': Value(uri:'https://golemlab.eu/graph/3589467')}, {'story': Value(uri:'https://golemlab.eu/graph/3593511')}, {'story': Value(uri:'https://golemlab.eu/graph/3605766')}, {'story': Value(uri:'https://golemlab.eu/graph/36085039')}, {'story': Value(uri:'https://golemlab.eu/graph/3617925')}, {'story': Value(uri:'https://golemlab.eu/graph/3630858')}, {'story': Value(uri:'https://golemlab.eu/graph/36408835')}, {'story': Value(uri:'https://golemlab.eu/graph/3643995')}, {'story': Value(uri:'https://golemlab.eu/graph/36459238')}, {'story': Value(uri:'https://golemlab.eu/graph/36475261')}, {'story': Value(uri:'https://golemlab.eu/graph/36479614')}, {'story': Value(uri:'https://golemlab.eu/graph/36500095')}, {'story': Value(uri:'https://golemlab.eu/graph/36561118')}, {'story': Value(uri:'https://golemlab.eu/graph/3658206')}, {'story': Value(uri:'https://golemlab.eu/graph/36695269')}, {'story': Value(uri:'https://golemlab.eu/graph/36764710')}, {'story': Value(uri:'https://golemlab.eu/graph/3683547')}, {'story': Value(uri:'https://golemlab.eu/graph/36862222')}, {'story': Value(uri:'https://golemlab.eu/graph/36960835')}, {'story': Value(uri:'https://golemlab.eu/graph/36978898')}, {'story': Value(uri:'https://golemlab.eu/graph/3717688')}, {'story': Value(uri:'https://golemlab.eu/graph/372262')}, {'story': Value(uri:'https://golemlab.eu/graph/37314532')}, {'story': Value(uri:'https://golemlab.eu/graph/37366351')}, {'story': Value(uri:'https://golemlab.eu/graph/37499935')}, {'story': Value(uri:'https://golemlab.eu/graph/37519291')}, {'story': Value(uri:'https://golemlab.eu/graph/37521145')}, {'story': Value(uri:'https://golemlab.eu/graph/3753910')}, {'story': Value(uri:'https://golemlab.eu/graph/37542397')}, {'story': Value(uri:'https://golemlab.eu/graph/37552810')}, {'story': Value(uri:'https://golemlab.eu/graph/37594159')}, {'story': Value(uri:'https://golemlab.eu/graph/37625539')}, {'story': Value(uri:'https://golemlab.eu/graph/37629394')}, {'story': Value(uri:'https://golemlab.eu/graph/37632703')}, {'story': Value(uri:'https://golemlab.eu/graph/37658329')}, {'story': Value(uri:'https://golemlab.eu/graph/37668592')}, {'story': Value(uri:'https://golemlab.eu/graph/37677439')}, {'story': Value(uri:'https://golemlab.eu/graph/37683562')}, {'story': Value(uri:'https://golemlab.eu/graph/37685626')}, {'story': Value(uri:'https://golemlab.eu/graph/37692259')}, {'story': Value(uri:'https://golemlab.eu/graph/37710292')}, {'story': Value(uri:'https://golemlab.eu/graph/37729960')}, {'story': Value(uri:'https://golemlab.eu/graph/37736620')}, {'story': Value(uri:'https://golemlab.eu/graph/37750717')}, {'story': Value(uri:'https://golemlab.eu/graph/37767358')}, {'story': Value(uri:'https://golemlab.eu/graph/37816528')}, {'story': Value(uri:'https://golemlab.eu/graph/37883062')}, {'story': Value(uri:'https://golemlab.eu/graph/37914295')}, {'story': Value(uri:'https://golemlab.eu/graph/37926721')}, {'story': Value(uri:'https://golemlab.eu/graph/37957138')}, {'story': Value(uri:'https://golemlab.eu/graph/37963843')}, {'story': Value(uri:'https://golemlab.eu/graph/38022460')}, {'story': Value(uri:'https://golemlab.eu/graph/38046748')}, {'story': Value(uri:'https://golemlab.eu/graph/38051950')}, {'story': Value(uri:'https://golemlab.eu/graph/38062645')}, {'story': Value(uri:'https://golemlab.eu/graph/38077543')}, {'story': Value(uri:'https://golemlab.eu/graph/38102383')}, {'story': Value(uri:'https://golemlab.eu/graph/38158444')}, {'story': Value(uri:'https://golemlab.eu/graph/30450153')}, {'story': Value(uri:'https://golemlab.eu/graph/30459603')}, {'story': Value(uri:'https://golemlab.eu/graph/30462972')}, {'story': Value(uri:'https://golemlab.eu/graph/30463200')}, {'story': Value(uri:'https://golemlab.eu/graph/30465156')}, {'story': Value(uri:'https://golemlab.eu/graph/30473214')}, {'story': Value(uri:'https://golemlab.eu/graph/30474096')}, {'story': Value(uri:'https://golemlab.eu/graph/30476757')}, {'story': Value(uri:'https://golemlab.eu/graph/30503433')}, {'story': Value(uri:'https://golemlab.eu/graph/30514326')}, {'story': Value(uri:'https://golemlab.eu/graph/30521559')}, {'story': Value(uri:'https://golemlab.eu/graph/30549882')}, {'story': Value(uri:'https://golemlab.eu/graph/30549918')}, {'story': Value(uri:'https://golemlab.eu/graph/30557202')}, {'story': Value(uri:'https://golemlab.eu/graph/30559753')}, {'story': Value(uri:'https://golemlab.eu/graph/30560318')}, {'story': Value(uri:'https://golemlab.eu/graph/30563825')}, {'story': Value(uri:'https://golemlab.eu/graph/30564908')}, {'story': Value(uri:'https://golemlab.eu/graph/30568817')}, {'story': Value(uri:'https://golemlab.eu/graph/30571382')}, {'story': Value(uri:'https://golemlab.eu/graph/30579608')}, {'story': Value(uri:'https://golemlab.eu/graph/30582983')}, {'story': Value(uri:'https://golemlab.eu/graph/30599771')}, {'story': Value(uri:'https://golemlab.eu/graph/30599783')}, {'story': Value(uri:'https://golemlab.eu/graph/30600950')}, {'story': Value(uri:'https://golemlab.eu/graph/30602144')}, {'story': Value(uri:'https://golemlab.eu/graph/30623450')}, {'story': Value(uri:'https://golemlab.eu/graph/30648173')}, {'story': Value(uri:'https://golemlab.eu/graph/30656876')}, {'story': Value(uri:'https://golemlab.eu/graph/30664211')}, {'story': Value(uri:'https://golemlab.eu/graph/30666374')}, {'story': Value(uri:'https://golemlab.eu/graph/30675761')}, {'story': Value(uri:'https://golemlab.eu/graph/30680924')}, {'story': Value(uri:'https://golemlab.eu/graph/3068288')}, {'story': Value(uri:'https://golemlab.eu/graph/3068501')}, {'story': Value(uri:'https://golemlab.eu/graph/30685691')}, {'story': Value(uri:'https://golemlab.eu/graph/30701903')}, {'story': Value(uri:'https://golemlab.eu/graph/30706589')}, {'story': Value(uri:'https://golemlab.eu/graph/30707549')}, {'story': Value(uri:'https://golemlab.eu/graph/30707792')}, {'story': Value(uri:'https://golemlab.eu/graph/30709160')}, {'story': Value(uri:'https://golemlab.eu/graph/30712631')}, {'story': Value(uri:'https://golemlab.eu/graph/30723506')}, {'story': Value(uri:'https://golemlab.eu/graph/30725402')}, {'story': Value(uri:'https://golemlab.eu/graph/30738995')}, {'story': Value(uri:'https://golemlab.eu/graph/30756965')}, {'story': Value(uri:'https://golemlab.eu/graph/30757925')}, {'story': Value(uri:'https://golemlab.eu/graph/30763781')}, {'story': Value(uri:'https://golemlab.eu/graph/30770105')}, {'story': Value(uri:'https://golemlab.eu/graph/30777668')}, {'story': Value(uri:'https://golemlab.eu/graph/30818909')}, {'story': Value(uri:'https://golemlab.eu/graph/30820670')}, {'story': Value(uri:'https://golemlab.eu/graph/30822221')}, {'story': Value(uri:'https://golemlab.eu/graph/30823184')}, {'story': Value(uri:'https://golemlab.eu/graph/30833945')}, {'story': Value(uri:'https://golemlab.eu/graph/30838997')}, {'story': Value(uri:'https://golemlab.eu/graph/30841769')}, {'story': Value(uri:'https://golemlab.eu/graph/30853214')}, {'story': Value(uri:'https://golemlab.eu/graph/30858653')}, {'story': Value(uri:'https://golemlab.eu/graph/30860411')}, {'story': Value(uri:'https://golemlab.eu/graph/30863561')}, {'story': Value(uri:'https://golemlab.eu/graph/30880946')}, {'story': Value(uri:'https://golemlab.eu/graph/30883553')}, {'story': Value(uri:'https://golemlab.eu/graph/30892067')}, {'story': Value(uri:'https://golemlab.eu/graph/308927')}, {'story': Value(uri:'https://golemlab.eu/graph/30895517')}, {'story': Value(uri:'https://golemlab.eu/graph/30896378')}, {'story': Value(uri:'https://golemlab.eu/graph/30897128')}, {'story': Value(uri:'https://golemlab.eu/graph/30898793')}, {'story': Value(uri:'https://golemlab.eu/graph/30899702')}, {'story': Value(uri:'https://golemlab.eu/graph/30907640')}, {'story': Value(uri:'https://golemlab.eu/graph/30911855')}, {'story': Value(uri:'https://golemlab.eu/graph/30915917')}, {'story': Value(uri:'https://golemlab.eu/graph/30920834')}, {'story': Value(uri:'https://golemlab.eu/graph/30927452')}, {'story': Value(uri:'https://golemlab.eu/graph/30930278')}, {'story': Value(uri:'https://golemlab.eu/graph/30984224')}, {'story': Value(uri:'https://golemlab.eu/graph/31011035')}, {'story': Value(uri:'https://golemlab.eu/graph/31011545')}, {'story': Value(uri:'https://golemlab.eu/graph/31022048')}, {'story': Value(uri:'https://golemlab.eu/graph/3102827')}, {'story': Value(uri:'https://golemlab.eu/graph/31032950')}, {'story': Value(uri:'https://golemlab.eu/graph/31049660')}, {'story': Value(uri:'https://golemlab.eu/graph/31061594')}, {'story': Value(uri:'https://golemlab.eu/graph/31068830')}, {'story': Value(uri:'https://golemlab.eu/graph/31076405')}, {'story': Value(uri:'https://golemlab.eu/graph/31079219')}, {'story': Value(uri:'https://golemlab.eu/graph/31092701')}, {'story': Value(uri:'https://golemlab.eu/graph/31100753')}, {'story': Value(uri:'https://golemlab.eu/graph/31109846')}, {'story': Value(uri:'https://golemlab.eu/graph/31111883')}, {'story': Value(uri:'https://golemlab.eu/graph/31123853')}, {'story': Value(uri:'https://golemlab.eu/graph/31124390')}, {'story': Value(uri:'https://golemlab.eu/graph/31135673')}, {'story': Value(uri:'https://golemlab.eu/graph/31143482')}, {'story': Value(uri:'https://golemlab.eu/graph/31156208')}, {'story': Value(uri:'https://golemlab.eu/graph/31158365')}, {'story': Value(uri:'https://golemlab.eu/graph/31168715')}, {'story': Value(uri:'https://golemlab.eu/graph/31208978')}, {'story': Value(uri:'https://golemlab.eu/graph/31230710')}, {'story': Value(uri:'https://golemlab.eu/graph/31233419')}, {'story': Value(uri:'https://golemlab.eu/graph/31238513')}, {'story': Value(uri:'https://golemlab.eu/graph/3125591')}, {'story': Value(uri:'https://golemlab.eu/graph/31262414')}, {'story': Value(uri:'https://golemlab.eu/graph/31280534')}, {'story': Value(uri:'https://golemlab.eu/graph/31318625')}, {'story': Value(uri:'https://golemlab.eu/graph/31321382')}, {'story': Value(uri:'https://golemlab.eu/graph/31333997')}, {'story': Value(uri:'https://golemlab.eu/graph/31345262')}, {'story': Value(uri:'https://golemlab.eu/graph/31356323')}, {'story': Value(uri:'https://golemlab.eu/graph/31358033')}, {'story': Value(uri:'https://golemlab.eu/graph/31365977')}, {'story': Value(uri:'https://golemlab.eu/graph/31386506')}, {'story': Value(uri:'https://golemlab.eu/graph/31397333')}, {'story': Value(uri:'https://golemlab.eu/graph/31399976')}, {'story': Value(uri:'https://golemlab.eu/graph/31405340')}, {'story': Value(uri:'https://golemlab.eu/graph/31405526')}, {'story': Value(uri:'https://golemlab.eu/graph/31407272')}, {'story': Value(uri:'https://golemlab.eu/graph/31428962')}, {'story': Value(uri:'https://golemlab.eu/graph/31489091')}, {'story': Value(uri:'https://golemlab.eu/graph/31493000')}, {'story': Value(uri:'https://golemlab.eu/graph/314988')}, {'story': Value(uri:'https://golemlab.eu/graph/31504676')}, {'story': Value(uri:'https://golemlab.eu/graph/31518704')}, {'story': Value(uri:'https://golemlab.eu/graph/3153758')}, {'story': Value(uri:'https://golemlab.eu/graph/31541792')}, {'story': Value(uri:'https://golemlab.eu/graph/3154739')}, {'story': Value(uri:'https://golemlab.eu/graph/31548680')}, {'story': Value(uri:'https://golemlab.eu/graph/3154910')}, {'story': Value(uri:'https://golemlab.eu/graph/31573454')}, {'story': Value(uri:'https://golemlab.eu/graph/31584086')}, {'story': Value(uri:'https://golemlab.eu/graph/31586192')}, {'story': Value(uri:'https://golemlab.eu/graph/31600121')}, {'story': Value(uri:'https://golemlab.eu/graph/31602518')}, {'story': Value(uri:'https://golemlab.eu/graph/31605782')}, {'story': Value(uri:'https://golemlab.eu/graph/3161828')}, {'story': Value(uri:'https://golemlab.eu/graph/31620743')}, {'story': Value(uri:'https://golemlab.eu/graph/31626728')}, {'story': Value(uri:'https://golemlab.eu/graph/31628369')}, {'story': Value(uri:'https://golemlab.eu/graph/31632434')}, {'story': Value(uri:'https://golemlab.eu/graph/31634543')}, {'story': Value(uri:'https://golemlab.eu/graph/31636310')}, {'story': Value(uri:'https://golemlab.eu/graph/31642691')}, {'story': Value(uri:'https://golemlab.eu/graph/31653977')}, {'story': Value(uri:'https://golemlab.eu/graph/31654706')}, {'story': Value(uri:'https://golemlab.eu/graph/31664684')}, {'story': Value(uri:'https://golemlab.eu/graph/31671779')}, {'story': Value(uri:'https://golemlab.eu/graph/31688681')}, {'story': Value(uri:'https://golemlab.eu/graph/3169556')}, {'story': Value(uri:'https://golemlab.eu/graph/31713631')}, {'story': Value(uri:'https://golemlab.eu/graph/31760248')}, {'story': Value(uri:'https://golemlab.eu/graph/31772026')}, {'story': Value(uri:'https://golemlab.eu/graph/31775377')}, {'story': Value(uri:'https://golemlab.eu/graph/31775638')}, {'story': Value(uri:'https://golemlab.eu/graph/31781458')}, {'story': Value(uri:'https://golemlab.eu/graph/3178544')}, {'story': Value(uri:'https://golemlab.eu/graph/31789021')}, {'story': Value(uri:'https://golemlab.eu/graph/31790668')}, {'story': Value(uri:'https://golemlab.eu/graph/31790890')}, {'story': Value(uri:'https://golemlab.eu/graph/31816693')}, {'story': Value(uri:'https://golemlab.eu/graph/31825390')}, {'story': Value(uri:'https://golemlab.eu/graph/31851214')}, {'story': Value(uri:'https://golemlab.eu/graph/31853086')}, {'story': Value(uri:'https://golemlab.eu/graph/31871803')}, {'story': Value(uri:'https://golemlab.eu/graph/31874524')}, {'story': Value(uri:'https://golemlab.eu/graph/31881949')}, {'story': Value(uri:'https://golemlab.eu/graph/3188816')}, {'story': Value(uri:'https://golemlab.eu/graph/31890343')}, {'story': Value(uri:'https://golemlab.eu/graph/31891711')}, {'story': Value(uri:'https://golemlab.eu/graph/31921696')}, {'story': Value(uri:'https://golemlab.eu/graph/31923409')}, {'story': Value(uri:'https://golemlab.eu/graph/31927990')}, {'story': Value(uri:'https://golemlab.eu/graph/31951927')}, {'story': Value(uri:'https://golemlab.eu/graph/31961206')}, {'story': Value(uri:'https://golemlab.eu/graph/31966219')}, {'story': Value(uri:'https://golemlab.eu/graph/31968958')}, {'story': Value(uri:'https://golemlab.eu/graph/31976080')}, {'story': Value(uri:'https://golemlab.eu/graph/31982893')}, {'story': Value(uri:'https://golemlab.eu/graph/31984018')}, {'story': Value(uri:'https://golemlab.eu/graph/31986118')}, {'story': Value(uri:'https://golemlab.eu/graph/31986769')}, {'story': Value(uri:'https://golemlab.eu/graph/31988194')}, {'story': Value(uri:'https://golemlab.eu/graph/31990723')}, {'story': Value(uri:'https://golemlab.eu/graph/31997710')}, {'story': Value(uri:'https://golemlab.eu/graph/32004163')}, {'story': Value(uri:'https://golemlab.eu/graph/32014285')}, {'story': Value(uri:'https://golemlab.eu/graph/32018554')}, {'story': Value(uri:'https://golemlab.eu/graph/32031145')}, {'story': Value(uri:'https://golemlab.eu/graph/32045182')}, {'story': Value(uri:'https://golemlab.eu/graph/32056453')}, {'story': Value(uri:'https://golemlab.eu/graph/32094913')}, {'story': Value(uri:'https://golemlab.eu/graph/32096002')}, {'story': Value(uri:'https://golemlab.eu/graph/32112160')}, {'story': Value(uri:'https://golemlab.eu/graph/32112922')}, {'story': Value(uri:'https://golemlab.eu/graph/32116042')}, {'story': Value(uri:'https://golemlab.eu/graph/32133508')}, {'story': Value(uri:'https://golemlab.eu/graph/32133511')}, {'story': Value(uri:'https://golemlab.eu/graph/32152840')}, {'story': Value(uri:'https://golemlab.eu/graph/32157250')}, {'story': Value(uri:'https://golemlab.eu/graph/32160580')}, {'story': Value(uri:'https://golemlab.eu/graph/32166505')}, {'story': Value(uri:'https://golemlab.eu/graph/32171179')}, {'story': Value(uri:'https://golemlab.eu/graph/32183617')}, {'story': Value(uri:'https://golemlab.eu/graph/3218879')}, {'story': Value(uri:'https://golemlab.eu/graph/32196097')}, {'story': Value(uri:'https://golemlab.eu/graph/32202247')}, {'story': Value(uri:'https://golemlab.eu/graph/3221594')}, {'story': Value(uri:'https://golemlab.eu/graph/32232982')}, {'story': Value(uri:'https://golemlab.eu/graph/32236126')}, {'story': Value(uri:'https://golemlab.eu/graph/32245603')}, {'story': Value(uri:'https://golemlab.eu/graph/32262505')}, {'story': Value(uri:'https://golemlab.eu/graph/32280616')}, {'story': Value(uri:'https://golemlab.eu/graph/32282197')}, {'story': Value(uri:'https://golemlab.eu/graph/32285638')}, {'story': Value(uri:'https://golemlab.eu/graph/322932')}, {'story': Value(uri:'https://golemlab.eu/graph/32300974')}, {'story': Value(uri:'https://golemlab.eu/graph/32316997')}, {'story': Value(uri:'https://golemlab.eu/graph/3232559')}, {'story': Value(uri:'https://golemlab.eu/graph/3232595')}, {'story': Value(uri:'https://golemlab.eu/graph/32338084')}, {'story': Value(uri:'https://golemlab.eu/graph/32359963')}, {'story': Value(uri:'https://golemlab.eu/graph/32361712')}, {'story': Value(uri:'https://golemlab.eu/graph/3239585')}, {'story': Value(uri:'https://golemlab.eu/graph/32416009')}, {'story': Value(uri:'https://golemlab.eu/graph/32426341')}, {'story': Value(uri:'https://golemlab.eu/graph/32429392')}, {'story': Value(uri:'https://golemlab.eu/graph/32429677')}, {'story': Value(uri:'https://golemlab.eu/graph/32448463')}, {'story': Value(uri:'https://golemlab.eu/graph/32452768')}, {'story': Value(uri:'https://golemlab.eu/graph/32455852')}, {'story': Value(uri:'https://golemlab.eu/graph/32457199')}, {'story': Value(uri:'https://golemlab.eu/graph/32471140')}, {'story': Value(uri:'https://golemlab.eu/graph/32474731')}, {'story': Value(uri:'https://golemlab.eu/graph/32478478')}, {'story': Value(uri:'https://golemlab.eu/graph/32481238')}, {'story': Value(uri:'https://golemlab.eu/graph/32481562')}, {'story': Value(uri:'https://golemlab.eu/graph/32482831')}, {'story': Value(uri:'https://golemlab.eu/graph/32496424')}, {'story': Value(uri:'https://golemlab.eu/graph/32499010')}, {'story': Value(uri:'https://golemlab.eu/graph/32507788')}, {'story': Value(uri:'https://golemlab.eu/graph/32508694')}, {'story': Value(uri:'https://golemlab.eu/graph/32519371')}, {'story': Value(uri:'https://golemlab.eu/graph/32538769')}, {'story': Value(uri:'https://golemlab.eu/graph/32541472')}, {'story': Value(uri:'https://golemlab.eu/graph/32555446')}, {'story': Value(uri:'https://golemlab.eu/graph/32555647')}, {'story': Value(uri:'https://golemlab.eu/graph/32556130')}, {'story': Value(uri:'https://golemlab.eu/graph/32582263')}, {'story': Value(uri:'https://golemlab.eu/graph/32582455')}, {'story': Value(uri:'https://golemlab.eu/graph/32585515')}, {'story': Value(uri:'https://golemlab.eu/graph/32609758')}, {'story': Value(uri:'https://golemlab.eu/graph/32612953')}, {'story': Value(uri:'https://golemlab.eu/graph/32616751')}, {'story': Value(uri:'https://golemlab.eu/graph/32617171')}, {'story': Value(uri:'https://golemlab.eu/graph/3261836')}, {'story': Value(uri:'https://golemlab.eu/graph/32633623')}, {'story': Value(uri:'https://golemlab.eu/graph/32642074')}, {'story': Value(uri:'https://golemlab.eu/graph/32651428')}, {'story': Value(uri:'https://golemlab.eu/graph/32660329')}, {'story': Value(uri:'https://golemlab.eu/graph/32661610')}, {'story': Value(uri:'https://golemlab.eu/graph/32662375')}, {'story': Value(uri:'https://golemlab.eu/graph/32670361')}, {'story': Value(uri:'https://golemlab.eu/graph/32676553')}, {'story': Value(uri:'https://golemlab.eu/graph/32684584')}, {'story': Value(uri:'https://golemlab.eu/graph/32688544')}, {'story': Value(uri:'https://golemlab.eu/graph/32695582')}, {'story': Value(uri:'https://golemlab.eu/graph/32695642')}, {'story': Value(uri:'https://golemlab.eu/graph/36394705')}, {'story': Value(uri:'https://golemlab.eu/graph/36395104')}, {'story': Value(uri:'https://golemlab.eu/graph/36401023')}, {'story': Value(uri:'https://golemlab.eu/graph/36402076')}, {'story': Value(uri:'https://golemlab.eu/graph/36403168')}, {'stor	0	1	1	Annotation error		
477	477	es	¿Cuántos Kudos recibió The prey of the golden eyed Hawk?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""The prey of the golden eyed Hawk"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'61')}]	477	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos recibió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de Crows - _____ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Crows - _____"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió Of spring and treacle tarts?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Of spring and treacle tarts"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos recibió The prey of the golden eyed Hawk?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
?story golem:title ""The prey of the golden eyed Hawk"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'61')}]	1	0	0			
478	478	es	¿Cuántos Kudos recibió How Harry Became Reborn?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""How Harry Became Reborn"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'521')}]	478	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos recibió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió My Sweet Vampire?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""My Sweet Vampire"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió The prey of the golden eyed Hawk?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""The prey of the golden eyed Hawk"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos recibió How Harry Became Reborn?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""How Harry Became Reborn"" . ?story golem:numberOfKudos ?kudos . }
"	[{'kudos': Value(typed-literal:'521')}]	1	0	0			
479	479	es	¿Cuántos Kudos recibió My Sweet Vampire?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""My Sweet Vampire"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'42')}, {'kudos': Value(typed-literal:'24')}]	479	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos recibió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió A Cauldron Full of Hot, Strong Love?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""A Cauldron Full of Hot, Strong Love"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió I'll be your chaperone?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""I'll be your chaperone"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos recibió My Sweet Vampire?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
?story golem:title ""My Sweet Vampire"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'42')}, {'kudos': Value(typed-literal:'24')}]	1	0	0			
480	480	es	¿Cuántos Kudos recibió A Cauldron Full of Hot, Strong Love?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""A Cauldron Full of Hot, Strong Love"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'55')}, {'kudos': Value(literal:'None')}, {'kudos': Value(typed-literal:'16')}, {'kudos': Value(typed-literal:'30')}, {'kudos': Value(typed-literal:'13')}]	480	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos recibió Of spring and treacle tarts?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Of spring and treacle tarts"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de Salut les copains ! - Forneri de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Salut les copains ! - Forneri"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos recibió A Cauldron Full of Hot, Strong Love?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?kudos WHERE { 
?story golem:title ""A Cauldron Full of Hot, Strong Love"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'55')}, {'kudos': Value(literal:'None')}, {'kudos': Value(typed-literal:'16')}, {'kudos': Value(typed-literal:'30')}, {'kudos': Value(typed-literal:'13')}]	1	0	0			
481	481	es	¿Cuántos Kudos recibió I Hate You And I Hope You Know That.?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""I Hate You And I Hope You Know That."" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'64')}]	481	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos recibió I'll be your chaperone?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""I'll be your chaperone"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de Salut les copains ! - Forneri de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Salut les copains ! - Forneri"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos recibió I Hate You And I Hope You Know That.?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
?story golem:title ""I Hate You And I Hope You Know That."" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'64')}]	1	0	0			
482	482	es	¿Cuántos Kudos recibió Of spring and treacle tarts?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Of spring and treacle tarts"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'78')}]	482	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos recibió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió A Cauldron Full of Hot, Strong Love?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""A Cauldron Full of Hot, Strong Love"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió Coffee Shop?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Coffee Shop"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos recibió Of spring and treacle tarts?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
  ?story golem:title ""Of spring and treacle tarts"" . 
  ?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'78')}]	1	0	0			
483	483	es	¿Cuántos Kudos recibió If only, if only?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""If only, if only"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'12')}, {'kudos': Value(typed-literal:'247')}, {'kudos': Value(typed-literal:'18')}]	483	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos recibió A Cauldron Full of Hot, Strong Love?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""A Cauldron Full of Hot, Strong Love"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de _______ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""_______"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos recibió If only, if only?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
  ?story golem:title ""If only, if only"" . 
  ?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'12')}, {'kudos': Value(typed-literal:'247')}, {'kudos': Value(typed-literal:'18')}]	1	0	0			
484	484	es	¿Cuántos Kudos recibió Coffee Shop?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Coffee Shop"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'300')}, {'kudos': Value(typed-literal:'28')}, {'kudos': Value(typed-literal:'101')}, {'kudos': Value(typed-literal:'4')}, {'kudos': Value(typed-literal:'110')}, {'kudos': Value(typed-literal:'49')}, {'kudos': Value(typed-literal:'92')}, {'kudos': Value(typed-literal:'13')}, {'kudos': Value(typed-literal:'5')}, {'kudos': Value(literal:'None')}, {'kudos': Value(typed-literal:'25')}, {'kudos': Value(typed-literal:'21')}, {'kudos': Value(typed-literal:'30')}, {'kudos': Value(typed-literal:'22')}, {'kudos': Value(typed-literal:'10')}, {'kudos': Value(typed-literal:'3')}, {'kudos': Value(typed-literal:'18')}, {'kudos': Value(typed-literal:'321')}, {'kudos': Value(typed-literal:'65')}, {'kudos': Value(typed-literal:'42')}, {'kudos': Value(typed-literal:'48')}, {'kudos': Value(typed-literal:'14')}, {'kudos': Value(typed-literal:'34')}, {'kudos': Value(typed-literal:'51')}, {'kudos': Value(typed-literal:'8')}, {'kudos': Value(typed-literal:'38')}, {'kudos': Value(typed-literal:'1375')}, {'kudos': Value(typed-literal:'1')}, {'kudos': Value(typed-literal:'104')}, {'kudos': Value(typed-literal:'106')}, {'kudos': Value(typed-literal:'47')}, {'kudos': Value(typed-literal:'11')}, {'kudos': Value(typed-literal:'7')}, {'kudos': Value(typed-literal:'40')}, {'kudos': Value(typed-literal:'31')}, {'kudos': Value(typed-literal:'19')}, {'kudos': Value(typed-literal:'1126')}, {'kudos': Value(typed-literal:'130')}, {'kudos': Value(typed-literal:'24')}, {'kudos': Value(typed-literal:'79')}, {'kudos': Value(typed-literal:'105')}, {'kudos': Value(typed-literal:'112')}, {'kudos': Value(typed-literal:'6')}, {'kudos': Value(typed-literal:'36')}, {'kudos': Value(typed-literal:'85')}, {'kudos': Value(typed-literal:'74')}, {'kudos': Value(typed-literal:'41')}, {'kudos': Value(typed-literal:'142')}, {'kudos': Value(typed-literal:'15')}, {'kudos': Value(typed-literal:'16')}, {'kudos': Value(typed-literal:'57')}, {'kudos': Value(typed-literal:'77')}, {'kudos': Value(typed-literal:'26')}, {'kudos': Value(typed-literal:'2')}, {'kudos': Value(typed-literal:'78')}, {'kudos': Value(typed-literal:'480')}, {'kudos': Value(typed-literal:'71')}, {'kudos': Value(typed-literal:'72')}, {'kudos': Value(typed-literal:'60')}, {'kudos': Value(typed-literal:'70')}, {'kudos': Value(typed-literal:'67')}, {'kudos': Value(typed-literal:'204')}, {'kudos': Value(typed-literal:'9')}, {'kudos': Value(typed-literal:'478')}, {'kudos': Value(typed-literal:'119')}, {'kudos': Value(typed-literal:'56')}, {'kudos': Value(typed-literal:'157')}, {'kudos': Value(typed-literal:'232')}, {'kudos': Value(typed-literal:'86')}, {'kudos': Value(typed-literal:'402')}, {'kudos': Value(typed-literal:'45')}, {'kudos': Value(typed-literal:'180')}, {'kudos': Value(typed-literal:'155')}, {'kudos': Value(typed-literal:'50')}, {'kudos': Value(typed-literal:'307')}, {'kudos': Value(typed-literal:'497')}, {'kudos': Value(typed-literal:'89')}, {'kudos': Value(typed-literal:'162')}, {'kudos': Value(typed-literal:'100')}, {'kudos': Value(typed-literal:'29')}, {'kudos': Value(typed-literal:'61')}, {'kudos': Value(typed-literal:'12')}, {'kudos': Value(typed-literal:'17')}]	484	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos recibió Of spring and treacle tarts?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Of spring and treacle tarts"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de Salut les copains ! - Forneri de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Salut les copains ! - Forneri"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos recibió Coffee Shop?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?kudos WHERE { 
?story golem:title ""Coffee Shop"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'300')}, {'kudos': Value(typed-literal:'28')}, {'kudos': Value(typed-literal:'101')}, {'kudos': Value(typed-literal:'4')}, {'kudos': Value(typed-literal:'110')}, {'kudos': Value(typed-literal:'49')}, {'kudos': Value(typed-literal:'92')}, {'kudos': Value(typed-literal:'13')}, {'kudos': Value(typed-literal:'5')}, {'kudos': Value(literal:'None')}, {'kudos': Value(typed-literal:'25')}, {'kudos': Value(typed-literal:'21')}, {'kudos': Value(typed-literal:'30')}, {'kudos': Value(typed-literal:'22')}, {'kudos': Value(typed-literal:'10')}, {'kudos': Value(typed-literal:'3')}, {'kudos': Value(typed-literal:'18')}, {'kudos': Value(typed-literal:'321')}, {'kudos': Value(typed-literal:'65')}, {'kudos': Value(typed-literal:'42')}, {'kudos': Value(typed-literal:'48')}, {'kudos': Value(typed-literal:'14')}, {'kudos': Value(typed-literal:'34')}, {'kudos': Value(typed-literal:'51')}, {'kudos': Value(typed-literal:'8')}, {'kudos': Value(typed-literal:'38')}, {'kudos': Value(typed-literal:'1375')}, {'kudos': Value(typed-literal:'1')}, {'kudos': Value(typed-literal:'104')}, {'kudos': Value(typed-literal:'106')}, {'kudos': Value(typed-literal:'47')}, {'kudos': Value(typed-literal:'11')}, {'kudos': Value(typed-literal:'7')}, {'kudos': Value(typed-literal:'40')}, {'kudos': Value(typed-literal:'31')}, {'kudos': Value(typed-literal:'19')}, {'kudos': Value(typed-literal:'1126')}, {'kudos': Value(typed-literal:'130')}, {'kudos': Value(typed-literal:'24')}, {'kudos': Value(typed-literal:'79')}, {'kudos': Value(typed-literal:'105')}, {'kudos': Value(typed-literal:'112')}, {'kudos': Value(typed-literal:'6')}, {'kudos': Value(typed-literal:'36')}, {'kudos': Value(typed-literal:'85')}, {'kudos': Value(typed-literal:'74')}, {'kudos': Value(typed-literal:'41')}, {'kudos': Value(typed-literal:'142')}, {'kudos': Value(typed-literal:'15')}, {'kudos': Value(typed-literal:'16')}, {'kudos': Value(typed-literal:'57')}, {'kudos': Value(typed-literal:'77')}, {'kudos': Value(typed-literal:'26')}, {'kudos': Value(typed-literal:'2')}, {'kudos': Value(typed-literal:'78')}, {'kudos': Value(typed-literal:'480')}, {'kudos': Value(typed-literal:'71')}, {'kudos': Value(typed-literal:'72')}, {'kudos': Value(typed-literal:'60')}, {'kudos': Value(typed-literal:'70')}, {'kudos': Value(typed-literal:'67')}, {'kudos': Value(typed-literal:'204')}, {'kudos': Value(typed-literal:'9')}, {'kudos': Value(typed-literal:'478')}, {'kudos': Value(typed-literal:'119')}, {'kudos': Value(typed-literal:'56')}, {'kudos': Value(typed-literal:'157')}, {'kudos': Value(typed-literal:'232')}, {'kudos': Value(typed-literal:'86')}, {'kudos': Value(typed-literal:'402')}, {'kudos': Value(typed-literal:'45')}, {'kudos': Value(typed-literal:'180')}, {'kudos': Value(typed-literal:'155')}, {'kudos': Value(typed-literal:'50')}, {'kudos': Value(typed-literal:'307')}, {'kudos': Value(typed-literal:'497')}, {'kudos': Value(typed-literal:'89')}, {'kudos': Value(typed-literal:'162')}, {'kudos': Value(typed-literal:'100')}, {'kudos': Value(typed-literal:'29')}, {'kudos': Value(typed-literal:'61')}, {'kudos': Value(typed-literal:'12')}, {'kudos': Value(typed-literal:'17')}]	1	0	0			
485	485	es	¿Cuántos Kudos recibió Relationship Manifesto?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Relationship Manifesto"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'130')}]	485	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos recibió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""[[story]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de Salut les copains ! - Forneri de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Salut les copains ! - Forneri"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió A Cauldron Full of Hot, Strong Love?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""A Cauldron Full of Hot, Strong Love"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos recibió Relationship Manifesto?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?kudos WHERE { 
?story golem:title ""Relationship Manifesto"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'130')}]	1	0	0			
486	486	es	¿Cuántos Kudos recibió I'll be your chaperone?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""I'll be your chaperone"" . ?story golem:numberOfKudos ?kudos . }"	[{'kudos': Value(typed-literal:'185')}]	486	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos reciben las historias de Salut les copains ! - Forneri de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Salut les copains ! - Forneri"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió I Hate You And I Hope You Know That.?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""I Hate You And I Hope You Know That."" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió Of spring and treacle tarts?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""Of spring and treacle tarts"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos recibió I'll be your chaperone?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?kudos WHERE { 
  ?story golem:title ""I'll be your chaperone"" . 
  ?story golem:numberOfKudos ?kudos . 
}
"	[{'kudos': Value(typed-literal:'185')}]	1	0	0			
488	488	es	¿Dónde está publicada nights we belong to?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""nights we belong to"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	488	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Dónde está publicada In The Dark?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""In The Dark"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Vertigo?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Vertigo"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó Tucked Into the Night Sky?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tucked Into the Night Sky"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: ¿Dónde está publicada nights we belong to?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?publisher WHERE { 
?story golem:title ""nights we belong to"" . 
?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
489	489	es	¿Dónde está publicada Vertigo?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Vertigo"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	489	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Dónde está publicada [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada In The Dark?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""In The Dark"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Daddy’s boy?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Daddy’s boy"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: ¿Dónde está publicada Vertigo?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?publisher WHERE { 
?story golem:title ""Vertigo"" . 
?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
490	490	es	¿Dónde está publicada Getting To Know You?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Getting To Know You"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	490	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Dónde está publicada Lucky You?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Lucky You"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Vertigo?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Vertigo"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó The Things We Do?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""The Things We Do"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: ¿Dónde está publicada Getting To Know You?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?publisher WHERE { 
?story golem:title ""Getting To Know You"" . 
?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
491	491	es	¿Dónde está publicada Content to Stay Forever Locked in His Embrace?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Content to Stay Forever Locked in His Embrace"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	491	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Dónde está publicada Daddy’s boy?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Daddy’s boy"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó Hold Me One More Time?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Hold Me One More Time"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Vertigo?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Vertigo"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: ¿Dónde está publicada Content to Stay Forever Locked in His Embrace?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?publisher WHERE { 
  ?story golem:title ""Content to Stay Forever Locked in His Embrace"" . 
  ?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
492	492	es	¿Dónde está publicada In The Dark?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""In The Dark"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	492	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuándo se publicó Tucked Into the Night Sky?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tucked Into the Night Sky"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Vertigo?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Vertigo"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿De qué trata Little Black Book?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Little Black Book"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: ¿Dónde está publicada In The Dark?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?publisher WHERE { 
?story golem:title ""In The Dark"" . 
?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
493	493	es	¿Dónde está publicada Virus?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Virus"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	493	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Dónde está publicada Vertigo?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Vertigo"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""[[story]]"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Of Mice and Men?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Of Mice and Men"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: ¿Dónde está publicada Virus?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?publisher WHERE { 
?story golem:title ""Virus"" . 
?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
494	494	es	¿Dónde está publicada Of Mice and Men?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Of Mice and Men"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	494	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Dónde está publicada Vertigo?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Vertigo"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Daddy’s boy?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Daddy’s boy"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Harriet Potter and the Philosopher's Stone?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Harriet Potter and the Philosopher's Stone"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: ¿Dónde está publicada Of Mice and Men?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?publisher WHERE { 
?story golem:title ""Of Mice and Men"" . 
?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
495	495	es	¿Dónde está publicada Lucky You?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Lucky You"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	495	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Dónde está publicada Getting To Know You?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Getting To Know You"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Vertigo?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Vertigo"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Happy accidents?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Happy accidents"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Dónde está publicada Lucky You?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?publisher WHERE { 
?story golem:title ""Lucky You"" . 
?story golem:publisher ?publisher . }
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
496	496	es	¿Dónde está publicada Daddy’s boy?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Daddy’s boy"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	496	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Dónde está publicada Vertigo?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Vertigo"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Of Mice and Men?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Of Mice and Men"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada In The Dark?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""In The Dark"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

Question: ¿Dónde está publicada Daddy’s boy?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Daddy's boy"" . ?story golem:publisher ?publisher . }
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
497	497	es	¿Dónde está publicada Harriet Potter and the Philosopher's Stone?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Harriet Potter and the Philosopher's Stone"" . ?story golem:publisher ?publisher . }"	[{'publisher': Value(literal:'archiveofourown.org')}]	497	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos capítulos tiene Harriet Potter & the Stray Cat?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters WHERE {  ?story golem:title ""Harriet Potter & the Stray Cat"" . ?story golem:numberOfChapters ?chapters . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Vertigo?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Vertigo"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó [Art] A Stroll Through 1920s Diagon Alley?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""[Art] A Stroll Through 1920s Diagon Alley"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

Question: ¿Dónde está publicada Harriet Potter and the Philosopher's Stone?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?publisher WHERE { 
?story golem:title ""Harriet Potter and the Philosopher's Stone"" . 
?story golem:publisher ?publisher . 
}
"	[{'publisher': Value(literal:'archiveofourown.org')}]	1	0	0			
499	499	es	¿De qué trata Magical Moment in the Tent?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Magical Moment in the Tent"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	"[{'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Underage'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Accidental Voyeurism, Anal, CFNM, Cucking, Cuckolding, Cum shot, Dirty Talk, Exposure, Female Domination, Femdom, Ginny Weasley Bashing, Humiliation, Jealously, Jerking, Masturbation, Mutual Masturbation, Penis Size, Shame, Size Difference, Size Kink, Verbal Abuse, Verbal Humiliation, Voyeurism, cum load, encourgement, wanking, whore'), 'summary': Value(literal:""Hermione, posessed by the cursed necklace, takes Harry's mind off things for a brief magical moment."")}]"	499	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame historias del universo __ - ____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - ____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo _-fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""_-fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en Magician?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Magician"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿De qué trata Magical Moment in the Tent?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?summary WHERE { 
  ?story golem:title ""Magical Moment in the Tent"" . 
  ?story golem:summary ?summary . 
}
"	"[{'summary': Value(literal:""Hermione, posessed by the cursed necklace, takes Harry's mind off things for a brief magical moment."")}]"	0	1	1	Incomplete query	Underfull	
500	500	es	¿De qué trata (fanart) Wolfstar prompts?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""(fanart) Wolfstar prompts"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	"[{'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:""Alternate Universe - Rock Band, First War with Voldemort, Lie Low At Lupin's (Harry Potter), Marauders Era (Harry Potter), Nudity, Post-Harry Potter and the Goblet of Fire, Recreational Drug Use, Sexual Content, Sirius Black as Padfoot, Trans Remus Lupin""), 'summary': Value(literal:'Prompt: Sirius makes cookies for a grumpy Remus')}]"	500	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué serie pertenece Moonrise?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Moonrise"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece Werewolves of the World, Unite!?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Werewolves of the World, Unite!"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en Puffskein Hunt?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Puffskein Hunt"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿De qué trata (fanart) Wolfstar prompts?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
?story golem:title ""Wolfstar prompts"" . 
?story golem:summary ?summary . 
}
"	[]	0	0	1	Failed NER		
501	501	es	¿De qué trata Little Black Book?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Little Black Book"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	"[{'series': Value(literal:'the inside of my head is a very dark place [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Angst, Lestrade is an ass, PTSD ?, Self Harm, dark!john, really really angsty'), 'summary': Value(literal:""In the middle of a drugs bust, Lestrade & co find something less than savoury in the flat. Only thing is? It's not Sherlock's, and that changes everything. They will never treat John the same again. From a prompt from the kink meme. Series: the inside of my head is a very dark place [2]"")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:""Gemma Is a Crazy Bitch, John's Journal, Season/Series 01, What-If""), 'summary': Value(literal:'""He\'d been asking questions about his dad\'s vision for the club. She had to get the book away from Jax before he read any more of it."" Gemma schemes to steal her late husband\'s journal.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Multi'), 'keywords': Value(literal:'Alternate Universe - Succubi & Incubi, Autofellatio, BDSM, Blindfolds, Blow Jobs, Bondage, Consent Play, Crossdressing, Cum Play, Fivesome - M/M/M/M/M, Gags, Gangbang, Knotting, Office Sex, Prostate Massage, Sex Toys, Spanking, Vibrators, Wall Sex'), 'summary': Value(literal:""A collection of filthy, shamelessly smutty drabbles and mini-fics. Oh, the things you'd find in a SOLDIER's little black book. Mostly ASGZC, or various pairings within. Yaoi, threesomes and moresomes, various kinks. Chapter by chapter listing now provided, so you can find what you're looking for more easily! CHAPTER 1: ASGZC, Cloud gives Zack the most filthy kiss imaginable. CHATPER 2: Angeal/Genesis, autofellatio. CHAPTER 3: Zack/Cloud/Aerith, crossdressing. CHAPTER 4: ASGZC, Cloud has a fantasy about having a vibrator in his ass and the boyfriends tormenting him with it. CHAPTER 5: Sephiroth/Cloud, puppet!Cloud + toys. CHAPTER 6: Genesis/Cloud, vibrator adventures. CHAPTER 7: Angeal/Sephiroth, spanking. CHAPTER 8: Zack/Cloud, marking and comeplay. CHAPTER 9: Sephiroth/Cloud, sex against the wall in Sephiroth's office. CHAPTER 10: Genesis/Cloud, post-DOC with lots of bondage. CHAPTER 11: Sephiroth/Cloud, knotting. CHAPTER 12: ASGZC, incubi AU. CHAPTER 13: Sephiroth/Cloud, making out. CHAPTER 14: Cloud/Sephiroth, prostate massage. CHAPTER 15: ASGZC, crossdressing, gangbang. CHAPTER 16: Sephiroth/Cloud, virgin killer sweater."")}, {'series': Value(literal:'The Jackie and Hyde Rom-Com Project [1]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Angst, Angst and Feels, Background Eric Forman and Donna Pinciotti, Drama & Romance, Eventual Happy Ending, Eventual Michael Kelso and Brooke Rockwell, Fluff, Hyde has trust issues, Jackie Burkhart and Steven Hyde endgame, Jackie also has trust issues, Jackie and Hyde centric, Other Additional Tags to Be Added, Romantic Comedy, based on a movie'), 'summary': Value(literal:""“I don’t know why you haven’t looked for his Little Black Book yet.” “Little Black Book? What does that mean?” “You know… it's the list of names belonging to the previous lovers a person has had. If he hasn’t told you about these girls himself, I can guarantee he’s got one.” . . . If there was one thing Jackie Burkhart knew to be true, it was that she loved Steven Hyde. After learning that he may not be as open with her as she thought, Jackie sets out to uncover what he refuses to tell her himself. If omission is the greatest form of  lie, how long had he been a liar?"")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:""Fluff, Podfic Length: 0-10 Minutes, Poetry, Tumblr Prompt, also available as a podfic! link in the beginning note, the whole thing isn't poetry there's just like 1 poem in there""), 'summary': Value(literal:""Crowley has been writing an awful lot in a little notebook, and Aziraphale is painfully curious what it's all about."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Light BDSM, Light Bondage, Master/Slave, Mind Games, Restraints, Spanking'), 'summary': Value(literal:'Six months after the events of their fondness stories, Yuxiang is given Peking Duck’s sin diary from the kingdom he helped destroy. What follows is a descent into depravity.')}, {'series': Value(literal:'St. Amelia’s [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Other Additional Tags to Be Added'), 'summary': Value(literal:""It's never a bad idea to keep track of your contacts. Series: St. Amelia’s [2]"")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Major Character Death'), 'romantic_category': Value(literal:'Multi'), 'keywords': Value(literal:'Het, Slash'), 'summary': Value(literal:'Tony Stark has had many meaningful relationships in his life. Most of them have involved sex.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Major Character Death'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Alternate Universe - Modern Setting, Dead Dove: Do Not Eat, Emotional/Psychological Abuse, Imprisonment, Mental Instability, Non-Consensual Drug Use, Smut, Stockholm Syndrome, Straight Up Abuse, reader is kira'), 'summary': Value(literal:""Life is monotony. The only thing that's getting Soul through the boring day to day is Kira and reading of their vigilantism. That is, at least, until Lady Luck deigned to smile on him on a Thursday night between deliveries. (you were doomed the moment he opened the door)"")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'Multi'), 'keywords': Value(literal:'Aged-Up Character(s), Class 1-A Shenanigans (My Hero Academia), Class 1-B Shenanigans (My Hero Academia), Expect more partners, Kacchako is endgame, Ochabowl, Out of Character, Shameless Smut, Smut, Todochako, Uraraka sleeps around, kacchako, smut with plot'), 'summary': Value(literal:'FuckGirl!Uraraka has a list of all the classmates she’s slept with, notes of what they like and how long it takes for them to come, dick size and curvature. Just about anyone above a 5 is on the list except for the resident gremlin and virgin boy: Bakugou.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Daddy Kink, Diary/Journal, Fingerfucking, Gay Sex, I lied about the fluff, Im not going to Hell, Josh fucks Tyler with his drumstick, Just a teeny bit of plot, PWP, Plot What Plot/Porn Without Plot, Porn, Rough Sex, Sex, Smut, Spanking, That falls into the wrong hands, Very Secret Diary, just a little bit of fluff'), 'summary': Value(literal:""It was a meant to be a songwriting book. It held lyrics, doodles….and thoughts about Josh. How Tyler felt about Josh. The dirty fantasies about Josh. The things he wanted Josh to do to him. The things he wanted to do to Josh. In a split second…. It's gone. And everything spills off the pages…."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'Evakteket Birthday Challenge'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alternate Universe, Alternate Universe - Canon Divergence, Alternate Universe - College/University, Alternate Universe - Different First Meeting, Anal Play, Crossdressing, Edgeplay, Evakteket Challenge, Feminization, Masturbation, Naughty, POV Isak Valtersen, Pining, Prompt Fic, Sex Toys, Smut, Stalking, Underwear, Underwear Kink, Underwear Theft, caught red-handed'), 'summary': Value(literal:""prompt: Caught Red-handed, College/University, Canon Divergence Isak Valtersen is studying his third year at the University of Oslo and having the time of his life. Enter Evy Bech Næsheim, straight out of Nissen, in his stockings, mini skirts and bubblegum scented lip gloss. But why won't the new campus slut give Isak the time of day?"")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alternate Universe - High School, Coming Out, Depression, Diary/Journal, Fluff, Fluff and Angst, High School, Light Angst, Very Secret Diary, klance'), 'summary': Value(literal:'The little black book that Keith carried with him EVERYWHERE was the thing in life he cherished most. It had everything in it, from his depression clouded thoughts to his major crush on his long time best friend Lance McClain to songs he wrote. What will happen when those thoughts become public knowledge?')}, {'series': Value(literal:'FFXIVWrite 2020 [3]'), 'collection': Value(literal:'#FFxivWrite2020 Final Fantasy 30 Day Writing Challenge'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Alcohol, Canon Compliant, Patch 5.0: Shadowbringers Spoilers, Prompt Fill, Tumblr: FFXIVwrite, Tumblr: FFXIVwrite2020'), 'summary': Value(literal:'Thancred initially noticed Urianger’s little black book during their first Moonfire Faire back in Eorzea. His head pounding with hangover, he spared little thought for it. The man practiced arcanima after all, and it was rarer to see him without a book in hand. It did seem a tad more odd when he had it out around the bonfire the next night, but most of Thancred’s attention was on a buxom Viera by the name of Arjm and most decidedly not on the silent looks his Elezen companion kept casting from under his cowl. A cowl, at the beach in the heat of a Costa del Sol summer. Really. Urianger keeps a little black book of Thancred\'s conquests. Fill for the FFXIV write 2020 prompt ""lush.""')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Graphic Depictions Of Violence'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'Alternate Universe - College/University, Alternate Universe - Human, Attempted Murder, lapidot - Freeform, storyline is focused around lapidot, trigger warning, tw, water tw'), 'summary': Value(literal:'Peridot is a friend-less jerk trying to get through college who just happens to rescue a girl. expect some dumb gem refrences')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'221B Ficlet, blame twitter'), 'summary': Value(literal:'I wrote a tweet speculating about Sherlock\'s ""little black book"" and @BenBatched said she wanted to see it as a fic and I guess I wasn\'t gonna get my NaNoWriMo book started tonight anyway... (Those of you who are doing NaNo2019, I\'m wendymarlowe over there. I wanna be your friend!)')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:""Alcohol consumption and other merriment, Also Bisexual!Erin, EVENTUAL holtzbert, In which Erin receives flirting tips from a smitten Holtzmann, i'm currently on summer vacation and was hit with inspiration, vacation fic""), 'summary': Value(literal:""Erin's plans for the team to go on a weekend vacation are hijacked by and argument between Patty and Holtzmann over who in the group has the most 'game'. The relaxing getaway instead becomes something of a competition, with pretty surprising results."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Pre-Slash'), 'summary': Value(literal:'That Tony had a little black book was probably not much of a surprise to anyone.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alternate Universe - Succubi & Incubi, Autofellatio, BDSM, Blindfolds, Blow Jobs, Bondage, Consent Play, Crossdressing, Cum Play, Fivesome - M/M/M/M/M, Gags, Gangbang, Knotting, Office Sex, Prostate Massage, Sex Toys, Spanking, Vibrators, Wall Sex'), 'summary': Value(literal:""A collection of filthy, shamelessly smutty drabbles and mini-fics. Oh, the things you'd find in a SOLDIER's little black book. Mostly ASGZC, or various pairings within. Yaoi, threesomes and moresomes, various kinks. Chapter by chapter listing now provided, so you can find what you're looking for more easily! CHAPTER 1: ASGZC, Cloud gives Zack the most filthy kiss imaginable. CHATPER 2: Angeal/Genesis, autofellatio. CHAPTER 3: Zack/Cloud/Aerith, crossdressing. CHAPTER 4: ASGZC, Cloud has a fantasy about having a vibrator in his ass and the boyfriends tormenting him with it. CHAPTER 5: Sephiroth/Cloud, puppet!Cloud + toys. CHAPTER 6: Genesis/Cloud, vibrator adventures. CHAPTER 7: Angeal/Sephiroth, spanking. CHAPTER 8: Zack/Cloud, marking and comeplay. CHAPTER 9: Sephiroth/Cloud, sex against the wall in Sephiroth's office. CHAPTER 10: Genesis/Cloud, post-DOC with lots of bondage. CHAPTER 11: Sephiroth/Cloud, knotting. CHAPTER 12: ASGZC, incubi AU. CHAPTER 13: Sephiroth/Cloud, making out. CHAPTER 14: Cloud/Sephiroth, prostate massage. CHAPTER 15: ASGZC, crossdressing, gangbang. CHAPTER 16: Sephiroth/Cloud, virgin killer sweater."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Aged-Up Character(s), Class 1-A Shenanigans (My Hero Academia), Class 1-B Shenanigans (My Hero Academia), Expect more partners, Kacchako is endgame, Ochabowl, Out of Character, Shameless Smut, Smut, Todochako, Uraraka sleeps around, kacchako, smut with plot'), 'summary': Value(literal:'FuckGirl!Uraraka has a list of all the classmates she’s slept with, notes of what they like and how long it takes for them to come, dick size and curvature. Just about anyone above a 5 is on the list except for the resident gremlin and virgin boy: Bakugou.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Cute, Not Actually Unrequited Love, Severus is a softy, Unrequited Love'), 'summary': Value(literal:'Prompt: little black book')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Angst, Auror Draco Malfoy, Auror Harry Potter, Auror Partners, Eventual Smut, Explicit Language, Mood Swings, Pranks and Practical Jokes, Sassy Draco, Teasing'), 'summary': Value(literal:""The last thing Harry Potter wanted to see after the battle of Hogwarts was Draco Malfoy. So, of course, with his luck, he found himself sharing a workspace with him on a daily basis. Their relationship began on neutral terms, naturally, considering they had both saved each other's lives a handful of times and Harry had testified for both Draco and his mother at their trial, but with that grew acquaintanceship, and then Draco's swift and inevitable descend back into insufferableness. Draco had turned messing with Harry into a sport; some sort of twisted game at which he excelled in more than he ever would at even his own profession. Draco's incessant teasing almost began feeling familiar to him, but when his vexatious tendencies seem to come to a sudden halt Harry finds himself missing the arrogant git he had grown so used to spending his days in an ill-lit office with."")}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'F/F'), 'keywords': Value(literal:'Aged-Up Character(s), Class 1-A Shenanigans (My Hero Academia), Class 1-B Shenanigans (My Hero Academia), Expect more partners, Kacchako is endgame, Ochabowl, Out of Character, Shameless Smut, Smut, Todochako, Uraraka sleeps around, kacchako, smut with plot'), 'summary': Value(literal:'FuckGirl!Uraraka has a list of all the classmates she’s slept with, notes of what they like and how long it takes for them to come, dick size and curvature. Just about anyone above a 5 is on the list except for the resident gremlin and virgin boy: Bakugou.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Community: kakasaku, Humor, Romance'), 'summary': Value(literal:'Kakashi isn\'t the only one who enjoys ""interesting"" titles like Icha Icha Paradise. Sakura would die of embarrassment if anyone ever found out... KakaSaku. Complete.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Fade to Black, Past Relationship(s), Post Dgs2, background barok/stronghart, background kazuma/jigoku, brief brief mention of klint/stronghart, mentions of fisting, mentions of whipping'), 'summary': Value(literal:'“Is it too early in our relationship for me to ask about whatever was going on between you and Stronghart?” “You’ve never been too good at pillow talk.” “I’m assuming that’s a yes, then? Too early?” (Barok and Kazuma swap stories.)')}]"	501	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Dónde está publicada In The Dark?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""In The Dark"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó Tucked Into the Night Sky?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Tucked Into the Night Sky"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de Hearts of painted Black Part 2: The Forgotten Echo?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Hearts of painted Black Part 2: The Forgotten Echo"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿De qué trata Little Black Book?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?summary WHERE { 
  ?story golem:title ""Little Black Book"" . 
  ?story golem:summary ?summary . 
}
"	"[{'summary': Value(literal:'Prompt: little black book')}, {'summary': Value(literal:'Hermione finds a Little Black Book in the common room...*random crack*')}, {'summary': Value(literal:""The last thing Harry Potter wanted to see after the battle of Hogwarts was Draco Malfoy. So, of course, with his luck, he found himself sharing a workspace with him on a daily basis. Their relationship began on neutral terms, naturally, considering they had both saved each other's lives a handful of times and Harry had testified for both Draco and his mother at their trial, but with that grew acquaintanceship, and then Draco's swift and inevitable descend back into insufferableness. Draco had turned messing with Harry into a sport; some sort of twisted game at which he excelled in more than he ever would at even his own profession. Draco's incessant teasing almost began feeling familiar to him, but when his vexatious tendencies seem to come to a sudden halt Harry finds himself missing the arrogant git he had grown so used to spending his days in an ill-lit office with."")}, {'summary': Value(literal:'Peridot is a friend-less jerk trying to get through college who just happens to rescue a girl. expect some dumb gem refrences')}, {'summary': Value(literal:'Thancred initially noticed Urianger’s little black book during their first Moonfire Faire back in Eorzea. His head pounding with hangover, he spared little thought for it. The man practiced arcanima after all, and it was rarer to see him without a book in hand. It did seem a tad more odd when he had it out around the bonfire the next night, but most of Thancred’s attention was on a buxom Viera by the name of Arjm and most decidedly not on the silent looks his Elezen companion kept casting from under his cowl. A cowl, at the beach in the heat of a Costa del Sol summer. Really. Urianger keeps a little black book of Thancred\'s conquests. Fill for the FFXIV write 2020 prompt ""lush.""')}, {'summary': Value(literal:""A collection of filthy, shamelessly smutty drabbles and mini-fics. Oh, the things you'd find in a SOLDIER's little black book. Mostly ASGZC, or various pairings within. Yaoi, threesomes and moresomes, various kinks. Chapter by chapter listing now provided, so you can find what you're looking for more easily! CHAPTER 1: ASGZC, Cloud gives Zack the most filthy kiss imaginable. CHATPER 2: Angeal/Genesis, autofellatio. CHAPTER 3: Zack/Cloud/Aerith, crossdressing. CHAPTER 4: ASGZC, Cloud has a fantasy about having a vibrator in his ass and the boyfriends tormenting him with it. CHAPTER 5: Sephiroth/Cloud, puppet!Cloud + toys. CHAPTER 6: Genesis/Cloud, vibrator adventures. CHAPTER 7: Angeal/Sephiroth, spanking. CHAPTER 8: Zack/Cloud, marking and comeplay. CHAPTER 9: Sephiroth/Cloud, sex against the wall in Sephiroth's office. CHAPTER 10: Genesis/Cloud, post-DOC with lots of bondage. CHAPTER 11: Sephiroth/Cloud, knotting. CHAPTER 12: ASGZC, incubi AU. CHAPTER 13: Sephiroth/Cloud, making out. CHAPTER 14: Cloud/Sephiroth, prostate massage. CHAPTER 15: ASGZC, crossdressing, gangbang. CHAPTER 16: Sephiroth/Cloud, virgin killer sweater."")}, {'summary': Value(literal:'Bodie has a secret.')}, {'summary': Value(literal:'That Tony had a little black book was probably not much of a surprise to anyone.')}, {'summary': Value(literal:""Desperate to tell Dean how he feels about him, Sam consults 3 unlikely experts from Dean's little black book."")}, {'summary': Value(literal:""This is a copy of the story I just entered into a contest. There are no names used, it's just a wife recounting her tale. No relation to anyone. It's about when she found a little black book and 20k. I should add it had to be under 2000 words."")}, {'summary': Value(literal:""Life is monotony. The only thing that's getting Soul through the boring day to day is Kira and reading of their vigilantism. That is, at least, until Lady Luck deigned to smile on him on a Thursday night between deliveries. (you were doomed the moment he opened the door)"")}, {'summary': Value(literal:""Erin's plans for the team to go on a weekend vacation are hijacked by and argument between Patty and Holtzmann over who in the group has the most 'game'. The relaxing getaway instead becomes something of a competition, with pretty surprising results."")}, {'summary': Value(literal:'Elle has an obsession.')}, {'summary': Value(literal:'“Is it too early in our relationship for me to ask about whatever was going on between you and Stronghart?” “You’ve never been too good at pillow talk.” “I’m assuming that’s a yes, then? Too early?” (Barok and Kazuma swap stories.)')}, {'summary': Value(literal:""Crowley has been writing an awful lot in a little notebook, and Aziraphale is painfully curious what it's all about."")}, {'summary': Value(literal:'The little black book that Keith carried with him EVERYWHERE was the thing in life he cherished most. It had everything in it, from his depression clouded thoughts to his major crush on his long time best friend Lance McClain to songs he wrote. What will happen when those thoughts become public knowledge?')}, {'summary': Value(literal:""It's never a bad idea to keep track of your contacts. Series: St. Amelia’s [2]"")}, {'summary': Value(literal:'Kakashi isn\'t the only one who enjoys ""interesting"" titles like Icha Icha Paradise. Sakura would die of embarrassment if anyone ever found out... KakaSaku. Complete.')}, {'summary': Value(literal:""It was a meant to be a songwriting book. It held lyrics, doodles….and thoughts about Josh. How Tyler felt about Josh. The dirty fantasies about Josh. The things he wanted Josh to do to him. The things he wanted to do to Josh. In a split second…. It's gone. And everything spills off the pages…."")}, {'summary': Value(literal:'Six months after the events of their fondness stories, Yuxiang is given Peking Duck’s sin diary from the kingdom he helped destroy. What follows is a descent into depravity.')}, {'summary': Value(literal:""In the middle of a drugs bust, Lestrade & co find something less than savoury in the flat. Only thing is? It's not Sherlock's, and that changes everything. They will never treat John the same again. From a prompt from the kink meme. Series: the inside of my head is a very dark place [2]"")}, {'summary': Value(literal:'FuckGirl!Uraraka has a list of all the classmates she’s slept with, notes of what they like and how long it takes for them to come, dick size and curvature. Just about anyone above a 5 is on the list except for the resident gremlin and virgin boy: Bakugou.')}, {'summary': Value(literal:""Just a thing of things that I write on Tumblr that aren't actual full length stories"")}, {'summary': Value(literal:'Merlin finds a little black book and what he finds inside terrifies him. Luckily he knows someone he can turn to with the information he finds.')}, {'summary': Value(literal:'Mulder deals with PMS as only Mulder can')}, {'summary': Value(literal:""If you were to ask someone to describe Mason Pines, the most popular answer would likely be “smart”. At  19, Mason was the youngest senior to ever walk the halls of West Coast Tech, and he only ever received full marks for his work. But his intelligence wasn’t his only defining feature. Anyone who got close enough could tell you that. If you were to ask someone to describe Mason Pines, none would respond with “murderer”. A supernatural killer, a detective who never shows their face, and a tragedy what's left of the Pines family wished to leave in the past all collide. And to think, it's all because of one little black book. Series: Death Note AU [1]"")}, {'summary': Value(literal:""Beca finds a sketch book in her bag, only it isn't hers. There's no name inside, just a bunch of drawings. Really good drawings. (Mitchsen, obviously.)"")}, {'summary': Value(literal:""prompt: Caught Red-handed, College/University, Canon Divergence Isak Valtersen is studying his third year at the University of Oslo and having the time of his life. Enter Evy Bech Næsheim, straight out of Nissen, in his stockings, mini skirts and bubblegum scented lip gloss. But why won't the new campus slut give Isak the time of day?"")}, {'summary': Value(literal:'""He\'d been asking questions about his dad\'s vision for the club. She had to get the book away from Jax before he read any more of it."" Gemma schemes to steal her late husband\'s journal.')}, {'summary': Value(literal:""“I don’t know why you haven’t looked for his Little Black Book yet.” “Little Black Book? What does that mean?” “You know… it's the list of names belonging to the previous lovers a person has had. If he hasn’t told you about these girls himself, I can guarantee he’s got one.” . . . If there was one thing Jackie Burkhart knew to be true, it was that she loved Steven Hyde. After learning that he may not be as open with her as she thought, Jackie sets out to uncover what he refuses to tell her himself. If omission is the greatest form of  lie, how long had he been a liar?"")}, {'summary': Value(literal:'Tony Stark has had many meaningful relationships in his life. Most of them have involved sex.')}, {'summary': Value(literal:'I wrote a tweet speculating about Sherlock\'s ""little black book"" and @BenBatched said she wanted to see it as a fic and I guess I wasn\'t gonna get my NaNoWriMo book started tonight anyway... (Those of you who are doing NaNo2019, I\'m wendymarlowe over there. I wanna be your friend!)')}]"	0	1	1	Incomplete query	Underfull	
502	502	es	¿De qué trata Not a blind date?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Not a blind date"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	"[{'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:""Based on a Tumblr Post, Blind Date, Cheaters never win, Don't copy to another site, but not really""), 'summary': Value(literal:'Person A is apparently stood up until Person B comes to the rescue. But then Person C shows up and gets what he deserves for being a prick in the first place. Rated t for a bit of language.')}]"	502	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué serie pertenece Slytherins Don't Do Valentine's Day?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""Slytherins Don't Do Valentine's Day"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿Cuándo se publicó Non-Existent Meetings?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?date WHERE {  ?story golem:title ""Non-Existent Meetings"" . ?story golem:datePublished ?date . }
    </SPARQL>

    ###
    

    Question: ¿Cómo de larga es Trust Me.?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?chapters ?words WHERE {  ?story golem:title ""Trust Me."" . ?story golem:numberOfChapters ?chapters . ?story golem:numberOfWords ?words . }
    </SPARQL>

    ###
    

Question: ¿De qué trata Not a blind date?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?summary WHERE { 
  ?story golem:title ""Not a blind date"" . 
  ?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'Person A is apparently stood up until Person B comes to the rescue. But then Person C shows up and gets what he deserves for being a prick in the first place. Rated t for a bit of language.')}]	0	1	1	Incomplete query	Underfull	
503	503	es	¿De qué trata Hiding Scrawl, Licking Freckles, and Other Average Wizard Things (Podfic)?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Hiding Scrawl, Licking Freckles, and Other Average Wizard Things (Podfic)"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	[{'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alternate Universe - Soulmates, Audio Format: M4B, Audio Format: MP3, Fluff, Hogwarts Eighth Year, I apologize for my English accents, I refuse to apologize for my Irish accent though, It was too fun, Podfic, Podfic Length: 20-30 Minutes, Soulmate-Identifying Marks, Tooth-Rotting Fluff'), 'summary': Value(literal:'Someone out there is obsessed with his freckles, and damn it, Seamus Finnigan wants to know who. - Uselessly fluffy Soulmate AU where the thoughts of your soulmate inscribe themselves on your skin in an shifting magic tattoo.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Alternate Universe - Soulmates, Audio Format: M4B, Audio Format: MP3, Fluff, Hogwarts Eighth Year, I apologize for my English accents, I refuse to apologize for my Irish accent though, It was too fun, Podfic, Podfic Length: 20-30 Minutes, Soulmate-Identifying Marks, Tooth-Rotting Fluff'), 'summary': Value(literal:'Someone out there is obsessed with his freckles, and damn it, Seamus Finnigan wants to know who. - Uselessly fluffy Soulmate AU where the thoughts of your soulmate inscribe themselves on your skin in an shifting magic tattoo.')}]	503	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿De qué trata Haunted [podfic]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Haunted [podfic]"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en Puffskein Hunt?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Puffskein Hunt"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en The Strange Workings of The Riddle House?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""The Strange Workings of The Riddle House"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿De qué trata Hiding Scrawl, Licking Freckles, and Other Average Wizard Things (Podfic)?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?summary WHERE { 
    ?story golem:title ""Hiding Scrawl, Licking Freckles, and Other Average Wizard Things (Podfic)"" . 
    ?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'Someone out there is obsessed with his freckles, and damn it, Seamus Finnigan wants to know who. - Uselessly fluffy Soulmate AU where the thoughts of your soulmate inscribe themselves on your skin in an shifting magic tattoo.')}]	0	1	1	Incomplete query	Underfull	
504	504	es	¿De qué trata Elements of War?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Elements of War"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	[{'series': Value(literal:'None'), 'collection': Value(literal:'The Hex Files'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'AU, Hogwarts Seventh Year, War'), 'summary': Value(literal:'This fic is unfinished - and may well remain that way. It got overtaken by reality and Deathly Hallows.')}]	504	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿De qué trata [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""[[story]]"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: ¿De qué trata Haunted [podfic]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Haunted [podfic]"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo __ - ____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - ____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: ¿De qué trata Elements of War?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { 
?story golem:title ""Elements of War"" . 
?story golem:keyword ?keyword . 
?story golem:romanticCategory ?romantic_category . 
?story golem:series ?series . 
?story golem:collections ?collection . 
?story golem:contentWarning ?content_warning . 
?story golem:summary ?summary . 
}
"	[{'series': Value(literal:'None'), 'collection': Value(literal:'The Hex Files'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'AU, Hogwarts Seventh Year, War'), 'summary': Value(literal:'This fic is unfinished - and may well remain that way. It got overtaken by reality and Deathly Hallows.')}]	1	0	0			
505	505	es	¿De qué trata Are You Firing Me??	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Are You Firing Me?"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	[{'series': Value(literal:'None'), 'collection': Value(literal:'Marvelously Magical Bingo 2020'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Post-Avengers: Infinity War Part 1 (Movie)'), 'summary': Value(literal:'Steve Rogers has a strict code against dating coworkers.')}]	505	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos recibió I Hate You And I Hope You Know That.?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""I Hate You And I Hope You Know That."" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos recibió I'll be your chaperone?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?kudos WHERE {  ?story golem:title ""I'll be your chaperone"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de Salut les copains ! - Forneri de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Salut les copains ! - Forneri"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿De qué trata Are You Firing Me??

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
SELECT ?summary WHERE { 
?story golem:title ""Are You Firing Me?"" . 
?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'Steve Rogers has a strict code against dating coworkers.')}]	0	1	1	Incomplete query	Underfull	
506	506	es	¿De qué trata Haunted [podfic]?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Haunted [podfic]"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	"[{'series': Value(literal:'None'), 'collection': Value(literal:'HP Drizzle Fest 2018'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Angst and Hurt/Comfort, Podfic, Podfic Length: 0-10 Minutes, inappropriate graveyard fondling'), 'summary': Value(literal:'Podfic of ""Haunted"" by icicle33 Author\'s original summary: Draco always has a follower when he visits Snape\'s grave.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'Pod_O_Ween 2019'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Alternate Universe - Canon Divergence, Audio Format: MP3, Audio Format: Streaming, Force Ghost(s), Podfic, Podfic Length: 10-20 Minutes'), 'summary': Value(literal:'The 501st and 212th are haunted. They are aware.')}]"	506	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién es el autor de ghosting you?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""ghosting you"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como Character Turned Into a Ghost?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Character Turned Into a Ghost"" . }
    </SPARQL>

    ###
    

    Question: ¿De qué trata Hiding Scrawl, Licking Freckles, and Other Average Wizard Things (Podfic)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""Hiding Scrawl, Licking Freckles, and Other Average Wizard Things (Podfic)"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: ¿De qué trata Haunted [podfic]?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { 
?story golem:title ""Haunted [podfic]"" . 
?story golem:keyword ?keyword . 
?story golem:romanticCategory ?romantic_category . 
?story golem:series ?series . 
?story golem:collections ?collection . 
?story golem:contentWarning ?content_warning . 
?story golem:summary ?summary . 
}
"	"[{'series': Value(literal:'None'), 'collection': Value(literal:'HP Drizzle Fest 2018'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Angst and Hurt/Comfort, Podfic, Podfic Length: 0-10 Minutes, inappropriate graveyard fondling'), 'summary': Value(literal:'Podfic of ""Haunted"" by icicle33 Author\'s original summary: Draco always has a follower when he visits Snape\'s grave.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'Pod_O_Ween 2019'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:'Alternate Universe - Canon Divergence, Audio Format: MP3, Audio Format: Streaming, Force Ghost(s), Podfic, Podfic Length: 10-20 Minutes'), 'summary': Value(literal:'The 501st and 212th are haunted. They are aware.')}]"	1	0	0			
507	507	es	¿De qué trata The Snow Prince?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""The Snow Prince"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }"	"[{'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alternate Universe - Modern with Magic, Alternate Universe - Small Town, Alternate Universe - Snow Queen Fusion, Blizzards & Snowstorms, Elemental Magic, Fairy Tale Elements, Frostbite, Hypothermia, Snow and Ice, Strangers to Lovers, Work In Progress, Yesung-centric'), 'summary': Value(literal:'None')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Anal Sex, Cuddling & Snuggling, Domestic, Established Relationship, Father-Daughter Relationship, Fluff, Kid Fic, MILD - Freeform, Marriage, Nightmares, Oral Sex, POV Bucky Barnes, Pancakes, Post-Traumatic Stress Disorder - PTSD, Shower Sex, Smut, Storytelling, bucky uses some creative license'), 'summary': Value(literal:'or: Nora Barnes-Rogers needs a bedtime story.  Later, Steve likes to hear the grown-up version.')}, {'series': Value(literal:""2019 Valentine's Requests [9]""), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Fairy Tale Elements'), 'summary': Value(literal:'Bucky kinda wants to know how he skips to the part where someone says ‘and they lived happily ever after, the end.’')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:'Pre-Despair'), 'summary': Value(literal:'When she turns around to look at the puppy’s owner, the remnants of a smile still gracing her lips, she finds him staring at her with a contemplative expression. “What?” she asks, a bit defensively. “Is there something on my face?” He blinks quickly and immediately averts his gaze, burying his chin in his scarf once more. “Ah, n-no, I simply…that is…” He clears his throat, and Mahiru wonders where all of his bravado has gone.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'Chocomint Fairy Tale Compilation'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alternate Universe - Fairy Tale, Alternate Universe - Snow Queen Fusion, Body Horror, Illustrated, Snow Queen Elements'), 'summary': Value(literal:""Upon a beautiful day in late summer, Mikleo's heart is frozen by a terrible curse, and he is spirited away by a woman in dazzling winter white. Sorey sets out on a journey to save his one true love, and winds up making friends with half the continent along the way. (A variation on The Snow Queen , written for the 2018 Chocomint Fairy Tale Compilation. With illustrations by Nami/defragmentise!)"")}, {'series': Value(literal:'None'), 'collection': Value(literal:'Come at Once (if convenient)'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Established Relationship, Romance, Temperature Play'), 'summary': Value(literal:'A midwinter tryst brings its own heat.')}, {'series': Value(literal:""Momo's Fairytales [4]""), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:""Alternate Universe - Fairy Tale, Alternate Universe - Fantasy, How Todoroki and Izuku met, Takes place before The Witch's Cottage and The Swan Prince, This one is a bit darker than the other stories""), 'summary': Value(literal:""Todoroki has lived locked up in a tower since he was seven years old due to his powers. His father abandoned him there with no word of when he'd return. His mother left behind a puzzle for him to solve to break the tower's seal and escape, but Todoroki had long since given up on solving it or any hope of seeing anyone ever again."")}, {'series': Value(literal:""things I scribbled when I should've been studying [9]""), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:""Adventure, Alternate Universe - Fairy Tale, Eventual Romance, Fairy Tale Elements, Snow Queen Elements, alecto carrow's daughter, magical beasts, that can talk because I said so""), 'summary': Value(literal:'Teddy had heard tales of the Prince of Snow before – he used to like them when he was little – and he was frightened, because the Prince of Snow was a powerful fairy and no one knew where he had come from, but it was said that he was cold and cruel.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Alternate Universe - Fantasy, Alternate Universe - Snow Queen Fusion, Childhood Friends, Fluff and Angst, Friendship/Love'), 'summary': Value(literal:'""Yuuri had to admit, his curiosity was piqued. He had heard stories of the Snow Queen before, but had never thought that she was real. Then again, he thought, if those fairies that kept snatching twigs from their woodpile existed, why wouldn’t their queen?"" The Snow Queen by Hans Christian Andersen meets Yuuri!!! On Ice.')}, {'series': Value(literal:'None'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'Multi'), 'keywords': Value(literal:'Alternate Universe - Fantasy, Alternate Universe - Snow Queen Fusion, Childhood Friends, Fluff and Angst, Friendship/Love'), 'summary': Value(literal:'""Yuuri had to admit, his curiosity was piqued. He had heard stories of the Snow Queen before, but had never thought that she was real. Then again, he thought, if those fairies that kept snatching twigs from their woodpile existed, why wouldn’t their queen?"" The Snow Queen by Hans Christian Andersen meets Yuuri!!! On Ice.')}, {'series': Value(literal:""Momo's Fairytales [4]""), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'Creator Chose Not To Use Archive Warnings'), 'romantic_category': Value(literal:'Gen'), 'keywords': Value(literal:""Alternate Universe - Fairy Tale, Alternate Universe - Fantasy, How Todoroki and Izuku met, Takes place before The Witch's Cottage and The Swan Prince, This one is a bit darker than the other stories""), 'summary': Value(literal:""Todoroki has lived locked up in a tower since he was seven years old due to his powers. His father abandoned him there with no word of when he'd return. His mother left behind a puzzle for him to solve to break the tower's seal and escape, but Todoroki had long since given up on solving it or any hope of seeing anyone ever again."")}, {'series': Value(literal:""things I scribbled when I should've been studying [9]""), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'F/M'), 'keywords': Value(literal:""Adventure, Alternate Universe - Fairy Tale, Eventual Romance, Fairy Tale Elements, Snow Queen Elements, alecto carrow's daughter, magical beasts, that can talk because I said so""), 'summary': Value(literal:'Teddy had heard tales of the Prince of Snow before – he used to like them when he was little – and he was frightened, because the Prince of Snow was a powerful fairy and no one knew where he had come from, but it was said that he was cold and cruel.')}, {'series': Value(literal:'Crossing the Divide [2]'), 'collection': Value(literal:'None'), 'content_warning': Value(literal:'No Archive Warnings Apply'), 'romantic_category': Value(literal:'M/M'), 'keywords': Value(literal:'Angst, Drabble, Poetry'), 'summary': Value(literal:""This poem is the second part of my Crossing the Divide series.  Fraser, Kowalski, Vecchio and the others belong to Alliance Communications and the great Pauls (both Haggis and Gross). As always, for Cindy, VJ and Sophie. I would also like to send a special thank you to Frasrgrl. Karol, my hat's off to you."")}]"	507	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué colecciones pertenece Building Bridges (and Snowmen)?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""Building Bridges (and Snowmen)"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en Magician?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Magician"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en Puffskein Hunt?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""Puffskein Hunt"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿De qué trata The Snow Prince?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?summary WHERE { 
?story golem:title ""The Snow Prince"" . 
?story golem:summary ?summary . 
}
"	"[{'summary': Value(literal:'Teddy had heard tales of the Prince of Snow before – he used to like them when he was little – and he was frightened, because the Prince of Snow was a powerful fairy and no one knew where he had come from, but it was said that he was cold and cruel.')}, {'summary': Value(literal:""This poem is the second part of my Crossing the Divide series.  Fraser, Kowalski, Vecchio and the others belong to Alliance Communications and the great Pauls (both Haggis and Gross). As always, for Cindy, VJ and Sophie. I would also like to send a special thank you to Frasrgrl. Karol, my hat's off to you."")}, {'summary': Value(literal:'When she turns around to look at the puppy’s owner, the remnants of a smile still gracing her lips, she finds him staring at her with a contemplative expression. “What?” she asks, a bit defensively. “Is there something on my face?” He blinks quickly and immediately averts his gaze, burying his chin in his scarf once more. “Ah, n-no, I simply…that is…” He clears his throat, and Mahiru wonders where all of his bravado has gone.')}, {'summary': Value(literal:""Todoroki has lived locked up in a tower since he was seven years old due to his powers. His father abandoned him there with no word of when he'd return. His mother left behind a puzzle for him to solve to break the tower's seal and escape, but Todoroki had long since given up on solving it or any hope of seeing anyone ever again."")}, {'summary': Value(literal:'""Yuuri had to admit, his curiosity was piqued. He had heard stories of the Snow Queen before, but had never thought that she was real. Then again, he thought, if those fairies that kept snatching twigs from their woodpile existed, why wouldn’t their queen?"" The Snow Queen by Hans Christian Andersen meets Yuuri!!! On Ice.')}, {'summary': Value(literal:'A midwinter tryst brings its own heat.')}, {'summary': Value(literal:'None')}, {'summary': Value(literal:'or: Nora Barnes-Rogers needs a bedtime story.  Later, Steve likes to hear the grown-up version.')}, {'summary': Value(literal:'Bucky kinda wants to know how he skips to the part where someone says ‘and they lived happily ever after, the end.’')}, {'summary': Value(literal:'Yes, the lyrics are from Frozen and the story is inspired by it. I wanted to try one similar to it because I love Frozen, especially Elsa.')}, {'summary': Value(literal:""Upon a beautiful day in late summer, Mikleo's heart is frozen by a terrible curse, and he is spirited away by a woman in dazzling winter white. Sorey sets out on a journey to save his one true love, and winds up making friends with half the continent along the way. (A variation on The Snow Queen , written for the 2018 Chocomint Fairy Tale Compilation. With illustrations by Nami/defragmentise!)"")}]"	0	1	1	Incomplete query	Underfull	
512	512	es	¿Se muere algún personaje principal en The Path Less Travelled By?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""The Path Less Travelled By"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }"	[{'warning': Value(literal:'Major Character Death')}]	512	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Se muere algún personaje principal en In The Distance?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""In The Distance"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿Se muere algún personaje principal en [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿Se muere algún personaje principal en Let Me Tell You A Story?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Let Me Tell You A Story"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

Question: ¿Se muere algún personaje principal en The Path Less Travelled By?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?warning WHERE {  ?story golem:title ""The Path Less Travelled By"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
"	[{'warning': Value(literal:'Major Character Death')}]	1	0	0			
513	513	es	¿Se muere algún personaje principal en In The Distance?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""In The Distance"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }"	[{'warning': Value(literal:'Major Character Death')}]	513	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Se muere algún personaje principal en The Path Less Travelled By?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""The Path Less Travelled By"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿Se muere algún personaje principal en [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿Se muere algún personaje principal en The Ritual?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""The Ritual"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

Question: ¿Se muere algún personaje principal en In The Distance?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?warning WHERE { 
?story golem:title ""In The Distance"" . 
?story golem:contentWarning ?warning . 
FILTER(?warning = ""Major Character Death"") 
}
"	[{'warning': Value(literal:'Major Character Death')}]	1	0	0			
515	515	es	¿Se muere algún personaje principal en The Ritual?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""The Ritual"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }"	[{'warning': Value(literal:'Major Character Death')}]	515	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Se muere algún personaje principal en [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿Se muere algún personaje principal en Murder Mystery: Funfair?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Murder Mystery: Funfair"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿Se muere algún personaje principal en In The Distance?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""In The Distance"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

Question: ¿Se muere algún personaje principal en The Ritual?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?warning WHERE { 
?story golem:title ""The Ritual"" . 
?story golem:contentWarning ?warning . 
FILTER(?warning = ""Major Character Death"") 
}
"	[{'warning': Value(literal:'Major Character Death')}]	1	0	0			
518	518	es	¿Se muere algún personaje principal en Poet.?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Poet."" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }"	[{'warning': Value(literal:'Major Character Death')}]	518	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Se muere algún personaje principal en [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""[[story]]"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿Se muere algún personaje principal en The Path Less Travelled By?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""The Path Less Travelled By"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿Se muere algún personaje principal en The Ritual?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""The Ritual"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

Question: ¿Se muere algún personaje principal en Poet.?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?warning WHERE { 
?story golem:title ""Poet."" . 
?story golem:contentWarning ?warning . 
FILTER(?warning = ""Major Character Death"") 
}
"	[{'warning': Value(literal:'Major Character Death')}]	1	0	0			
521	521	es	¿En qué historias sale Joe Cruz?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Joe Cruz"" . }"	"[{'title': Value(literal:'Out of the Dark')}, {'title': Value(literal:'Drabbles of all kinds')}, {'title': Value(literal:'Sizzling Chicago')}, {'title': Value(literal:'Mine To Protect')}, {'title': Value(literal:'Elusive Redemption')}, {'title': Value(literal:'Lucky Stars *ON HOLD')}, {'title': Value(literal:'Family Knows Best: Firehouse 51')}, {'title': Value(literal:""He's My Best Friend"")}, {'title': Value(literal:'The Night That Changed It All')}, {'title': Value(literal:'51secret')}, {'title': Value(literal:'State of My Head')}, {'title': Value(literal:""I didn't count on that"")}, {'title': Value(literal:""Let's Hang Out"")}, {'title': Value(literal:'Secret Ingredient')}, {'title': Value(literal:'My Way or the Highway')}, {'title': Value(literal:'Running Out of Time')}, {'title': Value(literal:'End Game')}, {'title': Value(literal:'(Not Automatically) A Certain Guarantee')}, {'title': Value(literal:'Into the Unknown')}, {'title': Value(literal:'Wake up')}, {'title': Value(literal:'Star Trek')}, {'title': Value(literal:'Yeah, I Would')}, {'title': Value(literal:'The Right Mate')}, {'title': Value(literal:'What It Took to Move Forward')}, {'title': Value(literal:'Safe Haven')}, {'title': Value(literal:'Apartment 4B')}, {'title': Value(literal:'Blue Eyes')}, {'title': Value(literal:'I told you so')}, {'title': Value(literal:""Baby, It's Cold Outside"")}, {'title': Value(literal:'The Second Day of Christmas')}, {'title': Value(literal:'The Third Day of Christmas')}, {'title': Value(literal:'The Best Christmas')}, {'title': Value(literal:'Secret Santa')}, {'title': Value(literal:'Hopelessly Devoted to You')}, {'title': Value(literal:'Better Love')}, {'title': Value(literal:'the golden age')}, {'title': Value(literal:'The Seventh Day of Christmas')}, {'title': Value(literal:""what happens when we die? (the answer's in the sky)"")}, {'title': Value(literal:'Heart and Soul')}, {'title': Value(literal:'Consequences of a night')}, {'title': Value(literal:'Sparks Plus Flames')}, {'title': Value(literal:'Hold My Heart')}, {'title': Value(literal:'I Choose You')}, {'title': Value(literal:'Guilt and Secrecy are a tricky thing [ON HOLD]')}, {'title': Value(literal:'Down is Faster than Up')}, {'title': Value(literal:'Perfectly Imperfect')}, {'title': Value(literal:'Summer Surprise')}, {'title': Value(literal:'The One Where Everyone Finds Out')}, {'title': Value(literal:'fight of my life')}, {'title': Value(literal:'Forever')}, {'title': Value(literal:'The Long Haul')}, {'title': Value(literal:'In my defense, I was left unsupervised')}, {'title': Value(literal:'One Night')}, {'title': Value(literal:'Distance or happiness?')}, {'title': Value(literal:'Welcome to Firehouse 51')}, {'title': Value(literal:'Happiness')}, {'title': Value(literal:'Foundations')}, {'title': Value(literal:""Happy Valentine's day"")}, {'title': Value(literal:'Be Patient With My Love')}, {'title': Value(literal:'Tripping Over It')}, {'title': Value(literal:'Quit Meeting Like This')}, {'title': Value(literal:'Heavy is the Head')}, {'title': Value(literal:'A Home')}, {'title': Value(literal:'Sevasey: moments')}, {'title': Value(literal:'Hearts Entwined')}, {'title': Value(literal:'lost in your current')}, {'title': Value(literal:'Moving On')}, {'title': Value(literal:'Someone Who Gets It')}, {'title': Value(literal:'One of those days')}, {'title': Value(literal:'Just one day')}, {'title': Value(literal:'Floating')}, {'title': Value(literal:'All I ever wanted was happiness')}, {'title': Value(literal:'Run This Town')}, {'title': Value(literal:'The Light At The End Of The Tunnel')}, {'title': Value(literal:'New Friends, New Beginnings')}, {'title': Value(literal:""i'm alive, if living's just a beating heart"")}, {'title': Value(literal:'our story isn’t finished yet')}, {'title': Value(literal:'Witnessing Affection')}, {'title': Value(literal:'and now I’m covered (in you)')}, {'title': Value(literal:'What You Deserve')}, {'title': Value(literal:'But Not Forgotten')}, {'title': Value(literal:'CFD Family')}, {'title': Value(literal:'Electric Love')}, {'title': Value(literal:'What Comes Next?')}, {'title': Value(literal:'The Rest of Our Lives')}, {'title': Value(literal:'Burned (Kelly Severide)')}, {'title': Value(literal:'What I Would Do To Have Another Try')}, {'title': Value(literal:'What I Wouldn’t Do To Have Another Try')}, {'title': Value(literal:""but if souls are strong, they'll go on and on { and we will hardly know the time has passed }"")}, {'title': Value(literal:'Chicago Fire')}, {'title': Value(literal:'wherever is your heart i call home')}, {'title': Value(literal:""I Won't Let You Fall"")}, {'title': Value(literal:'She’s Gone (2)')}, {'title': Value(literal:""She's Gone (3)"")}, {'title': Value(literal:'Legacy of 51')}, {'title': Value(literal:'they look hopeful but you, you should not stay')}, {'title': Value(literal:""She's Gone (5)"")}, {'title': Value(literal:""That One, It's Perfect"")}, {'title': Value(literal:'All About Hallie')}, {'title': Value(literal:'That Age Old Story')}, {'title': Value(literal:'Flowing Blood')}, {'title': Value(literal:'A Marine Love')}, {'title': Value(literal:'The Not-So-Secret Secret')}, {'title': Value(literal:'Old Friends, New Beginnings')}, {'title': Value(literal:'A through Z: A Collection of Brettelli One-Shots')}, {'title': Value(literal:'Time')}, {'title': Value(literal:'The longest Ride')}, {'title': Value(literal:'First Response')}, {'title': Value(literal:'Exasperation is thy name')}, {'title': Value(literal:'Game Day')}, {'title': Value(literal:'Trapped')}, {'title': Value(literal:'Something We Both Wanted (Wish You Were Here)')}, {'title': Value(literal:'Buck runs')}, {'title': Value(literal:""He's always a mystery to me"")}, {'title': Value(literal:'Save Me')}, {'title': Value(literal:'Surpresa de Verão')}, {'title': Value(literal:'Quando a vida te vira ao avesso')}, {'title': Value(literal:'Our Life Under Flames')}, {'title': Value(literal:'Warriors')}, {'title': Value(literal:'Sports Can be Dangerous')}, {'title': Value(literal:'Fan Art Portraits and Character Index')}, {'title': Value(literal:'Friendship Worth Saving.')}, {'title': Value(literal:'Secret Marriage.')}, {'title': Value(literal:'One Call Away')}, {'title': Value(literal:""maybe someday we'll live our lives out loud"")}, {'title': Value(literal:'My Miracle')}, {'title': Value(literal:'Past Lives')}, {'title': Value(literal:'Panic')}, {'title': Value(literal:'Smoke Filled Room')}, {'title': Value(literal:'Afire Love')}, {'title': Value(literal:'Charlotte/Jeff Clarke')}, {'title': Value(literal:'The Fear of the Past')}, {'title': Value(literal:'Back To The Future')}, {'title': Value(literal:'Training Day')}, {'title': Value(literal:'One Night')}, {'title': Value(literal:""I'll Tell You What You Already Know"")}, {'title': Value(literal:'The Boy Who Sold His Soul to the Devil in Chicago')}, {'title': Value(literal:'The Sevasey Collection')}, {'title': Value(literal:""Arson's Heat - A Chicago Fire Story."")}, {'title': Value(literal:'Three times Casey blushes and someone sees it and one time Severide did and everyone sees it.')}, {'title': Value(literal:'Small Problem')}, {'title': Value(literal:'As One Day Ends')}, {'title': Value(literal:'Few Words')}, {'title': Value(literal:'Hold On')}, {'title': Value(literal:'A New Kind of Game')}, {'title': Value(literal:'Something Exotic')}, {'title': Value(literal:'We Are Forever')}, {'title': Value(literal:'Burning eyes')}, {'title': Value(literal:""I'll Follow You Into the Dark"")}, {'title': Value(literal:'Envisioning The Carnage')}, {'title': Value(literal:'Reverse')}, {'title': Value(literal:'Somewhere In Between')}, {'title': Value(literal:'Do Something')}, {'title': Value(literal:'How beautiful it is to exist')}, {'title': Value(literal:'Through the Fire comes a Family')}, {'title': Value(literal:'Radio')}, {'title': Value(literal:'Brothers')}, {'title': Value(literal:'Radio Silence')}, {'title': Value(literal:'Last Chance')}, {'title': Value(literal:'Exposure')}, {'title': Value(literal:'Tales Of 51')}, {'title': Value(literal:'Cinderella of Chicago')}, {'title': Value(literal:'Spooky')}, {'title': Value(literal:'Whumptober 2019 - 02 - Explosion')}, {'title': Value(literal:'Where You Belong')}, {'title': Value(literal:'Whumptober 2019 - 09 - Shackled')}, {'title': Value(literal:'Scarlet Chicago')}, {'title': Value(literal:'Whumptober 2019 - 14 - Tear-stained')}, {'title': Value(literal:'Where you go, I go')}, {'title': Value(literal:'Whumptober 2019 - 16 - Pinned Down')}, {'title': Value(literal:'Walk Me Home')}, {'title': Value(literal:'The Sevasey Collection')}, {'title': Value(literal:'Aussie One Chicago')}, {'title': Value(literal:'Sudden Changes')}, {'title': Value(literal:""I'll Defend Your Honour (Even When You Don't Need Me To)"")}, {'title': Value(literal:'Taken')}, {'title': Value(literal:'Love Is Looking For You')}, {'title': Value(literal:'Your Room in My Heart')}, {'title': Value(literal:'Full House')}, {'title': Value(literal:'Everything has Changed')}, {'title': Value(literal:'Kept Under Covers')}, {'title': Value(literal:'Holly Jolly Christmas')}, {'title': Value(literal:'Nursing on a Poison')}, {'title': Value(literal:'You’re Where I’ll Be')}, {'title': Value(literal:'Love is Blind')}, {'title': Value(literal:'Wait For It')}, {'title': Value(literal:""I'll Stand By You"")}, {'title': Value(literal:'Infinity')}, {'title': Value(literal:'Icarus Was Human Too')}, {'title': Value(literal:'Catch The Wind')}, {'title': Value(literal:'Blue and Red blood')}, {'title': Value(literal:'Crispy Realization')}, {'title': Value(literal:'pretty.')}, {'title': Value(literal:'This City is Going to Break my Heart')}, {'title': Value(literal:'Chicago Fire Tidbits')}, {'title': Value(literal:'The Right Place For Me Is Beside You')}, {'title': Value(literal:'48 Hours')}, {'title': Value(literal:'Blinded by the lights')}, {'title': Value(literal:'Unexpected')}, {'title': Value(literal:'Confession')}, {'title': Value(literal:'That Sinking Feeling')}, {'title': Value(literal:'In His Arms')}, {'title': Value(literal:'Aching Heart')}, {'title': Value(literal:'Just Me, You and Them')}, {'title': Value(literal:'Honor, Love and BDSM Polyamourous Fire Fighters')}, {'title': Value(literal:'Just A Thought')}, {'title': Value(literal:'Raising Amelia')}, {'title': Value(literal:'A Place to call Home')}, {'title': Value(literal:'A new Passion')}, {'title': Value(literal:'Ready?')}, {'title': Value(literal:'Dinner with Friends')}, {'title': Value(literal:'Unexpected')}, {'title': Value(literal:'Let the Bough Break')}, {'title': Value(literal:'9:58')}, {'title': Value(literal:'Every Breath You Take')}, {'title': Value(literal:'Damn it, Casey!')}, {'title': Value(literal:'Game Changing')}, {'title': Value(literal:""I'm Here For You - Always"")}, {'title': Value(literal:'Just Take This Heart')}, {'title': Value(literal:'The Right Time')}, {'title': Value(literal:'Save Me')}, {'title': Value(literal:'Hero Worship')}, {'title': Value(literal:'Chicago Fire 26 Reasons Why')}, {'title': Value(literal:'As it Stands')}, {'title': Value(literal:'Catch a Break')}, {'title': Value(literal:'Falling')}, {'title': Value(literal:'Meeting the Family')}, {'title': Value(literal:'misunderstandings')}]"	521	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién es el autor de [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como Child Ron Weasley?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Child Ron Weasley"" . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

Question: ¿En qué historias sale Joe Cruz?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?story WHERE { 
?character golem:name ""Joe Cruz"" .
?character golem:appearsIn ?story .
}
"	[]	0	0	1	Wrong predicate	Hallucinated	
522	522	es	¿En qué historias sale Gollum | Sméagol?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Gollum | Sméagol"" . }"	"[{'title': Value(literal:'The Debate of the Victor and the Wizard (Original)')}, {'title': Value(literal:'A Meeting of the Minds')}, {'title': Value(literal:'The Elvenqueen')}, {'title': Value(literal:'Riddles & Redemption')}, {'title': Value(literal:'The Birth')}, {'title': Value(literal:'Evil Author Day 2020')}, {'title': Value(literal:'The Princess of Gondor Returns')}, {'title': Value(literal:'Píse_ lávy')}, {'title': Value(literal:'Babcia Ruth i Kryszta_ Mocy')}, {'title': Value(literal:'Harry Potter and the One to Rule Them All')}, {'title': Value(literal:'A different kind of therapy')}, {'title': Value(literal:'Born from Fire')}, {'title': Value(literal:'The Hobbit: The Stuffed Animal Edition')}, {'title': Value(literal:'The Ballad of Bilbo Baggins')}, {'title': Value(literal:'[VID] Enter the Wu-Tang: 36 Chambers of Death (Collector’s Edition)')}, {'title': Value(literal:'The Gang Goes Camping')}, {'title': Value(literal:'Taking the Hobbits to Isengard')}, {'title': Value(literal:'The taming of Smeagol')}, {'title': Value(literal:'The destruction of the Ring')}, {'title': Value(literal:'___')}, {'title': Value(literal:'Recherche plus ou moins fructueuse')}, {'title': Value(literal:'Os tambores da guerra')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'Harry potter x ouran high school host club')}, {'title': Value(literal:'Volume 1- It begins')}, {'title': Value(literal:'The heir of Smeagol')}, {'title': Value(literal:'Pumpkins')}, {'title': Value(literal:'To Prepare A Whole Duck')}, {'title': Value(literal:'The Last Dragon')}, {'title': Value(literal:'First as a Tragedy, Then as  a Comedy')}, {'title': Value(literal:'The Guardian of Erebor')}, {'title': Value(literal:'As My Friend Has Stood By Me, So Shall I')}, {'title': Value(literal:'molten gold')}, {'title': Value(literal:'Flogging Molly is a Dwarven Punk Band')}, {'title': Value(literal:'On the Road Again')}, {'title': Value(literal:'Lord of the Limericks')}, {'title': Value(literal:'Harebell (Sam)')}, {'title': Value(literal:'Forgot (Gollum)')}, {'title': Value(literal:'Spoiling Nice Fish')}, {'title': Value(literal:'Melltithio')}, {'title': Value(literal:'brevity')}, {'title': Value(literal:'With Many Voices')}, {'title': Value(literal:'Precious')}, {'title': Value(literal:'Trinkets')}, {'title': Value(literal:'Old Yule Ficlets')}, {'title': Value(literal:'A Hundred Silver Lamps')}, {'title': Value(literal:'Remembrances at the End of All Things')}, {'title': Value(literal:'Daughters of the West')}, {'title': Value(literal:'Happy Birthday Sméagol')}, {'title': Value(literal:'The Road Goes Ever On - A Tale of Fellowship')}, {'title': Value(literal:'All Who Are Hungry')}, {'title': Value(literal:'Dead Rangers Walking')}, {'title': Value(literal:'Return To Me[Thorin Oakenshield Love Story]')}, {'title': Value(literal:'Born in Fire')}, {'title': Value(literal:""Bunk'd: LOTR Edition"")}, {'title': Value(literal:'The story of Frodo, the One Ring and how they fell in love')}, {'title': Value(literal:'For Frodo')}, {'title': Value(literal:'A night at Mordor')}, {'title': Value(literal:'The Masterwork')}, {'title': Value(literal:'In the Fridge')}, {'title': Value(literal:'Light in the Shadows')}, {'title': Value(literal:'Interloper')}, {'title': Value(literal:'Ghosts of the Past')}, {'title': Value(literal:'Gollum')}, {'title': Value(literal:'Party of None, Shadow of War')}, {'title': Value(literal:""La soif de l'or"")}, {'title': Value(literal:'Világok között')}, {'title': Value(literal:'__________ ____ ______')}, {'title': Value(literal:'Vive memor leti')}, {'title': Value(literal:'The Zero Dimension')}, {'title': Value(literal:'Heroes in Middle-earth')}, {'title': Value(literal:'Road Trip')}, {'title': Value(literal:'Into the Blue')}, {'title': Value(literal:'Universally Acknowledged')}, {'title': Value(literal:'An Oath of Snow and Shadow')}, {'title': Value(literal:'An Acorn and A Mountain')}, {'title': Value(literal:'Roommates')}, {'title': Value(literal:'Room Mates')}, {'title': Value(literal:'Of Feathers, Claws and Werebird Hobbits')}, {'title': Value(literal:'The Highest Treasure')}, {'title': Value(literal:'Mist Upon the Eyes')}, {'title': Value(literal:'A ""Little"" Problem')}, {'title': Value(literal:'Faerie Lore')}, {'title': Value(literal:'The Beginning Of A Adventure')}, {'title': Value(literal:'Per rectum')}, {'title': Value(literal:'I Will Always Be With You')}, {'title': Value(literal:'A Not So Unwelcome Journey')}, {'title': Value(literal:'Bilbo Baggins: Frying Pan Wielder')}, {'title': Value(literal:""Things I Have Loved I'm Allowed to Keep"")}, {'title': Value(literal:'The Hobbit (with a twist)')}, {'title': Value(literal:'I Can Finally Rest')}, {'title': Value(literal:'Traveling with Idiots')}, {'title': Value(literal:'War-Zone Shopping')}, {'title': Value(literal:'Frodo and Sam go to… Wreck-it Ralph?!?!')}, {'title': Value(literal:'Wood Ears')}, {'title': Value(literal:'A Question of Luck')}, {'title': Value(literal:'Bottomless')}, {'title': Value(literal:'Ringburn')}, {'title': Value(literal:'Who Put the Blood')}, {'title': Value(literal:'[vid] Odds Are')}, {'title': Value(literal:'Wine')}, {'title': Value(literal:'The Precious Baby Phenomenon Unpacked: A Treatise on Obstetric Care in The Returned by I.L. Finwiel and the Istar Institute')}, {'title': Value(literal:'Green Taters')}, {'title': Value(literal:'An Ode to Frodo')}, {'title': Value(literal:""Schrödinger's Hobbit"")}, {'title': Value(literal:'My Precious')}, {'title': Value(literal:'Friend')}, {'title': Value(literal:'Snaccc Time with Smeagol')}, {'title': Value(literal:'Eggy Farts')}, {'title': Value(literal:'End of Innocence')}, {'title': Value(literal:'A New Home')}, {'title': Value(literal:'Like father like son')}, {'title': Value(literal:'Ringless')}, {'title': Value(literal:'The Drums of War')}, {'title': Value(literal:'A Fine Line Between Light and Darkness')}, {'title': Value(literal:'The Gentleman')}, {'title': Value(literal:'A Sage Decision')}, {'title': Value(literal:'Precious, Beloved')}, {'title': Value(literal:""L'anello non è libertà"")}, {'title': Value(literal:'Io, me e me stesso')}, {'title': Value(literal:'Los tambores de guerra')}, {'title': Value(literal:'CURSED: Nights at the VA')}, {'title': Value(literal:'Battle of the mind and the heart')}, {'title': Value(literal:'A Study In Soufflés')}, {'title': Value(literal:'A Second Chance')}, {'title': Value(literal:'Come Wander')}, {'title': Value(literal:'The Tomb of Halanord')}, {'title': Value(literal:'The Unexpected Adventure')}, {'title': Value(literal:'An Unexpected Tagalong')}, {'title': Value(literal:'A Cracking Celebration')}, {'title': Value(literal:'Riddles in the Dark')}, {'title': Value(literal:'The Quest for Ourselves')}, {'title': Value(literal:'Diary of a Mirkwood Elf')}, {'title': Value(literal:'Burrower')}, {'title': Value(literal:'You are not Ape')}, {'title': Value(literal:'Riddling in the Dark')}, {'title': Value(literal:'Unmaking the Ring')}, {'title': Value(literal:'The Lord of The Rings: The Two Towers (Re-imagined)')}, {'title': Value(literal:'The Lord of The Rings: Return of The King (Re-imagined)')}, {'title': Value(literal:'The Path To Decay')}, {'title': Value(literal:'Reptile')}, {'title': Value(literal:'Luna')}, {'title': Value(literal:'Tesoro')}, {'title': Value(literal:'Sauron Trending Topic')}, {'title': Value(literal:'The Sword At The Edge Of The World')}, {'title': Value(literal:'The Nothing')}, {'title': Value(literal:'Alterim')}, {'title': Value(literal:'A Game of Life or Death (and Riddles)')}, {'title': Value(literal:""L'escalier de Cirith Ungol"")}, {'title': Value(literal:""La rentrée d'Eowyn"")}, {'title': Value(literal:'De tódolos xeitos en que se pode')}, {'title': Value(literal:""It's A Funny Story..."")}, {'title': Value(literal:'Well there was a time that you let me know')}, {'title': Value(literal:'The Fog')}, {'title': Value(literal:'Unto the Ending of the World')}, {'title': Value(literal:'Cold Snap')}, {'title': Value(literal:""The Elf's Wolf"")}, {'title': Value(literal:'Shadow Of Catra')}, {'title': Value(literal:'Lord of the Rings Trilogy • One Ring to Rule Them All [20th Anniversary] - FanVid')}, {'title': Value(literal:'The Power of the Ring')}, {'title': Value(literal:""La sai l'ultima? (Che cos'ho in tasca?)"")}, {'title': Value(literal:'Vater in meinen Träumen')}, {'title': Value(literal:'The drums of war')}, {'title': Value(literal:'Hobit aneb Tajn_ deník nájemného spole_níka')}, {'title': Value(literal:'______ ____')}, {'title': Value(literal:'Multi-Fandom • ""What did it cost?"" [Fanvid]')}, {'title': Value(literal:'A new Quest, a new Fellowship')}, {'title': Value(literal:'Our Flag Means Extra Death')}, {'title': Value(literal:'Transported')}, {'title': Value(literal:'So Far From Home')}, {'title': Value(literal:'An Unexpected Attachment')}, {'title': Value(literal:'River of Deceit')}, {'title': Value(literal:'Lord Of The Rings, Fellowship Of The Carrot')}, {'title': Value(literal:'We Wants It')}, {'title': Value(literal:'~and Anduin is near~')}, {'title': Value(literal:'Bath Time in Ithilien')}, {'title': Value(literal:'The Magical Unifying Powers of Gratuitous Selfies')}, {'title': Value(literal:""it was pity that stayed faramir's bow, young baggins"")}, {'title': Value(literal:'Middle Earth Parody Songs')}, {'title': Value(literal:'A God Has Cursed Me With This Sight')}, {'title': Value(literal:'Point of Origin')}, {'title': Value(literal:""Wayland's Smithy"")}, {'title': Value(literal:'The House of Angmar')}, {'title': Value(literal:'goodbye, hello')}, {'title': Value(literal:'Gollum')}, {'title': Value(literal:'Drabbles and One Shots of Lord Of The Rings')}, {'title': Value(literal:'Golum and Frodo, a love stoty')}, {'title': Value(literal:'Nowhere to go but Down')}, {'title': Value(literal:'Fish')}, {'title': Value(literal:'The Return of the (Witch) King')}, {'title': Value(literal:'Encyclopaedia Middle-Earth')}, {'title': Value(literal:'That night with Gollum')}, {'title': Value(literal:'Ancient Legends Return')}, {'title': Value(literal:'night moves')}, {'title': Value(literal:'rest my bones besides yours, my precious one')}, {'title': Value(literal:'The stairs of Cirith Ungol')}, {'title': Value(literal:'The End of All Things')}, {'title': Value(literal:'The Music of Memories')}, {'title': Value(literal:'fire and rain')}, {'title': Value(literal:'The Beginnings and Ends of Shadow Lie Between the Light and Darkness.')}, {'title': Value(literal:""Elwen's Drabbledom"")}, {'title': Value(literal:'The Last Mighty Child of Ungoliant')}, {'title': Value(literal:'Come over, Mister Frodo!')}, {'title': Value(literal:'Song of Exile')}, {'title': Value(literal:""Red as a Rose, Black as Raven's wing, White as the Arkenstone."")}, {'title': Value(literal:'Lord of Eryn Lasgalen')}, {'title': Value(literal:'A Change of Fate')}, {'title': Value(literal:'A Slight Change of Pace')}, {'title': Value(literal:'The Importance of Language')}, {'title': Value(literal:'Insight')}, {'title': Value(literal:'Opposites Attract')}, {'title': Value(literal:'Parasite')}, {'title': Value(literal:'One Voice to Torture Them All')}, {'title': Value(literal:'Precious')}, {'title': Value(literal:'A Balanced Meal')}, {'title': Value(literal:""The Took's Arrangement"")}, {'title': Value(literal:'Hollow Halls')}, {'title': Value(literal:'Unbroken')}, {'title': Value(literal:'What Fool Invented Kissing')}, {'title': Value(literal:'An End of Dying')}, {'title': Value(literal:'The Demon of the Galactic World')}, {'title': Value(literal:'Fellowship Discord Sings (""The Road Goes Ever On And On"")')}, {'title': Value(literal:'Carry You')}, {'title': Value(literal:""Starfleet Special Forces: Dominion's End"")}, {'title': Value(literal:'You put the ring....where')}, {'title': Value(literal:'Cold')}, {'title': Value(literal:'Ménage à Trois')}, {'title': Value(literal:'Smeagols Love.')}, {'title': Value(literal:'The Show')}, {'title': Value(literal:'The Kindest')}, {'title': Value(literal:'The Only Gold in Gray')}, {'title': Value(literal:'Eyes Like Mine')}, {'title': Value(literal:'Inside')}, {'title': Value(literal:'The Ten-Minute Two Towers')}, {'title': Value(literal:'Precious')}, {'title': Value(literal:""Smeagol's Song"")}, {'title': Value(literal:""Don't Stir until Daybreak"")}, {'title': Value(literal:'Through the Darkness')}, {'title': Value(literal:'Hush')}, {'title': Value(literal:'Searchers & Lovers & Leavers')}, {'title': Value(literal:'One Monocle To Spy On Them All')}, {'title': Value(literal:'Saudade')}, {'title': Value(literal:'A Change Would Do You Good')}, {'title': Value(literal:'Soit dit en passant')}, {'title': Value(literal:'Las Hojas del Destino')}, {'title': Value(literal:'________')}, {'title': Value(literal:'This Long and Winding Road')}, {'title': Value(literal:'A Sudden Keen Glance')}, {'title': Value(literal:'War of the Ring: Deleted Scenes and Abandoned Concepts')}, {'title': Value(literal:'Short Story about Love')}, {'title': Value(literal:'You Can Never Go Home')}, {'title': Value(literal:'Across The Barriers of Mortality')}, {'title': Value(literal:'Hope From Ashes')}, {'title': Value(literal:'Warrior of the Sea')}, {'title': Value(literal:'shattered into ash')}, {'title': Value(literal:'In All the Ways There Were')}, {'title': Value(literal:'The Very Last Time Sméagol Was Alone')}, {'title': Value(literal:'Reunion in Mirkwood')}, {'title': Value(literal:'The Road After Imladris')}, {'title': Value(literal:'Imprisonment at Barad-dûr')}, {'title': Value(literal:'A Hard Truth')}, {'title': Value(literal:'The Prize')}, {'title': Value(literal:'Impractical Hobbits: Round Five!')}, {'title': Value(literal:'A Meeting in the Dark')}, {'title': Value(literal:'Gollum x Reader')}, {'title': Value(literal:'Lord of the Rings: Fairest of Them All (Choices)')}, {'title': Value(literal:'The sound of the wind')}, {'title': Value(literal:'""Let me tell you the tales of High Adventure""')}, {'title': Value(literal:'Wish Fulfillment')}, {'title': Value(literal:'your hand in my hand, so still and discreet')}, {'title': Value(literal:'Moments Between')}, {'title': Value(literal:'The Halfling Who Would Be King')}, {'title': Value(literal:'The Unforgiven')}, {'title': Value(literal:'return')}, {'title': Value(literal:'The Temptation of Galadriel')}, {'title': Value(literal:'Thief in the Night')}, {'title': Value(literal:'sharing the load.')}, {'title': Value(literal:""Queen's Gambit"")}, {'title': Value(literal:'Unexpected Consequences')}, {'title': Value(literal:'Strength and Will')}, {'title': Value(literal:""The One Rings's Diary"")}, {'title': Value(literal:'War of the Ring')}, {'title': Value(literal:'Por ahora')}, {'title': Value(literal:'_______: ______ _ _______')}, {'title': Value(literal:'The Fault In Our Concussions')}, {'title': Value(literal:'Behind the Scars')}, {'title': Value(literal:'You will find me right where I fell')}, {'title': Value(literal:'bilbo and the horrible, no good, very bad journey')}, {'title': Value(literal:'An Unexpected Angel')}, {'title': Value(literal:'The Return of Gollum')}, {'title': Value(literal:'Apart Forever... Nay, Forever A Part')}, {'title': Value(literal:'Wanderer')}, {'title': Value(literal:'Moonlit')}, {'title': Value(literal:'The Courage of Hobbits')}, {'title': Value(literal:'Ithildin')}, {'title': Value(literal:'The Hobbit: An Unexpected Addition')}, {'title': Value(literal:""The Hobbit: Death's Returning Door"")}, {'title': Value(literal:'Fallen Kings')}, {'title': Value(literal:""I've Never Had to Knock on Wood, But I Know Someone Who Has"")}, {'title': Value(literal:'Where the Precious Goes')}, {'title': Value(literal:'The Labyrinth')}, {'title': Value(literal:'In the End')}, {'title': Value(literal:'The Thief Will Wonder No More')}, {'title': Value(literal:'Two Sides Of One Coin')}, {'title': Value(literal:'Gollum on his Quest for Frodos Ring')}, {'title': Value(literal:'Much Ado About Baggins')}, {'title': Value(literal:""A Secret Gate, Book 1: Home's Heart"")}, {'title': Value(literal:'The night it all becomes clear')}, {'title': Value(literal:'Riddles in the Dark')}, {'title': Value(literal:'Not Over Yet')}, {'title': Value(literal:'Dwarfses in the Dark')}, {'title': Value(literal:'Four Fingers')}, {'title': Value(literal:""Gollum's Lament"")}, {'title': Value(literal:'The Peoples of Arda')}, {'title': Value(literal:'Cat of the Fellowship')}, {'title': Value(literal:'Make it Out Alive')}, {'title': Value(literal:'moonstones')}, {'title': Value(literal:'Samwise Gamgee vs A Small Naked Cat')}, {'title': Value(literal:'Nine Companions, Almost')}, {'title': Value(literal:'LOTR flashfic 5+1')}, {'title': Value(literal:'Bauble-Eyes')}, {'title': Value(literal:'Out of Reach')}, {'title': Value(literal:'Two hungry uncles gyrating to the beat')}, {'title': Value(literal:'Ladies of the Ring: Return of the King')}, {'title': Value(literal:'The Two Prettiest')}, {'title': Value(literal:'Why One Should Not Stray So Close To Dol Guldor')}, {'title': Value(literal:'Precious, My Precious')}, {'title': Value(literal:'Addicted to the One Ring')}, {'title': Value(literal:'Gollum’s Redemption')}, {'title': Value(literal:'[Video] _______ ____')}, {'title': Value(literal:'Happiness is a Warm Gun')}, {'title': Value(literal:'What The... Who the Hell is That?')}, {'title': Value(literal:'yoda fatal vores palpatine')}]"	522	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién escribió Obsidian and the Wizarding World?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Obsidian and the Wizarding World"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿En qué historias sale Anduin Lothar?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Anduin Lothar"" . }
    </SPARQL>

    ###
    

Question: ¿En qué historias sale Gollum | Sméagol?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?title WHERE { 
  ?story golem:title ?title . 
  ?story golem:characters ""Gollum | Sméagol"" . 
}
"	"[{'title': Value(literal:'The Debate of the Victor and the Wizard (Original)')}, {'title': Value(literal:'A Meeting of the Minds')}, {'title': Value(literal:'The Elvenqueen')}, {'title': Value(literal:'Riddles & Redemption')}, {'title': Value(literal:'The Birth')}, {'title': Value(literal:'Evil Author Day 2020')}, {'title': Value(literal:'The Princess of Gondor Returns')}, {'title': Value(literal:'Píse_ lávy')}, {'title': Value(literal:'Babcia Ruth i Kryszta_ Mocy')}, {'title': Value(literal:'Harry Potter and the One to Rule Them All')}, {'title': Value(literal:'A different kind of therapy')}, {'title': Value(literal:'Born from Fire')}, {'title': Value(literal:'The Hobbit: The Stuffed Animal Edition')}, {'title': Value(literal:'The Ballad of Bilbo Baggins')}, {'title': Value(literal:'[VID] Enter the Wu-Tang: 36 Chambers of Death (Collector’s Edition)')}, {'title': Value(literal:'The Gang Goes Camping')}, {'title': Value(literal:'Taking the Hobbits to Isengard')}, {'title': Value(literal:'The taming of Smeagol')}, {'title': Value(literal:'The destruction of the Ring')}, {'title': Value(literal:'___')}, {'title': Value(literal:'Recherche plus ou moins fructueuse')}, {'title': Value(literal:'Os tambores da guerra')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'Harry potter x ouran high school host club')}, {'title': Value(literal:'Volume 1- It begins')}, {'title': Value(literal:'The heir of Smeagol')}, {'title': Value(literal:'Pumpkins')}, {'title': Value(literal:'To Prepare A Whole Duck')}, {'title': Value(literal:'The Last Dragon')}, {'title': Value(literal:'First as a Tragedy, Then as  a Comedy')}, {'title': Value(literal:'The Guardian of Erebor')}, {'title': Value(literal:'As My Friend Has Stood By Me, So Shall I')}, {'title': Value(literal:'molten gold')}, {'title': Value(literal:'Flogging Molly is a Dwarven Punk Band')}, {'title': Value(literal:'On the Road Again')}, {'title': Value(literal:'Lord of the Limericks')}, {'title': Value(literal:'Harebell (Sam)')}, {'title': Value(literal:'Forgot (Gollum)')}, {'title': Value(literal:'Spoiling Nice Fish')}, {'title': Value(literal:'Melltithio')}, {'title': Value(literal:'brevity')}, {'title': Value(literal:'With Many Voices')}, {'title': Value(literal:'Precious')}, {'title': Value(literal:'Trinkets')}, {'title': Value(literal:'Old Yule Ficlets')}, {'title': Value(literal:'A Hundred Silver Lamps')}, {'title': Value(literal:'Remembrances at the End of All Things')}, {'title': Value(literal:'Daughters of the West')}, {'title': Value(literal:'Happy Birthday Sméagol')}, {'title': Value(literal:'The Road Goes Ever On - A Tale of Fellowship')}, {'title': Value(literal:'All Who Are Hungry')}, {'title': Value(literal:'Dead Rangers Walking')}, {'title': Value(literal:'Return To Me[Thorin Oakenshield Love Story]')}, {'title': Value(literal:'Born in Fire')}, {'title': Value(literal:""Bunk'd: LOTR Edition"")}, {'title': Value(literal:'The story of Frodo, the One Ring and how they fell in love')}, {'title': Value(literal:'For Frodo')}, {'title': Value(literal:'A night at Mordor')}, {'title': Value(literal:'The Masterwork')}, {'title': Value(literal:'In the Fridge')}, {'title': Value(literal:'Light in the Shadows')}, {'title': Value(literal:'Interloper')}, {'title': Value(literal:'Ghosts of the Past')}, {'title': Value(literal:'Gollum')}, {'title': Value(literal:'Party of None, Shadow of War')}, {'title': Value(literal:""La soif de l'or"")}, {'title': Value(literal:'Világok között')}, {'title': Value(literal:'__________ ____ ______')}, {'title': Value(literal:'Vive memor leti')}, {'title': Value(literal:'The Zero Dimension')}, {'title': Value(literal:'Heroes in Middle-earth')}, {'title': Value(literal:'Road Trip')}, {'title': Value(literal:'Into the Blue')}, {'title': Value(literal:'Universally Acknowledged')}, {'title': Value(literal:'An Oath of Snow and Shadow')}, {'title': Value(literal:'An Acorn and A Mountain')}, {'title': Value(literal:'Roommates')}, {'title': Value(literal:'Room Mates')}, {'title': Value(literal:'Of Feathers, Claws and Werebird Hobbits')}, {'title': Value(literal:'The Highest Treasure')}, {'title': Value(literal:'Mist Upon the Eyes')}, {'title': Value(literal:'A ""Little"" Problem')}, {'title': Value(literal:'Faerie Lore')}, {'title': Value(literal:'The Beginning Of A Adventure')}, {'title': Value(literal:'Per rectum')}, {'title': Value(literal:'I Will Always Be With You')}, {'title': Value(literal:'A Not So Unwelcome Journey')}, {'title': Value(literal:'Bilbo Baggins: Frying Pan Wielder')}, {'title': Value(literal:""Things I Have Loved I'm Allowed to Keep"")}, {'title': Value(literal:'The Hobbit (with a twist)')}, {'title': Value(literal:'I Can Finally Rest')}, {'title': Value(literal:'Traveling with Idiots')}, {'title': Value(literal:'War-Zone Shopping')}, {'title': Value(literal:'Frodo and Sam go to… Wreck-it Ralph?!?!')}, {'title': Value(literal:'Wood Ears')}, {'title': Value(literal:'A Question of Luck')}, {'title': Value(literal:'Bottomless')}, {'title': Value(literal:'Ringburn')}, {'title': Value(literal:'Who Put the Blood')}, {'title': Value(literal:'[vid] Odds Are')}, {'title': Value(literal:'Wine')}, {'title': Value(literal:'The Precious Baby Phenomenon Unpacked: A Treatise on Obstetric Care in The Returned by I.L. Finwiel and the Istar Institute')}, {'title': Value(literal:'Green Taters')}, {'title': Value(literal:'An Ode to Frodo')}, {'title': Value(literal:""Schrödinger's Hobbit"")}, {'title': Value(literal:'My Precious')}, {'title': Value(literal:'Friend')}, {'title': Value(literal:'Snaccc Time with Smeagol')}, {'title': Value(literal:'Eggy Farts')}, {'title': Value(literal:'End of Innocence')}, {'title': Value(literal:'A New Home')}, {'title': Value(literal:'Like father like son')}, {'title': Value(literal:'Ringless')}, {'title': Value(literal:'The Drums of War')}, {'title': Value(literal:'A Fine Line Between Light and Darkness')}, {'title': Value(literal:'The Gentleman')}, {'title': Value(literal:'A Sage Decision')}, {'title': Value(literal:'Precious, Beloved')}, {'title': Value(literal:""L'anello non è libertà"")}, {'title': Value(literal:'Io, me e me stesso')}, {'title': Value(literal:'Los tambores de guerra')}, {'title': Value(literal:'CURSED: Nights at the VA')}, {'title': Value(literal:'Battle of the mind and the heart')}, {'title': Value(literal:'A Study In Soufflés')}, {'title': Value(literal:'A Second Chance')}, {'title': Value(literal:'Come Wander')}, {'title': Value(literal:'The Tomb of Halanord')}, {'title': Value(literal:'The Unexpected Adventure')}, {'title': Value(literal:'An Unexpected Tagalong')}, {'title': Value(literal:'A Cracking Celebration')}, {'title': Value(literal:'Riddles in the Dark')}, {'title': Value(literal:'The Quest for Ourselves')}, {'title': Value(literal:'Diary of a Mirkwood Elf')}, {'title': Value(literal:'Burrower')}, {'title': Value(literal:'You are not Ape')}, {'title': Value(literal:'Riddling in the Dark')}, {'title': Value(literal:'Unmaking the Ring')}, {'title': Value(literal:'The Lord of The Rings: The Two Towers (Re-imagined)')}, {'title': Value(literal:'The Lord of The Rings: Return of The King (Re-imagined)')}, {'title': Value(literal:'The Path To Decay')}, {'title': Value(literal:'Reptile')}, {'title': Value(literal:'Luna')}, {'title': Value(literal:'Tesoro')}, {'title': Value(literal:'Sauron Trending Topic')}, {'title': Value(literal:'The Sword At The Edge Of The World')}, {'title': Value(literal:'The Nothing')}, {'title': Value(literal:'Alterim')}, {'title': Value(literal:'A Game of Life or Death (and Riddles)')}, {'title': Value(literal:""L'escalier de Cirith Ungol"")}, {'title': Value(literal:""La rentrée d'Eowyn"")}, {'title': Value(literal:'De tódolos xeitos en que se pode')}, {'title': Value(literal:""It's A Funny Story..."")}, {'title': Value(literal:'Well there was a time that you let me know')}, {'title': Value(literal:'The Fog')}, {'title': Value(literal:'Unto the Ending of the World')}, {'title': Value(literal:'Cold Snap')}, {'title': Value(literal:""The Elf's Wolf"")}, {'title': Value(literal:'Shadow Of Catra')}, {'title': Value(literal:'Lord of the Rings Trilogy • One Ring to Rule Them All [20th Anniversary] - FanVid')}, {'title': Value(literal:'The Power of the Ring')}, {'title': Value(literal:""La sai l'ultima? (Che cos'ho in tasca?)"")}, {'title': Value(literal:'Vater in meinen Träumen')}, {'title': Value(literal:'The drums of war')}, {'title': Value(literal:'Hobit aneb Tajn_ deník nájemného spole_níka')}, {'title': Value(literal:'______ ____')}, {'title': Value(literal:'Multi-Fandom • ""What did it cost?"" [Fanvid]')}, {'title': Value(literal:'A new Quest, a new Fellowship')}, {'title': Value(literal:'Our Flag Means Extra Death')}, {'title': Value(literal:'Transported')}, {'title': Value(literal:'So Far From Home')}, {'title': Value(literal:'An Unexpected Attachment')}, {'title': Value(literal:'River of Deceit')}, {'title': Value(literal:'Lord Of The Rings, Fellowship Of The Carrot')}, {'title': Value(literal:'We Wants It')}, {'title': Value(literal:'~and Anduin is near~')}, {'title': Value(literal:'Bath Time in Ithilien')}, {'title': Value(literal:'The Magical Unifying Powers of Gratuitous Selfies')}, {'title': Value(literal:""it was pity that stayed faramir's bow, young baggins"")}, {'title': Value(literal:'Middle Earth Parody Songs')}, {'title': Value(literal:'A God Has Cursed Me With This Sight')}, {'title': Value(literal:'Point of Origin')}, {'title': Value(literal:""Wayland's Smithy"")}, {'title': Value(literal:'The House of Angmar')}, {'title': Value(literal:'goodbye, hello')}, {'title': Value(literal:'Gollum')}, {'title': Value(literal:'Drabbles and One Shots of Lord Of The Rings')}, {'title': Value(literal:'Golum and Frodo, a love stoty')}, {'title': Value(literal:'Nowhere to go but Down')}, {'title': Value(literal:'Fish')}, {'title': Value(literal:'The Return of the (Witch) King')}, {'title': Value(literal:'Encyclopaedia Middle-Earth')}, {'title': Value(literal:'That night with Gollum')}, {'title': Value(literal:'Ancient Legends Return')}, {'title': Value(literal:'night moves')}, {'title': Value(literal:'rest my bones besides yours, my precious one')}, {'title': Value(literal:'The stairs of Cirith Ungol')}, {'title': Value(literal:'The End of All Things')}, {'title': Value(literal:'The Music of Memories')}, {'title': Value(literal:'fire and rain')}, {'title': Value(literal:'The Beginnings and Ends of Shadow Lie Between the Light and Darkness.')}, {'title': Value(literal:""Elwen's Drabbledom"")}, {'title': Value(literal:'The Last Mighty Child of Ungoliant')}, {'title': Value(literal:'Come over, Mister Frodo!')}, {'title': Value(literal:'Song of Exile')}, {'title': Value(literal:""Red as a Rose, Black as Raven's wing, White as the Arkenstone."")}, {'title': Value(literal:'Lord of Eryn Lasgalen')}, {'title': Value(literal:'A Change of Fate')}, {'title': Value(literal:'A Slight Change of Pace')}, {'title': Value(literal:'The Importance of Language')}, {'title': Value(literal:'Insight')}, {'title': Value(literal:'Opposites Attract')}, {'title': Value(literal:'Parasite')}, {'title': Value(literal:'One Voice to Torture Them All')}, {'title': Value(literal:'Precious')}, {'title': Value(literal:'A Balanced Meal')}, {'title': Value(literal:""The Took's Arrangement"")}, {'title': Value(literal:'Hollow Halls')}, {'title': Value(literal:'Unbroken')}, {'title': Value(literal:'What Fool Invented Kissing')}, {'title': Value(literal:'An End of Dying')}, {'title': Value(literal:'The Demon of the Galactic World')}, {'title': Value(literal:'Fellowship Discord Sings (""The Road Goes Ever On And On"")')}, {'title': Value(literal:'Carry You')}, {'title': Value(literal:""Starfleet Special Forces: Dominion's End"")}, {'title': Value(literal:'You put the ring....where')}, {'title': Value(literal:'Cold')}, {'title': Value(literal:'Ménage à Trois')}, {'title': Value(literal:'Smeagols Love.')}, {'title': Value(literal:'The Show')}, {'title': Value(literal:'The Kindest')}, {'title': Value(literal:'The Only Gold in Gray')}, {'title': Value(literal:'Eyes Like Mine')}, {'title': Value(literal:'Inside')}, {'title': Value(literal:'The Ten-Minute Two Towers')}, {'title': Value(literal:'Precious')}, {'title': Value(literal:""Smeagol's Song"")}, {'title': Value(literal:""Don't Stir until Daybreak"")}, {'title': Value(literal:'Through the Darkness')}, {'title': Value(literal:'Hush')}, {'title': Value(literal:'Searchers & Lovers & Leavers')}, {'title': Value(literal:'One Monocle To Spy On Them All')}, {'title': Value(literal:'Saudade')}, {'title': Value(literal:'A Change Would Do You Good')}, {'title': Value(literal:'Soit dit en passant')}, {'title': Value(literal:'Las Hojas del Destino')}, {'title': Value(literal:'________')}, {'title': Value(literal:'This Long and Winding Road')}, {'title': Value(literal:'A Sudden Keen Glance')}, {'title': Value(literal:'War of the Ring: Deleted Scenes and Abandoned Concepts')}, {'title': Value(literal:'Short Story about Love')}, {'title': Value(literal:'You Can Never Go Home')}, {'title': Value(literal:'Across The Barriers of Mortality')}, {'title': Value(literal:'Hope From Ashes')}, {'title': Value(literal:'Warrior of the Sea')}, {'title': Value(literal:'shattered into ash')}, {'title': Value(literal:'In All the Ways There Were')}, {'title': Value(literal:'The Very Last Time Sméagol Was Alone')}, {'title': Value(literal:'Reunion in Mirkwood')}, {'title': Value(literal:'The Road After Imladris')}, {'title': Value(literal:'Imprisonment at Barad-dûr')}, {'title': Value(literal:'A Hard Truth')}, {'title': Value(literal:'The Prize')}, {'title': Value(literal:'Impractical Hobbits: Round Five!')}, {'title': Value(literal:'A Meeting in the Dark')}, {'title': Value(literal:'Gollum x Reader')}, {'title': Value(literal:'Lord of the Rings: Fairest of Them All (Choices)')}, {'title': Value(literal:'The sound of the wind')}, {'title': Value(literal:'""Let me tell you the tales of High Adventure""')}, {'title': Value(literal:'Wish Fulfillment')}, {'title': Value(literal:'your hand in my hand, so still and discreet')}, {'title': Value(literal:'Moments Between')}, {'title': Value(literal:'The Halfling Who Would Be King')}, {'title': Value(literal:'The Unforgiven')}, {'title': Value(literal:'return')}, {'title': Value(literal:'The Temptation of Galadriel')}, {'title': Value(literal:'Thief in the Night')}, {'title': Value(literal:'sharing the load.')}, {'title': Value(literal:""Queen's Gambit"")}, {'title': Value(literal:'Unexpected Consequences')}, {'title': Value(literal:'Strength and Will')}, {'title': Value(literal:""The One Rings's Diary"")}, {'title': Value(literal:'War of the Ring')}, {'title': Value(literal:'Por ahora')}, {'title': Value(literal:'_______: ______ _ _______')}, {'title': Value(literal:'The Fault In Our Concussions')}, {'title': Value(literal:'Behind the Scars')}, {'title': Value(literal:'You will find me right where I fell')}, {'title': Value(literal:'bilbo and the horrible, no good, very bad journey')}, {'title': Value(literal:'An Unexpected Angel')}, {'title': Value(literal:'The Return of Gollum')}, {'title': Value(literal:'Apart Forever... Nay, Forever A Part')}, {'title': Value(literal:'Wanderer')}, {'title': Value(literal:'Moonlit')}, {'title': Value(literal:'The Courage of Hobbits')}, {'title': Value(literal:'Ithildin')}, {'title': Value(literal:'The Hobbit: An Unexpected Addition')}, {'title': Value(literal:""The Hobbit: Death's Returning Door"")}, {'title': Value(literal:'Fallen Kings')}, {'title': Value(literal:""I've Never Had to Knock on Wood, But I Know Someone Who Has"")}, {'title': Value(literal:'Where the Precious Goes')}, {'title': Value(literal:'The Labyrinth')}, {'title': Value(literal:'In the End')}, {'title': Value(literal:'The Thief Will Wonder No More')}, {'title': Value(literal:'Two Sides Of One Coin')}, {'title': Value(literal:'Gollum on his Quest for Frodos Ring')}, {'title': Value(literal:'Much Ado About Baggins')}, {'title': Value(literal:""A Secret Gate, Book 1: Home's Heart"")}, {'title': Value(literal:'The night it all becomes clear')}, {'title': Value(literal:'Riddles in the Dark')}, {'title': Value(literal:'Not Over Yet')}, {'title': Value(literal:'Dwarfses in the Dark')}, {'title': Value(literal:'Four Fingers')}, {'title': Value(literal:""Gollum's Lament"")}, {'title': Value(literal:'The Peoples of Arda')}, {'title': Value(literal:'Cat of the Fellowship')}, {'title': Value(literal:'Make it Out Alive')}, {'title': Value(literal:'moonstones')}, {'title': Value(literal:'Samwise Gamgee vs A Small Naked Cat')}, {'title': Value(literal:'Nine Companions, Almost')}, {'title': Value(literal:'LOTR flashfic 5+1')}, {'title': Value(literal:'Bauble-Eyes')}, {'title': Value(literal:'Out of Reach')}, {'title': Value(literal:'Two hungry uncles gyrating to the beat')}, {'title': Value(literal:'Ladies of the Ring: Return of the King')}, {'title': Value(literal:'The Two Prettiest')}, {'title': Value(literal:'Why One Should Not Stray So Close To Dol Guldor')}, {'title': Value(literal:'Precious, My Precious')}, {'title': Value(literal:'Addicted to the One Ring')}, {'title': Value(literal:'Gollum’s Redemption')}, {'title': Value(literal:'[Video] _______ ____')}, {'title': Value(literal:'Happiness is a Warm Gun')}, {'title': Value(literal:'What The... Who the Hell is That?')}, {'title': Value(literal:'yoda fatal vores palpatine')}]"	1	0	0			
523	523	es	¿En qué historias sale Apple?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Apple"" . }"	"[{'title': Value(literal:'drarry is threatened by an apple')}, {'title': Value(literal:'Demise of Drapple')}, {'title': Value(literal:'Harry Potter and The Fruity Adventure (not starring Harry Potter)')}, {'title': Value(literal:'_Drapple_Goodbye Yesterday')}, {'title': Value(literal:'Draco and an Apple')}, {'title': Value(literal:""Draoc's Misunderstood Love - A Drapple Fic"")}, {'title': Value(literal:'__ __________ ________ ___________')}, {'title': Value(literal:'Oh my Dittoceus! - Kerchoo x Reader.')}, {'title': Value(literal:'Damaged But Never Broken')}, {'title': Value(literal:'Infinite DC: The Cyber War')}, {'title': Value(literal:'The Fruit Bowl')}, {'title': Value(literal:'Feel, love')}, {'title': Value(literal:'Oh Apple')}, {'title': Value(literal:'A Short Drapple Fic')}, {'title': Value(literal:'Finding Happiness')}, {'title': Value(literal:'Look At Me')}, {'title': Value(literal:'Art: Do take a bite, Potter')}, {'title': Value(literal:'Apples and Cream')}, {'title': Value(literal:'For never was a story of more woe than this of Shakespeare and his Apple')}, {'title': Value(literal:'Miroir sans tain')}, {'title': Value(literal:'Bittersweet')}, {'title': Value(literal:""Art: You can't win, Harry"")}, {'title': Value(literal:'Drapplarry')}, {'title': Value(literal:'The Drapple Disorder')}, {'title': Value(literal:'Drapple One Shots')}, {'title': Value(literal:'Their love stretched from his heart to her core.')}, {'title': Value(literal:'I Choose You!')}, {'title': Value(literal:'Fused Desires')}, {'title': Value(literal:'red')}, {'title': Value(literal:'Private School')}, {'title': Value(literal:'Apples to Apples')}, {'title': Value(literal:'Littiebub x jeud hot fanfec')}, {'title': Value(literal:""Where's The Million? | Inanimate Insanity Murder Case"")}, {'title': Value(literal:'Second Coming')}, {'title': Value(literal:'Food of Love')}, {'title': Value(literal:'idv segsy fanfics')}, {'title': Value(literal:'Checkmate')}, {'title': Value(literal:'Psychiatric Consultation of an Ex-Death Eater')}, {'title': Value(literal:'Crack Read Apple Pansy (Parkinson)')}, {'title': Value(literal:'Draco and The Mysterious Green Apple')}, {'title': Value(literal:'Drapple')}, {'title': Value(literal:'Loving you to the core')}, {'title': Value(literal:'The Apple of My Eye')}, {'title': Value(literal:'Re-Encounters of the Apple Kind')}, {'title': Value(literal:'An Apple Called Apple')}, {'title': Value(literal:'The Forbidden Fruit')}, {'title': Value(literal:'Apples & Addiction')}, {'title': Value(literal:""Ichor: fool's gold"")}, {'title': Value(literal:'metronome')}, {'title': Value(literal:'Dancing The Night Away')}, {'title': Value(literal:'From Across The Room')}, {'title': Value(literal:'Golden Delicious')}, {'title': Value(literal:""Eve's Got Nothing On Me"")}, {'title': Value(literal:'That Awkward Moment When You Get Stuck In A Cell And Go Into Heat')}, {'title': Value(literal:'Out of Distractions')}, {'title': Value(literal:'Gwapple: The Greatest Ship To Ever Exist')}, {'title': Value(literal:'Nothing To Say')}, {'title': Value(literal:""Bon-Bon's Imaginary Friend"")}, {'title': Value(literal:'Drapple Lovestory')}, {'title': Value(literal:'Request!')}, {'title': Value(literal:'Drapple angst for your soul')}, {'title': Value(literal:""Shalashaska's crack ships"")}, {'title': Value(literal:'Drapple')}, {'title': Value(literal:'I regret (everything)')}, {'title': Value(literal:'LilBoyLovers.com')}, {'title': Value(literal:'Bedroom Floor // L.P.')}, {'title': Value(literal:'A Feather Plucked')}, {'title': Value(literal:'Mark of the Gods')}, {'title': Value(literal:'apple fucks a bitch')}, {'title': Value(literal:'Strange But Not A Stranger')}, {'title': Value(literal:""The game won't end until the KING falls"")}, {'title': Value(literal:'Sanctuary of Lost Souls')}]"	523	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿De qué trata [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series ?collection ?content_warning ?romantic_category (GROUP_CONCAT(DISTINCT ?keyword; separator="", "") AS ?keywords) ?summary WHERE { ?story golem:title ""[[story]]"" . ?story golem:keyword ?keyword . ?story golem:romanticCategory ?romantic_category . ?story golem:series ?series . ?story golem:collections ?collection . ?story golem:contentWarning ?content_warning . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: ¿A qué serie pertenece [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?series WHERE {  ?story golem:title ""[[story]]"" . ?story golem:series ?series . }
    </SPARQL>

    ###
    

    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

Question: ¿En qué historias sale Apple?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?title WHERE { 
  ?story golem:characters ""Apple"" . 
  ?story golem:title ?title . 
}
"	"[{'title': Value(literal:'drarry is threatened by an apple')}, {'title': Value(literal:'Demise of Drapple')}, {'title': Value(literal:'Harry Potter and The Fruity Adventure (not starring Harry Potter)')}, {'title': Value(literal:'_Drapple_Goodbye Yesterday')}, {'title': Value(literal:'Draco and an Apple')}, {'title': Value(literal:""Draoc's Misunderstood Love - A Drapple Fic"")}, {'title': Value(literal:'__ __________ ________ ___________')}, {'title': Value(literal:'Oh my Dittoceus! - Kerchoo x Reader.')}, {'title': Value(literal:'Damaged But Never Broken')}, {'title': Value(literal:'Infinite DC: The Cyber War')}, {'title': Value(literal:'The Fruit Bowl')}, {'title': Value(literal:'Feel, love')}, {'title': Value(literal:'Oh Apple')}, {'title': Value(literal:'A Short Drapple Fic')}, {'title': Value(literal:'Finding Happiness')}, {'title': Value(literal:'Look At Me')}, {'title': Value(literal:'Art: Do take a bite, Potter')}, {'title': Value(literal:'Apples and Cream')}, {'title': Value(literal:'For never was a story of more woe than this of Shakespeare and his Apple')}, {'title': Value(literal:'Miroir sans tain')}, {'title': Value(literal:'Bittersweet')}, {'title': Value(literal:""Art: You can't win, Harry"")}, {'title': Value(literal:'Drapplarry')}, {'title': Value(literal:'The Drapple Disorder')}, {'title': Value(literal:'Drapple One Shots')}, {'title': Value(literal:'Their love stretched from his heart to her core.')}, {'title': Value(literal:'I Choose You!')}, {'title': Value(literal:'Fused Desires')}, {'title': Value(literal:'red')}, {'title': Value(literal:'Private School')}, {'title': Value(literal:'Apples to Apples')}, {'title': Value(literal:'Littiebub x jeud hot fanfec')}, {'title': Value(literal:""Where's The Million? | Inanimate Insanity Murder Case"")}, {'title': Value(literal:'Second Coming')}, {'title': Value(literal:'Food of Love')}, {'title': Value(literal:'idv segsy fanfics')}, {'title': Value(literal:'Checkmate')}, {'title': Value(literal:'Psychiatric Consultation of an Ex-Death Eater')}, {'title': Value(literal:'Crack Read Apple Pansy (Parkinson)')}, {'title': Value(literal:'Draco and The Mysterious Green Apple')}, {'title': Value(literal:'Drapple')}, {'title': Value(literal:'Loving you to the core')}, {'title': Value(literal:'The Apple of My Eye')}, {'title': Value(literal:'Re-Encounters of the Apple Kind')}, {'title': Value(literal:'An Apple Called Apple')}, {'title': Value(literal:'The Forbidden Fruit')}, {'title': Value(literal:'Apples & Addiction')}, {'title': Value(literal:""Ichor: fool's gold"")}, {'title': Value(literal:'metronome')}, {'title': Value(literal:'Dancing The Night Away')}, {'title': Value(literal:'From Across The Room')}, {'title': Value(literal:'Golden Delicious')}, {'title': Value(literal:""Eve's Got Nothing On Me"")}, {'title': Value(literal:'That Awkward Moment When You Get Stuck In A Cell And Go Into Heat')}, {'title': Value(literal:'Out of Distractions')}, {'title': Value(literal:'Gwapple: The Greatest Ship To Ever Exist')}, {'title': Value(literal:'Nothing To Say')}, {'title': Value(literal:""Bon-Bon's Imaginary Friend"")}, {'title': Value(literal:'Drapple Lovestory')}, {'title': Value(literal:'Request!')}, {'title': Value(literal:'Drapple angst for your soul')}, {'title': Value(literal:""Shalashaska's crack ships"")}, {'title': Value(literal:'Drapple')}, {'title': Value(literal:'I regret (everything)')}, {'title': Value(literal:'LilBoyLovers.com')}, {'title': Value(literal:'Bedroom Floor // L.P.')}, {'title': Value(literal:'A Feather Plucked')}, {'title': Value(literal:'Mark of the Gods')}, {'title': Value(literal:'apple fucks a bitch')}, {'title': Value(literal:'Strange But Not A Stranger')}, {'title': Value(literal:""The game won't end until the KING falls"")}, {'title': Value(literal:'Sanctuary of Lost Souls')}]"	1	0	0			
524	524	es	¿En qué historias sale Hakamada Izou?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Hakamada Izou"" . }"	[{'title': Value(literal:'__')}, {'title': Value(literal:'a cup of tea at the ledge of your window')}]	524	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del fandom Inumaki Toge/Original Character(s) - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""Inumaki Toge/Original Character(s) - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: ¿En qué historias sale Hakamada Izou?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?title WHERE { 
?story golem:title ?title . 
?story golem:characters ""Hakamada Izou"" . 
}
"	[{'title': Value(literal:'__')}, {'title': Value(literal:'a cup of tea at the ledge of your window')}]	1	0	0			
525	525	es	¿En qué historias sale ___?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }"	[{'title': Value(literal:'_____________')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'________________')}, {'title': Value(literal:'______')}, {'title': Value(literal:'[__][__] __________')}, {'title': Value(literal:'[______]_____')}, {'title': Value(literal:'__________')}, {'title': Value(literal:'____________')}, {'title': Value(literal:'___/_____')}, {'title': Value(literal:'______')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'____3P___________')}, {'title': Value(literal:'____________')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'[__][__] __________')}, {'title': Value(literal:'_________')}]	525	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: ¿En qué historias sale ___?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?title WHERE { 
?story golem:characters ""___"" . 
?story golem:title ?title . 
}
"	[{'title': Value(literal:'_____________')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'________________')}, {'title': Value(literal:'______')}, {'title': Value(literal:'[__][__] __________')}, {'title': Value(literal:'[______]_____')}, {'title': Value(literal:'__________')}, {'title': Value(literal:'____________')}, {'title': Value(literal:'___/_____')}, {'title': Value(literal:'______')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'____3P___________')}, {'title': Value(literal:'____________')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'[__][__] __________')}, {'title': Value(literal:'_________')}]	1	0	0			
526	526	es	¿En qué historias sale Anduin Lothar?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Anduin Lothar"" . }"	"[{'title': Value(literal:'____Louder than Words')}, {'title': Value(literal:""A Midsummer Night's Dream _____"")}, {'title': Value(literal:'____')}, {'title': Value(literal:'bandage')}, {'title': Value(literal:'Lothar/Khadgar_____')}, {'title': Value(literal:'Brief Encounter')}, {'title': Value(literal:'[__][____]Por Una Cabeza(ABO/OOC/NC17)')}, {'title': Value(literal:'Various Storms & Saints | _____')}, {'title': Value(literal:'___')}, {'title': Value(literal:'Injuries')}, {'title': Value(literal:'Ink & Lavender')}, {'title': Value(literal:'Gifting Season')}, {'title': Value(literal:'Summer Trifle')}, {'title': Value(literal:'Make Me Your One (And Only) __________')}, {'title': Value(literal:'Madness of Deathwing _______')}, {'title': Value(literal:'Bedtime Fable')}, {'title': Value(literal:'This Land Is Mine')}, {'title': Value(literal:'_________  The Dark and The Light')}, {'title': Value(literal:'___/Warchaft______NC17______  The Dark and The Light')}, {'title': Value(literal:'Ravensbane')}, {'title': Value(literal:'The Road of Redemption')}, {'title': Value(literal:'___ ______ _ ___________ _____.')}, {'title': Value(literal:'______ _____ _________ 4')}, {'title': Value(literal:'______ _ _________')}, {'title': Value(literal:'Pájaro azul | __')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Of Love and Family ____')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'The Tell-Tale Heart')}, {'title': Value(literal:'Power of the Twilight ____')}, {'title': Value(literal:'____A Saucerful Of Secrets')}, {'title': Value(literal:'Spell')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Soulmates are Inconvenient _____')}, {'title': Value(literal:'Far from any road')}, {'title': Value(literal:'____ Prime Specimen')}, {'title': Value(literal:'__')}, {'title': Value(literal:'Light A Fire')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'The Forged Throne')}, {'title': Value(literal:'born with it, after all')}, {'title': Value(literal:'What did you do?')}, {'title': Value(literal:'Distractions')}, {'title': Value(literal:'Your Majesty')}, {'title': Value(literal:'Powerful!')}, {'title': Value(literal:'Tides of Light')}, {'title': Value(literal:'____ ___, _____ ________ _____-_______ __ ____ _________ _________ _____-_______, _ ____, _____ ___ __ ____')}, {'title': Value(literal:'One Shot NanoWriMo Prompts - Destiel & Liontrust')}, {'title': Value(literal:'Witness')}, {'title': Value(literal:'AU Snippet: Dark Deals')}, {'title': Value(literal:'a bad seed grown')}, {'title': Value(literal:'The Royal Alpha')}, {'title': Value(literal:'Remind Me Of What Is Gone')}, {'title': Value(literal:'GUILT')}, {'title': Value(literal:'Prologue')}, {'title': Value(literal:'Warcraft - Of Fel and Iron')}, {'title': Value(literal:'To Break the Cycle')}, {'title': Value(literal:'Rebuilding Trust')}, {'title': Value(literal:'And So It Goes')}, {'title': Value(literal:'The Master, the Apprentice, and the Demon Cat')}, {'title': Value(literal:'The Quest for Cheering Up a Guardian')}, {'title': Value(literal:'Come Back To Me')}, {'title': Value(literal:'Big Raven, Big Problem?')}, {'title': Value(literal:'The Quest for Claiming a Guardian')}, {'title': Value(literal:'The Vampire of Azeroth')}, {'title': Value(literal:'Morning Kiss')}, {'title': Value(literal:'Spellbound')}, {'title': Value(literal:'His Guardian')}, {'title': Value(literal:'Of Mages and Their Mana Jacuzzies')}, {'title': Value(literal:'Overprotective')}, {'title': Value(literal:'Winter Night')}, {'title': Value(literal:'Small But Scary')}, {'title': Value(literal:'Not Compatible')}, {'title': Value(literal:'Romancing The Soldier')}, {'title': Value(literal:'Feathers')}, {'title': Value(literal:'The King, the Mage, and the Soldier Walking Into a Store')}, {'title': Value(literal:'Fly Again')}, {'title': Value(literal:""The King's Bad Day"")}, {'title': Value(literal:'Night Terror')}, {'title': Value(literal:'Kinktober 2021 ~ Part C')}, {'title': Value(literal:'A Pile of Snuggles')}, {'title': Value(literal:'The Best Place to Be')}, {'title': Value(literal:'Seasonal Sickness')}, {'title': Value(literal:""Let's Talk About Fishing"")}, {'title': Value(literal:'Power of the Twilight')}, {'title': Value(literal:""Coming over for a 'visit'"")}, {'title': Value(literal:'The Windiest Night')}, {'title': Value(literal:'LionTrust Tumblr Fills')}, {'title': Value(literal:'Take the pain')}, {'title': Value(literal:'The Wildest Night')}, {'title': Value(literal:'Various Storms & Saints')}, {'title': Value(literal:'The Lady and The Knight')}, {'title': Value(literal:'Bad side')}, {'title': Value(literal:'Bromance: A Lothar/Khadgar Story')}, {'title': Value(literal:'The one with the braiding')}, {'title': Value(literal:'Come back')}, {'title': Value(literal:'Turning the Tables')}, {'title': Value(literal:""The Demon's Game"")}, {'title': Value(literal:'Of Blueflame and Whiskers')}, {'title': Value(literal:'The Ale Never Ends Round Here')}, {'title': Value(literal:'Of Mages and Mana')}, {'title': Value(literal:'Incertitude')}, {'title': Value(literal:'twisting corridors')}, {'title': Value(literal:'The Night in Lordaeron')}, {'title': Value(literal:'The Things We Had')}, {'title': Value(literal:'Gotcha!')}, {'title': Value(literal:'A Whisper of Death')}, {'title': Value(literal:'Whatever May Come')}, {'title': Value(literal:'I Put A Spell On You')}, {'title': Value(literal:'Long Lost')}, {'title': Value(literal:'4986')}, {'title': Value(literal:'Drunk Confessions')}, {'title': Value(literal:'Parental Instinct')}, {'title': Value(literal:'The One to Do With the Night Sky')}, {'title': Value(literal:'Finding Khadgar (and Falling in Love On The Way)')}, {'title': Value(literal:'To Begin Anew')}, {'title': Value(literal:'Trace of Silver')}, {'title': Value(literal:""Let's Try Something New"")}, {'title': Value(literal:'Spell Gone Awry')}, {'title': Value(literal:'To Serve')}, {'title': Value(literal:'To Serve No More')}, {'title': Value(literal:'Late Nights')}, {'title': Value(literal:'Karazhan Chronicles')}, {'title': Value(literal:'Alone')}, {'title': Value(literal:'Trust')}, {'title': Value(literal:'Lonely (working title)')}, {'title': Value(literal:'Kissing Him')}, {'title': Value(literal:'Replacement')}, {'title': Value(literal:'What to Do with a Bored (sort of) Guardian')}, {'title': Value(literal:'What to Do with a Lord Commander')}, {'title': Value(literal:'In the Arms of an Angel')}, {'title': Value(literal:'Where I Belong')}, {'title': Value(literal:'Anchored')}, {'title': Value(literal:'Not the Smartest Idea')}, {'title': Value(literal:'A Generated Slash')}, {'title': Value(literal:'Opposing Ends')}, {'title': Value(literal:'Steamy Romance: Library Edition')}, {'title': Value(literal:'In Restless Dreams I Walked Alone')}, {'title': Value(literal:'What to Do with a Lover')}, {'title': Value(literal:'On A White Horse')}, {'title': Value(literal:'Echoes of the Past')}, {'title': Value(literal:'Khadgar needs you most')}, {'title': Value(literal:""A Lion's Pride"")}, {'title': Value(literal:'Happy Birthday')}, {'title': Value(literal:'To Impress The Lion')}, {'title': Value(literal:'Conduit')}, {'title': Value(literal:'Aftermath')}, {'title': Value(literal:'The Studious Apprentice')}, {'title': Value(literal:'Stretching Your Wings')}, {'title': Value(literal:'Branded')}, {'title': Value(literal:""Khadgar's Very Strange Fantasy"")}, {'title': Value(literal:""Lothar's Very Strange Fantasy"")}, {'title': Value(literal:'Memories')}, {'title': Value(literal:'Felmage')}, {'title': Value(literal:""Apprentice's Diary"")}, {'title': Value(literal:'From Darkness, Light')}, {'title': Value(literal:'What to do with a Faerie Dragon Mage')}, {'title': Value(literal:'Divergence')}, {'title': Value(literal:'Snow Day')}, {'title': Value(literal:'Playing Dirty')}, {'title': Value(literal:'The Lion Of The Ebon Blade')}, {'title': Value(literal:""Don't get too close, it's dark inside"")}, {'title': Value(literal:'Loneliness Makes Us Weak')}, {'title': Value(literal:'Felhunter')}, {'title': Value(literal:'When the Cold of Winter Comes')}, {'title': Value(literal:'Dreadknight')}, {'title': Value(literal:'The House of Cards')}, {'title': Value(literal:'Not Just the Hormones')}, {'title': Value(literal:'Of Mages and Mountains')}, {'title': Value(literal:'Felscarred')}, {'title': Value(literal:'Free Falling')}, {'title': Value(literal:""Lothar's Secret"")}, {'title': Value(literal:""The Dread Horseman of Hallow's End"")}, {'title': Value(literal:'Requiem of the Wind')}, {'title': Value(literal:""The Lion's Prey"")}, {'title': Value(literal:'A Raven Crossed the Moon')}, {'title': Value(literal:'Sanguineous')}, {'title': Value(literal:'And as my thoughts fly, you anchor me')}, {'title': Value(literal:'Consanguineous')}, {'title': Value(literal:'I Will Not Kiss You')}, {'title': Value(literal:'Breathe You In (Like Oxygen)')}, {'title': Value(literal:'Uptown Funk Me Up')}, {'title': Value(literal:'Kiss (While Your Lips Are Still Red)')}, {'title': Value(literal:""The Kid's Are(n't) Alright"")}, {'title': Value(literal:'A Taste of Iron')}, {'title': Value(literal:'Raven Trust')}, {'title': Value(literal:'The Ebon Lion')}, {'title': Value(literal:'Exsanguinous')}, {'title': Value(literal:'Not as Innocent as You Think')}, {'title': Value(literal:'One Thousand Words, More or Less...')}, {'title': Value(literal:'About Khadgar')}, {'title': Value(literal:'Reunion')}, {'title': Value(literal:""Calls You Home (You're Stronger Than You Know)"")}, {'title': Value(literal:'The House of the Lion')}, {'title': Value(literal:'Blood Sins')}, {'title': Value(literal:'Ohne Dich')}, {'title': Value(literal:'Home Is')}, {'title': Value(literal:'Shower Time')}, {'title': Value(literal:'A Kiss for Waking')}, {'title': Value(literal:'We choose our own destiny')}, {'title': Value(literal:'Come Home (___')}, {'title': Value(literal:'For My King ___')}, {'title': Value(literal:'Long Adventure')}, {'title': Value(literal:'The Ebon Horseman')}, {'title': Value(literal:'You Reached into the Heavens')}, {'title': Value(literal:'Stay Alive')}, {'title': Value(literal:'Onioncraft')}, {'title': Value(literal:'Strong Shoulders Bear More Weight')}, {'title': Value(literal:'Accursed')}, {'title': Value(literal:'Anduin Lothar Is Super Suave, Definitely')}, {'title': Value(literal:'Day One: Firsts')}, {'title': Value(literal:'Educational Field Trip')}, {'title': Value(literal:'Liontrust Week 2017')}, {'title': Value(literal:'Day Two: Family')}, {'title': Value(literal:'Why Are There So Many Hot People in the Library?')}, {'title': Value(literal:""Captain's Log"")}, {'title': Value(literal:'Day Three: AU')}, {'title': Value(literal:""I've Seen Your Frown and It's Like Looking Down the Barrel of a Gun"")}, {'title': Value(literal:'Day Four: Angst')}, {'title': Value(literal:'Azsuna Interlude')}, {'title': Value(literal:'Bilingual Misunderstandings')}, {'title': Value(literal:'Day Five: NSFW')}, {'title': Value(literal:""He's Color"")}, {'title': Value(literal:'Day Six: Soulmates')}, {'title': Value(literal:'Warcraft prompt fills')}, {'title': Value(literal:'Super Powers Mean Super Problems')}, {'title': Value(literal:'Day Seven: Free Day')}, {'title': Value(literal:'The Once and Future King')}, {'title': Value(literal:'Guardian')}, {'title': Value(literal:'Corruption')}, {'title': Value(literal:'Follow You Into The Dark')}, {'title': Value(literal:'The Further I Fly (The Closer I Get To Home)')}, {'title': Value(literal:'Champions')}, {'title': Value(literal:'For Life')}, {'title': Value(literal:'Of Hope and Pain')}, {'title': Value(literal:'Dinner and Dessert')}, {'title': Value(literal:'The Eagles of Azeroth')}, {'title': Value(literal:'Pets and People')}, {'title': Value(literal:'Date')}, {'title': Value(literal:'Whose That Silver Haired Mage?')}, {'title': Value(literal:'Heat in Hellfire')}, {'title': Value(literal:'Reunion')}, {'title': Value(literal:'The Dream From The Nightmare')}, {'title': Value(literal:'Magic')}, {'title': Value(literal:'Consent')}, {'title': Value(literal:'Collar')}, {'title': Value(literal:'Incubus')}, {'title': Value(literal:'Rainbow Connection')}, {'title': Value(literal:'The One With The Shaving')}, {'title': Value(literal:'A Unicorn (kinda) Crashes Their Wedding')}, {'title': Value(literal:'The Lion, The Raven and the Trust Between Them')}, {'title': Value(literal:'Magical Hands')}, {'title': Value(literal:'And The Bells Were Ringing Out')}, {'title': Value(literal:'One Night In Karazhan')}, {'title': Value(literal:'____Once Upon A Bookstore _______________________')}, {'title': Value(literal:'Les Abandonées')}, {'title': Value(literal:'Stolen King')}, {'title': Value(literal:'Walk Away (Maybe)')}, {'title': Value(literal:'That Perfect Moment')}, {'title': Value(literal:'Have Patience')}, {'title': Value(literal:'Nothing Wrong With That')}, {'title': Value(literal:'Binding')}, {'title': Value(literal:'Today, Yesterday, Tomorrow')}, {'title': Value(literal:'and who by brave assent')}, {'title': Value(literal:'Burning Bright')}, {'title': Value(literal:'The bite that binds the gift')}, {'title': Value(literal:'Baby Callan to the Tower Came')}, {'title': Value(literal:'Secrets of the Royal Bedchamber')}, {'title': Value(literal:'War Trophy')}, {'title': Value(literal:'Thrall')}, {'title': Value(literal:'Still')}, {'title': Value(literal:'eye of gold, thigh of blue')}, {'title': Value(literal:'How Not to Waste a Perfectly Useful Human to Gryphon Transformation')}, {'title': Value(literal:'Instructions Unclear')}, {'title': Value(literal:'the nights that follow')}, {'title': Value(literal:'Academic Classification')}, {'title': Value(literal:'Show Me Your Eyes')}, {'title': Value(literal:'roads leading home')}, {'title': Value(literal:'Master and Apprentice')}, {'title': Value(literal:'Riding a Gryphon')}, {'title': Value(literal:'Come Undone')}, {'title': Value(literal:'The Conquest')}, {'title': Value(literal:'Panic Switch')}, {'title': Value(literal:'Time in a Bottle')}, {'title': Value(literal:'Of Love and Mages')}, {'title': Value(literal:'The Road to Stranglethorn')}, {'title': Value(literal:'Not So Slow Fall')}, {'title': Value(literal:'Gotta Be Somebody')}, {'title': Value(literal:'Birthday Magic')}, {'title': Value(literal:'Far Too Long')}, {'title': Value(literal:""Khadgar's Lion & Anduin's Spell-Chucker"")}, {'title': Value(literal:'Here We Are')}, {'title': Value(literal:'For You I Will')}, {'title': Value(literal:'Little Lothar')}, {'title': Value(literal:""Why Mages Shouldn't Drink"")}, {'title': Value(literal:'Unkiss Me')}, {'title': Value(literal:'Anthem of the Angels')}, {'title': Value(literal:'Corruption of Men')}, {'title': Value(literal:'that one time khadgar called lothar ""master"" in front of everybody')}, {'title': Value(literal:'The Proud Lion and the Silly Bookworm')}, {'title': Value(literal:'wise decisions')}, {'title': Value(literal:'The Sacrifices We Make for Peace')}, {'title': Value(literal:""It's Just A Game!"")}, {'title': Value(literal:'Whumptober 2018')}, {'title': Value(literal:'Fictober 2018 - The Lion, The Raven and the Trust Between Them - The Drabbles')}, {'title': Value(literal:'Precipitous')}, {'title': Value(literal:'Non-Conventional Vows')}, {'title': Value(literal:'A LionTrust Christmas Collection')}, {'title': Value(literal:'Breath on the Water')}, {'title': Value(literal:'The LionTrust Way to Ring in The New Year')}, {'title': Value(literal:'What Makes Us Strong')}, {'title': Value(literal:'Bless Me, Father')}, {'title': Value(literal:""for near is where you'll meet"")}, {'title': Value(literal:""I've had it with you"")}, {'title': Value(literal:'Calling All Gnomes')}, {'title': Value(literal:""Lothar's Birthday"")}, {'title': Value(literal:'Wartime Butterflies')}, {'title': Value(literal:'Stargazing Butterflies')}, {'title': Value(literal:'Tradition')}, {'title': Value(literal:'Gryphons and Butterflies')}, {'title': Value(literal:'closer than the wound')}, {'title': Value(literal:'City Butterflies')}, {'title': Value(literal:'Embrasse Moi')}, {'title': Value(literal:'Salt and Shadow')}, {'title': Value(literal:'Whatever It Takes; Break The Chains')}, {'title': Value(literal:""Don't Go"")}, {'title': Value(literal:'Coffee Fueled Mages')}, {'title': Value(literal:'Darkness find light')}, {'title': Value(literal:'Healing Butterflies')}, {'title': Value(literal:'Taste of Magic')}, {'title': Value(literal:'Stay For You')}, {'title': Value(literal:'Secret meet')}, {'title': Value(literal:'peace talks')}, {'title': Value(literal:'The Wettest Night')}, {'title': Value(literal:'first dates')}, {'title': Value(literal:'Come as You are, as I Want You to be')}, {'title': Value(literal:'Regaining Trust')}, {'title': Value(literal:'Inner turmoil')}, {'title': Value(literal:'visitation rights')}, {'title': Value(literal:'Home for the Heroes')}, {'title': Value(literal:'Lionhearted')}, {'title': Value(literal:'Trust in Need')}, {'title': Value(literal:'Glow')}, {'title': Value(literal:'Trust in Doubt')}, {'title': Value(literal:'No Success Without Sacrifice')}, {'title': Value(literal:'Trust in Hope')}, {'title': Value(literal:'Whispers in the Dark')}, {'title': Value(literal:'Posession')}, {'title': Value(literal:'Only When You Sleep')}, {'title': Value(literal:'broadswords and rune wards')}, {'title': Value(literal:'arms wide open')}, {'title': Value(literal:'(let me) catch my breath')}, {'title': Value(literal:'Exodus for the Heroes')}, {'title': Value(literal:'the warm glow of survival')}, {'title': Value(literal:'Observations from the Old Guard')}, {'title': Value(literal:'Breaking Light')}, {'title': Value(literal:'Soulmates are Inconvenient')}, {'title': Value(literal:'Walking in the twilight')}, {'title': Value(literal:'Not Everything')}, {'title': Value(literal:'When We Were Dreaming')}, {'title': Value(literal:'__ ____')}, {'title': Value(literal:'Silence')}, {'title': Value(literal:""For A Jock You're Whiny"")}, {'title': Value(literal:'No Retreat')}, {'title': Value(literal:'The Night Guard and the Librarian')}, {'title': Value(literal:'They Both Take Practice')}, {'title': Value(literal:""That's Not My Name"")}, {'title': Value(literal:'Rest for the Heroes')}, {'title': Value(literal:'Nursemaid')}, {'title': Value(literal:'Nightmares')}, {'title': Value(literal:'Not that stupid')}, {'title': Value(literal:'The Best Kind of Strange')}, {'title': Value(literal:'Impure Imagination')}, {'title': Value(literal:'Do Not Open')}, {'title': Value(literal:'Little Lion Man')}, {'title': Value(literal:'Two hits and a kiss.')}, {'title': Value(literal:'the world falls (to the side)')}, {'title': Value(literal:""Let's Get To Work...Or Not"")}, {'title': Value(literal:'LionTrust A/B/O AU part 1 of ?')}, {'title': Value(literal:'Roar with your heart and soul')}, {'title': Value(literal:'LionTrust A/B/O AU part 2 of ? (or, in which Khadgar goes into heat for the first time after he and Lothar have become mates)')}, {'title': Value(literal:'Drinking Problem')}, {'title': Value(literal:'make me your one (and only)')}, {'title': Value(literal:'Mage Fixation')}, {'title': Value(literal:""Khadgar and Anduin take Denny's"")}, {'title': Value(literal:'A Contrary Omega and an Equally Contrary Alpha')}, {'title': Value(literal:'LionTrust Modern AU crack')}, {'title': Value(literal:'The Worst That Can Happen')}, {'title': Value(literal:'The Shopboy and the Biker')}, {'title': Value(literal:'Something to Tell You')}, {'title': Value(literal:'Teacher')}, {'title': Value(literal:'Flowers for You, My Love')}, {'title': Value(literal:'My Khadgars')}, {'title': Value(literal:'Liontrust Prompt Fills')}, {'title': Value(literal:'The Loneliest Day')}, {'title': Value(literal:'In Another Life')}, {'title': Value(literal:'In the Blink of an Eye')}, {'title': Value(literal:""Can't breathe ..."")}, {'title': Value(literal:'The Dustiest Day')}, {'title': Value(literal:""Blink and You'll Miss It"")}, {'title': Value(literal:'Felmage')}, {'title': Value(literal:""Pretend That I'm Okay"")}, {'title': Value(literal:'That One Time With The Desk')}, {'title': Value(literal:'LionTrust Fuck or Die')}, {'title': Value(literal:'War Of Hearts')}, {'title': Value(literal:'Impure Imagination ____')}, {'title': Value(literal:'Raven Magic')}, {'title': Value(literal:'A Blink and a Bath')}, {'title': Value(literal:'Life Is But A Dream')}, {'title': Value(literal:'Let Me See You')}, {'title': Value(literal:'Starved')}, {'title': Value(literal:'Somewhere Between Heaven and Hell')}, {'title': Value(literal:""He's a tease"")}, {'title': Value(literal:'LionTrust Truth Spell Fic')}, {'title': Value(literal:'From Darkness, Light')}, {'title': Value(literal:'A Sleepy Misunderstanding')}, {'title': Value(literal:'LionTrust A/B/O AU part 3 of ? or The Appearance of Garona')}, {'title': Value(literal:'Love me Sweetly')}, {'title': Value(literal:'Everything You Want')}, {'title': Value(literal:'Confessions')}, {'title': Value(literal:'Anniversary')}, {'title': Value(literal:'Relief in Release')}, {'title': Value(literal:'LionTrust Angst')}, {'title': Value(literal:'A Vision Come True')}, {'title': Value(literal:'The Night of Deliverance')}, {'title': Value(literal:'Scattered Sleeping')}, {'title': Value(literal:'A Curse or A Blessing')}, {'title': Value(literal:'The Road to Hell')}, {'title': Value(literal:""The Night Doesn't Want to End."")}, {'title': Value(literal:'End Game (The Lion and the Mage)')}, {'title': Value(literal:'From Darkness, Light')}, {'title': Value(literal:'A Friendly Spar')}, {'title': Value(literal:'Are You Ready?')}, {'title': Value(literal:'Wanting')}, {'title': Value(literal:'No Magic Strong Enough')}, {'title': Value(literal:'The Lonely Tower')}, {'title': Value(literal:'Savior')}, {'title': Value(literal:""Love in the last place you'd expect"")}, {'title': Value(literal:'From Darkness Comes Light')}, {'title': Value(literal:'Make Me')}, {'title': Value(literal:'sunset boulevard (when i wake up)')}, {'title': Value(literal:'A Simple Misstep')}, {'title': Value(literal:'Something... something... something...')}, {'title': Value(literal:'FairyAU Drabble')}, {'title': Value(literal:'Seeking Shelter')}, {'title': Value(literal:""If it works it ain't stupid"")}, {'title': Value(literal:'Bloom and Grow')}, {'title': Value(literal:'riding shotgun')}, {'title': Value(literal:'Old Friends, New Beginnings')}, {'title': Value(literal:'Dark Desires')}, {'title': Value(literal:'Necessity')}, {'title': Value(literal:'Apparently Dragons Like Flowers')}, {'title': Value(literal:'raske seis (beaten breath)')}, {'title': Value(literal:'LionTrust Dragon Fic')}, {'title': Value(literal:'Smol Mage and Manpain Lion')}, {'title': Value(literal:'I will not die today')}, {'title': Value(literal:'Apparently Lothar Needs To Sleep')}, {'title': Value(literal:'Lick')}, {'title': Value(literal:'3 Warriors, 1 Mage')}, {'title': Value(literal:""What's in a name?"")}, {'title': Value(literal:'Apparently Bellies Are Important')}, {'title': Value(literal:'LionTrust Dragon Fic 2')}, {'title': Value(literal:'These Bright Blue City Lights')}, {'title': Value(literal:'Begging Me To Open Up My Mouth')}, {'title': Value(literal:'Inexorable')}, {'title': Value(literal:'Soulmates Never Die')}, {'title': Value(literal:'What If')}, {'title': Value(literal:'The Gift')}, {'title': Value(literal:'Artist')}, {'title': Value(literal:'Doing Something Stupid')}, {'title': Value(literal:'Unfit')}, {'title': Value(literal:'As Good As it Gets')}, {'title': Value(literal:'Anduin')}, {'title': Value(literal:'The Lion, the Dragon-Mage, and Minus the Wardrobe')}, {'title': Value(literal:'Stay')}, {'title': Value(literal:'Sleep')}, {'title': Value(literal:'Home')}, {'title': Value(literal:'burning blue')}, {'title': Value(literal:'Apparently Dragons Shed')}, {'title': Value(literal:'A Marriage of Convenience')}, {'title': Value(literal:'Beyond the Walls of Stormwind')}, {'title': Value(literal:'Our Boys')}, {'title': Value(literal:""I Think I'm Gonna Marry You"")}, {'title': Value(literal:'History 320')}, {'title': Value(literal:'Cappuccino')}, {'title': Value(literal:'When All Else Dies There Is Still Hope')}, {'title': Value(literal:'Small Steps')}, {'title': Value(literal:'With Charcoal Hands')}, {'title': Value(literal:""Can't We Just Be Us?"")}, {'title': Value(literal:'Their Little Toy')}, {'title': Value(literal:'Paperclips')}, {'title': Value(literal:'Daddy')}, {'title': Value(literal:'The Smallest Lion')}, {'title': Value(literal:'Eyes on Me')}, {'title': Value(literal:'We Share One Heart')}, {'title': Value(literal:'Worthy')}, {'title': Value(literal:'Soul Mates Solace')}, {'title': Value(literal:'Do You Regret It?')}, {'title': Value(literal:'An Ictus of the Heart')}, {'title': Value(literal:'Breathe')}, {'title': Value(literal:'Nursemage')}, {'title': Value(literal:'Sabotage')}, {'title': Value(literal:'Apparently Khadgar Has A Secret')}, {'title': Value(literal:'Covetous Love')}, {'title': Value(literal:'Only You')}, {'title': Value(literal:'The Longest Night')}, {'title': Value(literal:""Tell Me What It's Like"")}, {'title': Value(literal:'Dry earth cannot help but soak up water.')}, {'title': Value(literal:'How Well Do You Know Him?')}, {'title': Value(literal:'To Take A Mage')}, {'title': Value(literal:'The Death Of Innocence')}, {'title': Value(literal:""blunt thou the lion's paws"")}, {'title': Value(literal:'Youthful Indiscretions')}, {'title': Value(literal:'Like Dancing')}, {'title': Value(literal:'Alone, We Fall')}, {'title': Value(literal:""Khadgar's Little Curse"")}, {'title': Value(literal:'And All The Days In Between')}, {'title': Value(literal:'Together We Rise')}, {'title': Value(literal:'Rocket Man')}, {'title': Value(literal:'Claiming Khadgar and Setting Things Right')}, {'title': Value(literal:'Song of the Caged Bird')}, {'title': Value(literal:""Lothar's Mage"")}, {'title': Value(literal:'The Human Emotion')}, {'title': Value(literal:'A Short Distance')}, {'title': Value(literal:""Love Like You'll Never Be Hurt"")}, {'title': Value(literal:'Stronger Together (because loneliness makes you weak)')}, {'title': Value(literal:'Uncorrupted')}, {'title': Value(literal:'Passing Time')}, {'title': Value(literal:'Whisper (your love onto my skin)')}, {'title': Value(literal:'Take Me Down')}, {'title': Value(literal:'Khadgars and Lothars')}, {'title': Value(literal:""I'm covered in the colors - Pulled apart at the seams"")}, {'title': Value(literal:'Dragons of Stormwind')}, {'title': Value(literal:'Long Road Home')}, {'title': Value(literal:""The Lion's Mage."")}, {'title': Value(literal:'When the Queen commands...')}, {'title': Value(literal:'What to Do with an Annoying Mage')}, {'title': Value(literal:'Roll Over')}, {'title': Value(literal:'The Human Strain')}, {'title': Value(literal:'Bestow Him Peace')}, {'title': Value(literal:'Gifts from Family')}, {'title': Value(literal:'Joust Do It!')}, {'title': Value(literal:'Ooh!')}, {'title': Value(literal:'Make Me a Match')}, {'title': Value(literal:'Map of Anduin')}, {'title': Value(literal:'Under the Stars')}, {'title': Value(literal:'Fine Dining')}, {'title': Value(literal:'Learning How to Dance')}, {'title': Value(literal:'Tiny Little Secret')}, {'title': Value(literal:""Khadgar's Day Out"")}, {'title': Value(literal:'Aging Gracefully')}, {'title': Value(literal:'Meanwhile in Stormwind - Liontrust Edition')}, {'title': Value(literal:""Lothar's Library Visit"")}, {'title': Value(literal:'Nightmare')}, {'title': Value(literal:'The Human Trust')}, {'title': Value(literal:'Blood and Shadows')}, {'title': Value(literal:'Anduin, Greatstaff of Khadgar')}, {'title': Value(literal:'Midnight')}, {'title': Value(literal:""Hold on Tight (We'll be Bright)"")}, {'title': Value(literal:'Quietus')}, {'title': Value(literal:'Appropriation')}, {'title': Value(literal:'Khadgar Comes On Little Cat Feet')}, {'title': Value(literal:'That Smart Mouth')}, {'title': Value(literal:'Bad Idea?')}, {'title': Value(literal:'From Light Comes Darkness, And From Darkness, Light')}, {'title': Value(literal:'Evacuating the City')}, {'title': Value(literal:'All is Not Well (Between Us)')}, {'title': Value(literal:'The Last Night')}, {'title': Value(literal:'I Needed That')}, {'title': Value(literal:'Cloudcatching')}, {'title': Value(literal:'He Lives')}, {'title': Value(literal:'Progress of Ravens')}, {'title': Value(literal:'Hallow Shadows')}, {'title': Value(literal:'Cycles')}, {'title': Value(literal:'The Dragon Master')}, {'title': Value(literal:'Hurt Me')}, {'title': Value(literal:'An Old Battered Shield')}, {'title': Value(literal:'What to do with a Pirate')}, {'title': Value(literal:'Betray My Name')}, {'title': Value(literal:'Wunjo')}, {'title': Value(literal:""We'll Never Kneel Before You"")}, {'title': Value(literal:'Liontrust 20 x 200 Challenge')}, {'title': Value(literal:'Fill Me Up')}, {'title': Value(literal:'On the Sea and Sky')}, {'title': Value(literal:'New Beginnings')}, {'title': Value(literal:'Nearshore')}, {'title': Value(literal:'Be More Careful')}, {'title': Value(literal:'Enough')}, {'title': Value(literal:'Unsteady')}, {'title': Value(literal:'Tuffy')}, {'title': Value(literal:'Sapphires')}, {'title': Value(literal:'The Missing Cow')}, {'title': Value(literal:'Winter Veil')}, {'title': Value(literal:'Just Another Unwilling Party Guest')}, {'title': Value(literal:'The Springs')}, {'title': Value(literal:'I need a lift...are you for hire?')}, {'title': Value(literal:'Say Please')}, {'title': Value(literal:""Tuffy's Tapestry"")}, {'title': Value(literal:'The Mountains Have People')}, {'title': Value(literal:'And you had me')}, {'title': Value(literal:""Hero's Call: If it's not social, leave a message."")}, {'title': Value(literal:'While You Were Asleep')}, {'title': Value(literal:'Searching For Spring')}, {'title': Value(literal:'To Share and Share Alike')}, {'title': Value(literal:'Outlandish')}, {'title': Value(literal:'Feeling')}, {'title': Value(literal:'Toi, Encore toi et toujours toi (par Mana2702)')}, {'title': Value(literal:'Lazos del destino')}, {'title': Value(literal:'______ _____ _________ 3')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'___ _____ ____')}, {'title': Value(literal:'_ [____] _______ ___ ______, _____ _______')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'_______, _____ _ _______')}, {'title': Value(literal:'_______ ______')}, {'title': Value(literal:'__________ ________')}, {'title': Value(literal:'Much ado about nothing')}, {'title': Value(literal:'___-__ _________ ________')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'Missed Lessons')}, {'title': Value(literal:'WoW Drabbles')}, {'title': Value(literal:'Silence That I Keep')}, {'title': Value(literal:'Tapestries in Skin')}, {'title': Value(literal:'Of Magic and Romanticism')}, {'title': Value(literal:'Solace in Stealth')}, {'title': Value(literal:'Dancer of the Sky')}, {'title': Value(literal:'Fel Inquisition')}, {'title': Value(literal:'The Songs of Conspiracy')}]"	526	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿En qué historias sale Gollum | Sméagol?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Gollum | Sméagol"" . }
    </SPARQL>

    ###
    

Question: ¿En qué historias sale Anduin Lothar?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT ?title WHERE { 
  ?story golem:title ?title . 
  ?story golem:characters ""Anduin Lothar"" . 
}
"	"[{'title': Value(literal:'____Louder than Words')}, {'title': Value(literal:""A Midsummer Night's Dream _____"")}, {'title': Value(literal:'____')}, {'title': Value(literal:'bandage')}, {'title': Value(literal:'Lothar/Khadgar_____')}, {'title': Value(literal:'Brief Encounter')}, {'title': Value(literal:'[__][____]Por Una Cabeza(ABO/OOC/NC17)')}, {'title': Value(literal:'Various Storms & Saints | _____')}, {'title': Value(literal:'___')}, {'title': Value(literal:'Injuries')}, {'title': Value(literal:'Ink & Lavender')}, {'title': Value(literal:'Gifting Season')}, {'title': Value(literal:'Summer Trifle')}, {'title': Value(literal:'Make Me Your One (And Only) __________')}, {'title': Value(literal:'Madness of Deathwing _______')}, {'title': Value(literal:'Bedtime Fable')}, {'title': Value(literal:'This Land Is Mine')}, {'title': Value(literal:'_________  The Dark and The Light')}, {'title': Value(literal:'___/Warchaft______NC17______  The Dark and The Light')}, {'title': Value(literal:'Ravensbane')}, {'title': Value(literal:'The Road of Redemption')}, {'title': Value(literal:'___ ______ _ ___________ _____.')}, {'title': Value(literal:'______ _____ _________ 4')}, {'title': Value(literal:'______ _ _________')}, {'title': Value(literal:'Pájaro azul | __')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Of Love and Family ____')}, {'title': Value(literal:'_________')}, {'title': Value(literal:'The Tell-Tale Heart')}, {'title': Value(literal:'Power of the Twilight ____')}, {'title': Value(literal:'____A Saucerful Of Secrets')}, {'title': Value(literal:'Spell')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____')}, {'title': Value(literal:'Soulmates are Inconvenient _____')}, {'title': Value(literal:'Far from any road')}, {'title': Value(literal:'____ Prime Specimen')}, {'title': Value(literal:'__')}, {'title': Value(literal:'Light A Fire')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'The Forged Throne')}, {'title': Value(literal:'born with it, after all')}, {'title': Value(literal:'What did you do?')}, {'title': Value(literal:'Distractions')}, {'title': Value(literal:'Your Majesty')}, {'title': Value(literal:'Powerful!')}, {'title': Value(literal:'Tides of Light')}, {'title': Value(literal:'____ ___, _____ ________ _____-_______ __ ____ _________ _________ _____-_______, _ ____, _____ ___ __ ____')}, {'title': Value(literal:'One Shot NanoWriMo Prompts - Destiel & Liontrust')}, {'title': Value(literal:'Witness')}, {'title': Value(literal:'AU Snippet: Dark Deals')}, {'title': Value(literal:'a bad seed grown')}, {'title': Value(literal:'The Royal Alpha')}, {'title': Value(literal:'Remind Me Of What Is Gone')}, {'title': Value(literal:'GUILT')}, {'title': Value(literal:'Prologue')}, {'title': Value(literal:'Warcraft - Of Fel and Iron')}, {'title': Value(literal:'To Break the Cycle')}, {'title': Value(literal:'Rebuilding Trust')}, {'title': Value(literal:'And So It Goes')}, {'title': Value(literal:'The Master, the Apprentice, and the Demon Cat')}, {'title': Value(literal:'The Quest for Cheering Up a Guardian')}, {'title': Value(literal:'Come Back To Me')}, {'title': Value(literal:'Big Raven, Big Problem?')}, {'title': Value(literal:'The Quest for Claiming a Guardian')}, {'title': Value(literal:'The Vampire of Azeroth')}, {'title': Value(literal:'Morning Kiss')}, {'title': Value(literal:'Spellbound')}, {'title': Value(literal:'His Guardian')}, {'title': Value(literal:'Of Mages and Their Mana Jacuzzies')}, {'title': Value(literal:'Overprotective')}, {'title': Value(literal:'Winter Night')}, {'title': Value(literal:'Small But Scary')}, {'title': Value(literal:'Not Compatible')}, {'title': Value(literal:'Romancing The Soldier')}, {'title': Value(literal:'Feathers')}, {'title': Value(literal:'The King, the Mage, and the Soldier Walking Into a Store')}, {'title': Value(literal:'Fly Again')}, {'title': Value(literal:""The King's Bad Day"")}, {'title': Value(literal:'Night Terror')}, {'title': Value(literal:'Kinktober 2021 ~ Part C')}, {'title': Value(literal:'A Pile of Snuggles')}, {'title': Value(literal:'The Best Place to Be')}, {'title': Value(literal:'Seasonal Sickness')}, {'title': Value(literal:""Let's Talk About Fishing"")}, {'title': Value(literal:'Power of the Twilight')}, {'title': Value(literal:""Coming over for a 'visit'"")}, {'title': Value(literal:'The Windiest Night')}, {'title': Value(literal:'LionTrust Tumblr Fills')}, {'title': Value(literal:'Take the pain')}, {'title': Value(literal:'The Wildest Night')}, {'title': Value(literal:'Various Storms & Saints')}, {'title': Value(literal:'The Lady and The Knight')}, {'title': Value(literal:'Bad side')}, {'title': Value(literal:'Bromance: A Lothar/Khadgar Story')}, {'title': Value(literal:'The one with the braiding')}, {'title': Value(literal:'Come back')}, {'title': Value(literal:'Turning the Tables')}, {'title': Value(literal:""The Demon's Game"")}, {'title': Value(literal:'Of Blueflame and Whiskers')}, {'title': Value(literal:'The Ale Never Ends Round Here')}, {'title': Value(literal:'Of Mages and Mana')}, {'title': Value(literal:'Incertitude')}, {'title': Value(literal:'twisting corridors')}, {'title': Value(literal:'The Night in Lordaeron')}, {'title': Value(literal:'The Things We Had')}, {'title': Value(literal:'Gotcha!')}, {'title': Value(literal:'A Whisper of Death')}, {'title': Value(literal:'Whatever May Come')}, {'title': Value(literal:'I Put A Spell On You')}, {'title': Value(literal:'Long Lost')}, {'title': Value(literal:'4986')}, {'title': Value(literal:'Drunk Confessions')}, {'title': Value(literal:'Parental Instinct')}, {'title': Value(literal:'The One to Do With the Night Sky')}, {'title': Value(literal:'Finding Khadgar (and Falling in Love On The Way)')}, {'title': Value(literal:'To Begin Anew')}, {'title': Value(literal:'Trace of Silver')}, {'title': Value(literal:""Let's Try Something New"")}, {'title': Value(literal:'Spell Gone Awry')}, {'title': Value(literal:'To Serve')}, {'title': Value(literal:'To Serve No More')}, {'title': Value(literal:'Late Nights')}, {'title': Value(literal:'Karazhan Chronicles')}, {'title': Value(literal:'Alone')}, {'title': Value(literal:'Trust')}, {'title': Value(literal:'Lonely (working title)')}, {'title': Value(literal:'Kissing Him')}, {'title': Value(literal:'Replacement')}, {'title': Value(literal:'What to Do with a Bored (sort of) Guardian')}, {'title': Value(literal:'What to Do with a Lord Commander')}, {'title': Value(literal:'In the Arms of an Angel')}, {'title': Value(literal:'Where I Belong')}, {'title': Value(literal:'Anchored')}, {'title': Value(literal:'Not the Smartest Idea')}, {'title': Value(literal:'A Generated Slash')}, {'title': Value(literal:'Opposing Ends')}, {'title': Value(literal:'Steamy Romance: Library Edition')}, {'title': Value(literal:'In Restless Dreams I Walked Alone')}, {'title': Value(literal:'What to Do with a Lover')}, {'title': Value(literal:'On A White Horse')}, {'title': Value(literal:'Echoes of the Past')}, {'title': Value(literal:'Khadgar needs you most')}, {'title': Value(literal:""A Lion's Pride"")}, {'title': Value(literal:'Happy Birthday')}, {'title': Value(literal:'To Impress The Lion')}, {'title': Value(literal:'Conduit')}, {'title': Value(literal:'Aftermath')}, {'title': Value(literal:'The Studious Apprentice')}, {'title': Value(literal:'Stretching Your Wings')}, {'title': Value(literal:'Branded')}, {'title': Value(literal:""Khadgar's Very Strange Fantasy"")}, {'title': Value(literal:""Lothar's Very Strange Fantasy"")}, {'title': Value(literal:'Memories')}, {'title': Value(literal:'Felmage')}, {'title': Value(literal:""Apprentice's Diary"")}, {'title': Value(literal:'From Darkness, Light')}, {'title': Value(literal:'What to do with a Faerie Dragon Mage')}, {'title': Value(literal:'Divergence')}, {'title': Value(literal:'Snow Day')}, {'title': Value(literal:'Playing Dirty')}, {'title': Value(literal:'The Lion Of The Ebon Blade')}, {'title': Value(literal:""Don't get too close, it's dark inside"")}, {'title': Value(literal:'Loneliness Makes Us Weak')}, {'title': Value(literal:'Felhunter')}, {'title': Value(literal:'When the Cold of Winter Comes')}, {'title': Value(literal:'Dreadknight')}, {'title': Value(literal:'The House of Cards')}, {'title': Value(literal:'Not Just the Hormones')}, {'title': Value(literal:'Of Mages and Mountains')}, {'title': Value(literal:'Felscarred')}, {'title': Value(literal:'Free Falling')}, {'title': Value(literal:""Lothar's Secret"")}, {'title': Value(literal:""The Dread Horseman of Hallow's End"")}, {'title': Value(literal:'Requiem of the Wind')}, {'title': Value(literal:""The Lion's Prey"")}, {'title': Value(literal:'A Raven Crossed the Moon')}, {'title': Value(literal:'Sanguineous')}, {'title': Value(literal:'And as my thoughts fly, you anchor me')}, {'title': Value(literal:'Consanguineous')}, {'title': Value(literal:'I Will Not Kiss You')}, {'title': Value(literal:'Breathe You In (Like Oxygen)')}, {'title': Value(literal:'Uptown Funk Me Up')}, {'title': Value(literal:'Kiss (While Your Lips Are Still Red)')}, {'title': Value(literal:""The Kid's Are(n't) Alright"")}, {'title': Value(literal:'A Taste of Iron')}, {'title': Value(literal:'Raven Trust')}, {'title': Value(literal:'The Ebon Lion')}, {'title': Value(literal:'Exsanguinous')}, {'title': Value(literal:'Not as Innocent as You Think')}, {'title': Value(literal:'One Thousand Words, More or Less...')}, {'title': Value(literal:'About Khadgar')}, {'title': Value(literal:'Reunion')}, {'title': Value(literal:""Calls You Home (You're Stronger Than You Know)"")}, {'title': Value(literal:'The House of the Lion')}, {'title': Value(literal:'Blood Sins')}, {'title': Value(literal:'Ohne Dich')}, {'title': Value(literal:'Home Is')}, {'title': Value(literal:'Shower Time')}, {'title': Value(literal:'A Kiss for Waking')}, {'title': Value(literal:'We choose our own destiny')}, {'title': Value(literal:'Come Home (___')}, {'title': Value(literal:'For My King ___')}, {'title': Value(literal:'Long Adventure')}, {'title': Value(literal:'The Ebon Horseman')}, {'title': Value(literal:'You Reached into the Heavens')}, {'title': Value(literal:'Stay Alive')}, {'title': Value(literal:'Onioncraft')}, {'title': Value(literal:'Strong Shoulders Bear More Weight')}, {'title': Value(literal:'Accursed')}, {'title': Value(literal:'Anduin Lothar Is Super Suave, Definitely')}, {'title': Value(literal:'Day One: Firsts')}, {'title': Value(literal:'Educational Field Trip')}, {'title': Value(literal:'Liontrust Week 2017')}, {'title': Value(literal:'Day Two: Family')}, {'title': Value(literal:'Why Are There So Many Hot People in the Library?')}, {'title': Value(literal:""Captain's Log"")}, {'title': Value(literal:'Day Three: AU')}, {'title': Value(literal:""I've Seen Your Frown and It's Like Looking Down the Barrel of a Gun"")}, {'title': Value(literal:'Day Four: Angst')}, {'title': Value(literal:'Azsuna Interlude')}, {'title': Value(literal:'Bilingual Misunderstandings')}, {'title': Value(literal:'Day Five: NSFW')}, {'title': Value(literal:""He's Color"")}, {'title': Value(literal:'Day Six: Soulmates')}, {'title': Value(literal:'Warcraft prompt fills')}, {'title': Value(literal:'Super Powers Mean Super Problems')}, {'title': Value(literal:'Day Seven: Free Day')}, {'title': Value(literal:'The Once and Future King')}, {'title': Value(literal:'Guardian')}, {'title': Value(literal:'Corruption')}, {'title': Value(literal:'Follow You Into The Dark')}, {'title': Value(literal:'The Further I Fly (The Closer I Get To Home)')}, {'title': Value(literal:'Champions')}, {'title': Value(literal:'For Life')}, {'title': Value(literal:'Of Hope and Pain')}, {'title': Value(literal:'Dinner and Dessert')}, {'title': Value(literal:'The Eagles of Azeroth')}, {'title': Value(literal:'Pets and People')}, {'title': Value(literal:'Date')}, {'title': Value(literal:'Whose That Silver Haired Mage?')}, {'title': Value(literal:'Heat in Hellfire')}, {'title': Value(literal:'Reunion')}, {'title': Value(literal:'The Dream From The Nightmare')}, {'title': Value(literal:'Magic')}, {'title': Value(literal:'Consent')}, {'title': Value(literal:'Collar')}, {'title': Value(literal:'Incubus')}, {'title': Value(literal:'Rainbow Connection')}, {'title': Value(literal:'The One With The Shaving')}, {'title': Value(literal:'A Unicorn (kinda) Crashes Their Wedding')}, {'title': Value(literal:'The Lion, The Raven and the Trust Between Them')}, {'title': Value(literal:'Magical Hands')}, {'title': Value(literal:'And The Bells Were Ringing Out')}, {'title': Value(literal:'One Night In Karazhan')}, {'title': Value(literal:'____Once Upon A Bookstore _______________________')}, {'title': Value(literal:'Les Abandonées')}, {'title': Value(literal:'Stolen King')}, {'title': Value(literal:'Walk Away (Maybe)')}, {'title': Value(literal:'That Perfect Moment')}, {'title': Value(literal:'Have Patience')}, {'title': Value(literal:'Nothing Wrong With That')}, {'title': Value(literal:'Binding')}, {'title': Value(literal:'Today, Yesterday, Tomorrow')}, {'title': Value(literal:'and who by brave assent')}, {'title': Value(literal:'Burning Bright')}, {'title': Value(literal:'The bite that binds the gift')}, {'title': Value(literal:'Baby Callan to the Tower Came')}, {'title': Value(literal:'Secrets of the Royal Bedchamber')}, {'title': Value(literal:'War Trophy')}, {'title': Value(literal:'Thrall')}, {'title': Value(literal:'Still')}, {'title': Value(literal:'eye of gold, thigh of blue')}, {'title': Value(literal:'How Not to Waste a Perfectly Useful Human to Gryphon Transformation')}, {'title': Value(literal:'Instructions Unclear')}, {'title': Value(literal:'the nights that follow')}, {'title': Value(literal:'Academic Classification')}, {'title': Value(literal:'Show Me Your Eyes')}, {'title': Value(literal:'roads leading home')}, {'title': Value(literal:'Master and Apprentice')}, {'title': Value(literal:'Riding a Gryphon')}, {'title': Value(literal:'Come Undone')}, {'title': Value(literal:'The Conquest')}, {'title': Value(literal:'Panic Switch')}, {'title': Value(literal:'Time in a Bottle')}, {'title': Value(literal:'Of Love and Mages')}, {'title': Value(literal:'The Road to Stranglethorn')}, {'title': Value(literal:'Not So Slow Fall')}, {'title': Value(literal:'Gotta Be Somebody')}, {'title': Value(literal:'Birthday Magic')}, {'title': Value(literal:'Far Too Long')}, {'title': Value(literal:""Khadgar's Lion & Anduin's Spell-Chucker"")}, {'title': Value(literal:'Here We Are')}, {'title': Value(literal:'For You I Will')}, {'title': Value(literal:'Little Lothar')}, {'title': Value(literal:""Why Mages Shouldn't Drink"")}, {'title': Value(literal:'Unkiss Me')}, {'title': Value(literal:'Anthem of the Angels')}, {'title': Value(literal:'Corruption of Men')}, {'title': Value(literal:'that one time khadgar called lothar ""master"" in front of everybody')}, {'title': Value(literal:'The Proud Lion and the Silly Bookworm')}, {'title': Value(literal:'wise decisions')}, {'title': Value(literal:'The Sacrifices We Make for Peace')}, {'title': Value(literal:""It's Just A Game!"")}, {'title': Value(literal:'Whumptober 2018')}, {'title': Value(literal:'Fictober 2018 - The Lion, The Raven and the Trust Between Them - The Drabbles')}, {'title': Value(literal:'Precipitous')}, {'title': Value(literal:'Non-Conventional Vows')}, {'title': Value(literal:'A LionTrust Christmas Collection')}, {'title': Value(literal:'Breath on the Water')}, {'title': Value(literal:'The LionTrust Way to Ring in The New Year')}, {'title': Value(literal:'What Makes Us Strong')}, {'title': Value(literal:'Bless Me, Father')}, {'title': Value(literal:""for near is where you'll meet"")}, {'title': Value(literal:""I've had it with you"")}, {'title': Value(literal:'Calling All Gnomes')}, {'title': Value(literal:""Lothar's Birthday"")}, {'title': Value(literal:'Wartime Butterflies')}, {'title': Value(literal:'Stargazing Butterflies')}, {'title': Value(literal:'Tradition')}, {'title': Value(literal:'Gryphons and Butterflies')}, {'title': Value(literal:'closer than the wound')}, {'title': Value(literal:'City Butterflies')}, {'title': Value(literal:'Embrasse Moi')}, {'title': Value(literal:'Salt and Shadow')}, {'title': Value(literal:'Whatever It Takes; Break The Chains')}, {'title': Value(literal:""Don't Go"")}, {'title': Value(literal:'Coffee Fueled Mages')}, {'title': Value(literal:'Darkness find light')}, {'title': Value(literal:'Healing Butterflies')}, {'title': Value(literal:'Taste of Magic')}, {'title': Value(literal:'Stay For You')}, {'title': Value(literal:'Secret meet')}, {'title': Value(literal:'peace talks')}, {'title': Value(literal:'The Wettest Night')}, {'title': Value(literal:'first dates')}, {'title': Value(literal:'Come as You are, as I Want You to be')}, {'title': Value(literal:'Regaining Trust')}, {'title': Value(literal:'Inner turmoil')}, {'title': Value(literal:'visitation rights')}, {'title': Value(literal:'Home for the Heroes')}, {'title': Value(literal:'Lionhearted')}, {'title': Value(literal:'Trust in Need')}, {'title': Value(literal:'Glow')}, {'title': Value(literal:'Trust in Doubt')}, {'title': Value(literal:'No Success Without Sacrifice')}, {'title': Value(literal:'Trust in Hope')}, {'title': Value(literal:'Whispers in the Dark')}, {'title': Value(literal:'Posession')}, {'title': Value(literal:'Only When You Sleep')}, {'title': Value(literal:'broadswords and rune wards')}, {'title': Value(literal:'arms wide open')}, {'title': Value(literal:'(let me) catch my breath')}, {'title': Value(literal:'Exodus for the Heroes')}, {'title': Value(literal:'the warm glow of survival')}, {'title': Value(literal:'Observations from the Old Guard')}, {'title': Value(literal:'Breaking Light')}, {'title': Value(literal:'Soulmates are Inconvenient')}, {'title': Value(literal:'Walking in the twilight')}, {'title': Value(literal:'Not Everything')}, {'title': Value(literal:'When We Were Dreaming')}, {'title': Value(literal:'__ ____')}, {'title': Value(literal:'Silence')}, {'title': Value(literal:""For A Jock You're Whiny"")}, {'title': Value(literal:'No Retreat')}, {'title': Value(literal:'The Night Guard and the Librarian')}, {'title': Value(literal:'They Both Take Practice')}, {'title': Value(literal:""That's Not My Name"")}, {'title': Value(literal:'Rest for the Heroes')}, {'title': Value(literal:'Nursemaid')}, {'title': Value(literal:'Nightmares')}, {'title': Value(literal:'Not that stupid')}, {'title': Value(literal:'The Best Kind of Strange')}, {'title': Value(literal:'Impure Imagination')}, {'title': Value(literal:'Do Not Open')}, {'title': Value(literal:'Little Lion Man')}, {'title': Value(literal:'Two hits and a kiss.')}, {'title': Value(literal:'the world falls (to the side)')}, {'title': Value(literal:""Let's Get To Work...Or Not"")}, {'title': Value(literal:'LionTrust A/B/O AU part 1 of ?')}, {'title': Value(literal:'Roar with your heart and soul')}, {'title': Value(literal:'LionTrust A/B/O AU part 2 of ? (or, in which Khadgar goes into heat for the first time after he and Lothar have become mates)')}, {'title': Value(literal:'Drinking Problem')}, {'title': Value(literal:'make me your one (and only)')}, {'title': Value(literal:'Mage Fixation')}, {'title': Value(literal:""Khadgar and Anduin take Denny's"")}, {'title': Value(literal:'A Contrary Omega and an Equally Contrary Alpha')}, {'title': Value(literal:'LionTrust Modern AU crack')}, {'title': Value(literal:'The Worst That Can Happen')}, {'title': Value(literal:'The Shopboy and the Biker')}, {'title': Value(literal:'Something to Tell You')}, {'title': Value(literal:'Teacher')}, {'title': Value(literal:'Flowers for You, My Love')}, {'title': Value(literal:'My Khadgars')}, {'title': Value(literal:'Liontrust Prompt Fills')}, {'title': Value(literal:'The Loneliest Day')}, {'title': Value(literal:'In Another Life')}, {'title': Value(literal:'In the Blink of an Eye')}, {'title': Value(literal:""Can't breathe ..."")}, {'title': Value(literal:'The Dustiest Day')}, {'title': Value(literal:""Blink and You'll Miss It"")}, {'title': Value(literal:'Felmage')}, {'title': Value(literal:""Pretend That I'm Okay"")}, {'title': Value(literal:'That One Time With The Desk')}, {'title': Value(literal:'LionTrust Fuck or Die')}, {'title': Value(literal:'War Of Hearts')}, {'title': Value(literal:'Impure Imagination ____')}, {'title': Value(literal:'Raven Magic')}, {'title': Value(literal:'A Blink and a Bath')}, {'title': Value(literal:'Life Is But A Dream')}, {'title': Value(literal:'Let Me See You')}, {'title': Value(literal:'Starved')}, {'title': Value(literal:'Somewhere Between Heaven and Hell')}, {'title': Value(literal:""He's a tease"")}, {'title': Value(literal:'LionTrust Truth Spell Fic')}, {'title': Value(literal:'From Darkness, Light')}, {'title': Value(literal:'A Sleepy Misunderstanding')}, {'title': Value(literal:'LionTrust A/B/O AU part 3 of ? or The Appearance of Garona')}, {'title': Value(literal:'Love me Sweetly')}, {'title': Value(literal:'Everything You Want')}, {'title': Value(literal:'Confessions')}, {'title': Value(literal:'Anniversary')}, {'title': Value(literal:'Relief in Release')}, {'title': Value(literal:'LionTrust Angst')}, {'title': Value(literal:'A Vision Come True')}, {'title': Value(literal:'The Night of Deliverance')}, {'title': Value(literal:'Scattered Sleeping')}, {'title': Value(literal:'A Curse or A Blessing')}, {'title': Value(literal:'The Road to Hell')}, {'title': Value(literal:""The Night Doesn't Want to End."")}, {'title': Value(literal:'End Game (The Lion and the Mage)')}, {'title': Value(literal:'From Darkness, Light')}, {'title': Value(literal:'A Friendly Spar')}, {'title': Value(literal:'Are You Ready?')}, {'title': Value(literal:'Wanting')}, {'title': Value(literal:'No Magic Strong Enough')}, {'title': Value(literal:'The Lonely Tower')}, {'title': Value(literal:'Savior')}, {'title': Value(literal:""Love in the last place you'd expect"")}, {'title': Value(literal:'From Darkness Comes Light')}, {'title': Value(literal:'Make Me')}, {'title': Value(literal:'sunset boulevard (when i wake up)')}, {'title': Value(literal:'A Simple Misstep')}, {'title': Value(literal:'Something... something... something...')}, {'title': Value(literal:'FairyAU Drabble')}, {'title': Value(literal:'Seeking Shelter')}, {'title': Value(literal:""If it works it ain't stupid"")}, {'title': Value(literal:'Bloom and Grow')}, {'title': Value(literal:'riding shotgun')}, {'title': Value(literal:'Old Friends, New Beginnings')}, {'title': Value(literal:'Dark Desires')}, {'title': Value(literal:'Necessity')}, {'title': Value(literal:'Apparently Dragons Like Flowers')}, {'title': Value(literal:'raske seis (beaten breath)')}, {'title': Value(literal:'LionTrust Dragon Fic')}, {'title': Value(literal:'Smol Mage and Manpain Lion')}, {'title': Value(literal:'I will not die today')}, {'title': Value(literal:'Apparently Lothar Needs To Sleep')}, {'title': Value(literal:'Lick')}, {'title': Value(literal:'3 Warriors, 1 Mage')}, {'title': Value(literal:""What's in a name?"")}, {'title': Value(literal:'Apparently Bellies Are Important')}, {'title': Value(literal:'LionTrust Dragon Fic 2')}, {'title': Value(literal:'These Bright Blue City Lights')}, {'title': Value(literal:'Begging Me To Open Up My Mouth')}, {'title': Value(literal:'Inexorable')}, {'title': Value(literal:'Soulmates Never Die')}, {'title': Value(literal:'What If')}, {'title': Value(literal:'The Gift')}, {'title': Value(literal:'Artist')}, {'title': Value(literal:'Doing Something Stupid')}, {'title': Value(literal:'Unfit')}, {'title': Value(literal:'As Good As it Gets')}, {'title': Value(literal:'Anduin')}, {'title': Value(literal:'The Lion, the Dragon-Mage, and Minus the Wardrobe')}, {'title': Value(literal:'Stay')}, {'title': Value(literal:'Sleep')}, {'title': Value(literal:'Home')}, {'title': Value(literal:'burning blue')}, {'title': Value(literal:'Apparently Dragons Shed')}, {'title': Value(literal:'A Marriage of Convenience')}, {'title': Value(literal:'Beyond the Walls of Stormwind')}, {'title': Value(literal:'Our Boys')}, {'title': Value(literal:""I Think I'm Gonna Marry You"")}, {'title': Value(literal:'History 320')}, {'title': Value(literal:'Cappuccino')}, {'title': Value(literal:'When All Else Dies There Is Still Hope')}, {'title': Value(literal:'Small Steps')}, {'title': Value(literal:'With Charcoal Hands')}, {'title': Value(literal:""Can't We Just Be Us?"")}, {'title': Value(literal:'Their Little Toy')}, {'title': Value(literal:'Paperclips')}, {'title': Value(literal:'Daddy')}, {'title': Value(literal:'The Smallest Lion')}, {'title': Value(literal:'Eyes on Me')}, {'title': Value(literal:'We Share One Heart')}, {'title': Value(literal:'Worthy')}, {'title': Value(literal:'Soul Mates Solace')}, {'title': Value(literal:'Do You Regret It?')}, {'title': Value(literal:'An Ictus of the Heart')}, {'title': Value(literal:'Breathe')}, {'title': Value(literal:'Nursemage')}, {'title': Value(literal:'Sabotage')}, {'title': Value(literal:'Apparently Khadgar Has A Secret')}, {'title': Value(literal:'Covetous Love')}, {'title': Value(literal:'Only You')}, {'title': Value(literal:'The Longest Night')}, {'title': Value(literal:""Tell Me What It's Like"")}, {'title': Value(literal:'Dry earth cannot help but soak up water.')}, {'title': Value(literal:'How Well Do You Know Him?')}, {'title': Value(literal:'To Take A Mage')}, {'title': Value(literal:'The Death Of Innocence')}, {'title': Value(literal:""blunt thou the lion's paws"")}, {'title': Value(literal:'Youthful Indiscretions')}, {'title': Value(literal:'Like Dancing')}, {'title': Value(literal:'Alone, We Fall')}, {'title': Value(literal:""Khadgar's Little Curse"")}, {'title': Value(literal:'And All The Days In Between')}, {'title': Value(literal:'Together We Rise')}, {'title': Value(literal:'Rocket Man')}, {'title': Value(literal:'Claiming Khadgar and Setting Things Right')}, {'title': Value(literal:'Song of the Caged Bird')}, {'title': Value(literal:""Lothar's Mage"")}, {'title': Value(literal:'The Human Emotion')}, {'title': Value(literal:'A Short Distance')}, {'title': Value(literal:""Love Like You'll Never Be Hurt"")}, {'title': Value(literal:'Stronger Together (because loneliness makes you weak)')}, {'title': Value(literal:'Uncorrupted')}, {'title': Value(literal:'Passing Time')}, {'title': Value(literal:'Whisper (your love onto my skin)')}, {'title': Value(literal:'Take Me Down')}, {'title': Value(literal:'Khadgars and Lothars')}, {'title': Value(literal:""I'm covered in the colors - Pulled apart at the seams"")}, {'title': Value(literal:'Dragons of Stormwind')}, {'title': Value(literal:'Long Road Home')}, {'title': Value(literal:""The Lion's Mage."")}, {'title': Value(literal:'When the Queen commands...')}, {'title': Value(literal:'What to Do with an Annoying Mage')}, {'title': Value(literal:'Roll Over')}, {'title': Value(literal:'The Human Strain')}, {'title': Value(literal:'Bestow Him Peace')}, {'title': Value(literal:'Gifts from Family')}, {'title': Value(literal:'Joust Do It!')}, {'title': Value(literal:'Ooh!')}, {'title': Value(literal:'Make Me a Match')}, {'title': Value(literal:'Map of Anduin')}, {'title': Value(literal:'Under the Stars')}, {'title': Value(literal:'Fine Dining')}, {'title': Value(literal:'Learning How to Dance')}, {'title': Value(literal:'Tiny Little Secret')}, {'title': Value(literal:""Khadgar's Day Out"")}, {'title': Value(literal:'Aging Gracefully')}, {'title': Value(literal:'Meanwhile in Stormwind - Liontrust Edition')}, {'title': Value(literal:""Lothar's Library Visit"")}, {'title': Value(literal:'Nightmare')}, {'title': Value(literal:'The Human Trust')}, {'title': Value(literal:'Blood and Shadows')}, {'title': Value(literal:'Anduin, Greatstaff of Khadgar')}, {'title': Value(literal:'Midnight')}, {'title': Value(literal:""Hold on Tight (We'll be Bright)"")}, {'title': Value(literal:'Quietus')}, {'title': Value(literal:'Appropriation')}, {'title': Value(literal:'Khadgar Comes On Little Cat Feet')}, {'title': Value(literal:'That Smart Mouth')}, {'title': Value(literal:'Bad Idea?')}, {'title': Value(literal:'From Light Comes Darkness, And From Darkness, Light')}, {'title': Value(literal:'Evacuating the City')}, {'title': Value(literal:'All is Not Well (Between Us)')}, {'title': Value(literal:'The Last Night')}, {'title': Value(literal:'I Needed That')}, {'title': Value(literal:'Cloudcatching')}, {'title': Value(literal:'He Lives')}, {'title': Value(literal:'Progress of Ravens')}, {'title': Value(literal:'Hallow Shadows')}, {'title': Value(literal:'Cycles')}, {'title': Value(literal:'The Dragon Master')}, {'title': Value(literal:'Hurt Me')}, {'title': Value(literal:'An Old Battered Shield')}, {'title': Value(literal:'What to do with a Pirate')}, {'title': Value(literal:'Betray My Name')}, {'title': Value(literal:'Wunjo')}, {'title': Value(literal:""We'll Never Kneel Before You"")}, {'title': Value(literal:'Liontrust 20 x 200 Challenge')}, {'title': Value(literal:'Fill Me Up')}, {'title': Value(literal:'On the Sea and Sky')}, {'title': Value(literal:'New Beginnings')}, {'title': Value(literal:'Nearshore')}, {'title': Value(literal:'Be More Careful')}, {'title': Value(literal:'Enough')}, {'title': Value(literal:'Unsteady')}, {'title': Value(literal:'Tuffy')}, {'title': Value(literal:'Sapphires')}, {'title': Value(literal:'The Missing Cow')}, {'title': Value(literal:'Winter Veil')}, {'title': Value(literal:'Just Another Unwilling Party Guest')}, {'title': Value(literal:'The Springs')}, {'title': Value(literal:'I need a lift...are you for hire?')}, {'title': Value(literal:'Say Please')}, {'title': Value(literal:""Tuffy's Tapestry"")}, {'title': Value(literal:'The Mountains Have People')}, {'title': Value(literal:'And you had me')}, {'title': Value(literal:""Hero's Call: If it's not social, leave a message."")}, {'title': Value(literal:'While You Were Asleep')}, {'title': Value(literal:'Searching For Spring')}, {'title': Value(literal:'To Share and Share Alike')}, {'title': Value(literal:'Outlandish')}, {'title': Value(literal:'Feeling')}, {'title': Value(literal:'Toi, Encore toi et toujours toi (par Mana2702)')}, {'title': Value(literal:'Lazos del destino')}, {'title': Value(literal:'______ _____ _________ 3')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'___ _____ ____')}, {'title': Value(literal:'_ [____] _______ ___ ______, _____ _______')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'_______, _____ _ _______')}, {'title': Value(literal:'_______ ______')}, {'title': Value(literal:'__________ ________')}, {'title': Value(literal:'Much ado about nothing')}, {'title': Value(literal:'___-__ _________ ________')}, {'title': Value(literal:'_______')}, {'title': Value(literal:'Missed Lessons')}, {'title': Value(literal:'WoW Drabbles')}, {'title': Value(literal:'Silence That I Keep')}, {'title': Value(literal:'Tapestries in Skin')}, {'title': Value(literal:'Of Magic and Romanticism')}, {'title': Value(literal:'Solace in Stealth')}, {'title': Value(literal:'Dancer of the Sky')}, {'title': Value(literal:'Fel Inquisition')}, {'title': Value(literal:'The Songs of Conspiracy')}]"	1	0	0			
527	527	es	¿En qué historias sale ___?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }"	[{'title': Value(literal:'______')}, {'title': Value(literal:'________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'________')}, {'title': Value(literal:'___pwp')}, {'title': Value(literal:'____')}, {'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'__“___”__ ___')}, {'title': Value(literal:'_____pwp')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____|______')}, {'title': Value(literal:'__')}, {'title': Value(literal:'__')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'____|AU_____')}, {'title': Value(literal:'_______')}]	527	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: ¿En qué historias sale ___?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?title WHERE {   
  ?story golem:characters ""___"" .  
  ?story golem:title ?title . }
"	[{'title': Value(literal:'______')}, {'title': Value(literal:'________')}, {'title': Value(literal:'____')}, {'title': Value(literal:'________')}, {'title': Value(literal:'___pwp')}, {'title': Value(literal:'____')}, {'title': Value(literal:'________')}, {'title': Value(literal:'________')}, {'title': Value(literal:'__“___”__ ___')}, {'title': Value(literal:'_____pwp')}, {'title': Value(literal:'____')}, {'title': Value(literal:'____|______')}, {'title': Value(literal:'__')}, {'title': Value(literal:'__')}, {'title': Value(literal:'_____')}, {'title': Value(literal:'____|AU_____')}, {'title': Value(literal:'_______')}]	1	0	0			
528	528	es	¿En qué historias sale ___?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }"	[{'title': Value(literal:'______')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'______')}]	528	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿En qué historias sale ___?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""___"" . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de ___

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: ¿En qué historias sale ___?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>   
SELECT ?title WHERE {  
  ?story golem:characters ""___"" .  
  ?story golem:title ?title .  
}
"	[{'title': Value(literal:'______')}, {'title': Value(literal:'___________')}, {'title': Value(literal:'______')}]	1	0	0			
529	529	es	¿En qué historias sale various cats?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""various cats"" . }"	[{'title': Value(literal:'A Month in the Life of Sad Spinster Sirius Black: In Which He Unwittingly Stars in a Sexy Mechanic Soft Porno (except, not really)')}, {'title': Value(literal:'Ouroboros')}, {'title': Value(literal:'Grapejuice Blues')}, {'title': Value(literal:'the eye of the beholder')}, {'title': Value(literal:'Finding a Forever Home')}, {'title': Value(literal:'Cats')}, {'title': Value(literal:'Only Human')}, {'title': Value(literal:'Insufficient Personalities')}, {'title': Value(literal:'Legends never die')}, {'title': Value(literal:'amaranth in your tea')}, {'title': Value(literal:'sourpuss')}, {'title': Value(literal:'Of Shadowhunters and Strays')}, {'title': Value(literal:'By Theft or Force')}, {'title': Value(literal:'Lallikatt')}, {'title': Value(literal:'Just The Way It Goes')}]	529	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿En qué historias sale [[character]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""[[character]]"" . }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿A qué colecciones pertenece [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""[[story]]"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

Question: ¿En qué historias sale various cats?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT ?title WHERE { 
?story golem:characters ""various cats"" . 
?story golem:title ?title . 
}
"	[{'title': Value(literal:'A Month in the Life of Sad Spinster Sirius Black: In Which He Unwittingly Stars in a Sexy Mechanic Soft Porno (except, not really)')}, {'title': Value(literal:'Ouroboros')}, {'title': Value(literal:'Grapejuice Blues')}, {'title': Value(literal:'the eye of the beholder')}, {'title': Value(literal:'Finding a Forever Home')}, {'title': Value(literal:'Cats')}, {'title': Value(literal:'Only Human')}, {'title': Value(literal:'Insufficient Personalities')}, {'title': Value(literal:'Legends never die')}, {'title': Value(literal:'amaranth in your tea')}, {'title': Value(literal:'sourpuss')}, {'title': Value(literal:'Of Shadowhunters and Strays')}, {'title': Value(literal:'By Theft or Force')}, {'title': Value(literal:'Lallikatt')}, {'title': Value(literal:'Just The Way It Goes')}]	1	0	0			
530	530	es	¿En qué historias sale Laura Schreibner?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Laura Schreibner"" . }"	"[{'title': Value(literal:'Magic and More')}, {'title': Value(literal:'Abschiede (September 2019)')}, {'title': Value(literal:'And So I Became A We')}, {'title': Value(literal:'I Will Rescue You')}, {'title': Value(literal:'he ain’t heavy')}, {'title': Value(literal:'And the walls kept tumbling down')}, {'title': Value(literal:'searching for someone of my own kind')}, {'title': Value(literal:'Kaleidoscope')}, {'title': Value(literal:'My new hobby is thinking about you')}, {'title': Value(literal:'Laura Through The Years')}, {'title': Value(literal:'Contact Me, If You Want')}, {'title': Value(literal:'breaking my heart (in all the right ways)')}, {'title': Value(literal:'just me, her and the moon')}, {'title': Value(literal:""he thinks he'd blow our minds"")}, {'title': Value(literal:'how terrible it is to love something that death can touch')}, {'title': Value(literal:""Feels Like We've Been Living In Fast Forward"")}, {'title': Value(literal:'counting to fifty')}, {'title': Value(literal:""Smokey Robinson and Friday's with Laura"")}, {'title': Value(literal:'Something broken about this')}, {'title': Value(literal:'every doubt we had is coming undone')}, {'title': Value(literal:'The Goblin King')}, {'title': Value(literal:'Exhale')}, {'title': Value(literal:'Football Song')}, {'title': Value(literal:'Panicked Hearts')}, {'title': Value(literal:'Left, Right')}, {'title': Value(literal:'4 Chords')}, {'title': Value(literal:'94 percent of the time')}, {'title': Value(literal:'Berlin, Take Me Home.')}, {'title': Value(literal:'between the two of us')}, {'title': Value(literal:'And I walk onto the big-screen with You')}, {'title': Value(literal:'For the Last Time')}, {'title': Value(literal:'i am here, always and eternally')}, {'title': Value(literal:'I’m so in love with you, honey')}, {'title': Value(literal:'Cheesecake-Sweet')}, {'title': Value(literal:'High on Loving You.')}, {'title': Value(literal:'Swimming and You')}, {'title': Value(literal:'Morning In America')}, {'title': Value(literal:""you're all that matters"")}, {'title': Value(literal:'Mine')}, {'title': Value(literal:'Truth Hurts')}, {'title': Value(literal:""When You Move, I'm Moved"")}, {'title': Value(literal:'Pregnancy Test...')}, {'title': Value(literal:'i wanna tip toe through your bliss, boy')}, {'title': Value(literal:'The feeling of falling in love')}, {'title': Value(literal:""Don't Do That"")}, {'title': Value(literal:'Die Tonight')}, {'title': Value(literal:'days of pain for a lifetime of happiness')}, {'title': Value(literal:'He lays down')}, {'title': Value(literal:'Would you open your eyes?')}, {'title': Value(literal:'twenty-nine')}, {'title': Value(literal:'Solitaire')}, {'title': Value(literal:'How much I didn’t want to stay')}, {'title': Value(literal:'Shakshuka')}, {'title': Value(literal:'Why is there fourty-fucking-seven Z’s in one word?')}, {'title': Value(literal:'i always miss you')}, {'title': Value(literal:'Davenzi Podcast')}, {'title': Value(literal:'Welcome To New York')}, {'title': Value(literal:'I Just Got Payed')}, {'title': Value(literal:'Blister in the Sun')}, {'title': Value(literal:'Let’s go Blues?')}, {'title': Value(literal:'Swimming In The Moonlight')}, {'title': Value(literal:'How to Get a Boyfriend (Who Is a Rockstar). A Guide by Matteo Florenzi')}, {'title': Value(literal:'the sun is up, the sky is blue')}, {'title': Value(literal:'David and Matteo Make a Playlist')}, {'title': Value(literal:'Just look into the sky (and it becomes you)')}, {'title': Value(literal:'Burning (Quietly)')}, {'title': Value(literal:'we got moves')}, {'title': Value(literal:""to believe i walk alone (is a lie that i've been told)"")}, {'title': Value(literal:'I Am Not A Robot')}, {'title': Value(literal:'the good side')}, {'title': Value(literal:'Late Night Surprises')}, {'title': Value(literal:'Immortalise This Moment')}, {'title': Value(literal:'how the wind dances on the sand')}, {'title': Value(literal:'lacking pain or passion')}, {'title': Value(literal:'all of my goodness is going with you now')}, {'title': Value(literal:'Coffee, Gay Gurus, and a Dance')}, {'title': Value(literal:'how the snow whispers as it falls')}, {'title': Value(literal:'these twists and turns of fate')}, {'title': Value(literal:'Escape | Chapter 1 David Schreibner’s Story')}, {'title': Value(literal:'I’m pretending you ain’t been on my mind')}, {'title': Value(literal:'Instagram Stalking on a Sunday Night')}, {'title': Value(literal:'you could ruin me, dear (if only you asked)')}, {'title': Value(literal:'you + i')}, {'title': Value(literal:'Burnin’ N’ Itchin’')}, {'title': Value(literal:'how everything sings at the end')}, {'title': Value(literal:'tonight, we run')}, {'title': Value(literal:'lemongrass and sleep')}, {'title': Value(literal:'Wasted')}, {'title': Value(literal:""I just wanna be the reason you can smile til you're sore"")}, {'title': Value(literal:'You can try')}, {'title': Value(literal:'Plus One')}, {'title': Value(literal:'Like Stars, Falling in Love')}, {'title': Value(literal:'But now I am here!')}, {'title': Value(literal:'only of you')}, {'title': Value(literal:""David's Journey"")}, {'title': Value(literal:'Soul-utions to Myth-conceptions')}, {'title': Value(literal:'Finding Home')}, {'title': Value(literal:'When the world gets too loud I know where to find you')}, {'title': Value(literal:'fifteen flares in those ocean eyes')}, {'title': Value(literal:""I'll Be Home for Christmas"")}, {'title': Value(literal:'Into Forever')}, {'title': Value(literal:'Hear me out and love will follow')}, {'title': Value(literal:'Inheritance')}, {'title': Value(literal:""it's been a few years since i've felt sure of what i want"")}, {'title': Value(literal:'Just Got Paid')}, {'title': Value(literal:'Oh Holy Night')}, {'title': Value(literal:'Italian Summer (lol ur not harry styles)')}, {'title': Value(literal:'My Name is David Schreibner')}, {'title': Value(literal:""'cause we've been driving so long i can't remember how we got here"")}, {'title': Value(literal:'every version of me dead and buried in the yard outside')}, {'title': Value(literal:'the best parts of ourselves')}, {'title': Value(literal:'lonely is all we are')}, {'title': Value(literal:'i’ve got some spells up my sleeves')}, {'title': Value(literal:'A change in style')}, {'title': Value(literal:'The Proverbial Shoe (A David and Matteo Make a Playlist verse story)')}, {'title': Value(literal:'I caught a glimpse, now it haunts me')}, {'title': Value(literal:'a smile for every moment')}, {'title': Value(literal:'a different kind of magic')}, {'title': Value(literal:'Crazy stupid, you and me')}, {'title': Value(literal:'Open Your Eyes')}, {'title': Value(literal:'How to Make Love Without Falling in Love')}, {'title': Value(literal:'Ultraviolet')}, {'title': Value(literal:'Of Love, Affection and Memories')}, {'title': Value(literal:'Lost to you')}, {'title': Value(literal:'pick me, choose me, love me')}, {'title': Value(literal:'reach back from those mistakes before they can find us')}, {'title': Value(literal:'Life Interupted')}, {'title': Value(literal:'with my mid-youth crisis all said and done')}, {'title': Value(literal:'Anything for Family')}, {'title': Value(literal:'Missing Moments (March-April 2019)')}, {'title': Value(literal:'All the time in the world (May 2019)')}, {'title': Value(literal:'So in love, so at a loss')}, {'title': Value(literal:'No rose without thorns')}, {'title': Value(literal:'Music For The Soul')}, {'title': Value(literal:'a story we can tell another time')}, {'title': Value(literal:'Still our hands match')}, {'title': Value(literal:'Better')}, {'title': Value(literal:'Exhale the Past, Inhale the Future')}, {'title': Value(literal:'you dig deep with your nails and flash your teeth')}, {'title': Value(literal:'Mechanical Hearts')}, {'title': Value(literal:'November Rain')}, {'title': Value(literal:'For All Eternity')}, {'title': Value(literal:""your ship may be coming in. you're weak, but not giving in"")}, {'title': Value(literal:'Und alles nur wegen dir')}, {'title': Value(literal:'Feierei (März 2020)')}, {'title': Value(literal:'D2 auf D4 (April 2020)')}, {'title': Value(literal:'Ein Jahr Davenzi (Mai 2020)')}, {'title': Value(literal:'Como las flores en primavera, (eres demasiado hermoso para ser lastimado).')}, {'title': Value(literal:'Druck - __ (KR Translation) Season 3')}, {'title': Value(literal:'On a side note (I like you)')}, {'title': Value(literal:""maybe i will wait until you're fast asleep, dreaming things i have the right to see, maybe you are dreaming you're in love with me"")}, {'title': Value(literal:'On the way (July 2019)')}, {'title': Value(literal:""i like the way that your face looks when i'm arguing with you"")}, {'title': Value(literal:'One week, seven days ...')}, {'title': Value(literal:'This Love is Still Ours')}, {'title': Value(literal:'Wearing autumn on my sleeve')}, {'title': Value(literal:'hanging pictures on air')}, {'title': Value(literal:'Cold')}, {'title': Value(literal:'Not now')}, {'title': Value(literal:'As the light shows your face, I’ll never be the same')}, {'title': Value(literal:'The Same And Different')}, {'title': Value(literal:'Irgendwas mit Zukunft (Februar 2020)')}, {'title': Value(literal:'And everyone around me makes me feel fucking alone')}, {'title': Value(literal:'Missing Moments (März-April 2019)')}, {'title': Value(literal:'Alle Zeit der Welt (Mai 2019)')}, {'title': Value(literal:'Auf dem Weg (Juli 2019)')}]"	530	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Se muere algún personaje principal en Let Me Tell You A Story?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?warning WHERE {  ?story golem:title ""Let Me Tell You A Story"" . ?story golem:contentWarning ?warning . FILTER(?warning = ""Major Character Death"") }
    </SPARQL>

    ###
    

    Question: ¿Qué personajes aparecen en [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?characters WHERE {  ?story golem:title ""[[story]]"" . ?story golem:characters ?characters . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿En qué historias sale Laura Schreibner?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?story WHERE { 
?character golem:name ""Laura Schreibner"".
?character golem:appearsIn ?story.
}
"	[]	0	0	1	Wrong predicate	Hallucinated	
531	531	es	¿Cuántas historias se publican al año?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }	[{'uploads': Value(typed-literal:'8546450')}]	531	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias de [[fandom]] hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""[[fandom]]"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de ___ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos autores han publicado alguna historia?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?uploads) WHERE { ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias se publican al año?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT (COUNT(DISTINCT ?story) as ?storiesPerYear) WHERE { 
    ?story dc:datePublished ?date .
} GROUP BY YEAR(?date)
"	[]	0	0	1	Wrong predicate	Non-GOLEM	
533	533	es	¿Cuántas historias de Crows - _____ hay publicadas?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Crows - _____"" . }"	[{'uploads': Value(typed-literal:'6')}]	533	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias de _____ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_____"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de ___ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de ____ ___________ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""____ ___________"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias de Crows - _____ hay publicadas?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { 
?story golem:fandom ""Crows - _____"" . }
"	[{'uploads': Value(typed-literal:'6')}]	1	0	0			
534	534	es	¿Cuántas historias de Valley of Tears (TV) hay publicadas?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Valley of Tears (TV)"" . }"	[{'uploads': Value(typed-literal:'49')}]	534	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias de [[fandom]] hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""[[fandom]]"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias se publican al año?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }
    </SPARQL>

    ###
    

    Question: ¿Cuántos autores han publicado alguna historia?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?uploads) WHERE { ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias de Valley of Tears (TV) hay publicadas?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
SELECT (COUNT(DISTINCT ?story) as ?count) WHERE { 
  ?story golem:fandom ""Valley of Tears (TV)"" . 
}
"	[{'count': Value(typed-literal:'49')}]	0	1	1	Evaluation method error	Different var name	
535	535	es	¿Cuántas historias de ___ hay publicadas?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""___"" . }"	[{'uploads': Value(typed-literal:'1')}]	535	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias de _____ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_____"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de ____ ___________ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""____ ___________"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de __-Fandom hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__-Fandom"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias de ___ hay publicadas?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>   
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { 
  ?story golem:fandom ""___"" . 
}
"	[{'uploads': Value(typed-literal:'1')}]	1	0	0			
536	536	es	¿Cuántas historias de ____ ___________ hay publicadas?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""____ ___________"" . }"	[{'uploads': Value(typed-literal:'5')}]	536	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias de ___ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de _____ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_____"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de __-Fandom hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__-Fandom"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias de ____ ___________ hay publicadas?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { 
  ?story golem:fandom ""____ ___________"" . 
}
"	[{'uploads': Value(typed-literal:'5')}]	1	0	0			
537	537	es	¿Cuántas historias de __-Fandom hay publicadas?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__-Fandom"" . }"	[{'uploads': Value(typed-literal:'1')}]	537	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias de __ - Fandom hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__ - Fandom"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de ___ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de _____ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_____"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias de __-Fandom hay publicadas?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>   
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { 
  ?story golem:fandom ""__-Fandom"" . 
}
"	[{'uploads': Value(typed-literal:'1')}]	1	0	0			
538	538	es	¿Cuántas historias de Zero no Kiseki hay publicadas?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Zero no Kiseki"" . }"	[{'uploads': Value(typed-literal:'7')}]	538	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias de ___ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de ____ ___________ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""____ ___________"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de _____ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_____"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias de Zero no Kiseki hay publicadas?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { 
    ?story golem:fandom ""Zero no Kiseki"" . 
} 
"	[{'uploads': Value(typed-literal:'7')}]	1	0	0			
539	539	es	¿Cuántas historias de Zichuan - L_o Zh_ hay publicadas?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Zichuan - L_o Zh_"" . }"	[{'uploads': Value(typed-literal:'20')}]	539	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias de Y_ Jí L_ Sh_ [X_ng Jì] - Mù S_ L_ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Y_ Jí L_ Sh_ [X_ng Jì] - Mù S_ L_"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de __-Fandom hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__-Fandom"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de __ - Fandom hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__ - Fandom"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias de Zichuan - L_o Zh_ hay publicadas?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { 
  ?story golem:fandom ""Zichuan - L_o Zh_"" . 
}
"	[{'uploads': Value(typed-literal:'20')}]	1	0	0			
540	540	es	¿Cuántas historias de _____ hay publicadas?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_____"" . }"	[{'uploads': Value(typed-literal:'1')}]	540	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias de ___ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de ____ ___________ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""____ ___________"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de __-Fandom hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__-Fandom"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias de _____ hay publicadas?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_____"" . }
"	[{'uploads': Value(typed-literal:'1')}]	1	0	0			
541	541	es	¿Cuántas historias de Y_ Jí L_ Sh_ [X_ng Jì] - Mù S_ L_ hay publicadas?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Y_ Jí L_ Sh_ [X_ng Jì] - Mù S_ L_"" . }"	[{'uploads': Value(typed-literal:'19')}]	541	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias de Zichuan - L_o Zh_ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Zichuan - L_o Zh_"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de _____ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_____"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de __-Fandom hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__-Fandom"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias de Y_ Jí L_ Sh_ [X_ng Jì] - Mù S_ L_ hay publicadas?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { 
?story golem:fandom ""Y_ Jí L_ Sh_ [X_ng Jì] - Mù S_ L_"" . }
"	[{'uploads': Value(typed-literal:'19')}]	1	0	0			
542	542	es	¿Cuántas historias de __ - Fandom hay publicadas?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__ - Fandom"" . }"	[{'uploads': Value(typed-literal:'31')}]	542	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias de __-Fandom hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""__-Fandom"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de ___ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""___"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de _____ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""_____"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias de __ - Fandom hay publicadas?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { 
  ?story golem:fandom ""__ - Fandom"" . 
}
"	[{'uploads': Value(typed-literal:'31')}]	1	0	0			
544	544	es	¿Cuántos Kudos reciben las historias de _______ de media?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""_______"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'1.833333333333333')}]	544	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos reciben las historias de ___ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de _________ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""_________"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de ___ - Fandom de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos reciben las historias de _______ de media?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
    ?story golem:fandom ""_______"" . 
    ?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'1.833333333333333')}]	1	0	0			
545	545	es	¿Cuántos Kudos reciben las historias de NCT____ de media?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""NCT____"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'3.8')}]	545	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos reciben las historias de ___ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de _______ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""_______"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de [[fandom]] de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos reciben las historias de NCT____ de media?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
    ?story golem:fandom ""NCT____"" . 
    ?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'3.8')}]	1	0	0			
546	546	es	¿Cuántos Kudos reciben las historias de ___ de media?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'73')}]	546	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos reciben las historias de _______ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""_______"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de ___ - Fandom de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de _________ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""_________"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos reciben las historias de ___ de media?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
    ?story golem:fandom ""___"" . 
    ?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'73')}]	1	0	0			
547	547	es	¿Cuántos Kudos reciben las historias de _________ de media?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""_________"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'0')}]	547	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos reciben las historias de ____ - Fandom de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de ___ - Fandom de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de ___ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos reciben las historias de _________ de media?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
    ?story golem:fandom ""_________"" . 
    ?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'0')}]	1	0	0			
548	548	es	¿Cuántos Kudos reciben las historias de The Thick of It (TV) de media?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""The Thick of It (TV)"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'62.045708955223881')}]	548	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos reciben las historias de _________ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""_________"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de [[fandom]] de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de NCT____ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""NCT____"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos reciben las historias de The Thick of It (TV) de media?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
    ?story golem:fandom ""The Thick of It (TV)"" . 
    ?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'62.045708955223881')}]	1	0	0			
549	549	es	¿Cuántos Kudos reciben las historias de zx - Fandom de media?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""zx - Fandom"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'5')}]	549	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos reciben las historias de [[fandom]] de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de ___ - Fandom de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de ____ - Fandom de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos reciben las historias de zx - Fandom de media?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
    ?story golem:fandom ""zx - Fandom"" . 
    ?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'5')}]	1	0	0			
550	550	es	¿Cuántos Kudos reciben las historias de Fei Ren Zai (Manhua) de media?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Fei Ren Zai (Manhua)"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'2')}]	550	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos reciben las historias de ___ - Fandom de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de ____ - Fandom de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de ___ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos reciben las historias de Fei Ren Zai (Manhua) de media?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
?story golem:fandom ""Fei Ren Zai (Manhua)"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'2')}]	1	0	0			
551	551	es	¿Cuántos Kudos reciben las historias de ___ - Fandom de media?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___ - Fandom"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'336')}]	551	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos reciben las historias de ____ - Fandom de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de [[fandom]] de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de _________ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""_________"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos reciben las historias de ___ - Fandom de media?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
"	[{'average_number_of_kudos': Value(typed-literal:'336')}]	1	0	0			
552	552	es	¿Cuántos Kudos reciben las historias de ____ - Fandom de media?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""____ - Fandom"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'2')}]	552	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos reciben las historias de ___ - Fandom de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___ - Fandom"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de _________ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""_________"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de [[fandom]] de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos reciben las historias de ____ - Fandom de media?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { 
?story golem:fandom ""____ - Fandom"" . 
?story golem:numberOfKudos ?kudos . 
}
"	[{'average_number_of_kudos': Value(typed-literal:'2')}]	1	0	0			
553	553	es	¿Cuántos Kudos reciben las historias de Salut les copains ! - Forneri de media?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Salut les copains ! - Forneri"" . ?story golem:numberOfKudos ?kudos . }"	[{'average_number_of_kudos': Value(typed-literal:'0.5')}]	553	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos Kudos reciben las historias de _______ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""_______"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de [[fandom]] de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos Kudos reciben las historias de ___ de media?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""___"" . ?story golem:numberOfKudos ?kudos . }
    </SPARQL>

    ###
    

Question: ¿Cuántos Kudos reciben las historias de Salut les copains ! - Forneri de media?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos WHERE { ?story golem:fandom ""Salut les copains ! - Forneri"" . ?story golem:numberOfKudos ?kudos . }
"	[{'average_number_of_kudos': Value(typed-literal:'0.5')}]	1	0	0			
554	554	es	¿Cuántos autores han publicado alguna historia?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?uploads) WHERE { ?story golem:author ?author . }	[{'uploads': Value(typed-literal:'1234209')}]	554	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias se publican al año?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de [[fandom]] hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""[[fandom]]"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de ___ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""___"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántos autores han publicado alguna historia?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT (COUNT(DISTINCT ?author) as ?authorsCount) WHERE { 
  ?story dc:creator ?author . 
}
"	[{'authorsCount': Value(typed-literal:'12572')}]	0	1	1	Wrong predicate	Non-GOLEM	
555	555	es	¿Cuántas historias no han recibido ninguna reacción?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?no_feedback_stories WHERE { ?story golem:numberOfComments ?comments . ?story golem:numberOfKudos ?kudos . FILTER(?comments=0 && ?kudos=0) }	[{'no_feedback_stories': Value(typed-literal:'401')}]	555	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas reacciones suele conseguir una historia?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos AVG(?comments) AS ?average_number_of_comments WHERE { ?story golem:numberOfKudos ?kudos . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de ___________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""___________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como explícitas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias no han recibido ninguna reacción?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT COUNT(?story) AS ?no_reactions WHERE { ?story golem:numberOfKudos ""0"" . }
"	[{'no_reactions': Value(typed-literal:'0')}]	0	1	1	Wrong predicate		"""0"" included as string in quotation marks, so interpreted as string in query"
557	557	es	¿Quién escribió [podfic] Things We Wish For by Avioleta?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[podfic] Things We Wish For by Avioleta"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000026005')}]	557	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién escribió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Happy accidents?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Happy accidents"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién escribió [podfic] Things We Wish For by Avioleta?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
  ?podfic golem:title ""Things We Wish For by Avioleta"" . 
  ?podfic dc:creator ?author .
}
"	[]	0	0	1	Wrong predicate	Non-GOLEM	
558	558	es	¿Quién escribió Until you came along?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Until you came along"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000279081')}, {'author': Value(literal:'A000895946')}]	558	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién escribió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Things are Different Now?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Things are Different Now"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Finding Home?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Finding Home"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién escribió Until you came along?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Until you came along"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000279081')}, {'author': Value(literal:'A000895946')}]	1	0	0			
559	559	es	¿Quién escribió Obsidian and the Wizarding World?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Obsidian and the Wizarding World"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000233375')}]	559	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién es el autor de [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿En qué historias sale Gollum | Sméagol?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?title WHERE {  ?story golem:title ?title . ?story golem:characters ""Gollum | Sméagol"" . }
    </SPARQL>

    ###
    

Question: ¿Quién escribió Obsidian and the Wizarding World?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Obsidian and the Wizarding World"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000233375')}]	1	0	0			
560	560	es	¿Quién escribió Professor Malfoy and the New Herbology Professor?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Professor Malfoy and the New Herbology Professor"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000282633')}]	560	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién escribió Obsidian and the Wizarding World?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Obsidian and the Wizarding World"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Dónde está publicada Harriet Potter and the Philosopher's Stone?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?publisher WHERE {  ?story golem:title ""Harriet Potter and the Philosopher's Stone"" . ?story golem:publisher ?publisher . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de Triptych - Ron?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Triptych - Ron"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién escribió Professor Malfoy and the New Herbology Professor?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Professor Malfoy and the New Herbology Professor"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000282633')}]	1	0	0			
561	561	es	¿Quién escribió learnt what love means together?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""learnt what love means together"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000119468')}]	561	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿A qué colecciones pertenece I can't help but love you?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?collections WHERE {  ?story golem:title ""I can't help but love you"" . ?story golem:collections ?collections . }
    </SPARQL>

    ###
    

    Question: ¿La historia You Know What This Means incluye la palabra clave Toxic love?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?keyword WHERE {  ?story golem:title ""You Know What This Means"" . ?story golem:keyword ?keyword . FILTER(?keyword = ""Toxic love"") . }
    </SPARQL>

    ###
    

    Question: ¿Está completada la historia I will carry you, always?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?status WHERE {  ?story golem:title ""I will carry you, always"" . ?story golem:publicationStatus ?status . }
    </SPARQL>

    ###
    

Question: ¿Quién escribió learnt what love means together?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?publisher WHERE { 
?story golem:title ""learnt what love means together"" . 
?story dc:publisher ?publisher . }
"	[]	0	0	1	Wrong predicate	Non-GOLEM	
562	562	es	¿Quién escribió Finding Home?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Finding Home"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000264392')}, {'author': Value(literal:'A000264159')}, {'author': Value(literal:'A000278818')}, {'author': Value(literal:'A000000297')}, {'author': Value(literal:'A000025771')}, {'author': Value(literal:'A000286932')}, {'author': Value(literal:'A000049276')}, {'author': Value(literal:'A000001560')}, {'author': Value(literal:'A000014562')}, {'author': Value(literal:'A000018337')}, {'author': Value(literal:'A000219632')}, {'author': Value(literal:'A000185768')}, {'author': Value(literal:'A000340825')}, {'author': Value(literal:'A000401712')}, {'author': Value(literal:'A000036294')}, {'author': Value(literal:'A000005408')}, {'author': Value(literal:'A000385857')}, {'author': Value(literal:'A000048263')}, {'author': Value(literal:'A000064161')}, {'author': Value(literal:'A000002401')}, {'author': Value(literal:'A000026170')}, {'author': Value(literal:'A000040994')}, {'author': Value(literal:'A000106016')}, {'author': Value(literal:'A000036899')}, {'author': Value(literal:'A000527115')}, {'author': Value(literal:'A000097026')}, {'author': Value(literal:'A000489032')}, {'author': Value(literal:'A000019350')}, {'author': Value(literal:'A000001312')}, {'author': Value(literal:'A000526760')}, {'author': Value(literal:'A000544125')}, {'author': Value(literal:'A000015619')}, {'author': Value(literal:'A000006310')}, {'author': Value(literal:'A000008458')}, {'author': Value(literal:'A000416965')}, {'author': Value(literal:'A000009469')}, {'author': Value(literal:'A000000000')}, {'author': Value(literal:'A000062683')}, {'author': Value(literal:'A000239307')}, {'author': Value(literal:'A000543711')}, {'author': Value(literal:'A000543734')}, {'author': Value(literal:'A000002068')}, {'author': Value(literal:'A000276300')}, {'author': Value(literal:'A000061662')}, {'author': Value(literal:'A000004151')}, {'author': Value(literal:'A000012197')}, {'author': Value(literal:'A000094256')}, {'author': Value(literal:'A000051489')}, {'author': Value(literal:'A000038463')}, {'author': Value(literal:'A000020914')}, {'author': Value(literal:'A000308297')}, {'author': Value(literal:'A000233735')}, {'author': Value(literal:'A000416114')}, {'author': Value(literal:'A000623849')}, {'author': Value(literal:'A000000679')}, {'author': Value(literal:'A000100557')}, {'author': Value(literal:'A000217239')}, {'author': Value(literal:'A000595207')}, {'author': Value(literal:'A000001552')}, {'author': Value(literal:'A000014495')}, {'author': Value(literal:'A001127021')}, {'author': Value(literal:'A000011985')}, {'author': Value(literal:'A000011006')}, {'author': Value(literal:'A000020011')}, {'author': Value(literal:'A000215525')}, {'author': Value(literal:'A000001613')}, {'author': Value(literal:'A000004421')}, {'author': Value(literal:'A000000002')}, {'author': Value(literal:'A000000189')}, {'author': Value(literal:'A000229104')}, {'author': Value(literal:'A000299708')}, {'author': Value(literal:'A000084305')}, {'author': Value(literal:'A000236498')}, {'author': Value(literal:'A000078002')}, {'author': Value(literal:'A000108184')}, {'author': Value(literal:'A000557829')}, {'author': Value(literal:'A000455006')}, {'author': Value(literal:'A000055398')}, {'author': Value(literal:'A000102925')}, {'author': Value(literal:'A000226703')}, {'author': Value(literal:'A000319376')}, {'author': Value(literal:'A000094709')}, {'author': Value(literal:'A000057251')}, {'author': Value(literal:'A000104096')}, {'author': Value(literal:'A000037886')}, {'author': Value(literal:'A000214695')}, {'author': Value(literal:'A000047449')}, {'author': Value(literal:'A000097250')}, {'author': Value(literal:'A000481757')}, {'author': Value(literal:'A000061128')}, {'author': Value(literal:'A000217109')}, {'author': Value(literal:'A000462102')}, {'author': Value(literal:'A000082558')}, {'author': Value(literal:'A000464892')}, {'author': Value(literal:'A000483315')}, {'author': Value(literal:'A000000130')}, {'author': Value(literal:'A000561539')}, {'author': Value(literal:'A000010363')}, {'author': Value(literal:'A000472729')}, {'author': Value(literal:'A000047882')}, {'author': Value(literal:'A000000214')}, {'author': Value(literal:'A000007321')}, {'author': Value(literal:'A000005717')}, {'author': Value(literal:'A000049348')}, {'author': Value(literal:'A000033241')}, {'author': Value(literal:'A000016511')}, {'author': Value(literal:'A000508556')}, {'author': Value(literal:'A000529337')}, {'author': Value(literal:'A000049559')}, {'author': Value(literal:'A000021306')}, {'author': Value(literal:'A000001573')}, {'author': Value(literal:'A000001356')}, {'author': Value(literal:'A000004310')}, {'author': Value(literal:'A000592959')}, {'author': Value(literal:'A000242916')}, {'author': Value(literal:'A000006799')}, {'author': Value(literal:'A001184089')}, {'author': Value(literal:'A000216390')}, {'author': Value(literal:'A000002394')}, {'author': Value(literal:'A000080373')}, {'author': Value(literal:'A000218957')}, {'author': Value(literal:'A000322440')}, {'author': Value(literal:'A000004935')}, {'author': Value(literal:'A000228669')}, {'author': Value(literal:'A000521648')}, {'author': Value(literal:'A000057999')}, {'author': Value(literal:'A000026743')}, {'author': Value(literal:'A000432016')}, {'author': Value(literal:'A000037544')}, {'author': Value(literal:'A999999999')}, {'author': Value(literal:'A000380488')}, {'author': Value(literal:'A000020001')}, {'author': Value(literal:'A000010952')}, {'author': Value(literal:'A000386692')}, {'author': Value(literal:'A000551845')}, {'author': Value(literal:'A000613558')}, {'author': Value(literal:'A000607557')}, {'author': Value(literal:'A000003595')}, {'author': Value(literal:'A000602737')}, {'author': Value(literal:'A000006130')}, {'author': Value(literal:'A000002317')}, {'author': Value(literal:'A000057672')}, {'author': Value(literal:'A000005288')}, {'author': Value(literal:'A000623221')}, {'author': Value(literal:'A000608687')}, {'author': Value(literal:'A000214471')}, {'author': Value(literal:'A000433053')}, {'author': Value(literal:'A000163167')}, {'author': Value(literal:'A000034334')}, {'author': Value(literal:'A000038730')}, {'author': Value(literal:'A000442901')}, {'author': Value(literal:'A000552347')}, {'author': Value(literal:'A000655211')}, {'author': Value(literal:'A000020266')}, {'author': Value(literal:'A001160441')}, {'author': Value(literal:'A001118110')}, {'author': Value(literal:'A001237223')}, {'author': Value(literal:'A001142638')}, {'author': Value(literal:'A001167086')}, {'author': Value(literal:'A000545309')}, {'author': Value(literal:'A000095296')}, {'author': Value(literal:'A000027446')}, {'author': Value(literal:'A000005089')}, {'author': Value(literal:'A000270820')}, {'author': Value(literal:'A000210516')}, {'author': Value(literal:'A000399814')}, {'author': Value(literal:'A000121795')}, {'author': Value(literal:'A000001680')}, {'author': Value(literal:'A000010610')}, {'author': Value(literal:'A000102730')}, {'author': Value(literal:'A000654905')}, {'author': Value(literal:'A000659814')}, {'author': Value(literal:'A000644610')}, {'author': Value(literal:'A000029329')}, {'author': Value(literal:'A000645916')}, {'author': Value(literal:'A000716767')}, {'author': Value(literal:'A000222288')}, {'author': Value(literal:'A000030029')}, {'author': Value(literal:'A000550496')}, {'author': Value(literal:'A000661988')}, {'author': Value(literal:'A000225165')}, {'author': Value(literal:'A000245601')}, {'author': Value(literal:'A000042240')}, {'author': Value(literal:'A000003571')}, {'author': Value(literal:'A000433196')}, {'author': Value(literal:'A000177149')}, {'author': Value(literal:'A000424619')}, {'author': Value(literal:'A000675883')}, {'author': Value(literal:'A000738788')}, {'author': Value(literal:'A000013197')}, {'author': Value(literal:'A000030621')}, {'author': Value(literal:'A000631143')}, {'author': Value(literal:'A000420987')}, {'author': Value(literal:'A000675285')}, {'author': Value(literal:'A000020579')}, {'author': Value(literal:'A000037974')}, {'author': Value(literal:'A000009806')}, {'author': Value(literal:'A000246132')}, {'author': Value(literal:'A000718034')}, {'author': Value(literal:'A000014124')}, {'author': Value(literal:'A000322554')}, {'author': Value(literal:'A000002882')}, {'author': Value(literal:'A000323996')}, {'author': Value(literal:'A000062411')}, {'author': Value(literal:'A000421534')}, {'author': Value(literal:'A000024323')}, {'author': Value(literal:'A000002881')}, {'author': Value(literal:'A000011723')}, {'author': Value(literal:'A000701481')}, {'author': Value(literal:'A000753411')}, {'author': Value(literal:'A000169961')}, {'author': Value(literal:'A000002838')}, {'author': Value(literal:'A000145697')}, {'author': Value(literal:'A000016551')}, {'author': Value(literal:'A000728682')}, {'author': Value(literal:'A000456108')}, {'author': Value(literal:'A000070332')}, {'author': Value(literal:'A000244767')}, {'author': Value(literal:'A000247648')}, {'author': Value(literal:'A000049909')}, {'author': Value(literal:'A000494217')}, {'author': Value(literal:'A000441915')}, {'author': Value(literal:'A000521801')}, {'author': Value(literal:'A000590821')}, {'author': Value(literal:'A000049454')}, {'author': Value(literal:'A000098153')}, {'author': Value(literal:'A000745096')}, {'author': Value(literal:'A000377679')}, {'author': Value(literal:'A000744251')}, {'author': Value(literal:'A000734113')}, {'author': Value(literal:'A000413337')}, {'author': Value(literal:'A000091110')}, {'author': Value(literal:'A000016607')}, {'author': Value(literal:'A000022303')}, {'author': Value(literal:'A000029155')}, {'author': Value(literal:'A000748570')}, {'author': Value(literal:'A000032230')}, {'author': Value(literal:'A000010547')}, {'author': Value(literal:'A000839437')}, {'author': Value(literal:'A000403573')}, {'author': Value(literal:'A000005155')}, {'author': Value(literal:'A000234247')}, {'author': Value(literal:'A000010837')}, {'author': Value(literal:'A000000452')}, {'author': Value(literal:'A000788721')}, {'author': Value(literal:'A000000004')}, {'author': Value(literal:'A000046874')}, {'author': Value(literal:'A000411694')}, {'author': Value(literal:'A000087071')}, {'author': Value(literal:'A000008112')}, {'author': Value(literal:'A000464374')}, {'author': Value(literal:'A000086152')}, {'author': Value(literal:'A000007076')}, {'author': Value(literal:'A000036045')}, {'author': Value(literal:'A000385491')}, {'author': Value(literal:'A000747305')}, {'author': Value(literal:'A000003384')}, {'author': Value(literal:'A000094705')}, {'author': Value(literal:'A000099327')}, {'author': Value(literal:'A000076199')}, {'author': Value(literal:'A000019992')}, {'author': Value(literal:'A000092697')}, {'author': Value(literal:'A000001458')}, {'author': Value(literal:'A000014649')}, {'author': Value(literal:'A000071341')}, {'author': Value(literal:'A000904872')}, {'author': Value(literal:'A000339826')}, {'author': Value(literal:'A000802329')}, {'author': Value(literal:'A000521810')}, {'author': Value(literal:'A000008792')}, {'author': Value(literal:'A000017782')}, {'author': Value(literal:'A000474630')}, {'author': Value(literal:'A000076695')}, {'author': Value(literal:'A000038234')}, {'author': Value(literal:'A000032803')}, {'author': Value(literal:'A000018034')}, {'author': Value(literal:'A000289554')}, {'author': Value(literal:'A000003822')}, {'author': Value(literal:'A000285603')}, {'author': Value(literal:'A000869106')}, {'author': Value(literal:'A000000041')}, {'author': Value(literal:'A000370482')}, {'author': Value(literal:'A000448801')}, {'author': Value(literal:'A000014540')}, {'author': Value(literal:'A000034287')}, {'author': Value(literal:'A000510060')}, {'author': Value(literal:'A000014983')}, {'author': Value(literal:'A000067147')}, {'author': Value(literal:'A000540553')}, {'author': Value(literal:'A000018402')}, {'author': Value(literal:'A001028725')}, {'author': Value(literal:'A000109232')}, {'author': Value(literal:'A000038959')}, {'author': Value(literal:'A000285840')}, {'author': Value(literal:'A000078882')}, {'author': Value(literal:'A000456324')}, {'author': Value(literal:'A000833127')}, {'author': Value(literal:'A000000135')}, {'author': Value(literal:'A000435193')}, {'author': Value(literal:'A000000088')}, {'author': Value(literal:'A000814433')}, {'author': Value(literal:'A000035411')}, {'author': Value(literal:'A000063299')}, {'author': Value(literal:'A000642780')}, {'author': Value(literal:'A000075506')}, {'author': Value(literal:'A000006547')}, {'author': Value(literal:'A000016682')}, {'author': Value(literal:'A000074083')}, {'author': Value(literal:'A000047765')}, {'author': Value(literal:'A000301434')}, {'author': Value(literal:'A000054409')}, {'author': Value(literal:'A000500460')}, {'author': Value(literal:'A000001570')}, {'author': Value(literal:'A000004614')}, {'author': Value(literal:'A000479092')}, {'author': Value(literal:'A000106758')}, {'author': Value(literal:'A000001548')}, {'author': Value(literal:'A000012991')}, {'author': Value(literal:'A000545115')}, {'author': Value(literal:'A000000697')}, {'author': Value(literal:'A000939821')}, {'author': Value(literal:'A000008050')}, {'author': Value(literal:'A000801713')}, {'author': Value(literal:'A000875069')}, {'author': Value(literal:'A000378924')}, {'author': Value(literal:'A000110885')}, {'author': Value(literal:'A000894730')}, {'author': Value(literal:'A000060109')}, {'author': Value(literal:'A000000313')}, {'author': Value(literal:'A000094190')}, {'author': Value(literal:'A000888574')}, {'author': Value(literal:'A000065805')}, {'author': Value(literal:'A001240329')}, {'author': Value(literal:'A001111861')}, {'author': Value(literal:'A000355899')}, {'author': Value(literal:'A000000923')}, {'author': Value(literal:'A000627112')}, {'author': Value(literal:'A000296394')}, {'author': Value(literal:'A000010264')}, {'author': Value(literal:'A000040449')}, {'author': Value(literal:'A000074775')}, {'author': Value(literal:'A000079070')}, {'author': Value(literal:'A000017151')}, {'author': Value(literal:'A000000790')}, {'author': Value(literal:'A000012976')}, {'author': Value(literal:'A000060043')}, {'author': Value(literal:'A000019351')}, {'author': Value(literal:'A000034298')}, {'author': Value(literal:'A000047949')}, {'author': Value(literal:'A000466157')}, {'author': Value(literal:'A000046719')}, {'author': Value(literal:'A000052796')}, {'author': Value(literal:'A000660658')}, {'author': Value(literal:'A000041728')}, {'author': Value(literal:'A000038454')}, {'author': Value(literal:'A000877092')}, {'author': Value(literal:'A000124299')}, {'author': Value(literal:'A000797580')}, {'author': Value(literal:'A000009000')}, {'author': Value(literal:'A000010860')}, {'author': Value(literal:'A000004150')}, {'author': Value(literal:'A000027806')}, {'author': Value(literal:'A000038547')}, {'author': Value(literal:'A000000274')}, {'author': Value(literal:'A000001494')}, {'author': Value(literal:'A000031969')}, {'author': Value(literal:'A000033846')}, {'author': Value(literal:'A000021880')}, {'author': Value(literal:'A000000500')}, {'author': Value(literal:'A000847841')}, {'author': Value(literal:'A000000397')}, {'author': Value(literal:'A000083659')}, {'author': Value(literal:'A000536973')}, {'author': Value(literal:'A000433142')}, {'author': Value(literal:'A001095659')}, {'author': Value(literal:'A000018397')}, {'author': Value(literal:'A001120773')}, {'author': Value(literal:'A001107864')}, {'author': Value(literal:'A000824330')}, {'author': Value(literal:'A000246128')}, {'author': Value(literal:'A000053891')}, {'author': Value(literal:'A000000105')}, {'author': Value(literal:'A000042893')}, {'author': Value(literal:'A000317641')}, {'author': Value(literal:'A000305576')}, {'author': Value(literal:'A000633323')}, {'author': Value(literal:'A000015632')}, {'author': Value(literal:'A000061618')}, {'author': Value(literal:'A000021999')}, {'author': Value(literal:'A000011692')}, {'author': Value(literal:'A000004535')}, {'author': Value(literal:'A000247724')}, {'author': Value(literal:'A000663161')}, {'author': Value(literal:'A000149295')}, {'author': Value(literal:'A000001638')}, {'author': Value(literal:'A001012351')}, {'author': Value(literal:'A000000014')}, {'author': Value(literal:'A000028795')}, {'author': Value(literal:'A000035241')}, {'author': Value(literal:'A000029383')}, {'author': Value(literal:'A000074930')}, {'author': Value(literal:'A000004675')}, {'author': Value(literal:'A000997180')}, {'author': Value(literal:'A000009899')}, {'author': Value(literal:'A000004859')}, {'author': Value(literal:'A001004967')}, {'author': Value(literal:'A000004990')}, {'author': Value(literal:'A000054457')}, {'author': Value(literal:'A000979965')}, {'author': Value(literal:'A000090854')}, {'author': Value(literal:'A000324775')}, {'author': Value(literal:'A000000047')}, {'author': Value(literal:'A000023275')}, {'author': Value(literal:'A000007999')}, {'author': Value(literal:'A000956155')}, {'author': Value(literal:'A000052143')}, {'author': Value(literal:'A000039307')}, {'author': Value(literal:'A000088183')}, {'author': Value(literal:'A000045191')}, {'author': Value(literal:'A000353040')}, {'author': Value(literal:'A000087142')}, {'author': Value(literal:'A000041720')}, {'author': Value(literal:'A000082784')}, {'author': Value(literal:'A000015637')}, {'author': Value(literal:'A000979945')}, {'author': Value(literal:'A000044259')}, {'author': Value(literal:'A000027996')}, {'author': Value(literal:'A000624218')}, {'author': Value(literal:'A000236684')}, {'author': Value(literal:'A001096999')}, {'author': Value(literal:'A000022561')}, {'author': Value(literal:'A000891641')}, {'author': Value(literal:'A000002688')}, {'author': Value(literal:'A000442960')}, {'author': Value(literal:'A000001926')}, {'author': Value(literal:'A001039483')}, {'author': Value(literal:'A000020122')}, {'author': Value(literal:'A001041162')}, {'author': Value(literal:'A000128036')}, {'author': Value(literal:'A000008065')}, {'author': Value(literal:'A000942593')}, {'author': Value(literal:'A001036847')}, {'author': Value(literal:'A000157533')}, {'author': Value(literal:'A001021021')}, {'author': Value(literal:'A000000156')}, {'author': Value(literal:'A000074699')}, {'author': Value(literal:'A000555627')}, {'author': Value(literal:'A000038058')}, {'author': Value(literal:'A000012080')}, {'author': Value(literal:'A000878796')}, {'author': Value(literal:'A000000062')}, {'author': Value(literal:'A000035355')}, {'author': Value(literal:'A000000046')}, {'author': Value(literal:'A000045252')}, {'author': Value(literal:'A000121648')}, {'author': Value(literal:'A000110275')}, {'author': Value(literal:'A000385073')}, {'author': Value(literal:'A001044718')}, {'author': Value(literal:'A001031550')}, {'author': Value(literal:'A000888210')}, {'author': Value(literal:'A000030148')}, {'author': Value(literal:'A000335085')}, {'author': Value(literal:'A000040937')}, {'author': Value(literal:'A001021250')}, {'author': Value(literal:'A001031234')}, {'author': Value(literal:'A000247556')}, {'author': Value(literal:'A000031318')}, {'author': Value(literal:'A001131195')}, {'author': Value(literal:'A001108406')}, {'author': Value(literal:'A001189782')}, {'author': Value(literal:'A001114405')}, {'author': Value(literal:'A000066612')}, {'author': Value(literal:'A000980906')}, {'author': Value(literal:'A000010122')}, {'author': Value(literal:'A000000702')}, {'author': Value(literal:'A000028392')}, {'author': Value(literal:'A000103226')}, {'author': Value(literal:'A000550339')}, {'author': Value(literal:'A000005130')}, {'author': Value(literal:'A000006811')}, {'author': Value(literal:'A000002064')}, {'author': Value(literal:'A000004782')}, {'author': Value(literal:'A000430029')}, {'author': Value(literal:'A000496272')}, {'author': Value(literal:'A000000677')}, {'author': Value(literal:'A000997646')}, {'author': Value(literal:'A000010265')}, {'author': Value(literal:'A000685880')}, {'author': Value(literal:'A000104329')}, {'author': Value(literal:'A000002540')}, {'author': Value(literal:'A000037670')}, {'author': Value(literal:'A001043359')}, {'author': Value(literal:'A000893025')}, {'author': Value(literal:'A000012569')}, {'author': Value(literal:'A000000982')}, {'author': Value(literal:'A000039391')}, {'author': Value(literal:'A000215447')}, {'author': Value(literal:'A000033178')}, {'author': Value(literal:'A000000070')}, {'author': Value(literal:'A000005335')}, {'author': Value(literal:'A001125559')}, {'author': Value(literal:'A001119387')}, {'author': Value(literal:'A001105207')}, {'author': Value(literal:'A001159948')}, {'author': Value(literal:'A001244033')}, {'author': Value(literal:'A000040177')}, {'author': Value(literal:'A001027602')}, {'author': Value(literal:'A000275767')}, {'author': Value(literal:'A000286881')}, {'author': Value(literal:'A000030274')}, {'author': Value(literal:'A000002413')}, {'author': Value(literal:'A000331279')}, {'author': Value(literal:'A000342902')}, {'author': Value(literal:'A000225599')}, {'author': Value(literal:'A000056674')}, {'author': Value(literal:'A000488795')}, {}, {'author': Value(literal:'A000092823')}, {'author': Value(literal:'A000431930')}]	562	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién escribió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Until you came along?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Until you came along"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién es el autor de [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién escribió Finding Home?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""Finding Home"" . 
  ?story golem:author ?author . 
}
"	"EndPointInternalError: The endpoint returned the HTTP status code 500. 

Response:
b'\n{ ""head"": { ""link"": [], ""vars"": [""author""] },\n  ""results"": { ""distinct"": false, ""ordered"": true, ""bindings"": [\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000264392"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000264159"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000278818"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000000297"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000025771"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000286932"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000049276"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000001560"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000014562"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000018337"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000219632"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000185768"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000340825"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000401712"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000036294"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000005408"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000385857"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000048263"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000064161"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000002401"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000026170"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000040994"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000106016"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000036899"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000527115"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000097026"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000489032"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000019350"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000001312"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000526760"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000544125"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000015619"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000006310"" }},\n    { ""author"": { ""type"": ""literal"", ""value"": ""A000008458"" }Virtuoso S1TAT Error RC...: Returning incomplete results, query interrupted by result timeout.  Activity:  1.056K rnd    534 seq    217 same seg     449 same pg    364 same par    451 disk    656 spec disk      0B /      0 mess\n\nSPARQL query:\n\nprefix golem: <https://golemlab.eu/graph/> \nprefix dc: <http://purl.org/dc/terms/> \nprefix gc: <https://ontology.golemlab.eu/>  \nSELECT DISTINCT ?author WHERE { \n  ?story golem:title ""Finding Home"" . \n  ?story golem:author ?author . \n}\n'"	0	1	1	Failed execution		
563	563	es	¿Quién escribió Stronger?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Stronger"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000059059')}, {'author': Value(literal:'A000357163')}, {'author': Value(literal:'A000063266')}, {'author': Value(literal:'A000060043')}, {'author': Value(literal:'A000001002')}, {'author': Value(literal:'A000187056')}, {'author': Value(literal:'A000080519')}, {'author': Value(literal:'A000344107')}, {'author': Value(literal:'A000042284')}, {'author': Value(literal:'A000014656')}, {'author': Value(literal:'A000002413')}, {'author': Value(literal:'A000036583')}, {'author': Value(literal:'A000106349')}, {'author': Value(literal:'A000091285')}, {'author': Value(literal:'A000124628')}, {'author': Value(literal:'A000040563')}, {'author': Value(literal:'A000036091')}, {'author': Value(literal:'A000048769')}, {'author': Value(literal:'A000023465')}, {'author': Value(literal:'A000000000')}, {'author': Value(literal:'A000097504')}, {'author': Value(literal:'A000527887')}, {'author': Value(literal:'A000432543')}, {'author': Value(literal:'A000005387')}, {'author': Value(literal:'A000153694')}, {'author': Value(literal:'A000002011')}, {'author': Value(literal:'A000056587')}, {'author': Value(literal:'A001129630')}, {'author': Value(literal:'A001163130')}, {'author': Value(literal:'A000091597')}, {'author': Value(literal:'A000001791')}, {'author': Value(literal:'A000264917')}, {'author': Value(literal:'A000071854')}, {'author': Value(literal:'A000467543')}, {'author': Value(literal:'A000000083')}, {'author': Value(literal:'A000202745')}, {'author': Value(literal:'A000000786')}, {'author': Value(literal:'A000001758')}, {'author': Value(literal:'A000641800')}, {'author': Value(literal:'A000018776')}, {'author': Value(literal:'A000025358')}, {'author': Value(literal:'A000039405')}, {'author': Value(literal:'A000001604')}, {'author': Value(literal:'A000027197')}, {'author': Value(literal:'A001112186')}, {'author': Value(literal:'A001172835')}, {'author': Value(literal:'A000001278')}, {'author': Value(literal:'A000005719')}, {'author': Value(literal:'A000097966')}, {'author': Value(literal:'A000556236')}, {'author': Value(literal:'A000227608')}, {'author': Value(literal:'A000035230')}, {'author': Value(literal:'A000039001')}, {'author': Value(literal:'A000039436')}, {'author': Value(literal:'A000002461')}, {'author': Value(literal:'A000010745')}, {'author': Value(literal:'A000004006')}, {'author': Value(literal:'A000003746')}, {'author': Value(literal:'A001119683')}, {'author': Value(literal:'A000024981')}, {'author': Value(literal:'A000022126')}, {'author': Value(literal:'A000018260')}, {'author': Value(literal:'A000002302')}, {'author': Value(literal:'A000000511')}, {'author': Value(literal:'A000005643')}, {'author': Value(literal:'A000000953')}, {'author': Value(literal:'A000015832')}, {'author': Value(literal:'A000248214')}, {'author': Value(literal:'A000725967')}, {'author': Value(literal:'A000016495')}, {'author': Value(literal:'A000000235')}, {'author': Value(literal:'A000003120')}, {'author': Value(literal:'A000015143')}, {'author': Value(literal:'A000545345')}, {'author': Value(literal:'A000087611')}, {'author': Value(literal:'A000084660')}, {'author': Value(literal:'A000096283')}, {'author': Value(literal:'A000003882')}, {'author': Value(literal:'A000001907')}, {'author': Value(literal:'A000006520')}, {'author': Value(literal:'A000766847')}, {'author': Value(literal:'A000043542')}, {'author': Value(literal:'A000000210')}, {'author': Value(literal:'A000073663')}, {'author': Value(literal:'A000059601')}, {'author': Value(literal:'A000821025')}, {'author': Value(literal:'A000774893')}, {'author': Value(literal:'A001021289')}, {'author': Value(literal:'A000817358')}, {'author': Value(literal:'A000000100')}, {'author': Value(literal:'A000000605')}, {'author': Value(literal:'A000390377')}, {'author': Value(literal:'A001178186')}, {'author': Value(literal:'A000050730')}, {'author': Value(literal:'A000691703')}, {'author': Value(literal:'A000691026')}, {'author': Value(literal:'A000012190')}, {'author': Value(literal:'A000000120')}, {'author': Value(literal:'A001231611')}, {'author': Value(literal:'A000043403')}, {'author': Value(literal:'A000920416')}, {'author': Value(literal:'A000750814')}, {'author': Value(literal:'A000008959')}, {'author': Value(literal:'A000246635')}, {'author': Value(literal:'A000001495')}, {'author': Value(literal:'A000000431')}, {'author': Value(literal:'A000088968')}, {'author': Value(literal:'A000187972')}, {'author': Value(literal:'A000863013')}, {'author': Value(literal:'A001074438')}, {'author': Value(literal:'A000005360')}, {'author': Value(literal:'A000084092')}, {'author': Value(literal:'A000082155')}, {'author': Value(literal:'A000112717')}, {'author': Value(literal:'A000076647')}, {'author': Value(literal:'A000077216')}, {'author': Value(literal:'A000010605')}, {'author': Value(literal:'A000016976')}, {'author': Value(literal:'A000786516')}, {'author': Value(literal:'A000002139')}, {'author': Value(literal:'A000066068')}, {'author': Value(literal:'A000007048')}, {'author': Value(literal:'A000013792')}, {'author': Value(literal:'A000005252')}, {'author': Value(literal:'A000001923')}, {'author': Value(literal:'A000012270')}, {'author': Value(literal:'A000003467')}, {'author': Value(literal:'A000026622')}, {'author': Value(literal:'A000000454')}, {'author': Value(literal:'A000059013')}, {'author': Value(literal:'A000029090')}, {'author': Value(literal:'A000625898')}, {'author': Value(literal:'A000012295')}, {'author': Value(literal:'A000115410')}, {'author': Value(literal:'A000053963')}, {'author': Value(literal:'A000154115')}, {'author': Value(literal:'A000023819')}, {'author': Value(literal:'A000528231')}, {'author': Value(literal:'A000419493')}, {'author': Value(literal:'A000006625')}, {'author': Value(literal:'A000047240')}, {'author': Value(literal:'A001037304')}, {'author': Value(literal:'A000090831')}, {'author': Value(literal:'A000024901')}, {'author': Value(literal:'A000006954')}, {'author': Value(literal:'A001123827')}, {'author': Value(literal:'A001125238')}, {'author': Value(literal:'A000052041')}, {'author': Value(literal:'A000029329')}, {'author': Value(literal:'A000297369')}, {'author': Value(literal:'A000055024')}]	563	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién escribió Things are Different Now?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Things are Different Now"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Until you came along?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Until you came along"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién escribió Stronger?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""Stronger"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000059059')}, {'author': Value(literal:'A000357163')}, {'author': Value(literal:'A000063266')}, {'author': Value(literal:'A000060043')}, {'author': Value(literal:'A000001002')}, {'author': Value(literal:'A000187056')}, {'author': Value(literal:'A000080519')}, {'author': Value(literal:'A000344107')}, {'author': Value(literal:'A000042284')}, {'author': Value(literal:'A000014656')}, {'author': Value(literal:'A000002413')}, {'author': Value(literal:'A000036583')}, {'author': Value(literal:'A000106349')}, {'author': Value(literal:'A000091285')}, {'author': Value(literal:'A000124628')}, {'author': Value(literal:'A000040563')}, {'author': Value(literal:'A000036091')}, {'author': Value(literal:'A000048769')}, {'author': Value(literal:'A000023465')}, {'author': Value(literal:'A000000000')}, {'author': Value(literal:'A000097504')}, {'author': Value(literal:'A000527887')}, {'author': Value(literal:'A000432543')}, {'author': Value(literal:'A000005387')}, {'author': Value(literal:'A000153694')}, {'author': Value(literal:'A000002011')}, {'author': Value(literal:'A000056587')}, {'author': Value(literal:'A001129630')}, {'author': Value(literal:'A001163130')}, {'author': Value(literal:'A000091597')}, {'author': Value(literal:'A000001791')}, {'author': Value(literal:'A000264917')}, {'author': Value(literal:'A000071854')}, {'author': Value(literal:'A000467543')}, {'author': Value(literal:'A000000083')}, {'author': Value(literal:'A000202745')}, {'author': Value(literal:'A000000786')}, {'author': Value(literal:'A000001758')}, {'author': Value(literal:'A000641800')}, {'author': Value(literal:'A000018776')}, {'author': Value(literal:'A000025358')}, {'author': Value(literal:'A000039405')}, {'author': Value(literal:'A000001604')}, {'author': Value(literal:'A000027197')}, {'author': Value(literal:'A001112186')}, {'author': Value(literal:'A001172835')}, {'author': Value(literal:'A000001278')}, {'author': Value(literal:'A000005719')}, {'author': Value(literal:'A000097966')}, {'author': Value(literal:'A000556236')}, {'author': Value(literal:'A000227608')}, {'author': Value(literal:'A000035230')}, {'author': Value(literal:'A000039001')}, {'author': Value(literal:'A000039436')}, {'author': Value(literal:'A000002461')}, {'author': Value(literal:'A000010745')}, {'author': Value(literal:'A000004006')}, {'author': Value(literal:'A000003746')}, {'author': Value(literal:'A001119683')}, {'author': Value(literal:'A000024981')}, {'author': Value(literal:'A000022126')}, {'author': Value(literal:'A000018260')}, {'author': Value(literal:'A000002302')}, {'author': Value(literal:'A000000511')}, {'author': Value(literal:'A000005643')}, {'author': Value(literal:'A000000953')}, {'author': Value(literal:'A000015832')}, {'author': Value(literal:'A000248214')}, {'author': Value(literal:'A000725967')}, {'author': Value(literal:'A000016495')}, {'author': Value(literal:'A000000235')}, {'author': Value(literal:'A000003120')}, {'author': Value(literal:'A000015143')}, {'author': Value(literal:'A000545345')}, {'author': Value(literal:'A000087611')}, {'author': Value(literal:'A000084660')}, {'author': Value(literal:'A000096283')}, {'author': Value(literal:'A000003882')}, {'author': Value(literal:'A000001907')}, {'author': Value(literal:'A000006520')}, {'author': Value(literal:'A000766847')}, {'author': Value(literal:'A000043542')}, {'author': Value(literal:'A000000210')}, {'author': Value(literal:'A000073663')}, {'author': Value(literal:'A000059601')}, {'author': Value(literal:'A000821025')}, {'author': Value(literal:'A000774893')}, {'author': Value(literal:'A001021289')}, {'author': Value(literal:'A000817358')}, {'author': Value(literal:'A000000100')}, {'author': Value(literal:'A000000605')}, {'author': Value(literal:'A000390377')}, {'author': Value(literal:'A001178186')}, {'author': Value(literal:'A000050730')}, {'author': Value(literal:'A000691703')}, {'author': Value(literal:'A000691026')}, {'author': Value(literal:'A000012190')}, {'author': Value(literal:'A000000120')}, {'author': Value(literal:'A001231611')}, {'author': Value(literal:'A000043403')}, {'author': Value(literal:'A000920416')}, {'author': Value(literal:'A000750814')}, {'author': Value(literal:'A000008959')}, {'author': Value(literal:'A000246635')}, {'author': Value(literal:'A000001495')}, {'author': Value(literal:'A000000431')}, {'author': Value(literal:'A000088968')}, {'author': Value(literal:'A000187972')}, {'author': Value(literal:'A000863013')}, {'author': Value(literal:'A001074438')}, {'author': Value(literal:'A000005360')}, {'author': Value(literal:'A000084092')}, {'author': Value(literal:'A000082155')}, {'author': Value(literal:'A000112717')}, {'author': Value(literal:'A000076647')}, {'author': Value(literal:'A000077216')}, {'author': Value(literal:'A000010605')}, {'author': Value(literal:'A000016976')}, {'author': Value(literal:'A000786516')}, {'author': Value(literal:'A000002139')}, {'author': Value(literal:'A000066068')}, {'author': Value(literal:'A000007048')}, {'author': Value(literal:'A000013792')}, {'author': Value(literal:'A000005252')}, {'author': Value(literal:'A000001923')}, {'author': Value(literal:'A000012270')}, {'author': Value(literal:'A000003467')}, {'author': Value(literal:'A000026622')}, {'author': Value(literal:'A000000454')}, {'author': Value(literal:'A000059013')}, {'author': Value(literal:'A000029090')}, {'author': Value(literal:'A000625898')}, {'author': Value(literal:'A000012295')}, {'author': Value(literal:'A000115410')}, {'author': Value(literal:'A000053963')}, {'author': Value(literal:'A000154115')}, {'author': Value(literal:'A000023819')}, {'author': Value(literal:'A000528231')}, {'author': Value(literal:'A000419493')}, {'author': Value(literal:'A000006625')}, {'author': Value(literal:'A000047240')}, {'author': Value(literal:'A001037304')}, {'author': Value(literal:'A000090831')}, {'author': Value(literal:'A000024901')}, {'author': Value(literal:'A000006954')}, {'author': Value(literal:'A001123827')}, {'author': Value(literal:'A001125238')}, {'author': Value(literal:'A000052041')}, {'author': Value(literal:'A000029329')}, {'author': Value(literal:'A000297369')}, {'author': Value(literal:'A000055024')}]	1	0	0			
564	564	es	¿Quién escribió Ron's body?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Ron's body"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000063813')}]	564	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién es el autor de Triptych - Ron?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Triptych - Ron"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Obsidian and the Wizarding World?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Obsidian and the Wizarding World"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién escribió Ron's body?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Ron's body"" . 
?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000063813')}]	1	0	0			
565	565	es	¿Quién escribió Happy accidents?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Happy accidents"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000287200')}, {'author': Value(literal:'A000010855')}, {'author': Value(literal:'A999999999')}, {'author': Value(literal:'A000001365')}, {'author': Value(literal:'A000589349')}, {'author': Value(literal:'A000147314')}]	565	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién escribió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió [podfic] Things We Wish For by Avioleta?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[podfic] Things We Wish For by Avioleta"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Until you came along?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Until you came along"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién escribió Happy accidents?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?author WHERE { 
?story golem:title ""Happy accidents"" . 
?story golem:author ?author . }
"	[{'author': Value(literal:'A000287200')}, {'author': Value(literal:'A000010855')}, {'author': Value(literal:'A999999999')}, {'author': Value(literal:'A000001365')}, {'author': Value(literal:'A000589349')}, {'author': Value(literal:'A000147314')}]	1	0	0			
566	566	es	¿Quién escribió Things are Different Now?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Things are Different Now"" . ?story golem:author ?author . }"	[{'author': Value(literal:'A000008460')}, {'author': Value(literal:'A000106944')}, {'author': Value(literal:'A001152386')}, {'author': Value(literal:'A000145440')}, {'author': Value(literal:'A000016954')}]	566	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién escribió Until you came along?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Until you came along"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió Stronger?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""Stronger"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Quién escribió [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""[[story]]"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Quién escribió Things are Different Now?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?author WHERE { 
  ?story golem:title ""Things are Different Now"" . 
  ?story golem:author ?author . 
}
"	[{'author': Value(literal:'A000008460')}, {'author': Value(literal:'A000106944')}, {'author': Value(literal:'A001152386')}, {'author': Value(literal:'A000145440')}, {'author': Value(literal:'A000016954')}]	1	0	0			
568	568	es	Muéstrame los resúmenes de historias de ___	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'____/___X___/R_____________')}]	568	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame los resúmenes de historias de ___

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>
prefix dc: <http://purl.org/dc/terms/>
prefix gc: <https://ontology.golemlab.eu/>
SELECT DISTINCT ?summary WHERE {
  ?story golem:fandom ""___"" .
  ?story golem:summary ?summary .
}
"	[{'summary': Value(literal:'____/___X___/R_____________')}]	1	0	0			
569	569	es	Muéstrame los resúmenes de historias de __	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'_________ ______')}]	569	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de ___

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame los resúmenes de historias de __

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
?story golem:fandom ""__"" . 
?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'_________ ______')}]	1	0	0			
570	570	es	Muéstrame los resúmenes de historias de __	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'None')}]	570	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de ___

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame los resúmenes de historias de __

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
?story golem:fandom ""__"" . 
?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'None')}]	1	0	0			
571	571	es	Muéstrame los resúmenes de historias de __ ___/___ __ - Fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ ___/___ __ - Fandom"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'_______X_________________1V1_HE _________________________')}]	571	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame los resúmenes de historias de _______ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""_______ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del fandom ___ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""___ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame los resúmenes de historias de __ ___/___ __ - Fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
?story golem:fandom ""__ ___/___ __ - Fandom"" . 
?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'_______X_________________1V1_HE _________________________')}]	1	0	0			
572	572	es	Muéstrame los resúmenes de historias de __	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'None')}, {'summary': Value(literal:'hornhub_____________ __PWP_')}]	572	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de ___

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""___"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame los resúmenes de historias de __

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
?story golem:fandom ""__"" . 
?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'None')}, {'summary': Value(literal:'hornhub_____________ __PWP_')}]	1	0	0			
573	573	es	Muéstrame los resúmenes de historias de _______ - Fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""_______ - Fandom"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'Summary________________________')}, {'summary': Value(literal:'CP____X___ __X___ __________________ _________________qaq________________')}, {'summary': Value(literal:'______X___ _________________ ____________________ _____________')}, {'summary': Value(literal:'____')}, {'summary': Value(literal:'____ __ _______________')}, {'summary': Value(literal:'______________________________________________________________')}, {'summary': Value(literal:'______……')}, {'summary': Value(literal:'________________________________________ _____ ________')}, {'summary': Value(literal:'________________________')}]	573	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame los resúmenes de historias de __ ___/___ __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ ___/___ __ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del fandom ___ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""___ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame los resúmenes de historias de _______ - Fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
  ?story golem:fandom ""_______ - Fandom"" . 
  ?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'Summary________________________')}, {'summary': Value(literal:'CP____X___ __X___ __________________ _________________qaq________________')}, {'summary': Value(literal:'______X___ _________________ ____________________ _____________')}, {'summary': Value(literal:'____')}, {'summary': Value(literal:'____ __ _______________')}, {'summary': Value(literal:'______________________________________________________________')}, {'summary': Value(literal:'______……')}, {'summary': Value(literal:'________________________________________ _____ ________')}, {'summary': Value(literal:'________________________')}]	1	0	0			
574	574	es	Muéstrame los resúmenes de historias de __ - Fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ - Fandom"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'____')}]	574	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame los resúmenes de historias de _______ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""_______ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __ ___/___ __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ ___/___ __ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del fandom ___ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title WHERE {  ?story golem:fandom ""___ - Fandom"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame los resúmenes de historias de __ - Fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
?story golem:fandom ""__ - Fandom"" . 
?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'____')}]	1	0	0			
575	575	es	Muéstrame los resúmenes de historias de Uploader RPF	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""Uploader RPF"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'__________')}, {'summary': Value(literal:'“_____________”')}, {'summary': Value(literal:'_____')}, {'summary': Value(literal:'“_____”')}, {'summary': Value(literal:'“______”')}, {'summary': Value(literal:'____')}, {'summary': Value(literal:'___________________')}, {'summary': Value(literal:'_________')}]	575	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame los resúmenes de historias de [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de German literature rpf?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""German literature rpf"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: Muéstrame los resúmenes de historias de Uploader RPF

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE { 
?story golem:fandom ""Uploader RPF"" . 
?story golem:summary ?summary . 
}
"	[{'summary': Value(literal:'__________')}, {'summary': Value(literal:'“_____________”')}, {'summary': Value(literal:'_____')}, {'summary': Value(literal:'“_____”')}, {'summary': Value(literal:'“______”')}, {'summary': Value(literal:'____')}, {'summary': Value(literal:'___________________')}, {'summary': Value(literal:'_________')}]	1	0	0			
576	576	es	Muéstrame los resúmenes de historias de __	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }"	[{'summary': Value(literal:'__cp __X__ “_______________________________”')}]	576	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo __ - ____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - ____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: Muéstrame los resúmenes de historias de __

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/> 
SELECT DISTINCT ?summary WHERE {  
  ?story golem:fandom ""__"" .  
  ?story golem:summary ?summary .  
}
"	[{'summary': Value(literal:'__cp __X__ “_______________________________”')}]	1	0	0			
577	577	es	Muéstrame los resúmenes de historias de ________ - Fandom	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""________ - Fandom"" . ?story golem:summary ?summary . }"	"[{'summary': Value(literal:'______ ___Google__ _______VPN__')}, {'summary': Value(literal:'-__________HE___ -____History2______2gether -____FMV______ _________ > _SarawatXTine___(___) | 2gether The Series FMV ____________MV :) ___ __Sarawat_________________________________________Tine__________________________________________Tine_________________________________ ____________')}, {'summary': Value(literal:""___P'Aof_2019_11__________Bright_______Win_________ __Bright______________________Win___________________ ____2019-2020.5__"")}, {'summary': Value(literal:'________')}, {'summary': Value(literal:""_Bright vachirawit——____________Phi__——_____Mick___________________________P'Win______ _______________________________ __________________________2019-2020.6__"")}, {'summary': Value(literal:'____(plai) +__+___Alpha x __________Beta _______Sarawat v.s. _______Tine___________XD')}]"	577	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: Muéstrame los resúmenes de historias de [[fandom]]

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""[[fandom]]"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de __ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""__ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

    Question: Muéstrame los resúmenes de historias de _______ - Fandom

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?summary WHERE {  ?story golem:fandom ""_______ - Fandom"" . ?story golem:summary ?summary . }
    </SPARQL>

    ###
    

Question: Muéstrame los resúmenes de historias de ________ - Fandom

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT DISTINCT ?summary WHERE {  
  ?story golem:fandom ""________ - Fandom"" .  
  ?story golem:summary ?summary .  
}
"	"[{'summary': Value(literal:'______ ___Google__ _______VPN__')}, {'summary': Value(literal:'-__________HE___ -____History2______2gether -____FMV______ _________ > _SarawatXTine___(___) | 2gether The Series FMV ____________MV :) ___ __Sarawat_________________________________________Tine__________________________________________Tine_________________________________ ____________')}, {'summary': Value(literal:""___P'Aof_2019_11__________Bright_______Win_________ __Bright______________________Win___________________ ____2019-2020.5__"")}, {'summary': Value(literal:'________')}, {'summary': Value(literal:""_Bright vachirawit——____________Phi__——_____Mick___________________________P'Win______ _______________________________ __________________________2019-2020.6__"")}, {'summary': Value(literal:'____(plai) +__+___Alpha x __________Beta _______Sarawat v.s. _______Tine___________XD')}]"	1	0	0			
578	578	es	¿Cuál es el recuento promedio de palabras?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (AVG(?words) as ?avg_words) WHERE { ?story golem:numberOfWords ?words . }	[{'avg_words': Value(typed-literal:'8180.185545444649115')}]	578	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuál es la longitud de palabra promedio de Flying?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""Flying"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

    Question: ¿Cuál es la longitud de palabra promedio de [[story]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""[[story]]"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

    Question: ¿Cuál es la longitud de palabra promedio de Spice It Up?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT ?avg_word_length WHERE { ?story golem:title ""Spice It Up"" . ?story golem:averageWordLength ?avg_word_length . }
    </SPARQL>

    ###
    

Question: ¿Cuál es el recuento promedio de palabras?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
SELECT (AVG(?numberOfWords) AS ?averageNumberOfWords) WHERE {
  ?story a golem:Story .
  ?story golem:numberOfWords ?numberOfWords .
}
"	[{}]	0	1	1	Wrong predicate	Wrong choice	
580	580	es	¿Cuántas historias están marcadas como Theo is a Seer?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Theo is a Seer"" . }"	[{'stories': Value(typed-literal:'2')}]	580	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como Character Turned Into a Ghost?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Character Turned Into a Ghost"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como Written Pre-Order of the Phoenix?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Written Pre-Order of the Phoenix"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como explícitas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias están marcadas como Theo is a Seer?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { 
    ?story golem:keyword ""Theo is a Seer"" . }
"	[{'stories': Value(typed-literal:'2')}]	1	0	0			
581	581	es	¿Cuántas historias están marcadas como this could be gen or pre-het????	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""this could be gen or pre-het???"" . }"	[{'stories': Value(typed-literal:'1')}]	581	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como explícitas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como did I mention dumb??

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""did I mention dumb?"" . }
    </SPARQL>

    ###
    

    Question: Muéstrame historias del universo __ - ____

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?title  WHERE {  ?story golem:fandom ""__ - ____"" . ?story golem:title ?title . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias están marcadas como this could be gen or pre-het????

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(?story) as ?stories WHERE { 
    ?story golem:keyword ""this could be gen or pre-het??"" . 
}
"	[{'stories': Value(typed-literal:'0')}]	0	1	1	Failed NER		punctuation (missing ? In the story name)
582	582	es	¿Cuántas historias están marcadas como Written Pre-Order of the Phoenix?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Written Pre-Order of the Phoenix"" . }"	[{'stories': Value(typed-literal:'27')}]	582	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como explícitas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como Theo is a Seer?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Theo is a Seer"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de [[fandom]] hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""[[fandom]]"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias están marcadas como Written Pre-Order of the Phoenix?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Written Pre-Order of the Phoenix"" . }
"	[{'stories': Value(typed-literal:'27')}]	1	0	0			
583	583	es	¿Cuántas historias están marcadas como Child Ron Weasley?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Child Ron Weasley"" . }"	[{'stories': Value(typed-literal:'1')}]	583	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como Theo is a Seer?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Theo is a Seer"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias hay en Archive of Our Own?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:story_id ?id }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como See how many you can figure out?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""See how many you can figure out"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias están marcadas como Child Ron Weasley?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Child Ron Weasley"" . }
"	[{'stories': Value(typed-literal:'1')}]	1	0	0			
584	584	es	¿Cuántas historias están marcadas como Bisexual Regulus Black?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Bisexual Regulus Black"" . }"	[{'stories': Value(typed-literal:'113')}]	584	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como explícitas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos autores han publicado alguna historia?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?uploads) WHERE { ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como Remus has BPD/Bipolar Disorder?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Remus has BPD/Bipolar Disorder"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias están marcadas como Bisexual Regulus Black?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT COUNT(?story) as ?bisexual_stories WHERE { ?story golem:keyword ""Bisexual Regulus Black"" . }
"	[{'bisexual_stories': Value(typed-literal:'113')}]	0	1	1	Evaluation method error	Different var name	
585	585	es	¿Cuántas historias están marcadas como See how many you can figure out?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""See how many you can figure out"" . }"	[{'stories': Value(typed-literal:'1')}]	585	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como explícitas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como [[keyword]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""[[keyword]]"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas reacciones suele conseguir una historia?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos AVG(?comments) AS ?average_number_of_comments WHERE { ?story golem:numberOfKudos ?kudos . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias están marcadas como See how many you can figure out?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT COUNT(?story) AS ?count WHERE { ?story golem:rating ""See how many you can figure out"" . }
"	[{'count': Value(typed-literal:'0')}]	0	1	1	Wrong predicate	Wrong choice	
586	586	es	¿Cuántas historias están marcadas como Remus has BPD/Bipolar Disorder?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Remus has BPD/Bipolar Disorder"" . }"	[{'stories': Value(typed-literal:'2')}]	586	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como Bisexual Regulus Black?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Bisexual Regulus Black"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como Theo is a Seer?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Theo is a Seer"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como explícitas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias están marcadas como Remus has BPD/Bipolar Disorder?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT COUNT(?story) as ?bpd_stories WHERE { ?story golem:keyword ""Remus has BPD/Bipolar Disorder"" . }
"	[{'bpd_stories': Value(typed-literal:'2')}]	0	1	1	Evaluation method error	Different var name	
587	587	es	¿Cuántas historias están marcadas como Chickens?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Chickens"" . }"	[{'stories': Value(typed-literal:'436')}]	587	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias de Crows - _____ hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""Crows - _____"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como See how many you can figure out?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""See how many you can figure out"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como explícitas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias están marcadas como Chickens?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { 
    ?story golem:keyword ""Chickens"" . 
}
"	[{'stories': Value(typed-literal:'436')}]	1	0	0			
588	588	es	¿Cuántas historias están marcadas como Character Turned Into a Ghost?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Character Turned Into a Ghost"" . }"	[{'stories': Value(typed-literal:'2059')}]	588	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Quién es el autor de ghosting you?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT DISTINCT ?author WHERE {  ?story golem:title ""ghosting you"" . ?story golem:author ?author . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como Theo is a Seer?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""Theo is a Seer"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como explícitas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias están marcadas como Character Turned Into a Ghost?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT COUNT(?story) as ?stories WHERE { 
?story golem:keyword ""Character Turned Into a Ghost"" . 
}
"	[{'stories': Value(typed-literal:'2059')}]	1	0	0			
589	589	es	¿Cuántas historias están marcadas como did I mention dumb??	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""did I mention dumb?"" . }"	[{'stories': Value(typed-literal:'1')}]	589	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como explícitas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como See how many you can figure out?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""See how many you can figure out"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como [[keyword]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""[[keyword]]"" . }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias están marcadas como did I mention dumb??

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { 
    ?story golem:keyword ""did I mention dumb"" . 
} 
"	[{'stories': Value(typed-literal:'0')}]	0	1	1	Failed NER		
590	590	es	¿Cuántos autores hay representados en los datos?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?authors) WHERE { ?story golem:author ?author . }	[{'authors': Value(typed-literal:'1234209')}]	590	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias se publican al año?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias de [[fandom]] hay publicadas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE { ?story golem:fandom ""[[fandom]]"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos autores han publicado alguna historia?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?author) as ?uploads) WHERE { ?story golem:author ?author . }
    </SPARQL>

    ###
    

Question: ¿Cuántos autores hay representados en los datos?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT (COUNT(DISTINCT ?author) as ?authorsCount) WHERE { ?story golem:author ?author . }
"	HTTP Error 406: Unacceptable	0	1	1	Failed execution		
591	591	es	¿Cuántas historias hay en Archive of Our Own?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:story_id ?id }	[{'stories': Value(typed-literal:'8546450')}]	591	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como explícitas?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como See how many you can figure out?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""See how many you can figure out"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias se publican al año?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias hay en Archive of Our Own?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT COUNT(DISTINCT ?story) as ?total_stories WHERE { 
    ?story golem:fandom ""Archive of Our Own"" . 
}
"	[{'total_stories': Value(typed-literal:'58')}]	0	1	1	Wrong predicate	Wrong choice	
593	593	es	¿Cuántos comentarios tienen de media las historias de ___ - Fandom?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""___ - Fandom"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	593	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos comentarios tienen de media las historias de _____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de [[fandom]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de ______?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""______"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: ¿Cuántos comentarios tienen de media las historias de ___ - Fandom?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
    ?story golem:fandom ""___ - Fandom"" . 
    ?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	1	0	0			
594	594	es	¿Cuántos comentarios tienen de media las historias de Shiritsu Bakaleya Koukou?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""Shiritsu Bakaleya Koukou"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'1.117647058823529')}]	594	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos comentarios tienen de media las historias de _________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de ______?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""______"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de ___________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""___________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: ¿Cuántos comentarios tienen de media las historias de Shiritsu Bakaleya Koukou?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
?story golem:fandom ""Shiritsu Bakaleya Koukou"" . 
?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'1.117647058823529')}]	1	0	0			
595	595	es	¿Cuántos comentarios tienen de media las historias de jaoyin?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""jaoyin"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'1')}]	595	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos comentarios tienen de media las historias de ______?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""______"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de _____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de ___________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""___________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: ¿Cuántos comentarios tienen de media las historias de jaoyin?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
    ?story golem:fandom ""jaoyin"" . 
    ?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'1')}]	1	0	0			
596	596	es	¿Cuántos comentarios tienen de media las historias de fast and furious_Hobbs and Shaw?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""fast and furious_Hobbs and Shaw"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'1')}]	596	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos comentarios tienen de media las historias de [[fandom]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de kn_Jn?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""kn_Jn"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de ___________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""___________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: ¿Cuántos comentarios tienen de media las historias de fast and furious_Hobbs and Shaw?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
  ?story golem:fandom ""fast and furious_Hobbs and Shaw"" . 
  ?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'1')}]	1	0	0			
597	597	es	¿Cuántos comentarios tienen de media las historias de _________?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_________"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'1.857142857142857')}]	597	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos comentarios tienen de media las historias de _____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de ______?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""______"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de ___________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""___________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: ¿Cuántos comentarios tienen de media las historias de _________?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_________"" . ?story golem:numberOfComments ?comments . }
"	[{'avg_number_of_comments': Value(typed-literal:'1.857142857142857')}]	1	0	0			
598	598	es	¿Cuántos comentarios tienen de media las historias de German literature rpf?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""German literature rpf"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'2.333333333333333')}]	598	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos comentarios tienen de media las historias de ___________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""___________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de [[fandom]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de _____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: ¿Cuántos comentarios tienen de media las historias de German literature rpf?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
    ?story golem:fandom ""German literature rpf"" . 
    ?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'2.333333333333333')}]	1	0	0			
599	599	es	¿Cuántos comentarios tienen de media las historias de _____?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	599	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos comentarios tienen de media las historias de ______?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""______"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de _________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de ___________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""___________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: ¿Cuántos comentarios tienen de media las historias de _____?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	1	0	0			
600	600	es	¿Cuántos comentarios tienen de media las historias de kn_Jn?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""kn_Jn"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	600	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos comentarios tienen de media las historias de ___________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""___________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de jaoyin?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""jaoyin"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de ______?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""______"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: ¿Cuántos comentarios tienen de media las historias de kn_Jn?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/>  
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
    ?story golem:fandom ""kn_Jn"" . 
    ?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	1	0	0			
601	601	es	¿Cuántos comentarios tienen de media las historias de ___________?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""___________"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	601	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos comentarios tienen de media las historias de _____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de _________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de ______?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""______"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: ¿Cuántos comentarios tienen de media las historias de ___________?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  
prefix dc: <http://purl.org/dc/terms/>  
prefix gc: <https://ontology.golemlab.eu/>  
SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { 
    ?story golem:fandom ""___________"" . 
    ?story golem:numberOfComments ?comments . 
}
"	[{'avg_number_of_comments': Value(typed-literal:'0')}]	1	0	0			
602	602	es	¿Cuántos comentarios tienen de media las historias de ______?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""______"" . ?story golem:numberOfComments ?comments . }"	[{'avg_number_of_comments': Value(typed-literal:'1.833333333333333')}]	602	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántos comentarios tienen de media las historias de _____?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_____"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de _________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""_________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de ___________?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""___________"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: ¿Cuántos comentarios tienen de media las historias de ______?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""______"" . ?story golem:numberOfComments ?comments . }
"	"EndPointInternalError: The endpoint returned the HTTP status code 500. 

Response:
b'Virtuoso S1TAT Error RC...: Returning partial results after anytime timeout\n\nSPARQL query:\n\nprefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""\xe3\x83\x80\xe3\x83\xb3\xe3\x82\xb8\xe3\x83\xa7\xe3\x83\xb3\xe9\xa3\xaf"" . ?story golem:numberOfComments ?comments . }\n'"	0	1	1	Failed execution		
636	636	es	¿Cuántas historias están marcadas como explícitas?	"prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(?story) as ?explicit_stories WHERE { ?story golem:rating ""Explicit"" . }"	[{'explicit_stories': Value(typed-literal:'1432006')}]	636	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como See how many you can figure out?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""See how many you can figure out"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias están marcadas como [[keyword]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""[[keyword]]"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias hay en Archive of Our Own?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:story_id ?id }
    </SPARQL>

    ###
    

Question: ¿Cuántas historias están marcadas como explícitas?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT COUNT(DISTINCT ?story) as ?stories WHERE { 
    ?story golem:keyword ""explícitas"" . 
}
"	<urlopen error [Errno 111] Connection refused>	0	1	1	Failed execution		
637	637	es	¿Cuántas reacciones suele conseguir una historia?	prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?kudos) AS ?average_number_of_kudos AVG(?comments) AS ?average_number_of_comments WHERE { ?story golem:numberOfKudos ?kudos . ?story golem:numberOfComments ?comments . }	[{'average_number_of_kudos': Value(typed-literal:'152.312722451740173'), 'average_number_of_comments': Value(typed-literal:'25.433749929559123')}]	637	"
Your task is to translate a question in natural language into a SPARQL query for the GOLEM knowledge graph.
The query must follow specific guidelines to ensure accuracy and correctness:
1. SPARQL queries must include the following prefix:
   prefix golem: <https://golemlab.eu/graph/>
2. Enclose SPARQL queries within <SPARQL> </SPARQL> tags.
3. You must generate 1 query(ies).
4. It is very important that you use only the predicates provided below.
5. Examples are provided below for guidance.

###
Predicates:
https://golemlab.eu/graph/numberOfComments
https://golemlab.eu/graph/numberOfKudos
https://golemlab.eu/graph/publicationStatus
https://golemlab.eu/graph/dateModified
https://golemlab.eu/graph/characters
https://golemlab.eu/graph/collections
https://golemlab.eu/graph/fandom
https://golemlab.eu/graph/publisher
https://golemlab.eu/graph/rating
https://golemlab.eu/graph/series
https://golemlab.eu/graph/story_id
https://golemlab.eu/graph/summary
https://golemlab.eu/graph/numberOfChapters
https://golemlab.eu/graph/datePublished
https://golemlab.eu/graph/keyword
https://golemlab.eu/graph/contentWarning
https://golemlab.eu/graph/numberOfWords
https://golemlab.eu/graph/socialRelationships
https://golemlab.eu/graph/datePackaged
https://golemlab.eu/graph/romanticCategory
https://golemlab.eu/graph/noOfPairings
https://golemlab.eu/graph/topPartner
https://golemlab.eu/graph/topPartnerPairings
https://golemlab.eu/graph/averageWordLength
https://golemlab.eu/graph/MSTTR
https://golemlab.eu/graph/bigramEntropy
https://golemlab.eu/graph/wordEntropy
https://golemlab.eu/graph/fleschGrade
https://golemlab.eu/graph/fleschEase
https://golemlab.eu/graph/SMOG
https://golemlab.eu/graph/ARI
https://golemlab.eu/graph/daleChallNew
https://golemlab.eu/graph/nominalRatio
https://golemlab.eu/graph/nominalRatioInverse


###
Examples:


    Question: ¿Cuántas historias están marcadas como See how many you can figure out?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT COUNT(DISTINCT ?story) as ?stories WHERE { ?story golem:keyword ""See how many you can figure out"" . }
    </SPARQL>

    ###
    

    Question: ¿Cuántas historias se publican al año?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT (COUNT(DISTINCT ?story) as ?uploads) WHERE {  ?story golem:story_id ?id }
    </SPARQL>

    ###
    

    Question: ¿Cuántos comentarios tienen de media las historias de [[fandom]]?

    Query:
    <SPARQL>
    prefix golem: <https://golemlab.eu/graph/>  prefix dc: <http://purl.org/dc/terms/> prefix gc: <https://ontology.golemlab.eu/>  SELECT AVG(?comments) AS ?avg_number_of_comments WHERE { ?story golem:fandom ""[[fandom]]"" . ?story golem:numberOfComments ?comments . }
    </SPARQL>

    ###
    

Question: ¿Cuántas reacciones suele conseguir una historia?

Query:
"	"
prefix golem: <https://golemlab.eu/graph/> 
prefix dc: <http://purl.org/dc/terms/> 
prefix gc: <https://ontology.golemlab.eu/> 
SELECT AVG(?kudos) AS ?avg_number_of_kudos WHERE { 
?story golem:numberOfKudos ?kudos . 
}
"	<urlopen error [Errno 111] Connection refused>	0	1	1	Failed execution		